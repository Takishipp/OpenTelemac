C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       ALLOCATES TELEMAC3D STRUCTURES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_TELEMAC, DECLARATIONS_TELEMAC3D
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_TELEMAC3D :<br>
!> @link DECLARATIONS_TELEMAC3D::AEBORF AEBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AEBORL AEBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AEBORS AEBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AK AK@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AKBORF AKBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AKBORL AKBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AKBORS AKBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AKC AKC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AKN AKN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ATABOF ATABOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ATABOL ATABOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ATABOS ATABOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ATMOS ATMOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AUBORF AUBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AUBORL AUBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AUBORS AUBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AVBORF AVBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AVBORL AVBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AVBORS AVBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AWBORF AWBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AWBORL AWBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::AWBORS AWBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BEBORF BEBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BEBORL BEBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BEBORS BEBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BKBORF BKBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BKBORL BKBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BKBORS BKBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BOUNDARY_COLOUR BOUNDARY_COLOUR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BTABOF BTABOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BTABOL BTABOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BTABOS BTABOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BUBORF BUBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BUBORL BUBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BUBORS BUBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BVBORF BVBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BVBORL BVBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BVBORS BVBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BVIDE BVIDE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BWBORF BWBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BWBORL BWBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::BWBORS BWBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::CF CF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::CONC CONC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::CONV CONV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::CREF CREF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DEBFLO DEBFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DELTAR DELTAR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DH DH@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DIF DIF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DIRBOR DIRBOR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DM1 DM1@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DMOY DMOY@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DP DP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DPN DPN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::DSSUDT DSSUDT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EBORF EBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EBORL EBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EBORS EBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EBORSAVE EBORSAVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ELEMENT ELEMENT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ELTFLO ELTFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EP EP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EPAI EPAI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EPC EPC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EPN EPN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::EQUA EQUA@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ETAFLO ETAFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FC3D FC3D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FINFLO FINFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLBLIM FLBLIM@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLBOR FLBOR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLINT2 FLINT2@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLODEL FLODEL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLOPAR FLOPAR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLUCUM FLUCUM@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLUER FLUER@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLUEXT FLUEXT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLUINT FLUINT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLULIM FLULIM@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FLUX FLUX@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FN3D FN3D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FU FU@endlink, 
!> @link DECLARATIONS_TELEMAC3D::FV FV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::GIBSON GIBSON@endlink, 
!> @link DECLARATIONS_TELEMAC3D::GRADZF GRADZF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::GRADZN GRADZN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::GRADZS GRADZS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::H H@endlink, 
!> @link DECLARATIONS_TELEMAC3D::HBOR HBOR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::HDEP HDEP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::HN HN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::HPROP HPROP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELM0 IELM0@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELM1 IELM1@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELM2H IELM2H@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELM2V IELM2V@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELM3 IELM3@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELMH IELMH@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELMU IELMU@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IELMX IELMX@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IKLFLO IKLFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IPBOT IPBOT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ITRAV3 ITRAV3@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ITURBH ITURBH@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ITURBV ITURBV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::IVIDE IVIDE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::KBORF KBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::KBORL KBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::KBORS KBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::KBORSAVE KBORSAVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIEBOF LIEBOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIEBOL LIEBOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIEBOS LIEBOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIHBOR LIHBOR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIKBOF LIKBOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIKBOL LIKBOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIKBOS LIKBOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIMPRO LIMPRO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIPBOF LIPBOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIPBOL LIPBOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIPBOS LIPBOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LISTIN LISTIN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LITABF LITABF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LITABL LITABL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LITABS LITABS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIUBOF LIUBOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIUBOL LIUBOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIUBOS LIUBOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIVBOF LIVBOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIVBOL LIVBOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIVBOS LIVBOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIWBOF LIWBOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIWBOL LIWBOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::LIWBOS LIWBOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MASINI MASINI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MASK MASK@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MASKBR MASKBR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MASKEL MASKEL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MASKPT MASKPT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MASSE MASSE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MASSEN MASSEN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MAT2D MAT2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MATR2H MATR2H@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MATR2V MATR2V@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MBOR2D MBOR2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MDIFF MDIFF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MESH2D MESH2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MESH3D MESH3D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MMURD MMURD@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MSK MSK@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MSUPG MSUPG@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MTRA1 MTRA1@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MTRA2 MTRA2@endlink, 
!> @link DECLARATIONS_TELEMAC3D::MURD_TF MURD_TF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NCOUCH NCOUCH@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NETAGE NETAGE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NFLOT NFLOT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NITFLO NITFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NONHYD NONHYD@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NPF NPF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NPFMAX NPFMAX@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NPLAN NPLAN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NSCE NSCE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NTRAC NTRAC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NUMLIQ NUMLIQ@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NUWAVE NUWAVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::NVBIL NVBIL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::OPTASS OPTASS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::OPTASS2D OPTASS2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::OPTBAN OPTBAN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PATMOS PATMOS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PBORF PBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PBORL PBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PBORS PBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PDEPO PDEPO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PH PH@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PLUIE PLUIE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PRIV3 PRIV3@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PRIVE PRIVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::PRODUC PRODUC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::RAIN RAIN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::RI RI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ROTAT ROTAT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::RUGOF RUGOF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::RUGOL RUGOL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S0AK S0AK@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S0EP S0EP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S0TA S0TA@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S0U S0U@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S0V S0V@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S0W S0W@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S1AK S1AK@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S1EP S1EP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S1TA S1TA@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S1U S1U@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S1V S1V@endlink, 
!> @link DECLARATIONS_TELEMAC3D::S1W S1W@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SCHCKE SCHCKE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SCHCTA SCHCTA@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SCHCVI SCHCVI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SEDI SEDI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SEM2D SEM2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SEM3D SEM3D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SHPFLO SHPFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SHZFLO SHZFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVDKE SLVDKE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVDSE SLVDSE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVDTA SLVDTA@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVDVI SLVDVI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVPOI SLVPOI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVPRJ SLVPRJ@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVPRO SLVPRO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SLVW SLVW@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SMH SMH@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SMU SMU@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SMV SMV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SOURCES SOURCES@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SPHERI SPHERI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::SVIDE SVIDE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::T3D_FILES T3D_FILES@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TA TA@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TABORF TABORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TABORL TABORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TABORS TABORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TAC TAC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TASSE TASSE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TE1 TE1@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TE2 TE2@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TE3 TE3@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TEMP TEMP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TRAFLO TRAFLO@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TRANSF_PLANE TRANSF_PLANE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TRAV2 TRAV2@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TRAV3 TRAV3@endlink, 
!> @link DECLARATIONS_TELEMAC3D::TRBORSAVE TRBORSAVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::U U@endlink, 
!> @link DECLARATIONS_TELEMAC3D::U2D U2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UBOR2D UBOR2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UBORF UBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UBORL UBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UBORS UBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UBORSAVE UBORSAVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UC UC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UCONV UCONV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UCONVC UCONVC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UD UD@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UETCAL UETCAL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UETCAR UETCAR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UN UN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UN2D UN2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UNK2D UNK2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UNSV2D UNSV2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::UNSV3D UNSV3D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::V V@endlink, 
!> @link DECLARATIONS_TELEMAC3D::V2D V2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::V2DPAR V2DPAR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VARCL VARCL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VARSO3 VARSO3@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VARSOR VARSOR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VBOR2D VBOR2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VBORF VBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VBORL VBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VBORS VBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VBORSAVE VBORSAVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VC VC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VCONV VCONV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VCONVC VCONVC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VD VD@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VENT VENT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VISCTA VISCTA@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VISCVI VISCVI@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VN VN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VN2D VN2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VOLU VOLU@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VOLU2D VOLU2D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VOLU3D VOLU3D@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VOLUN VOLUN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::VOLUT VOLUT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::W W@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WBORF WBORF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WBORL WBORL@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WBORS WBORS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WBORSAVE WBORSAVE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WC WC@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WCHU WCHU@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WD WD@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WIND WIND@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WN WN@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WS WS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::WSCONV WSCONV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::XFLOT XFLOT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::YFLOT YFLOT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZCHAR ZCHAR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZCONV ZCONV@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZF ZF@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZFE ZFE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZFLATS ZFLATS@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZFLOT ZFLOT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZPLANE ZPLANE@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZPROP ZPROP@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZR ZR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZSFLOT ZSFLOT@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZSTAR ZSTAR@endlink, 
!> @link DECLARATIONS_TELEMAC3D::ZT ZT@endlink<hr>
!> DECLARATIONS_TELEMAC :<br>
!> @link DECLARATIONS_TELEMAC::ADV_CAR ADV_CAR@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_NSC ADV_NSC@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_NSC_TF ADV_NSC_TF@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_PSI ADV_PSI@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_SUP ADV_SUP@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CFG, CFG2D, CFGBOR2D, CFGMURD, CFGMURD_TF, I, IELH, IELM, IELV, ITAB, ITRAC, NSEG, NTR, STATUT, TYPDIA, TYPEXT
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> DIM2, DIM3, IKLE2, IKLE3, IT1, IT2, IT3, IT4, LV, MTRA2D, MXELVS2, MXELVS3, MXPTVS2, MXPTVS3, NBOR2, NBOR3, NELEB, NELEBX, NELEM2, NELEM3, NELMAX2, NELMAX3, NPMAX2, NPMAX3, NPOIN2, NPOIN3, NPTFR2, NPTFR3, NPTFRX2, NPTFRX3, SURFA2, SURFA3, T2_01, T2_02, T2_03, T2_04, T2_05, T2_06, T2_07, T2_08, T2_09, T2_10, T2_11, T2_12, T2_13, T2_14, T2_15, T2_16, T2_17, T2_18, T2_19, T2_20, T2_21, T3_01, T3_02, T3_03, T3_04, T3_05, T3_06, T3_07, T3_08, T3_09, T3_10, T3_11, T3_12, T3_13, T3_14, T3_15, T3_16, T3_17, T3_18, TYPELM2, TYPELM3, W1, W2, X, X2, X3, XNEBOR2, XSGBOR2, XSGBOR3, Y, Y2, Y3, YNEBOR2, YSGBOR2, YSGBOR3, Z, Z2, Z3, ZSGBOR3
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> ADDBLO(), ALLBLO(), ALLBLO_IN_BLOCK(), ALLMAT(), ALLVEC(), ALLVEC_IN_BLOCK(), ALMESH(), IELBOR(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>HOMERE_TELEMAC3D()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 19/10/2009
!> </td><td> J-M HERVOUET (LNHE)
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> **/03/1999
!> </td><td> JACEK A. JANKOWSKI PINXIT
!> </td><td> FORTRAN95 VERSION
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE POINT_TELEMAC3D
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_TELEMAC3D
!
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
!
!-----------------------------------------------------------------------
!
      INTEGER CFG(2),CFG2D(2),CFGMURD(2),CFGBOR2D(2),CFGMURD_TF(2)
      INTEGER ITRAC, ITAB
      INTEGER IELM, IELV, IELH, STATUT
      INTEGER NTR,I,NSEG
      CHARACTER(LEN=1) TYPDIA, TYPEXT
!
!-----------------------------------------------------------------------
!
      IF(LISTIN) THEN
        IF(LNG.EQ.1) WRITE(LU,20)
        IF(LNG.EQ.2) WRITE(LU,21)
      ENDIF
 20   FORMAT(1X,/,1X,'POINT_TELEMAC3D: ALLOCATION DE LA MEMOIRE',/)
 21   FORMAT(1X,/,1X,'POINT_TELEMAC3D: MEMORY ALLOCATION',/)
!
!-----------------------------------------------------------------------
C DECLARES DISCRETISATION TYPES HERE

      IELM0 = 10*(IELMH/10) ! FOR TELEMAC2D
      IELM1 = IELM0 + 1     ! FOR TELEMAC2D
!
C TELEMAC3D DISCRETISATION TYPES: 3D, 2D HORIZONTAL BOUNDARY,
C 2D VERTICAL BOUNDARY
!
      IF(ELEMENT(1:5).EQ.'PRISM') THEN
!
        IELM3  = 41     ! TELEMAC3D PRISMS
        IELM2H = 11     ! TRIANGULAR BOTTOM AND SURFACE
        IELM2V = 71     ! QUADRILATERAL LATERAL BOUNDARIES
!
      ELSEIF(ELEMENT(1:5).EQ.'TETRA') THEN
!
        IELM3  = 51     ! PRISMS CUT INTO TETRAHEDRONS
        IELM2H = 11     ! TRIANGULAR BOTTOM AND SURFACE
        IELM2V = 61     ! TRIANGULAR LATERAL BOUNDARIES
!
      ELSE
        IF(LNG.EQ.1) WRITE(LU,*) 'ELEMENT INCONNU : ',ELEMENT
        IF(LNG.EQ.2) WRITE(LU,*) 'UNKNOWN ELEMENT: ',ELEMENT
        CALL PLANTE(1)
        STOP
      ENDIF
!
      IELM1  = IELBOR(IELMH,1) ! BOUNDARY DISCRET. FOR TELEMAC2D
!
C IELMU IS 12, WHEN QUASI-BUBBLE FREE SURFACE REQUIRED (IN LECDON)
C IF NOT, IELMU=IELMH
!
      IELMX=MAX(IELMU,IELM2H,IELM1,IELMH) ! IT WILL BE MAX. DISCR. IN 2D
!
C STORAGE TYPE AND MATRIX-VECTOR PRODUCT TYPE
!
      CFG(1) = OPTASS
      CFG(2) = PRODUC   ! PRODUC=1 HARD IN LECDON
      CFG2D(1) = OPTASS2D
      CFG2D(2) = PRODUC   ! PRODUC=1 HARD IN LECDON
C     MURD MATRIX WITH EDGE-BASED STORAGE FOR TIDAL FLATS
      CFGMURD_TF(1)=3
      CFGMURD_TF(2)=1
C     NORMAL MURD MATRIX WITH EBE STORAGE
      CFGMURD(1)=1
      CFGMURD(2)=1
!
      CFGBOR2D(1)=1
      CFGBOR2D(2)=1
!
!=======================================================================
!
!                     *********************
C                     *  MESH - GEOMETRY  *
!                     *********************
!
C TWO MESHES ARE ALLOCATED: (1) 2D BASE MESH, (2) 3D SIGMA-MESH
!
C ALLOCATES THE 2D MESH STRUCTURE FOR TELEMAC2D
C DISCRETISATION IELMH GIVEN IN LECDON
C IELMX = IELMU IF QUASI-BUBBLE ELEMENT REQUIRED, OTHERWISE IELMH
!
      EQUA = 'NO_EQUATION_IS_GIVEN'
!
      CALL ALMESH(MESH2D,'MESH2D',IELMX,SPHERI,CFG2D,
     &            T3D_FILES(T3DGEO)%LU,EQUA,NPLAN=1)
      NSEG=MESH2D%NSEG
!
C ALIASES FOR CERTAIN COMPONENTS OF THE 2D MESH STRUCTURE
!
      X2      => MESH2D%X
      Y2      => MESH2D%Y
      Z2      => MESH2D%Z
      SURFA2  => MESH2D%SURFAC
      XNEBOR2 => MESH2D%XNEBOR
      YNEBOR2 => MESH2D%YNEBOR
      XSGBOR2 => MESH2D%XSGBOR
      YSGBOR2 => MESH2D%YSGBOR
      IKLE2   => MESH2D%IKLE
      NBOR2   => MESH2D%NBOR   ! PREVIOUSLY SIMPLY NBOR
!
      MTRA2D  => MESH2D%M      ! USED ONLY IN PROPAG IN A HIDDEN WAY !
      W2      => MESH2D%W
!
      NELEM2  => MESH2D%NELEM
      NELMAX2 => MESH2D%NELMAX  ! PREVIOUSLY NELMA2 (ADAPTIVITY OUTLOOK)
      NPTFR2  => MESH2D%NPTFR   ! PREVIOUSLY SIMPLY NPTFR
      NPTFRX2 => MESH2D%NPTFRX
      DIM2    => MESH2D%DIM
      TYPELM2 => MESH2D%TYPELM
      NPOIN2  => MESH2D%NPOIN
      NPMAX2  => MESH2D%NPMAX
      MXPTVS2 => MESH2D%MXPTVS
      MXELVS2 => MESH2D%MXELVS
      LV      => MESH2D%LV      ! MESH-CHECKED? 2D=3D FOR SIGMA MESH
!
!-----------------------------------------------------------------------
C ALLOCATES THE 3D MESH STRUCTURE (EQUA=EMPTY) (READ AGAIN?)
!
      EQUA = 'NO_EQUATION_IS_GIVEN'
!
      CALL ALMESH(MESH3D,'MESH3D',IELM3,SPHERI,CFG,T3D_FILES(T3DGEO)%LU,
     &            EQUA,NPLAN=NPLAN)
!
C ALIAS FOR CERTAIN COMPONENTS OF THE 3D MESH STRUCTURE
C THEY ARE DEFINED IN DECLARATIONS
!
      X       => MESH3D%X%R
      Y       => MESH3D%Y%R
      Z       => MESH3D%Z%R
      X3      => MESH3D%X    ! POINTERS
      Y3      => MESH3D%Y
      Z3      => MESH3D%Z
      SURFA3  => MESH3D%SURFAC
      XSGBOR3 => MESH3D%XSGBOR
      YSGBOR3 => MESH3D%YSGBOR
      ZSGBOR3 => MESH3D%ZSGBOR
      IKLE3   => MESH3D%IKLE
      NBOR3   => MESH3D%NBOR
!
      W1      => MESH3D%W
!
      NELEM3  => MESH3D%NELEM
      NELMAX3 => MESH3D%NELMAX   ! PREVIOUSLY NELMA3 (ADAPTIVITY?)
      NELEB   => MESH3D%NELEB
      NELEBX  => MESH3D%NELEBX
      NPTFR3  => MESH3D%NPTFR
      NPTFRX3 => MESH3D%NPTFRX
      DIM3    => MESH3D%DIM
      TYPELM3 => MESH3D%TYPELM
      NPOIN3  => MESH3D%NPOIN
      NPMAX3  => MESH3D%NPMAX
      MXPTVS3 => MESH3D%MXPTVS
      MXELVS3 => MESH3D%MXELVS
!
!-----------------------------------------------------------------------
C VARIOUS MESH PARAMETER FIX
!
      NETAGE = NPLAN - 1
      NVBIL  = 1 + NTRAC
!
      IF (LISTIN) THEN
        IF (LNG.EQ.1) WRITE(LU,31)
     &             TYPELM2,NPOIN2,NELEM2,NPTFR2,TYPELM3,NPOIN3,NELEM3,
     &             NPLAN,NELEB,NPTFR3+2*NPOIN2,NPTFR3,NPOIN2,NPOIN2
        IF (LNG.EQ.2) WRITE(LU,32)
     &             TYPELM2,NPOIN2,NELEM2,NPTFR2,TYPELM3,NPOIN3,NELEM3,
     &             NPLAN,NELEB,NPTFR3+2*NPOIN2,NPTFR3,NPOIN2,NPOIN2
      ENDIF
!
 31   FORMAT(/,' MAILLAGE 2D',/,
     &         ' -----------',//,
     &         ' 2D ELEMENT TYPE                : ',I8,/,
     &         ' NOMBRE DE POINTS 2D            : ',I8,/,
     &         ' NOMBRE D''ELEMENTS 2D           : ',I8,/,
     &         ' NOMBRE DE POINTS DE BORD 2D    : ',I8,///,
     &         ' MAILLAGE 3D',/,
     &         ' -----------',//,
     &         ' 3D ELEMENT TYPE                : ',I8,/,
     &         ' NOMBRE DE POINTS 3D            : ',I8,/,
     &         ' NOMBRE D''ELEMENTS 3D           : ',I8,/,
     &         ' NOMBRE DE PLANS                : ',I8,/,
     &         ' NOMBRE D''ELEMENTS DE BORD      : ',I8,/,
     &         ' NOMBRE TOTAL DE POINTS DE BORD : ',I8,/,
     &         ' DONT            COTES LATERAUX : ',I8,/,
     &         '                        SURFACE : ',I8,/,
     &         '                           FOND : ',I8,/)
!
 32   FORMAT(/,' 2D MESH',/,
     &         ' -------',//,
     &         ' 2D ELEMENT TYPE                : ',I8,/,
     &         ' NUMBER OF 2D NODES             : ',I8,/,
     &         ' NUMBER OF 2D ELEMENTS          : ',I8,/,
     &         ' NUMBER OF 2D BOUNDARY NODES    : ',I8,///,
     &         ' 3D MESH',/,
     &         ' -------',//,
     &         ' 3D ELEMENT TYPE                : ',I8,/,
     &         ' NUMBER OF 3D NODES             : ',I8,/,
     &         ' NUMBER OF 3D ELEMENTS          : ',I8,/,
     &         ' NUMBER OF LEVELS               : ',I8,/,
     &         ' NUMBER OF BOUNDARY ELEMENTS    : ',I8,/,
     &         ' TOTAL NUMBER OF BOUNDARY NODES : ',I8,/,
     &         ' INCLUDING   LATERAL BOUNDARIES : ',I8,/,
     &         '                        SURFACE : ',I8,/,
     &         '                         BOTTOM : ',I8,/)
!
!-----------------------------------------------------------------------
C FIELDS CONNECTED STRONGLY WITH GEOMETRY AND MESH
C REAL
!
      CALL ALLVEC(1, ZPROP,  'ZPROP ', IELM3 , 1, 1)
      CALL ALLVEC(1, ZT   ,  'ZT    ', IELM3 , 1, 1)
!
      CALL ALLBLO(GRADZF, 'GRADZF')
      CALL ALLVEC_IN_BLOCK(GRADZF, 2, 1, 'GRAZF ', IELM2H, 1, 1)
!
      CALL ALLBLO(GRADZS, 'GRADZS')
      CALL ALLVEC_IN_BLOCK(GRADZS, 2, 1, 'GRAZS ', IELM2H, 1, 1)
      CALL ALLBLO(GRADZN, 'GRADZN')
      CALL ALLVEC_IN_BLOCK(GRADZN, 2, 1, 'GRAZN ', IELM2H, 1, 1)
!
      CALL ALLVEC(1, DSSUDT, 'DSSUDT', IELM2H, 1, 1)
!
C     DESCRIBES THE MESH ON THE VERTICAL
!
      CALL ALLVEC(1, ZSTAR       , 'ZSTAR ' , NPLAN , 1, 0)
      CALL ALLVEC(1, ZPLANE      , 'ZPLANE' , NPLAN , 1, 0)
      CALL ALLVEC(1, ZCHAR       , 'ZCHAR ' , NPLAN , 1, 0)
      CALL ALLVEC(2, TRANSF_PLANE, 'TRAPLA' , NPLAN , 1, 0)
!
C MESH AND GEOMETRY, INTEGERS
!
      CALL ALLVEC(2, LIHBOR, 'LIHBOR', IELM1,  1, 1)
      CALL ALLVEC(2, NUMLIQ, 'NUMLIQ', IELM1,  1, 1)
      CALL ALLVEC(2, BOUNDARY_COLOUR, 'BNDCOL', IELM1,  1, 1)
      CALL ALLVEC(2, LIMPRO, 'LIMPRO', IELM1,  6, 1)
!
!-----------------------------------------------------------------------
!
C  BLOCK OF BOUNDARY CONDITIONS MASKS FOR PROPAGATION
C
C  BLOCK OF 9 VECTORS FOR MASKING (USED BY T2D)
!
      CALL ALLBLO(MASK, 'MASK  ')
      CALL ALLVEC_IN_BLOCK(MASK, 9, 1, 'MASK  ', IELM1, 1, 1)
!
C MASKING
C JMH : I USE MASKEL IN VELRES
!
      IF (MSK.OR.(OPTBAN.EQ.1.AND.NONHYD)) THEN
        CALL ALLVEC(1, MASKEL, 'MASKEL',10*(IELM3/10), 1, 1)
        CALL ALLVEC(1, MASKPT, 'MASKPT', IELM3,  1, 1)
      ELSE
        CALL ALLVEC(1, MASKEL, 'MASKEL', 0, 1, 0)
        CALL ALLVEC(1, MASKPT, 'MASKPT', 0, 1, 0)
      ENDIF
!
C     A NEW MASK FOR LATERAL BOUNDARY ELEMENTS...
!
      CALL ALLVEC(1, MASKBR, 'MASKBR',10*(IELM2V/10), 1, 1)
!
!=======================================================================
!                     ********************
C                     *    VARIABLES     *
!                     ********************
!
!-----------------------------------------------------------------------
C HORIZONTAL VELOCITY (U,V)
!
C U AND V VELOCITY COMPONENTS
!
      CALL ALLVEC(1, UN,       'UN    ',IELM3,  1,1)
      CALL ALLVEC(1, VN,       'VN    ',IELM3,  1,1)
      CALL ALLVEC(1, UC,       'UC    ',IELM3,  1,1)
      CALL ALLVEC(1, VC,       'VC    ',IELM3,  1,1)
      CALL ALLVEC(1, UD,       'UD    ',IELM3,  1,1)
      CALL ALLVEC(1, VD,       'VD    ',IELM3,  1,1)
      CALL ALLVEC(1, U,        'U     ',IELM3,  1,2)
      CALL ALLVEC(1, V,        'V     ',IELM3,  1,2)
      CALL ALLVEC(1, S0U,      'S0U   ',IELM3,  1,1)
      CALL ALLVEC(1, S0V,      'S0V   ',IELM3,  1,1)
      CALL ALLVEC(1, S1U,      'S1U   ',IELM3,  1,1)
      CALL ALLVEC(1, S1V,      'S1V   ',IELM3,  1,1)
      CALL ALLVEC(1, SMU,      'SMU   ',IELM3,  1,1)
      CALL ALLVEC(1, SMV,      'SMV   ',IELM3,  1,1)
      CALL ALLVEC(1, UBORF,    'UBORF ',IELM2H, 1,1)
      CALL ALLVEC(1, VBORF,    'VBORF ',IELM2H, 1,1)
      CALL ALLVEC(1, UBORL,    'UBORL ',IELM2V, 1,1)
      CALL ALLVEC(1, VBORL,    'VBORL ',IELM2V, 1,1)
      CALL ALLVEC(1, UBORS,    'UBORS ',IELM2H, 1,1)
      CALL ALLVEC(1, VBORS,    'VBORS ',IELM2H, 1,1)
      CALL ALLVEC(1, AUBORF,   'AUBORF',IELM2H, 1,1)
      CALL ALLVEC(1, AVBORF,   'AVBORF',IELM2H, 1,1)
      CALL ALLVEC(1, AUBORL,   'AUBORL',IELM2V, 1,1)
      CALL ALLVEC(1, UETCAL,   'UETCAL',IELM2V, 1,1)
      CALL ALLVEC(1, AVBORL,   'AVBORL',IELM2V, 1,1)
      CALL ALLVEC(1, AUBORS,   'AUBORS',IELM2H, 1,1)
      CALL ALLVEC(1, AVBORS,   'AVBORS',IELM2H, 1,1)
      CALL ALLVEC(1, BUBORF,   'BUBORF',IELM2H, 1,1)
      CALL ALLVEC(1, BUBORL,   'BUBORL',IELM2V, 1,1)
      CALL ALLVEC(1, BUBORS,   'BUBORS',IELM2H, 1,1)
      CALL ALLVEC(1, BVBORF,   'BVBORF',IELM2H, 1,1)
      CALL ALLVEC(1, BVBORL,   'BVBORL',IELM2V, 1,1)
      CALL ALLVEC(1, BVBORS,   'BVBORS',IELM2H, 1,1)
      CALL ALLVEC(1, UBORSAVE, 'UBSAVE',IELM2V, 1,1)
      CALL ALLVEC(1, VBORSAVE, 'VBSAVE',IELM2V, 1,1)
      CALL ALLVEC(1, WBORSAVE, 'WBSAVE',IELM2V, 1,1)
!
C FRICTION VELOCITY **2 ON THE BOTTOM
!
      CALL ALLVEC(1, UETCAR, 'UETCAR', IELM2H, 1,1)
!
C PLANE ON THE BOTTOM (THE FIRST ONE WITH A REAL ELEMENT HEIGHT ABOVE)
!
      CALL ALLVEC(2, IPBOT,  'IPBOT ', IELM2H, 1,1)
!
C BOUNDARY CONDITION TYPES/
C ATTRIBUTES FOR THE HORIZONTAL VELOCITY COMPONENTS
!
      CALL ALLVEC(2, LIUBOF,     'LIUBOF', IELM2H, 1,1)
      CALL ALLVEC(2, LIUBOL,     'LIUBOL', IELM2V, 1,1)
      CALL ALLVEC(2, LIUBOS,     'LIUBOS', IELM2H, 1,1)
!
      CALL ALLVEC(2, LIVBOF,     'LIVBOF', IELM2H, 1,1)
      CALL ALLVEC(2, LIVBOL,     'LIVBOL', IELM2V, 1,1)
      CALL ALLVEC(2, LIVBOS,     'LIVBOS', IELM2H, 1,1)
!
!-----------------------------------------------------------------------
C W VERTICAL VELOCITY COMPONENT (REAL VALUES)
C TREATED DIFFERENTLY DEPENDING ON THE (NON)HYDROSTATIC OPTION
!
      IF (NONHYD) THEN
        CALL ALLVEC(1, WN,     'WN    ', IELM3, 1, 1)
        CALL ALLVEC(1, WC,     'WC    ', IELM3, 1, 1)
        CALL ALLVEC(1, WD,     'WD    ', IELM3, 1, 1)
      ELSE ! DUMMIES
        CALL ALLVEC(1, WN,     'WN    ', 0, 1, 0)
        CALL ALLVEC(1, WC,     'WC    ', 0, 1, 0)
        CALL ALLVEC(1, WD,     'WD    ', 0, 1, 0)
      ENDIF
      CALL ALLVEC(1, W,      'W     ', IELM3,  1, 1)
      IF (NONHYD) THEN
        CALL ALLVEC(1, S0W,    'S0W   ', IELM3,  1, 1)
        CALL ALLVEC(1, S1W,    'S1W   ', IELM3,  1, 1)
      ELSE ! DUMMIES
        CALL ALLVEC(1, S0W,    'S0W   ', 0,  1, 0)
        CALL ALLVEC(1, S1W,    'S1W   ', 0,  1, 0)
      ENDIF
      CALL ALLVEC(1, WBORF,  'WBORF ', IELM2H, 1, 1)
      CALL ALLVEC(1, WBORL,  'WBORL ', IELM2V, 1, 1)
      CALL ALLVEC(1, WBORS,  'WBORS ', IELM2H, 1, 1)
      IF (NONHYD) THEN
        CALL ALLVEC(1, AWBORF, 'AWBORF', IELM2H, 1, 1)
        CALL ALLVEC(1, AWBORL, 'AWBORL', IELM2V, 1, 1)
        CALL ALLVEC(1, AWBORS, 'AWBORS', IELM2H, 1, 1)
        CALL ALLVEC(1, BWBORF, 'BWBORF', IELM2H, 1, 1)
        CALL ALLVEC(1, BWBORL, 'BWBORL', IELM2V, 1, 1)
        CALL ALLVEC(1, BWBORS, 'BWBORS', IELM2H, 1, 1)
      ELSE ! DUMMIES
        CALL ALLVEC(1, AWBORF, 'AWBORF', 0, 1, 0)
        CALL ALLVEC(1, AWBORL, 'AWBORL', 0, 1, 0)
        CALL ALLVEC(1, AWBORS, 'AWBORS', 0, 1, 0)
        CALL ALLVEC(1, BWBORF, 'BWBORF', 0, 1, 0)
        CALL ALLVEC(1, BWBORL, 'BWBORL', 0, 1, 0)
        CALL ALLVEC(1, BWBORS, 'BWBORS', 0, 1, 0)
      ENDIF
!
      CALL ALLVEC(2, LIWBOF,    'LIWBOF', IELM2H, 1, 1)
      CALL ALLVEC(2, LIWBOL,    'LIWBOL', IELM2V, 1, 1)
      CALL ALLVEC(2, LIWBOS,    'LIWBOS', IELM2H, 1, 1)
!
C SIGMA-TRANSFORMED VALUES / NO BLOCK
!
      CALL ALLVEC(1, WS,        'WS    ', IELM3,  1, 1)
!
!=======================================================================
C HYDRODYNAMIC PRESSURE SPECIFIC FOR THE NON-HYDROSTATIC OPTION
!
      IF (NONHYD) THEN
        CALL ALLVEC(1, DP,     'DP    ', IELM3,  1, 2)
        CALL ALLVEC(1, DPN,    'DPN   ', IELM3,  1, 1)
        CALL ALLVEC(1, PH,     'PH    ', IELM3,  1, 1)
        CALL ALLVEC(1, PBORF,  'PBORF ', IELM2H, 1, 1)
        CALL ALLVEC(1, PBORL,  'PBORL ', IELM2V, 1, 1)
        CALL ALLVEC(1, PBORS,  'PBORS ', IELM2H, 1, 1)
        CALL ALLVEC(2, LIPBOF, 'LIPBOF', IELM2H, 1, 1)
        CALL ALLVEC(2, LIPBOL, 'LIPBOL', IELM2V, 1, 1)
        CALL ALLVEC(2, LIPBOS, 'LIPBOS', IELM2H, 1, 1)
      ELSE
        CALL ALLVEC(1, DP,     'DP    ', 0, 1, 0)
        CALL ALLVEC(1, DPN,    'DPN   ', 0, 1, 0)
        CALL ALLVEC(1, PH,     'PH    ', 0, 1, 0)
        CALL ALLVEC(1, PBORF,  'PBORF ', 0, 1, 0)
        CALL ALLVEC(1, PBORL,  'PBORL ', 0, 1, 0)
        CALL ALLVEC(1, PBORS,  'PBORS ', 0, 1, 0)
        CALL ALLVEC(2, LIPBOF, 'LIPBOF', 0, 1, 0)
        CALL ALLVEC(2, LIPBOL, 'LIPBOL', 0, 1, 0)
        CALL ALLVEC(2, LIPBOS, 'LIPBOS', 0, 1, 0)
      ENDIF
!
!=======================================================================
C ACTIVE TRACERS LAND IN TWO SORTS OF BLOCKS SIMULTANEOUSLY (WHAT FOR?)
!
      CALL ALLBLO(TAN      ,'TAN   ')
      CALL ALLBLO(TAC      ,'TAC   ')
      CALL ALLBLO(TA       ,'TA    ')
      CALL ALLBLO(S0TA     ,'S0TA  ')
      CALL ALLBLO(S1TA     ,'S1TA  ')
      CALL ALLBLO(TABORF   ,'TABORF')
      CALL ALLBLO(TABORL   ,'TABORL')
      CALL ALLBLO(TABORS   ,'TABORS')
      CALL ALLBLO(ATABOF   ,'ATABOF')
      CALL ALLBLO(ATABOL   ,'ATABOL')
      CALL ALLBLO(ATABOS   ,'ATABOS')
      CALL ALLBLO(BTABOF   ,'BTABOF')
      CALL ALLBLO(BTABOL   ,'BTABOL')
      CALL ALLBLO(BTABOS   ,'BTABOS')
      CALL ALLBLO(LITABF   ,'LITABF')
      CALL ALLBLO(LITABL   ,'LITABL')
      CALL ALLBLO(LITABS   ,'LITABS')
      CALL ALLBLO(TRBORSAVE,'TBSAVE')
!
      IF(NTRAC.NE.0) THEN
        IELM   = IELM3
        IELH   = IELM2H
        IELV   = IELM2V
        STATUT = 1
      ELSE
        IELM   = 0
        IELH   = 0
        IELV   = 0
        STATUT = 0
      ENDIF
!
C GENERIC NAMES SHORTENED IN ORDER TO PROVIDE THE AUTOMATIC
C NUMBERING MECHANISM!
!
C NOTE JMH : MAX(NTRAC,1) BELOW : TO HAVE AT LEAST ONE ARRAY, EVEN EMPTY
C                                 TO PUT IN THE CALL TO CONLIM
!
      CALL ALLVEC_IN_BLOCK(TAN,    NTRAC, 1, 'TAN   ', IELM, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(TAC,    NTRAC, 1, 'TAC   ', IELM, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(TA,     NTRAC, 1, 'TA    ', IELM, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(S0TA,   NTRAC, 1, 'S0TA  ', IELM, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(S1TA,   NTRAC, 1, 'S1TA  ', IELM, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(TABORF, NTRAC, 1, 'TABF  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(TABORL, MAX(NTRAC,1) ,
     &                     1, 'TABL  ', IELV, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(TABORS, NTRAC, 1, 'TABS  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(ATABOF, NTRAC, 1, 'ATAF  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(ATABOL, MAX(NTRAC,1),
     &                     1, 'ATAL  ', IELV, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(ATABOS, NTRAC, 1, 'ATAS  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(BTABOF, NTRAC, 1, 'BTAF  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(BTABOL, MAX(NTRAC,1),
     &                     1, 'BTAL  ', IELV, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(BTABOS, NTRAC, 1, 'BTAS  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(LITABF, NTRAC, 2, 'LTAF  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(LITABL, MAX(NTRAC,1) ,
     &                     2, 'LTAL  ', IELV, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(LITABS,   NTRAC,2,'LTAS  ', IELH, 1, STATUT)
      CALL ALLVEC_IN_BLOCK(TRBORSAVE,NTRAC,1,'TBSA  ', IELV, 1, STATUT)
!
!=======================================================================
C K-EPSILON MODEL
!
      IF(ITURBV.EQ.3.OR.ITURBV.EQ.7) THEN
        IELM   = IELM3
        IELH   = IELM2H
        IELV   = IELM2V
        STATUT = 1
      ELSE
        IELM   = 0
        IELH   = 0
        IELV   = 0
        STATUT = 0
      ENDIF
!
      CALL ALLVEC(1, AKN,      'AKN   ', IELM, 1, STATUT )
      CALL ALLVEC(1, AKC,      'AKC   ', IELM, 1, STATUT )
      CALL ALLVEC(1, AK,       'AK    ', IELM, 1, STATUT )
      CALL ALLVEC(1, S0AK,     'S0AK  ', IELM, 1, STATUT )
      CALL ALLVEC(1, S1AK,     'S1AK  ', IELM, 1, STATUT )
!
      CALL ALLVEC(1, EPN,      'EPN   ', IELM, 1, STATUT )
      CALL ALLVEC(1, EPC,      'EPC   ', IELM, 1, STATUT )
      CALL ALLVEC(1, EP,       'EP    ', IELM, 1, STATUT )
      CALL ALLVEC(1, S0EP,     'S0EP  ', IELM, 1, STATUT )
      CALL ALLVEC(1, S1EP,     'S1EP  ', IELM, 1, STATUT )
!
      CALL ALLVEC(1, KBORF,    'KBORF ', IELH, 1, STATUT )
      CALL ALLVEC(1, KBORL,    'KBORL ', IELV, 1, STATUT )
      CALL ALLVEC(1, KBORSAVE, 'KBSAVE', IELV, 1, STATUT )
      CALL ALLVEC(1, KBORS,    'KBORS ', IELH, 1, STATUT )
!
      CALL ALLVEC(1, EBORF,    'EBORF ', IELH, 1, STATUT )
      CALL ALLVEC(1, EBORL,    'EBORL ', IELV, 1, STATUT )
      CALL ALLVEC(1, EBORSAVE, 'EBSAVE', IELV, 1, STATUT )
      CALL ALLVEC(1, EBORS,    'EBORS ', IELH, 1, STATUT )
!
      CALL ALLVEC(1, AKBORF, 'AKBORF', IELH, 1, STATUT )
      CALL ALLVEC(1, AKBORL, 'AKBORL', IELV, 1, STATUT )
      CALL ALLVEC(1, AKBORS, 'AKBORS', IELH, 1, STATUT )
!
      CALL ALLVEC(1, AEBORF, 'AEBORF', IELH, 1, STATUT )
      CALL ALLVEC(1, AEBORL, 'AEBORL', IELV, 1, STATUT )
      CALL ALLVEC(1, AEBORS, 'AEBORS', IELH, 1, STATUT )
!
      CALL ALLVEC(1, BKBORF, 'BKBORF', IELH, 1, STATUT )
      CALL ALLVEC(1, BKBORL, 'BKBORL', IELV, 1, STATUT )
      CALL ALLVEC(1, BKBORS, 'BKBORS', IELH, 1, STATUT )
!
      CALL ALLVEC(1, BEBORF, 'BEBORF', IELH, 1, STATUT )
      CALL ALLVEC(1, BEBORL, 'BEBORL', IELV, 1, STATUT )
      CALL ALLVEC(1, BEBORS, 'BEBORS', IELH, 1, STATUT )
!
      CALL ALLVEC(2, LIKBOF, 'LIKBOF', IELH, 1, STATUT )
      CALL ALLVEC(2, LIKBOL, 'LIKBOL', IELV, 1, STATUT )
      CALL ALLVEC(2, LIKBOS, 'LIKBOS', IELH, 1, STATUT )
!
      CALL ALLVEC(2, LIEBOF, 'LIEBOF', IELH, 1, STATUT )
      CALL ALLVEC(2, LIEBOL, 'LIEBOL', IELV, 1, STATUT )
      CALL ALLVEC(2, LIEBOS, 'LIEBOS', IELH, 1, STATUT )
!
!=======================================================================
!
!		      *******************
C       * OTHER VARIABLES *
!		      *******************
!
C  VARIOUS VELOCITY COMPONENTS 3D, 2D, BOUNDARY CONDITION VALUES
!
      CALL ALLVEC(1, U2D,        'U2D   ', IELMU,  1, 1)
      CALL ALLVEC(1, UN2D,       'UN2D  ', IELMU,  1, 1)
      CALL ALLVEC(1, FU,         'FU    ', IELMU,  1, 1)
      CALL ALLVEC(1, V2D,        'V2D   ', IELMU,  1, 1)
      CALL ALLVEC(1, VN2D,       'VN2D  ', IELMU,  1, 1)
      CALL ALLVEC(1, FV,         'FV    ', IELMU,  1, 1)
C     DIMENSION 2 : SEE IN LECLIM, USED IN BORD3D
      CALL ALLVEC(1, UBOR2D,     'UBOR2D', IELM1, 2, 1)
      CALL ALLVEC(1, VBOR2D,     'VBOR2D', IELM1, 2, 1)
!
      CALL ALLVEC(1, FLBOR ,     'FLBOR ', IELM1, 1, 1)
      CALL ALLVEC(1, FLBLIM,     'FLBLIM', IELM1, 1, 1)
!
      CALL ALLVEC(1, VCONV ,      'VCONV ', IELM3, 1, 1)
      CALL ALLVEC(1, UCONV ,      'UCONV ', IELM3, 1, 1)
      CALL ALLVEC(1, VCONVC,      'VCONVC', IELM3, 1, 1)
      CALL ALLVEC(1, UCONVC,      'UCONVC', IELM3, 1, 1)
      CALL ALLVEC(1, WSCONV,      'WSCONV', IELM3, 1, 1)
      CALL ALLVEC(1, DM1   ,      'DM1   ', IELM3, 1, 1)
!
!-----------------------------------------------------------------------
C WATER DEPTH AND VARIABLES DERIVED FROM IT,
C PRINCIPALLY T2D DISCRETISATION OF DEPTH IELMH = IELM2H
!
      CALL ALLVEC(1, H,      'H     ', IELMH, 1, 1)
      CALL ALLVEC(1, HN,     'HN    ', IELMH, 1, 1)
      CALL ALLVEC(1, HPROP,  'HPROP ', IELMH, 1, 1)
      CALL ALLVEC(1, NUWAVE, 'NUWAVE', 10   , 1, 1)
      CALL ALLVEC(1, HBOR,   'HBOR  ', IELM1, 1, 1)
      CALL ALLVEC(1, DH,     'DH    ', IELMH, 1, 2)
      CALL ALLVEC(1, SMH,    'SMH   ', IELMH, 1, 1)
!
      IF(RAIN) THEN
        CALL ALLVEC(1,PLUIE,'PLUIE ',IELMH,1,2)
      ELSE
        CALL ALLVEC(1,PLUIE,'PLUIE ',0    ,1,0)
      ENDIF
!
!-----------------------------------------------------------------------
C NUMERICAL VARIABLES
!
      CALL ALLVEC(1, VOLU  , 'VOLU  ', IELM3 , 1, 1)
      CALL ALLVEC(1, VOLU3D, 'VOLU3D', IELM3 , 1, 1)
      CALL ALLVEC(1, VOLUN , 'VOLUN ', IELM3 , 1, 1)
      CALL ALLVEC(1, VOLUT , 'VOLUT ', IELM3 , 1, 1)
      CALL ALLVEC(1, VOLU2D, 'VOLU2D', IELM2H, 1, 1)
      CALL ALLVEC(1, V2DPAR, 'V2DPAR', IELM2H, 1, 1)
      CALL ALLVEC(1, UNSV2D, 'UNSV2D', IELM2H, 1, 1)
      CALL ALLVEC(1, UNSV3D, 'UNSV3D', IELM3 , 1, 1)
!
      CALL ALLVEC(1, FLUINT,    'FLUINT', IELM3 , 1, 1)
      CALL ALLVEC(1, FLUEXT,    'FLUEXT', IELM3 , 1, 1)
      CALL ALLVEC(1, FLINT2,    'FLINT2', IELM2H, 1, 1)
!
!-----------------------------------------------------------------------
C PHYSICAL VARIABLES
!
C (COMPONENTS OF VISCOSITY AS SEPARATE VECTORS ARE REQUIRED!)
!
      CALL ALLBLO(VISCVI, 'VISCVI')
      CALL ALLVEC_IN_BLOCK(VISCVI, 3, 1, 'VISC  ', IELM3, 1, 2)
!
C ADDRESSING IS AWKWARD, E.G. REAL PART OF THE DIFFUSIVITY STRUCTURE
C OF THE THIRD TRACER IN THE Y-DIRECTION IS VISCTA%ADR(3)%P%ADR(2)%P%R
C DEAR ME!
!
      CALL ALLBLO(VISCTA, 'VISCTA')
      IF(NTRAC.GT.0) THEN
        CALL ALLBLO_IN_BLOCK(VISCTA, NTRAC, 'VBTA  ')
        DO ITRAC = 1,NTRAC
          CALL ALLVEC_IN_BLOCK ( VISCTA%ADR(ITRAC)%P, 3 , 1,
     &                              'VITA  ',IELM3,1,2)
        ENDDO
      ENDIF
!
      CALL ALLVEC(1, ROTAT,  'ROTAT ', IELM3,  1, 1)
!
      CALL ALLVEC(1, DELTAR, 'DELTAR', IELM3,  1, 1)
      CALL ALLVEC(1, RI,     'RI    ', IELM3,  1, 1)
!
      CALL ALLVEC(1, RUGOF,  'RUGOF ', IELMU , 1, 1)
      CALL ALLVEC(1, RUGOL,  'RUGOL ', IELM2V, 1, 1)
      CALL ALLVEC(1, CF   ,  'CF    ', IELMU, 1, 1)
!
      CALL ALLBLO(WIND, 'WIND  ')
      IF (VENT) THEN
        CALL ALLVEC_IN_BLOCK(WIND, 2, 1, 'WIND  ', IELM2H, 1, 1)
      ELSE
        CALL ALLVEC_IN_BLOCK(WIND, 2, 1, 'WIND  ', 0, 1, 0)
      ENDIF
!
      IF (ATMOS) THEN
        CALL ALLVEC(1, PATMOS, 'PATMOS', IELM2H, 1, 1)
      ELSE
        CALL ALLVEC(1, PATMOS, 'PATMOS', 0,      1, 0)
      ENDIF
!
!-----------------------------------------------------------------------
C VARIABLES USED IN MASS BALANCE (ALWAYS DECLARED, FOR SIMPLICITY)
!
      CALL ALLVEC(1, MASINI, 'MASINI', NVBIL,1, 0)
      CALL ALLVEC(1, MASSE,  'MASSE ', NVBIL,1, 0)
      CALL ALLVEC(1, MASSEN, 'MASSEN', NVBIL,1, 0)
      CALL ALLVEC(1, FLUCUM, 'FLUCUM', NVBIL,1, 0)
C  NOTE JMH, FOR 100 SEE FLUX3D AND BIL3D
      CALL ALLVEC(1, FLUX,   'FLUX  ', 100  ,1, 0)
!
C BOTTOM AS GIVEN FROM THE GEOMETRY FILE
!
      CALL ALLVEC(1, ZF, 'ZF    ', IELM2H, 1, 1)
!
C BOTTOM GEOMETRY PER 2D-ELEMENT FOR TIDAL FLATS TREATMENT
!
      IF(MSK) THEN
        CALL ALLVEC(1, ZFE, 'ZFE   ', 10, 1, 1)
      ELSE
        CALL ALLVEC(1, ZFE, 'ZFE   ',  0, 1, 0)
      ENDIF
!
!-----------------------------------------------------------------------
C DROGUES (FLOATS ...EHM, TRACERS...)
!
      CALL ALLVEC(1, XFLOT,  'XFLOT ', NFLOT*NITFLO, 1, 0)
      CALL ALLVEC(1, YFLOT,  'YFLOT ', NFLOT*NITFLO, 1, 0)
      CALL ALLVEC(1, ZFLOT,  'ZFLOT ', NFLOT*NITFLO, 1, 0)
      CALL ALLVEC(1, ZSFLOT, 'ZSFLOT', NFLOT*NITFLO, 1, 0)
      CALL ALLVEC(1, SHPFLO, 'SHPFLO', 3*NFLOT, 1, 0)
      CALL ALLVEC(1, SHZFLO, 'SHZFLO', NFLOT, 1, 0)
!
      CALL ALLVEC(2, DEBFLO, 'DEBFLO', NFLOT, 1, 0)
      CALL ALLVEC(2, FINFLO, 'FINFLO', NFLOT, 1, 0)
      CALL ALLVEC(2, ELTFLO, 'ELTFLO', NFLOT, 1, 0)
      CALL ALLVEC(2, ETAFLO, 'ETAFLO', NFLOT, 1, 0)
      CALL ALLVEC(2, IKLFLO, 'IKLFLO', 3*NFLOT*NITFLO, 1, 0)
      CALL ALLVEC(2, TRAFLO, 'TRAFLO', 3*NFLOT*NITFLO, 1, 0)
!
!-----------------------------------------------------------------------
C VARIOUS TABLES, AS W1, ITRAV3 , PRIVE
C W1 ALLOCATED BY ALMESH
!
      CALL ALLBLO (PRIVE,'PRIVE ')
      CALL ALLVEC_IN_BLOCK(PRIVE,MAX(4,NPRIV),1,'PRIV  ',IELM3,1,2)
!
C    FOR VALIDATION
C    BEWARE : MAX 16 VARIABLES
      CALL ALLBLO (PRIV3,'PRIV3 ')
      CALL ALLVEC_IN_BLOCK(PRIV3, 16, 1, 'PRI3  ', IELM3, 1, 1)
C
C INTEGER WORK FIELDS
!
      CALL ALLBLO(ITRAV3,'ITRAV3')
      CALL ALLVEC_IN_BLOCK(ITRAV3, 4,     2, 'ITR3V ', IELM3, 1, 1)
!
C POINTERS TO 5 INTEGER WORK FIELDS
!
      IT1 => ITRAV3%ADR(1)%P
      IT2 => ITRAV3%ADR(2)%P
      IT3 => ITRAV3%ADR(3)%P
      IT4 => ITRAV3%ADR(4)%P
!
C     BLOCKS OF ADVECTED VARIABLES WITH CHARACTERISTICS
!
      CALL ALLBLO(FC3D, 'FC3D  ')
      CALL ALLBLO(FN3D, 'FN3D  ')
C     ADVECTION OF VELOCITIES IS DONE FOR THE NEXT STEP
C     SO HERE U AND NOT UN
      IF(SCHCVI.EQ.ADV_CAR) THEN
        CALL ADDBLO(FN3D,U )
        CALL ADDBLO(FC3D,UC)
        CALL ADDBLO(FN3D,V )
        CALL ADDBLO(FC3D,VC)
        IF(NONHYD) THEN
          CALL ADDBLO(FN3D,W )
          CALL ADDBLO(FC3D,WC)
        ENDIF
      ENDIF
      IF(SCHCKE.EQ.ADV_CAR.AND.(ITURBH.EQ.3.OR.
     &                          ITURBH.EQ.7.OR.
     &                          ITURBV.EQ.3.OR.
     &                          ITURBV.EQ.7)) THEN
        CALL ADDBLO(FN3D,AKN)
        CALL ADDBLO(FC3D,AKC)
        CALL ADDBLO(FN3D,EPN)
        CALL ADDBLO(FC3D,EPC)
      ENDIF
      IF(SCHCTA.EQ.ADV_CAR.AND.NTRAC.GT.0) THEN
        DO ITRAC=1,NTRAC
          CALL ADDBLO(FN3D,TAN%ADR(ITRAC)%P)
          CALL ADDBLO(FC3D,TAC%ADR(ITRAC)%P)
        ENDDO
      ENDIF
!
!=======================================================================
!
!                   *********************************
C                   * STRUCTURES FOR THE RESOLUTION *
C                   *  OF LINEAR EQUATION SYSTEMS   *
C                   *          F I R S T            *
C                   *        M A T R I C E S        *
!                   *********************************
!
C BEWARE : 2D AND ESPECIALLY 3D MATRICES OCCUPY
C ======   A LARGE CHUNK OF MEMORY
!
!-----------------------------------------------------------------------
C 3D MATRICES
!
C S.U.P.G.
!
      TYPDIA = '0'
      TYPEXT = '0'
      IF(CONV(ADV_SUP)) THEN
        TYPDIA = 'Q'
        TYPEXT = 'Q'
      ENDIF
      CALL ALLMAT(MSUPG, 'SUPG  ', IELM3, IELM3, CFG, TYPDIA, TYPEXT)
!
C M.U.R.D.
!
      TYPDIA = '0'
      TYPEXT = '0'
      IF(CONV(ADV_NSC).OR.CONV(ADV_PSI)) THEN
        TYPDIA = 'Q'
        TYPEXT = 'Q'
      ENDIF
      CALL ALLMAT(MMURD,'MURD  ',IELM3,IELM3,CFGMURD,TYPDIA,TYPEXT)
!
C M.U.R.D. (EDGE-BASED FOR TIDAL FLATS)
!
      TYPDIA = '0'
      TYPEXT = '0'
      IF(CONV(ADV_NSC_TF)) THEN
        TYPDIA = 'Q'
        TYPEXT = 'Q'
      ENDIF
      CALL ALLMAT(MURD_TF,'MURDTF',IELM3,IELM3,CFGMURD_TF,
     &            TYPDIA,TYPEXT)
!
C DIFFUSION
!
      TYPDIA = '0'
      IF (DIF(1) .OR. NONHYD) TYPDIA = 'Q'
      TYPEXT = '0'
      IF (DIF(1) .OR. NONHYD) TYPEXT = 'S'
      CALL ALLMAT (MDIFF, 'DIFF  ', IELM3, IELM3, CFG, TYPDIA, TYPEXT)
!
C THE 3D WORK MATRICES (ALWAYS ALLOCATED AS NON SYMMETRICAL)
C                       SEE USE OF MTRA2%X IN WAVE_EQUATION
!
      TYPDIA = 'Q'
      TYPEXT = 'Q'
      CALL ALLMAT (MTRA2, 'MTRA2 ', IELM3, IELM3, CFG, TYPDIA, TYPEXT)
      CALL ALLMAT (MTRA1, 'MTRA1 ', IELM3, IELM3, CFG, TYPDIA, TYPEXT)
!
!-----------------------------------------------------------------------
C EXACTLY NINE 2D MATRICES (IELM2H) - (EACH OF THEM ALLOCATED IN A
C SEPARATE BLOCK), ALL IN BLOCK MAT2D FOR CALL TO PROPAG
C E.G. WORK MATRIX SEVEN IS: MAT2D%ADR(7)%P
C THEY ALL GET NAMED MAT2D...............
!
      CALL ALLBLO (MAT2D, 'MAT2D ')
      CALL ALLBLO_IN_BLOCK(MAT2D, 9, 'MAT2D ')
      DO ITAB = 1,9
        CALL ALLMAT(MAT2D%ADR(ITAB)%P, 'MAT2D ',
     &              IELMU, IELMU, CFG2D, 'Q', 'Q')
      END DO
!
C ANOTHER WORK MATRIX IS BUILT USING ALMESH FOR THE 2D MESH: MTRA2
!
C BOUNDARY MATRIX FOR 2D
!
      CALL ALLMAT(MBOR2D, 'MBOR2D', IELM1, IELM1, CFGBOR2D, 'Q','Q')
!
C WORK MATRIX FOR IELM2V DISCRET.
!
      CALL ALLMAT(MATR2V, 'MATR2V', IELM2V, IELM2V, CFG, 'Q','Q')
!
      CALL ALLMAT(MATR2H, 'MATR2H', IELMU, IELMU, CFG, 'Q','Q')
!
!=======================================================================
!
!                   *********************************
C                   * STRUCTURES FOR THE RESOLUTION *
C                   *  OF LINEAR EQUATION SYSTEMS   *
C                   *  S E C O N D   M E M B E R S  *
C                   *         V E C T O R S         *
!                   *********************************
!
!-----------------------------------------------------------------------
C FOR 3D PART
C COMPUTES THE NUMBER OF 3D WORK FIELDS AS A FUNCTION OF
C SOLVER AND PRECONDITIONING TYPE AND NUMBER OF VARIABLES
!
      NTR = 10
!
      IF (SLVDVI%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVDVI%KRYLOV)
      IF (SLVDTA%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVDTA%KRYLOV)
      IF (SLVDKE%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVDKE%KRYLOV)
      IF (SLVDSE%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVDSE%KRYLOV)
      IF (SLVPOI%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVPOI%KRYLOV)
      IF (SLVPRJ%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVPRJ%KRYLOV)
!
      IF (3*(SLVDVI%PRECON/3).EQ.SLVDVI%PRECON .OR.
     &    3*(SLVDTA%PRECON/3).EQ.SLVDTA%PRECON .OR.
     &    3*(SLVDKE%PRECON/3).EQ.SLVDKE%PRECON .OR.
     &    3*(SLVDSE%PRECON/3).EQ.SLVDSE%PRECON .OR.
     &    3*(SLVPOI%PRECON/3).EQ.SLVPOI%PRECON) NTR = NTR+2
!
      IF (ITURBV.EQ.3) NTR = MAX(NTR,12)
      IF (ITURBV.EQ.7) NTR = MAX(NTR,18)
!
      CALL ALLBLO(TRAV3, 'TRAV3 ')
      CALL ALLVEC_IN_BLOCK(TRAV3, NTR, 1, 'TRAV  ', IELM3, 1, 2)
!
C POINTERS TO THESE 3D WORK VECTORS; FIRST 10 EXIST FOR SURE
!
      T3_01 => TRAV3%ADR(1)%P
      T3_02 => TRAV3%ADR(2)%P
      T3_03 => TRAV3%ADR(3)%P
      T3_04 => TRAV3%ADR(4)%P
      T3_05 => TRAV3%ADR(5)%P
      T3_06 => TRAV3%ADR(6)%P
      T3_07 => TRAV3%ADR(7)%P
      T3_08 => TRAV3%ADR(8)%P
      T3_09 => TRAV3%ADR(9)%P
      T3_10 => TRAV3%ADR(10)%P
      IF(NTR.GE.12) THEN
        T3_11 => TRAV3%ADR(11)%P
        T3_12 => TRAV3%ADR(12)%P
      ENDIF
      IF(NTR.GE.18) THEN
        T3_13 => TRAV3%ADR(13)%P
        T3_14 => TRAV3%ADR(14)%P
        T3_15 => TRAV3%ADR(15)%P
        T3_16 => TRAV3%ADR(16)%P
        T3_17 => TRAV3%ADR(17)%P
        T3_18 => TRAV3%ADR(18)%P
      ENDIF
!
C SECOND MEMBER 3D
!
      CALL ALLVEC(1, SEM3D, 'SEM3D ', IELM3, 1, 2)
!
C RIGHT HAND SIDE OF CONTINUITY EQUATIONS IF SOURCES
!
      CALL ALLBLO(SOURCES, 'SOURCE')
      I=NSCE
      IF(NCSIZE.GT.1) I=2*NSCE
      IF(NSCE.GT.0) THEN
        CALL ALLVEC_IN_BLOCK(SOURCES,I,1,'SCE   ',IELM3,1,1)
      ELSE
        CALL ALLVEC_IN_BLOCK(SOURCES,I,1,'SCE   ',0    ,1,0)
      ENDIF
!
!-----------------------------------------------------------------------
C FOR 2D PART
!
C COMPUTES THE NUMBER OF 3D WORK FIELDS AS A FUNCTION OF
C SOLVER AND PRECONDITIONING TYPE AND NUMBER OF VARIABLES
C FIRST 21 ALLOCATED FOR SURE... (WOW!?)
!
      NTR = 21
      IF (SLVPRO%SLV.EQ.7) NTR = MAX(NTR,6+6*SLVPRO%KRYLOV)
      IF (SLVW%SLV.EQ.7)   NTR = MAX(NTR,2+2*SLVW%KRYLOV)
      IF (3*(SLVPRO%PRECON/3) .EQ. SLVPRO%PRECON .OR.
     &    3*(SLVW%PRECON/3)   .EQ. SLVW%PRECON ) NTR = NTR + 6
!
C     SEE VARSOR BELOW
      NTR=MAX(NTR,13+NTRAC)
!
      CALL ALLBLO(TRAV2, 'TRAV2 ')
      CALL ALLVEC_IN_BLOCK(TRAV2, NTR, 1, 'TR2D  ', IELMU, 1, 2)
!
C POINTERS TO FIRST 10 2D WORK VECTORS (21 EXIST FOR SURE)
!
      T2_01 => TRAV2%ADR( 1)%P
      T2_02 => TRAV2%ADR( 2)%P
      T2_03 => TRAV2%ADR( 3)%P
      T2_04 => TRAV2%ADR( 4)%P
      T2_05 => TRAV2%ADR( 5)%P
      T2_06 => TRAV2%ADR( 6)%P
      T2_07 => TRAV2%ADR( 7)%P
      T2_08 => TRAV2%ADR( 8)%P
      T2_09 => TRAV2%ADR( 9)%P
      T2_10 => TRAV2%ADR(10)%P
      T2_11 => TRAV2%ADR(11)%P
      T2_12 => TRAV2%ADR(12)%P
      T2_13 => TRAV2%ADR(13)%P
      T2_14 => TRAV2%ADR(14)%P
      T2_15 => TRAV2%ADR(15)%P
      T2_16 => TRAV2%ADR(16)%P
      T2_17 => TRAV2%ADR(17)%P
      T2_18 => TRAV2%ADR(18)%P
      T2_19 => TRAV2%ADR(19)%P
      T2_20 => TRAV2%ADR(20)%P
      T2_21 => TRAV2%ADR(21)%P
!
C SECOND MEMBERS BLOCK - 3 NEEDED
!
      CALL ALLBLO (SEM2D,'SEM2D ')
      CALL ALLVEC_IN_BLOCK (SEM2D, 3, 1, 'SEM2D ', IELMU, 1, 2)
!
C WORK FIELDS WITH A DIMENSION OF THE MAX. 2D ELEMENT NUMBER
C IELM = 10
!
      CALL ALLVEC(1,   TE1, 'TE1   ', 10, 1, 1)
      CALL ALLVEC(1,   TE2, 'TE2   ', 10, 1, 1)
      CALL ALLVEC(1,   TE3, 'TE3   ', 10, 1, 1)
!
C PIECE-WISE LINEAR FREE SURFACE
      CALL ALLVEC(1,ZFLATS, 'ZFLATS', 10, 3, 1)
      CALL ALLVEC(1,ZCONV , 'ZCONV ', 10, 3, 1)
      ZFLATS%DIMDISC=11
      ZCONV%DIMDISC =11
!
C DELWAQ FLOWS BETWEEN POINTS
      CALL ALLVEC(1,FLODEL, 'FLODEL',NSEG*NPLAN+NETAGE*NPOIN2, 1, 0)
C     FULL SIZE OF FLOPAR PROBABLY NOT USEFUL IF NOT PARALLEL MODE
      CALL ALLVEC(1,FLOPAR, 'FLOPAR',NSEG*NPLAN+NETAGE*NPOIN2, 1, 0)
C LIMITATION OF 2D SEGMENT FLUXES
      CALL ALLVEC(1,FLULIM, 'FLULIM',NSEG                    ,1,0)
!
!
!-----------------------------------------------------------------------
C BLOCK OF UNKNOWNS FOR PROPAG
!
      CALL ALLBLO(UNK2D,'UNK2D ')
!
      CALL ADDBLO (UNK2D, DH )
      CALL ADDBLO (UNK2D, U2D)
      CALL ADDBLO (UNK2D, V2D)
!
C BLOCK OF BOUNDARY CONDITIONS FOR
!
      CALL ALLBLO(DIRBOR,'DIRBOR')
!
      CALL ADDBLO(DIRBOR,HBOR)
      CALL ADDBLO(DIRBOR,UBOR2D)
      CALL ADDBLO(DIRBOR,VBOR2D)
!
!-----------------------------------------------------------------------
C ALLOCATES VOID STRUCTURE
!
      CALL ALLVEC(1, SVIDE, 'SVIDE ', 0, 1, 1)
!
C PREVIOUSLY CALLED CALL ALLVEC(1, SVIDE, 'SVIDE ', 0, 1, -99)
!
C A VOID BLOCK
!
      CALL ALLBLO(BVIDE,'BVIDE ')
!
!=======================================================================
C SEDIMENT
C  IF CONSOLIDATION IS MODELLED USING THE MULTI-LAYER MODEL,
C  THE MAXIMUM NUMBER OF PLANES DISCRETISING THE BED: NPFMAX
C  EQUALS (NCOUCH+1) :
!
      IF(SEDI) THEN
        CALL ALLVEC(1, WCHU,      'WCHU  ', IELM3, 1, 1)
      ELSE
        CALL ALLVEC(1, WCHU,      'WCHU  ', 0,    1, 0)
      ENDIF
!
      IF(TASSE .AND. SEDI) NPFMAX = NCOUCH + 1
!
      IF((GIBSON.OR.TASSE).AND.SEDI) THEN
        CALL ALLVEC(1, EPAI, 'EPAI  ', (NPFMAX-1)*NPOIN2, 1, 0)
      ELSE
        CALL ALLVEC(1, EPAI, 'EPAI  ', 0,                 1, 0)
      ENDIF
!
      IF(GIBSON.AND.SEDI) THEN
        CALL ALLVEC(1, IVIDE, 'IVIDE ', NPFMAX*NPOIN2, 1, 0)
      ELSE
        CALL ALLVEC(1, IVIDE, 'IVIDE ', 0,             1, 0)
      ENDIF
!
      IF(TASSE.AND.SEDI) THEN
        CALL ALLVEC(1, TEMP, 'TEMP  ', NCOUCH*NPOIN2, 1, 0)
      ELSE
        CALL ALLVEC(1, TEMP, 'TEMP  ', 0,             1, 0)
      ENDIF
!
      IF(TASSE.AND.SEDI) THEN
        CALL ALLVEC(1, CONC, 'CONC  ', NCOUCH, 1, 0)
      ELSE
        CALL ALLVEC(1, CONC, 'CONC  ',      0, 1, 0)
      ENDIF
!
      IF(SEDI) THEN
        CALL ALLVEC(1, DMOY,  'DMOY  ', IELM2H, 1, 1)
        CALL ALLVEC(1, CREF,  'CREF  ', IELM2H, 1, 1)
        CALL ALLVEC(1, HDEP,  'HDEP  ', IELM2H, 1, 1)
        CALL ALLVEC(1, FLUER, 'FLUER ', IELM2H, 1, 1)
        CALL ALLVEC(1, PDEPO, 'PDEPO ', IELM2H, 1, 1)
        CALL ALLVEC(1, ZR,    'ZR    ', IELM2H, 1, 1)
        CALL ALLVEC(2, NPF,   'NPF   ', IELM2H, 1, 1)
      ELSE
        CALL ALLVEC(1, DMOY,  'DMOY  ',      0, 1, 0)
        CALL ALLVEC(1, CREF,  'CREF  ',      0, 1, 0)
        CALL ALLVEC(1, HDEP,  'HDEP  ',      0, 1, 0)
        CALL ALLVEC(1, FLUER, 'FLUER ',      0, 1, 0)
        CALL ALLVEC(1, PDEPO, 'PDEPO ',      0, 1, 0)
        CALL ALLVEC(1, ZR,    'ZR    ',      0, 1, 0)
        CALL ALLVEC(2, NPF,   'NPF   ',      0, 1, 0)
      ENDIF
!
!-----------------------------------------------------------------------
C VARSOR BLOCK FOR 2D OUTPUT COMPATIBILITY
!
      CALL ALLBLO(VARSOR ,'VARSOR')
!
      CALL ADDBLO(VARSOR,U2D)             ! U  01 VELOCITY ALONG X
      CALL ADDBLO(VARSOR,V2D)             ! V  02 VELOCITY ALONG Y
      CALL ADDBLO(VARSOR,T2_10)           ! C  03 WAVE CELERITY
      CALL ADDBLO(VARSOR,H)               ! H  04 DEPTH
      CALL ADDBLO(VARSOR,T2_01)           ! S  05 FREE SURFACE
      CALL ADDBLO(VARSOR,ZF)              ! B  06 BOTTOM
      CALL ADDBLO(VARSOR,T2_02)           ! F  07 FROUDE NUMBER
      CALL ADDBLO(VARSOR,T2_03)           ! Q  08 Q SCALAR FLOW RATE
      CALL ADDBLO(VARSOR,SVIDE)           ! T  09 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,SVIDE)           ! D  10 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,SVIDE)           ! E  11 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,SVIDE)           ! P  12 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,T2_04)           ! I  13 HU
      CALL ADDBLO(VARSOR,T2_05)           ! J  14 HV
      CALL ADDBLO(VARSOR,T2_06)           ! M  15 SQRT(U**2+V**2)
      CALL ADDBLO(VARSOR,WIND%ADR(1)%P)   ! X  16 WIND COMPONENT X DIRECT
      CALL ADDBLO(VARSOR,WIND%ADR(2)%P)   ! Y  17 WIND COMPONENT Y DIRECT
      CALL ADDBLO(VARSOR,PATMOS)          ! K  18 ATMOSPHERIC PRESSURE
      CALL ADDBLO(VARSOR,RUGOF)           ! W  19 FRICTION COEFFICIENT
      CALL ADDBLO(VARSOR,SVIDE)         !!! A  20
      CALL ADDBLO(VARSOR,SVIDE)         !!! G  21
      CALL ADDBLO(VARSOR,SVIDE)         !!! L  22
      CALL ADDBLO(VARSOR,ZR)              ! RB 23 RIGID BED
      CALL ADDBLO(VARSOR,EPAI)            ! FD 24 FRESH DEPOSITS
      CALL ADDBLO(VARSOR,FLUER)           ! EF 25 EROSION FLUX
      CALL ADDBLO(VARSOR,PDEPO)           ! DP 26 DEPOSITION PROBABILITY
      CALL ADDBLO(VARSOR,PRIVE%ADR(1)%P)  !    27 MNEMO PRIVE1
      CALL ADDBLO(VARSOR,PRIVE%ADR(2)%P)  !    28 MNEMO PRIVE2
      CALL ADDBLO(VARSOR,PRIVE%ADR(3)%P)  !    29 MNEMO PRIVE3
      CALL ADDBLO(VARSOR,PRIVE%ADR(4)%P)  !    30 MNEMO PRIVE4
      CALL ADDBLO(VARSOR,T2_07)           ! US 31 FRICTION VELOCITY
      CALL ADDBLO(VARSOR,T2_11)           ! QS 32 SOLID DISCHARGE
      CALL ADDBLO(VARSOR,T2_12)           ! QS 33 SOLID DISCHARGE ALONG X
      CALL ADDBLO(VARSOR,T2_13)           ! QS 34 SOLID DISCHARGE ALONG Y
!
C     VARIABLES 35 TO 35+NTRAC-1
!
      IF(NTRAC.GT.0) THEN
        DO I=1,NTRAC
C         SIZE OF TRAV2 MUST BE GREATER THAN 13+NTRAC
          CALL ADDBLO(VARSOR,TRAV2%ADR(13+I)%P)
        ENDDO
      ENDIF
!
C QUASI - OTHER VARIABLES, AN EMPTY BLOCK
!
      CALL ALLBLO(VARCL,'VARCL ')
!
!-----------------------------------------------------------------------
C VARSOR BLOCK FOR 3D OUTPUT
!
      CALL ALLBLO(VARSO3 ,'VARSO3')
C 1
      CALL ADDBLO(VARSO3,Z3)
C 2
      CALL ADDBLO(VARSO3,U)
C 3
      CALL ADDBLO(VARSO3,V)
C 4
      CALL ADDBLO(VARSO3,W)
C 5
      CALL ADDBLO(VARSO3,VISCVI%ADR(1)%P)
C 6
      CALL ADDBLO(VARSO3,VISCVI%ADR(2)%P)
C 7
      CALL ADDBLO(VARSO3,VISCVI%ADR(3)%P)
C 8
      CALL ADDBLO(VARSO3,AK)
C 9
      CALL ADDBLO(VARSO3,EP)
C 10
      CALL ADDBLO(VARSO3,RI)
C 11
      CALL ADDBLO(VARSO3,DELTAR)
C 12 : DYNAMIC PRESSURE
      CALL ADDBLO(VARSO3,DP)
C 13 : HYDROSTATIC PRESSURE
      CALL ADDBLO(VARSO3,PH)
!
C  NEXT = 14
!
C VARIABLES NUMBER "NEXT" TO "NEXT" + NTRAC - 1
!
      IF(NTRAC.GT.0) THEN
        DO I=1,NTRAC
          CALL ADDBLO(VARSO3,TA%ADR(I)%P)
        ENDDO
      ENDIF
!
C VARIABLES NUMBER "NEXT" + NTRAC TO "NEXT" + 4*NTRAC - 1
!
      IF(NTRAC.GT.0) THEN
        DO I=1,NTRAC
          CALL ADDBLO(VARSO3,VISCTA%ADR(I)%P%ADR(1)%P)
          CALL ADDBLO(VARSO3,VISCTA%ADR(I)%P%ADR(2)%P)
          CALL ADDBLO(VARSO3,VISCTA%ADR(I)%P%ADR(3)%P)
        ENDDO
      ENDIF
!
!-----------------------------------------------------------------------
!
      IF(LISTIN) THEN
        IF(LNG.EQ.1) WRITE(LU,41)
        IF(LNG.EQ.2) WRITE(LU,42)
      ENDIF
 41   FORMAT(1X,/,' FIN DE L''ALLOCATION DE LA MEMOIRE ',/)
 42   FORMAT(1X,/,' END OF MEMORY ALLOCATION  ',/)
!
!-----------------------------------------------------------------------
!
      RETURN
      END
C
C#######################################################################
C