!
!  INTERFACES OF TOMAWAC SUBROUTINES
!
      MODULE INTERFACE_TOMAWAC
!
!=======================================================================
!
!     DEFINITION OF STRUCTURES
!
      USE BIEF_DEF
!
!-----------------------------------------------------------------------
!
!     DEFINITION OF INTERFACES
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ANACOS(UC,VC,X,Y,NPOIN2)
      IMPLICIT NONE
      INTEGER  NPOIN2
      DOUBLE PRECISION X(NPOIN2),Y(NPOIN2),UC(NPOIN2),VC(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ANAMAR
     &( UC  , VC  , ZM  , ZM1 , ZM2 , DZHDT , X  , Y  , NPOIN2 ,
     &  AT  , DDC , LT  )
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NPOIN2,LT
      DOUBLE PRECISION, INTENT(IN)    :: AT,DDC
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN2),Y(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: ZM1(NPOIN2),ZM2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: UC(NPOIN2),VC(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: DZHDT(NPOIN2),ZM(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ANAVEN
     &( UV , VV , X , Y , NPOIN2, AT , DDC , VX_CTE, VY_CTE)
      IMPLICIT NONE
      INTEGER  NPOIN2
      DOUBLE PRECISION AT    , DDC   , VX_CTE, VY_CTE
      DOUBLE PRECISION X (NPOIN2)    , Y (NPOIN2)
      DOUBLE PRECISION UV(NPOIN2)    , VV(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ANGLES(XLAMD , DTPLUS, DTMOIN)
      IMPLICIT NONE
      DOUBLE PRECISION XLAMD , DTPLUS, DTMOIN
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE BORNES(B , N , A , XM , X0 , X1 )
      IMPLICIT NONE
      INTEGER  N
      DOUBLE PRECISION B , A , XM , X0 , X1
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE CONDIW
     &( AT, LT , TC1, TC2, TV1, TV2, TM1, TM2 , 
     &  NVHMA,NVCOU,NVWIN,PART , U_TEL, V_TEL , H_TEL )
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: PART,LT
      INTEGER, INTENT(INOUT)          :: NVHMA,NVCOU,NVWIN
      DOUBLE PRECISION, INTENT(INOUT) :: AT,TC1,TC2,TV1,TV2,TM1,TM2
      TYPE(BIEF_OBJ), INTENT(IN)      :: U_TEL,V_TEL,H_TEL
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE CONW4D
     &(CX,CY,CT,CF,U,V,XK,CG,COSF,TGF,DEPTH,DZHDT,DZX,DZY,DUX,DUY,
     & DVX,DVY,FREQ,COSTET,SINTET,NPOIN2,NPLAN,JF,NF,PROINF,SPHE,
     & COURAN,MAREE,TRA01)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2,JF
      DOUBLE PRECISION, INTENT(INOUT) :: CX(NPOIN2,NPLAN,JF)
      DOUBLE PRECISION, INTENT(INOUT) :: CY(NPOIN2,NPLAN,JF)
      DOUBLE PRECISION, INTENT(INOUT) :: CT(NPOIN2,NPLAN,JF)
      DOUBLE PRECISION, INTENT(INOUT) :: CF(NPOIN2,NPLAN,JF)
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF)
      DOUBLE PRECISION, INTENT(IN)    :: CG(NPOIN2,NF),XK(NPOIN2,NF)
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2),DZHDT(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: U(NPOIN2),V(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: DZX(NPOIN2),DZY(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: DUX(NPOIN2),DUY(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: DVX(NPOIN2),DVY(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: COSTET(NPLAN),SINTET(NPLAN)
      DOUBLE PRECISION, INTENT(IN)    :: COSF(NPOIN2),TGF(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TRA01(NPOIN2)
      LOGICAL, INTENT(IN)             :: PROINF,SPHE,COURAN,MAREE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE CONWAC
     &( CX    , CY    , CT    , XK    , CG    , COSF  , TGF   , DEPTH ,
     &  DZX   , DZY   , FREQ  , COSTET, SINTET, NPOIN2, NPLAN , JF    ,
     &  NF    , PROINF, SPHE  , PROMIN, TRA01 )
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2,JF
      DOUBLE PRECISION, INTENT(IN)    :: PROMIN
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: DZX(NPOIN2),DZY(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: COSF(NPOIN2),TGF(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF)
      DOUBLE PRECISION, INTENT(IN)    :: COSTET(NPLAN),SINTET(NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: TRA01(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: CG(NPOIN2,NF),XK(NPOIN2,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: CX(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: CY(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: CT(NPOIN2,NPLAN)
      LOGICAL, INTENT(IN)             :: PROINF,SPHE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE CORMAR
     &( AT    , LT    , TC1   , TC2   , TV1   , TV2   , TM1   , TM2   ,
     &  NVHMA , NVCOU , PART, U_TEL, V_TEL , H_TEL )
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER          NVHMA, NVCOU,LT
      DOUBLE PRECISION AT,TC1,TC2,TV1,TV2,TM1,TM2
      INTEGER,           INTENT(IN) :: PART
      TYPE(BIEF_OBJ),    INTENT(IN) :: U_TEL,V_TEL,H_TEL
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        FUNCTION COUPLE
     &( XK1   , YK1   , XK2   , YK2   , XK3   , YK3   , XK4   , YK4   ,
     &  GRAVIT, PI    )
      IMPLICIT NONE
      DOUBLE PRECISION XK1   , YK1   , XK2   , YK2   , XK3   , YK3
      DOUBLE PRECISION XK4   , YK4   , GRAVIT, PI    , COUPLE
        END FUNCTION
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE COUUTI
     &(X,Y,NPOIN,NCOU,BINCOU,NBOR,NPTFR,AT,DDC,TC1,TC2,UC1,VC1,UC2,VC2)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NCOU,NPOIN,NPTFR
      INTEGER, INTENT(IN)             :: NBOR(NPTFR,2)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN),Y(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: UC1(NPOIN),VC1(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: UC2(NPOIN),VC2(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: AT,DDC,TC1,TC2
      CHARACTER(LEN=3), INTENT(IN)    :: BINCOU
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE CQUEUE
     &( NF    , RAISF , TAILF , JFRE  , JBIS  , COEF1 )
      IMPLICIT NONE
      INTEGER  NF    , JFRE  , JBIS
      DOUBLE PRECISION RAISF , TAILF , COEF1
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        FUNCTION DELFRA( SS    , DEUPI )
      IMPLICIT NONE
      DOUBLE PRECISION DELFRA, SS    , DEUPI
        END FUNCTION
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE DIFFRAC  
     &( CX    , CY    , CT    , XK    , CG    , DEPTH , DZX   , DZY   ,
     &  FREQ  , COSTET, SINTET, NPOIN2, NPLAN , IFF   , NF    , PROINF,
     &  SPHE  , A     , DFREQ , F     , CCG   , DIV   , DELTA , DDX   ,
     &  DDY   , EPS   , NBOR  , NPTFR , XKONPT, RK    , RX    , RY    ,
     &  RXX   , RYY   , NEIGB , NB_CLOSE, DIFFRA, MAXNSP, FLTDIF,OPTDER)
      USE BIEF_DEF
      IMPLICIT NONE 
      INTEGER, INTENT(IN) :: NF,NPLAN,NPOIN2,NPTFR,IFF,MAXNSP,OPTDER
      INTEGER, INTENT(IN) :: NB_CLOSE(NPOIN2),NEIGB(NPOIN2,MAXNSP) 
      INTEGER, INTENT(IN)             :: DIFFRA,NBOR(NPTFR) 
      DOUBLE PRECISION, INTENT(INOUT) :: CX(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: CY(NPOIN2,NPLAN) 
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF) 
      DOUBLE PRECISION, INTENT(INOUT) :: CT(NPOIN2,NPLAN) 
      DOUBLE PRECISION, INTENT(IN)    :: CG(NPOIN2,NF),XK(NPOIN2,NF) 
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: DZX(NPOIN2),DZY(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: COSTET(NPLAN),SINTET(NPLAN) 
      DOUBLE PRECISION, INTENT(INOUT) :: A(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: DFREQ(NF) 
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF) 
      DOUBLE PRECISION, INTENT(INOUT) :: CCG(NPOIN2), DIV(NPOIN2) 
      DOUBLE PRECISION, INTENT(INOUT) :: DELTA(NPOIN2) 
      DOUBLE PRECISION, INTENT(INOUT) :: DDX(NPOIN2), DDY(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: EPS 
      DOUBLE PRECISION, INTENT(IN)    :: RK(MAXNSP,NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: RX(MAXNSP,NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: RY(MAXNSP,NPOIN2)   
      DOUBLE PRECISION, INTENT(IN)    :: RXX(MAXNSP,NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: RYY(MAXNSP,NPOIN2) 
      DOUBLE PRECISION, INTENT(INOUT) :: XKONPT(NPOIN2)  
      LOGICAL, INTENT(IN)             :: PROINF,SPHE,FLTDIF 
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE DUMP2D( LT , XF1 , NP1 )
      IMPLICIT NONE
      INTEGER, INTENT(IN)          :: LT,NP1
      DOUBLE PRECISION, INTENT(IN) :: XF1(NP1)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ECRETE
     &( F     , DEPTH , NPOIN2, NPLAN , NF    , PROMIN)
      IMPLICIT NONE
      INTEGER          NPOIN2 , NPLAN, NF
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), DEPTH(NPOIN2)
      DOUBLE PRECISION PROMIN
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ECRSPE
     &( F     , TETA  , NPLAN , FREQ  , NF    , NK    ,
     &  NPOIN2, AT    , AUXIL , NOLEO , NLEO  , NSCO  ,
     &  BINSCO, DEBRES, TITCAS, DATE  , TIME  , KNOLG , MESH ,
     &  NSPE  , TISPEF)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NPOIN2,NLEO,NSCO,NF,NK,NPLAN
      INTEGER, INTENT(IN)             :: KNOLG(NPOIN2),NOLEO(NLEO)
      INTEGER, INTENT(IN)             :: DATE(3),TIME(3)
      DOUBLE PRECISION, INTENT(IN)    :: AT
      DOUBLE PRECISION, INTENT(INOUT) :: AUXIL(NPLAN,NK)
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)    :: TETA(NPLAN),FREQ(NF)
      LOGICAL, INTENT(IN)             :: DEBRES
      CHARACTER(LEN=72), INTENT(IN)   :: TITCAS
      CHARACTER(LEN=*) , INTENT(IN)   :: BINSCO
      TYPE(BIEF_MESH), INTENT(INOUT)  :: MESH 
      CHARACTER(LEN=144), INTENT(IN)  :: TISPEF  
      INTEGER, INTENT(IN)             :: NSPE  
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        SUBROUTINE F1F1F1
     &( F1SF  , NF1   , IQ_OM1)
      IMPLICIT NONE
      INTEGER,          INTENT(IN)    :: IQ_OM1
      INTEGER,          INTENT(INOUT) :: NF1
      DOUBLE PRECISION, INTENT(INOUT) :: F1SF(*)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        SUBROUTINE FILT_SA
        IMPLICIT NONE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        FUNCTION FONCRO
     &( X     , B     , N     , A     , XM    )
      IMPLICIT NONE
      INTEGER  N
      DOUBLE PRECISION X      , B     , A     , XM , FONCRO
        END FUNCTION
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FPREAD
     &( FREAD , F     , FREQ  , DFREQ , NF    , NPLAN , NPOIN2, EXPO  ,
     &  TAILF , DENOM , E     )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION EXPO  , TAILF
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), FREQ(NF), DFREQ(NF)
      DOUBLE PRECISION DENOM(NPOIN2), E(NPOIN2), FREAD(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FREM01
     &( FM01  , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN , NPOIN2,
     &  AUX1  , AUX2  )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION TAILF
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION FREQ(NF), DFREQ(NF), FM01(NPOIN2)
      DOUBLE PRECISION AUX1(NPOIN2), AUX2(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FREM02
     &( FM02  , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN , NPOIN2,
     &  AUX1  , AUX2  )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION TAILF
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION FREQ(NF), DFREQ(NF), FM02(NPOIN2)
      DOUBLE PRECISION AUX1(NPOIN2), AUX2(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FREMOY
     &( FMOY  , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN , NPOIN2,
     &  AUX1  , AUX2  )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION TAILF
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION FREQ(NF), DFREQ(NF), FMOY(NPOIN2)
      DOUBLE PRECISION AUX1(NPOIN2), AUX2(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FREPIC
     &( FPIC  , F     , FREQ  , NF    , NPLAN , NPOIN2, EMAX  , E     )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), FREQ(NF)  , FPIC(NPOIN2)
      DOUBLE PRECISION EMAX(NPOIN2),E(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
!V6P2 New subroutine
      INTERFACE
        SUBROUTINE FRMSET
     &( X     , Y     , NEIGB , NB_CLOSE, NPOIN2,MAXNSP, NRD, NELEM2,
     &  IKLE  , RK    , RX    , RY    , RXX   , RYY )
      IMPLICIT NONE
      INTEGER NPOIN2, MAXNSP, NRD, NELEM2
      INTEGER NB_CLOSE(NPOIN2), NEIGB(NPOIN2,MAXNSP)
      INTEGER IKLE(NELEM2,3)
      DOUBLE PRECISION X(NPOIN2), Y(NPOIN2)
      DOUBLE PRECISION RK(MAXNSP,NPOIN2)
      DOUBLE PRECISION RX(MAXNSP,NPOIN2), RY(MAXNSP,NPOIN2)  
      DOUBLE PRECISION RXX(MAXNSP,NPOIN2),RYY(MAXNSP,NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FSPRD1
     &( FRA   , DIREC , NPLAN , SPRED1, TETA1 , SPRED2, TETA2 , XLAMDA)
      IMPLICIT NONE
      INTEGER  NPLAN
      DOUBLE PRECISION SPRED1, TETA1 , SPRED2, TETA2 , XLAMDA
      DOUBLE PRECISION FRA(NPLAN)    , DIREC(NPLAN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FSPRD2
     &( FRA   , DIREC , NPLAN , SPRED1, TETA1 , SPRED2, TETA2 , XLAMDA)
      IMPLICIT NONE
      INTEGER  NPLAN
      DOUBLE PRECISION SPRED1, TETA1 , SPRED2, TETA2 , XLAMDA
      DOUBLE PRECISION FRA(NPLAN)    , DIREC(NPLAN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE FSPRD3
     &( FRA   , DIREC , NPLAN , SPRED1, TETA1 , SPRED2, TETA2 , XLAMDA)
      IMPLICIT NONE
      INTEGER  NPLAN
      DOUBLE PRECISION SPRED1, TETA1 , SPRED2, TETA2 , XLAMDA
      DOUBLE PRECISION FRA(NPLAN)    , DIREC(NPLAN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        FUNCTION GAMMLN
     &( XX    , DEUPI )
      IMPLICIT NONE
      DOUBLE PRECISION GAMMLN, XX    , DEUPI
        END FUNCTION
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        SUBROUTINE GAULEG
     &( W_LEG , X_LEG , NPOIN )
      IMPLICIT NONE
      INTEGER           NPOIN
      DOUBLE PRECISION  W_LEG(NPOIN) , X_LEG(NPOIN)
        END SUBROUTINE 
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE IMPR
     &(LISPRD,LT,AT,ISITS,ICOD)
      IMPLICIT NONE
      INTEGER LISPRD,LT,ISITS,ICOD
      DOUBLE PRECISION AT
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INIPHY
     &( XK    , CG    , B     , DEPTH , FREQ  , COSPHI, NPOIN2, NF    ,
     &  PROINF, SPHE  )
      IMPLICIT NONE
      INTEGER          NF    , NPOIN2
      DOUBLE PRECISION DEPTH(NPOIN2)    , COSPHI(NPOIN2), FREQ(NF)
      DOUBLE PRECISION B(NPOIN2,NF)  , XK(NPOIN2,NF) , CG(NPOIN2,NF)
      LOGICAL          PROINF, SPHE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INITAB(IBOR1,IFABOR1,NELEM2_DIM,PART)
      IMPLICIT NONE
      INTEGER, INTENT(IN)    :: PART,NELEM2_DIM
      INTEGER, INTENT(IN)    :: IFABOR1(NELEM2_DIM,3)
      INTEGER, INTENT(INOUT) :: IBOR1(NELEM2_DIM,7)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INTANG
     &( LAVANT, LAPRES, IPLAN , NPLAN , DELTAD)
      IMPLICIT NONE
      INTEGER  LAVANT, LAPRES, NPLAN , IPLAN
      DOUBLE PRECISION DELTAD
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        DOUBLE PRECISION FUNCTION KERBOU
     &(XK1,XK2,FREQ1,FREQ2,DEPTH,TETA1,TETA2)
      IMPLICIT NONE
      DOUBLE PRECISION, INTENT(IN) :: XK1,XK2,FREQ1,FREQ2,TETA1,TETA2
      DOUBLE PRECISION, INTENT(IN) :: DEPTH
        END FUNCTION
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE KMOYEN
     &( XKMOY , XK    , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN ,
     &  NPOIN2, AUX1  , AUX2  , AUX3  )
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(IN)    :: TAILF
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)    :: XK(NPOIN2,NF)
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF),DFREQ(NF) 
      DOUBLE PRECISION, INTENT(INOUT) :: AUX1(NPOIN2),AUX2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: AUX3(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: XKMOY(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE LECDOI
     &(F1,NAME1FR,NAME1GB,MODE1,
     & F2,NAME2FR,NAME2GB,MODE2,
     & F3,NAME3FR,NAME3GB,MODE3,
     & X,Y,NPOIN2,NDON,BINDON,NBOR,NPTFR,
     & AT,DDC,TV1,TV2,F11,F12,F21,F22,F31,F32,INDIC,CHDON,NVAR,
     & TEXTE,TROUVE,UNITIME,PHASTIME)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NDON,NPOIN2,NPTFR,INDIC
      INTEGER, INTENT(IN)             :: MODE1,MODE2,MODE3
      INTEGER, INTENT(INOUT)          :: NVAR
      INTEGER, INTENT(IN)             :: NBOR(NPTFR,2)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN2),Y(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F1(NPOIN2),F2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F3(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F11(NPOIN2),F12(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F21(NPOIN2),F22(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F31(NPOIN2),F32(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: AT,DDC,UNITIME,PHASTIME
      DOUBLE PRECISION, INTENT(INOUT) :: TV1,TV2
      CHARACTER(LEN=3), INTENT(IN)    :: BINDON
      CHARACTER(LEN=7), INTENT(IN)    :: CHDON
      CHARACTER(LEN=32),INTENT(IN)    :: NAME1FR,NAME2FR,NAME3FR
      CHARACTER(LEN=32),INTENT(IN)    :: NAME1GB,NAME2GB,NAME3GB
      CHARACTER(LEN=32),INTENT(INOUT) :: TEXTE(30)
      LOGICAL, INTENT(INOUT)          :: TROUVE(3)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE LECDON
     &(F1,NAME1FR,NAME1GB,MODE1,
     & F2,NAME2FR,NAME2GB,MODE2,
     & F3,NAME3FR,NAME3GB,MODE3,
     & X,Y,NPOIN2,NDON,BINDON,NBOR,NPTFR,NPTT,INDIC,CHDON,TEXTE,TROUVE)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NDON,NPOIN2,NPTFR,INDIC,NPTT
      INTEGER, INTENT(IN)             :: MODE1,MODE2,MODE3
      INTEGER, INTENT(IN)             :: NBOR(NPTFR,2)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN2),Y(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F1(NPOIN2),F2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F3(NPOIN2)
      CHARACTER(LEN=3), INTENT(IN)    :: BINDON
      CHARACTER(LEN=7), INTENT(IN)    :: CHDON
      CHARACTER(LEN=32),INTENT(IN)    :: NAME1FR,NAME2FR,NAME3FR
      CHARACTER(LEN=32),INTENT(IN)    :: NAME1GB,NAME2GB,NAME3GB
      CHARACTER(LEN=32),INTENT(INOUT) :: TEXTE(30)
      LOGICAL, INTENT(INOUT)          :: TROUVE(3)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE LECDON_TOMAWAC(FILE_DESC,PATH,NCAR,CODE)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, PARAMETER :: NMAX = 300
      CHARACTER(LEN=24), INTENT(IN)     :: CODE
      CHARACTER(LEN=144), INTENT(INOUT) :: FILE_DESC(4,NMAX)
      INTEGER, INTENT(IN)               :: NCAR
      CHARACTER(LEN=250), INTENT(IN)    :: PATH
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE LECSUI
     &(F,NPLAN,NF,TETA,FREQ,NELEM2,NPOIN2,AT,UC,VC,UC1,VC1,UC2,VC2,
     & UV,VV,UV1,VV1,UV2,VV2,VENT,TV1,TV2,COURAN,NPRE,BINPRE,DEPTH,
     & TC1,TC2,ZM1,ZM2,DZHDT,TM1,TM2,MAREE,TRA01)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NPRE,NF,NPLAN,NELEM2,NPOIN2
      DOUBLE PRECISION, INTENT(INOUT) :: F(NPOIN2,NPLAN,NF),AT
      DOUBLE PRECISION, INTENT(INOUT) :: TV1,TV2,TC1,TC2,TM1,TM2
      DOUBLE PRECISION, INTENT(INOUT) :: TETA(NPLAN+1),FREQ(NF)
      DOUBLE PRECISION, INTENT(INOUT) :: UC(NPOIN2),VC(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: UV(NPOIN2),VV(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: UV1(NPOIN2),VV1(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: UV2(NPOIN2),VV2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: UC1(NPOIN2),VC1(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: UC2(NPOIN2),VC2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: DEPTH(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: ZM1(NPOIN2),ZM2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: DZHDT(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TRA01(NPOIN2*NPLAN)
      LOGICAL, INTENT(IN)             :: COURAN,VENT,MAREE
      CHARACTER(LEN=3), INTENT(IN)    :: BINPRE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE LIMWAC
     &(F     , FBOR  , LIFBOR, NPTFR , NPLAN , NF    ,  TETA , FREQ  ,
     & NPOIN2, NBOR  , AT    , LT    , DDC   , LIMSPE, FPMAXL, FETCHL,
     & SIGMAL, SIGMBL, GAMMAL, FPICL , HM0L  , APHILL, TETA1L, SPRE1L,
     & TETA2L, SPRE2L, XLAMDL, X ,Y  , KENT  , KSORT , NFO1  , NBI1  ,
     & BINBI1, UV    , VV    , SPEULI, VENT  , VENSTA, GRAVIT, DEUPI ,
     & PRIVE , NPRIV , SPEC  , FRA   , DEPTH , FRABL ,BOUNDARY_COLOUR)
      IMPLICIT NONE
      INTEGER NPTFR,NPLAN,NF,NPOIN2,LT,NPRIV,LIMSPE,KENT,KSORT,FRABL
      INTEGER NFO1,NBI1
      INTEGER LIFBOR(NPTFR),NBOR(NPTFR)
      INTEGER, INTENT(IN) :: BOUNDARY_COLOUR(NPTFR)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF),FBOR(NPTFR,NPLAN,NF)
      DOUBLE PRECISION TETA(NPLAN),FREQ(NF),X(NPOIN2),Y(NPOIN2)
      DOUBLE PRECISION UV(NPOIN2),VV(NPOIN2), SPEC(NF), FRA(NPLAN)
      DOUBLE PRECISION PRIVE(NPOIN2,NPRIV),DEPTH(NPOIN2)
      DOUBLE PRECISION AT,DDC,FPMAXL,FETCHL,SIGMAL, SIGMBL, GAMMAL,FPICL
      DOUBLE PRECISION HM0L  , APHILL,TETA1L,SPRE1L,TETA2L,SPRE2L,XLAMDL
      DOUBLE PRECISION GRAVIT,DEUPI
      LOGICAL SPEULI, VENT, VENSTA
      CHARACTER(LEN=3) BINBI1
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE MARUTI
     &(X,Y,NPOIN,NMAR,BINMAR,NBOR,NPTFR,AT,DDC,TV1,TV2,Z1,Z2)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NMAR,NPOIN,NPTFR
      INTEGER, INTENT(IN)             :: NBOR(NPTFR,2)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN),Y(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: Z1(NPOIN),Z2(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: AT,DDC,TV1,TV2
      CHARACTER(LEN=3), INTENT(IN)    :: BINMAR
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE MPOINT
     &( U     , V     , W     , DT    , X     , Y     , TETA  , IKLE2 ,
     &  IFABOR, ETAS  , XPLOT , YPLOT , ZPLOT , DX    , DY    , DZ    ,
     &  SHP   , SHZ   , ELT   , ETA   , NSP   , NPLOT ,
     &  NPOIN2, NELEM2, NPLAN , IFF   , SURDET, SENS  , ISO )
      IMPLICIT NONE
      INTEGER NPOIN2, NELEM2, NPLAN, NPLOT, SENS, IFF
      INTEGER ELT(NPLOT), ETA(NPLOT), NSP(NPLOT), ISO(NPLOT)
      INTEGER IKLE2(NELEM2,3), IFABOR(NELEM2,5), ETAS(NPLAN)
      DOUBLE PRECISION DT
      DOUBLE PRECISION U(NPOIN2,NPLAN), V(NPOIN2,NPLAN)
      DOUBLE PRECISION W(NPOIN2,NPLAN)
      DOUBLE PRECISION XPLOT(NPLOT), YPLOT(NPLOT), ZPLOT(NPLOT)
      DOUBLE PRECISION SHZ(NPLOT),SURDET(NELEM2),SHP(3,NPLOT)
      DOUBLE PRECISION X(NPOIN2), Y(NPOIN2), TETA(NPLAN+1)
      DOUBLE PRECISION DX(NPLOT), DY(NPLOT), DZ(NPLOT)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE NOMVAR_TOMAWAC
     &(TEXTE,TEXTPR,MNEMO,MAXVAR)
      IMPLICIT NONE
      INTEGER      MAXVAR
      CHARACTER*32 TEXTE(MAXVAR),TEXTPR(MAXVAR)
      CHARACTER*8  MNEMO(MAXVAR)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE NOUDON
     &(F1,NAME1FR,NAME1GB,MODE1,
     & F2,NAME2FR,NAME2GB,MODE2,
     & F3,NAME3FR,NAME3GB,MODE3,X,Y,NPOIN,NDON,BINDON,NBOR,NPTFR,
     & AT,DDC,TV1,TV2,F11,F12,F21,F22,F31,F32,INDIC,CHDON,NVAR,TEXTE,
     & TROUVE,UNITIME,PHASTIME)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NDON,NPOIN,NPTFR,INDIC,NVAR
      INTEGER, INTENT(IN)             :: MODE1,MODE2,MODE3
      INTEGER, INTENT(IN)             :: NBOR(NPTFR,2)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN),Y(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: F1(NPOIN),F2(NPOIN),F3(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: F11(NPOIN),F21(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: F12(NPOIN),F22(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: F31(NPOIN),F32(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: AT,DDC,UNITIME,PHASTIME
      DOUBLE PRECISION, INTENT(INOUT) :: TV1,TV2
      CHARACTER(LEN=3), INTENT(IN)    :: BINDON
      CHARACTER(LEN=7), INTENT(IN)    :: CHDON
      CHARACTER(LEN=32),INTENT(IN)    :: NAME1FR,NAME2FR,NAME3FR
      CHARACTER(LEN=32),INTENT(IN)    :: NAME1GB,NAME2GB,NAME3GB
      CHARACTER(LEN=32),INTENT(IN)    :: TEXTE(30)
      LOGICAL, INTENT(INOUT)          :: TROUVE(3)
!
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE P_READ2(BUFFER,NBYTES,SOURCE,TYPE)
      IMPLICIT NONE
      INTEGER NBYTES, SOURCE, TYPE
      INTEGER BUFFER(*)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE P_WRIT2(BUFFER, NBYTES, DEST, TYPE)
      IMPLICIT NONE
      INTEGER NBYTES,DEST,TYPE
      INTEGER BUFFER(*)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        SUBROUTINE PREDIF 
     &(CX    , CY    , CT    , DT    , X     , Y     , TETA  , COSTET, 
     & SINTET, FREQ  , IKLE2 , IFABOR, ETAP1 , TRA01 , SHP   ,  
     & SHZ   , ELT   , ETA   , DEPTH , DZX   , DZY   , XK    ,  
     & CG    , ITR01 , NPOIN3, NPOIN2, NELEM2, NPLAN , NF    , SURDET,  
     & COURAN, SPHE  , PROINF, A     , DFREQ , F     , CCG   , DIV   ,  
     & DELTA , DDX   , DDY   , EPS   , NBOR  , NPTFR , XKONPT, RK    ,  
     & RX    , RY    , RXX   , RYY   , NEIGB , NB_CLOSE,DIFFRA,MAXNSP,  
     & FLTDIF, MESH3D, MESH  , IELM3 , TB    , ISUB  , SIKLE2)  
      USE BIEF_DEF
      IMPLICIT NONE    
      INTEGER NPOIN3,NPOIN2,NELEM2,NPLAN,NF,NPTFR,MAXNSP,IELM3 
      INTEGER NBOR(NPTFR),DIFFRA 
      INTEGER ITR01(NPOIN3,3) 
      INTEGER ELT(NPOIN3,NF),ETA(NPOIN3,NF) 
      INTEGER IKLE2(NELEM2,3),IFABOR(NELEM2,7),ETAP1(NPLAN) 
      INTEGER NB_CLOSE(NPOIN2),NEIGB(NPOIN2,MAXNSP) 
      INTEGER, INTENT(INOUT) :: ISUB(NPOIN3,NF)
      DOUBLE PRECISION RK(MAXNSP,NPOIN2) 
      DOUBLE PRECISION RX(MAXNSP,NPOIN2),RY(MAXNSP,NPOIN2)   
      DOUBLE PRECISION RXX(MAXNSP,NPOIN2),RYY(MAXNSP,NPOIN2) 
      DOUBLE PRECISION X(NPOIN2),Y(NPOIN2) 
      DOUBLE PRECISION XK(NPOIN2,NF),CG(NPOIN2,NF) 
      DOUBLE PRECISION FREQ(NF) 
      DOUBLE PRECISION SINTET(NPLAN),COSTET(NPLAN) 
      DOUBLE PRECISION SURDET(NELEM2) 
      DOUBLE PRECISION DT,EPS 
      DOUBLE PRECISION TRA01(NPOIN3,8) 
      DOUBLE PRECISION DEPTH(NPOIN2),DZX(NPOIN2),DZY(NPOIN2) 
      DOUBLE PRECISION DDX(NPOIN2),DDY(NPOIN2),A(NPOIN2) 
      DOUBLE PRECISION DFREQ(NF)       
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF) 
      DOUBLE PRECISION CCG(NPOIN2),DIV(NPOIN2) 
      DOUBLE PRECISION DELTA(NPOIN2),XKONPT(NPOIN2) 
      LOGICAL COURAN,SPHE,PROINF,FLTDIF
      TYPE(BIEF_OBJ), INTENT(IN)    :: TETA,SIKLE2
      TYPE(BIEF_OBJ), INTENT(INOUT) :: SHP,SHZ,CX,CY,CT,TB
      TYPE(BIEF_MESH),INTENT(INOUT) :: MESH3D,MESH 
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PRELEO_MPI
     &(XLEO,YLEO,NLEO,X,Y,IKLE,SURDET,NPOIN2,NELEM2,NOLEO,ISLEO)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER NLEO,NPOIN2,NELEM2
      INTEGER IKLE(NELEM2,3),NOLEO(NLEO)
      DOUBLE PRECISION X(NPOIN2),Y(NPOIN2),XLEO(NLEO),YLEO(NLEO)
      DOUBLE PRECISION SURDET(NELEM2)
      LOGICAL ISLEO(NLEO)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PRELEO
     &(XLEO,YLEO,NLEO,X,Y,NPOIN2,NOLEO)
      IMPLICIT NONE
      INTEGER NLEO,NPOIN2
      INTEGER NOLEO(NLEO)
      DOUBLE PRECISION X(NPOIN2),Y(NPOIN2),XLEO(NLEO),YLEO(NLEO)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PRENL1
     &( IANGNL, COEFNL, NPLAN , NF    , RAISF , XLAMD )
      IMPLICIT NONE
      INTEGER  NPLAN , NF
      INTEGER  IANGNL(NPLAN,8)
      DOUBLE PRECISION COEFNL(16)
      DOUBLE PRECISION RAISF , XLAMD
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
!V6P1 New subroutine
      INTERFACE
        SUBROUTINE PRENL2
     &( IANGNL, COEFNL, NPLAN , NF    , RAISF , XLAMD , XMU   )
      IMPLICIT NONE
      INTEGER  NPLAN , NF
      INTEGER  IANGNL(NPLAN,16)
      DOUBLE PRECISION RAISF , XLAMD , XMU
      DOUBLE PRECISION COEFNL(32)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
!V6P1 New subroutine
      INTERFACE
        SUBROUTINE PRENL3
     &( NF    , NT    , RAISF , TAILF , FREQ  , TB_SCA, LBUF  , DIMBUF,
     &  F_POIN, F_COEF, T_POIN, F_PROJ, IQ_OM1, NQ_TE1, NQ_OM2, NF1   ,
     &  NT1   , K_IF1 , K_IF2 , K_IF3 , TB_V14, TB_V24, TB_V34, K_1P  , 
     &  K_1M  , K_1P2P, K_1P3M, K_1P2M, K_1P3P, K_1M2P, K_1M3M, K_1M2M,
     &  K_1M3P, TB_TPM, TB_TMP, TB_FAC, SEUIL1, SEUIL2, ELIM  , NCONF ,
     &  NCONFM, IDCONF)
      IMPLICIT NONE
      INTEGER           NF    , NT
      DOUBLE PRECISION  RAISF , TAILF , FREQ(NF)
      INTEGER           LBUF  , DIMBUF
      INTEGER           F_POIN(DIMBUF), T_POIN(DIMBUF)
      DOUBLE PRECISION  F_COEF(DIMBUF), F_PROJ(DIMBUF), TB_SCA(DIMBUF)
      INTEGER           IQ_OM1 , NQ_TE1, NQ_OM2
      INTEGER           NF1   , NT1
      INTEGER           K_IF1(NF1), K_1P(NT1,NF1), K_1M(NT1,NF1)
      DOUBLE PRECISION  TB_V14(NF1)
      INTEGER           K_IF2 (NQ_OM2,NT1,NF1), K_IF3 (NQ_OM2,NT1,NF1)
      INTEGER           K_1P2P(NQ_OM2,NT1,NF1), K_1P3M(NQ_OM2,NT1,NF1)
      INTEGER           K_1P2M(NQ_OM2,NT1,NF1), K_1P3P(NQ_OM2,NT1,NF1)
      INTEGER           K_1M2P(NQ_OM2,NT1,NF1), K_1M3M(NQ_OM2,NT1,NF1)
      INTEGER           K_1M2M(NQ_OM2,NT1,NF1), K_1M3P(NQ_OM2,NT1,NF1)
      DOUBLE PRECISION  TB_V24(NQ_OM2,NT1,NF1), TB_V34(NQ_OM2,NT1,NF1)
      DOUBLE PRECISION  TB_TPM(NQ_OM2,NT1,NF1), TB_TMP(NQ_OM2,NT1,NF1)
      DOUBLE PRECISION  TB_FAC(NQ_OM2,NT1,NF1)
      DOUBLE PRECISION  SEUIL1, SEUIL2, ELIM
      INTEGER           NCONF , NCONFM, IDCONF(NCONFM,3)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PREPRO
     &( CX    , CY    , CT    , CF    , DT    , X     , Y     ,
     &  TETA  , COSTET, SINTET, FREQ  , IKLE2 , IFABOR, ETAP1 , TRA01 ,
     &  SHP   , SHZ   , SHF   , ELT   , ETA   , FRE   ,
     &  DEPTH , DZHDT , DZX   , DZY   , U     , V     , DUX   , DUY   ,
     &  DVX   , DVY   , XK    , CG    , COSF  , TGF   , ITR01 , NPOIN3,
     &  NPOIN2, NELEM2, NPLAN , NF    , SURDET, COURAN, SPHE  ,
     &  PROINF, PROMIN, MESH  , MESH3D,SIKLE2,TB,IELM3, DIFFRA,
     &  MAREE , ISUB)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)    :: NPOIN3,NPOIN2,NELEM2,NPLAN,NF,DIFFRA
      INTEGER, INTENT(INOUT) :: IELM3
      DOUBLE PRECISION, INTENT(IN) :: DT,PROMIN
      DOUBLE PRECISION DZHDT(NPOIN2)
      DOUBLE PRECISION X(NPOIN2),Y(NPOIN2)
      DOUBLE PRECISION XK(NPOIN2,NF),CG(NPOIN2,NF)
      DOUBLE PRECISION SINTET(NPLAN),COSTET(NPLAN)
      DOUBLE PRECISION COSF(NPOIN2),TGF(NPOIN2)
      DOUBLE PRECISION DEPTH(NPOIN2),DZX(NPOIN2),DZY(NPOIN2)
      DOUBLE PRECISION U(NPOIN2),DUX(NPOIN2),DUY(NPOIN2)
      DOUBLE PRECISION V(NPOIN2),DVX(NPOIN2),DVY(NPOIN2)
      DOUBLE PRECISION SURDET(NELEM2)
      DOUBLE PRECISION, INTENT(INOUT) :: TRA01(NPOIN3,6)
      INTEGER, INTENT(INOUT) :: ELT(NPOIN3,NF),ETA(NPOIN3,NF)
      INTEGER, INTENT(INOUT) :: ISUB(NPOIN3,NF)
      INTEGER, INTENT(INOUT) :: FRE(NPOIN3,NF)
      INTEGER, INTENT(IN)    :: IKLE2(NELEM2,3)
      INTEGER, INTENT(IN)    :: ETAP1(NPLAN)
      INTEGER, INTENT(INOUT) :: ITR01(NPOIN3,3),IFABOR(NELEM2,7)
      LOGICAL, INTENT(IN)    :: COURAN,SPHE,PROINF,MAREE
      TYPE(BIEF_OBJ), INTENT(INOUT) :: SHP,SHZ,SHF,CX,CY,CT,CF,TB
      TYPE(BIEF_OBJ), INTENT(IN)    :: SIKLE2,TETA,FREQ
      TYPE(BIEF_MESH), INTENT(INOUT):: MESH,MESH3D
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PREQT2
     &( TETA  , NPLAN , BDISPB, BDSSPB, NBD , INDI )
      IMPLICIT NONE
      INTEGER           NPLAN,NBD
      INTEGER           INDI(NPLAN)
      DOUBLE PRECISION  BDISPB , BDSSPB
      DOUBLE PRECISION  TETA(NPLAN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PROPA
     &(F,B,SHP,SHZ,SHF,ELT,ETA,FRE,IKLE_EXT,NPOIN3,NPOIN2,
     & NPLAN,NF,COURAN,TRA01,TRA02,ITR01,T3_01,T3_02,ISUB,MESH3D)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER NPOIN3,NPOIN2,NPLAN,NF
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN) :: B(NPOIN2,NF)
      DOUBLE PRECISION TRA01(NPOIN3,8)
      INTEGER, INTENT(INOUT) :: ELT(NPOIN3,NF),ETA(NPOIN3,NF)
      INTEGER, INTENT(INOUT) :: FRE(NPOIN3,NF)
      INTEGER, INTENT(IN)    :: ISUB(NPOIN3,NF)
      INTEGER, INTENT(INOUT) :: ITR01(NPOIN3*3)
      LOGICAL, INTENT(IN)            :: COURAN
      TYPE(BIEF_OBJ), INTENT(INOUT)  :: SHP,SHZ,SHF,T3_01,T3_02,TRA02
      TYPE(BIEF_OBJ), INTENT(IN)     :: IKLE_EXT
      TYPE(BIEF_MESH), INTENT(INOUT) :: MESH3D
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        FUNCTION QBBJ78( B     , IQBBJ )
      IMPLICIT NONE
      DOUBLE PRECISION QBBJ78, B
      INTEGER  IQBBJ
        END FUNCTION
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QBREK1
     &( TSTOT , TSDER , F     , FCAR  , VARIAN, DEPTH , ALFABJ, GAMBJ1,
     &  GAMBJ2, IQBBJ , IHMBJ , NF    , NPLAN , NPOIN2, BETA  )
      IMPLICIT NONE
      INTEGER IQBBJ,IHMBJ,NF,NPLAN,NPOIN2
      DOUBLE PRECISION ALFABJ,GAMBJ1,GAMBJ2
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), VARIAN(NPOIN2),FCAR(NPOIN2)
      DOUBLE PRECISION DEPTH(NPOIN2), BETA(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QBREK2
     &( TSTOT , TSDER , F     , FCAR  , VARIAN, DEPTH , BORETG, GAMATG,
     &  IWHTG , NF    , NPLAN , NPOIN2, BETA  )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2, IWHTG
      DOUBLE PRECISION BORETG, GAMATG
      DOUBLE PRECISION DEPTH(NPOIN2), BETA(NPOIN2), FCAR(NPOIN2)
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION     F(NPOIN2,NPLAN,NF), VARIAN(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QBREK3
     &( TSTOT , TSDER , F     , FCAR  , VARIAN, DEPTH , ALFARO, GAMARO,
     &  GAM2RO, IEXPRO, IDISRO, NF    , NPLAN , NPOIN2, BETA  )
      IMPLICIT NONE
      INTEGER IEXPRO, IDISRO, NF    , NPLAN , NPOIN2
      DOUBLE PRECISION ALFARO, GAMARO, GAM2RO
      DOUBLE PRECISION DEPTH(NPOIN2), BETA(NPOIN2), FCAR(NPOIN2)
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), VARIAN(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QBREK4
     &( TSTOT , TSDER , F     , FCAR  , VARIAN, DEPTH , BETAIH, EM2SIH,
     &  GRAVIT, NF    , NPLAN , NPOIN2, BETA  )
      IMPLICIT NONE
      INTEGER          NF    , NPLAN , NPOIN2
      DOUBLE PRECISION BETAIH, EM2SIH, GRAVIT
      DOUBLE PRECISION DEPTH(NPOIN2), BETA(NPOIN2), FCAR(NPOIN2)
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), VARIAN(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QFROT1
     &( TSTOT , TSDER , F     , XK    , DEPTH , CFROT1, GRAVIT, NF    ,
     &  NPLAN , NPOIN2, BETA  )
      IMPLICIT NONE
      INTEGER  NF , NPLAN , NPOIN2
      DOUBLE PRECISION CFROT1, GRAVIT
      DOUBLE PRECISION DEPTH(NPOIN2), BETA(NPOIN2)
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF),    XK(NPOIN2,NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        FUNCTION QGAUSS
     &( B     , N     , A     , XM    )
      IMPLICIT NONE
      INTEGER  N
      DOUBLE PRECISION QGAUSS
      DOUBLE PRECISION B , A , XM
        END FUNCTION
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QMOUT1
     &( TSTOT , TSDER , F     , XK    , ENRJ  , FREQ  , FMOY  , XKMOY ,
     &  PROINF, CMOUT1, CMOUT2, NF  , NPLAN , NPOIN2, TAUX1   , BETA  )
!
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(IN)    :: CMOUT1,CMOUT2
      DOUBLE PRECISION, INTENT(IN)    :: XKMOY(NPOIN2),ENRJ(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF),FMOY(NPOIN2) 
      DOUBLE PRECISION, INTENT(INOUT) :: TAUX1(NPOIN2),BETA(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TSTOT(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)    :: XK(NPOIN2,NF)
      LOGICAL, INTENT(IN)             :: PROINF
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        SUBROUTINE QMOUT2
     *( TSTOT , TSDER , F     , XK    , ENRJ  , FREQ  , FMOY  , XKMOY , 
     *  USOLD , USNEW , DEPTH , PROINF, CMOUT3, CMOUT4, CMOUT5, CMOUT6,
     *  NF    , NPLAN , NPOIN2, CIMPLI, TAUX1 ,F_INT  , BETOTO, BETOTN)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(IN)    :: CMOUT3,CMOUT4
      DOUBLE PRECISION, INTENT(IN)    :: CMOUT5,CMOUT6,CIMPLI
      DOUBLE PRECISION, INTENT(IN)    :: USNEW(NPOIN2),USOLD(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF),DEPTH(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: FMOY(NPOIN2),XK(NPOIN2,NF) 
      DOUBLE PRECISION, INTENT(IN)    :: ENRJ(NPOIN2),XKMOY(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: F_INT(NPOIN2),TAUX1(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: BETOTO(NPOIN2),BETOTN(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TSTOT(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: F(NPOIN2,NPLAN,NF)
      LOGICAL, INTENT(IN)             :: PROINF
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!=======================================================================
!VBA AJOUT SUBROUTINE QVEG1
!=======================================================================
      INTERFACE
        SUBROUTINE QVEG1
     &( TSTOT , TSDER , F , VARIAN , DEPTH, FMOY , 
     &  XKMOY , NF    , NPLAN  , NPOIN2   , BETA  )
!
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(IN)    :: XKMOY(NPOIN2),VARIAN(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2),FMOY(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: BETA(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TSTOT(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF)
        END SUBROUTINE
      END INTERFACE
!
!=========================================================================
!VBA FIN AJOUT SUBROUTINE QVEG1
!=========================================================================
!
      INTERFACE
        SUBROUTINE QNLIN1
     &( TSTOT , TSDER , IANGNL, COEFNL, NF    , NPLAN , F1    , RAISF ,
     &  TAILF , PROINF, NPOIN2, F     , DEPTH , XKMOY , TAUX1 , TAUX2 ,
     &  TAUX3 , TAUX4 , TAUX5 , DFINI )
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NPOIN2,NPLAN,NF
      INTEGER, INTENT(IN)             :: IANGNL(NPLAN,8)
      DOUBLE PRECISION, INTENT(IN)    :: F1,RAISF,TAILF
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF),COEFNL(16)
      DOUBLE PRECISION, INTENT(IN)    :: XKMOY(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TSTOT(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: TAUX1(NPOIN2),TAUX2(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TAUX3(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TAUX4(NPOIN2),TAUX5(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: DFINI(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2)
      LOGICAL, INTENT(IN)             :: PROINF
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
!V6P1 New subroutine
      INTERFACE
        SUBROUTINE QNLIN2
     &( TSTOT , TSDER , IANGNL, COEFNL, NF    , NPLAN , F1    , RAISF ,
     &  TAILF , PROINF, NPOIN2, F     , DEPTH , XKMOY , TAUX1 , DFINI ,
     &  XCOEF )
      IMPLICIT NONE
      INTEGER  NPOIN2, NPLAN , NF
      INTEGER  IANGNL(NPLAN,16)
      DOUBLE PRECISION F1  , RAISF , TAILF
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), COEFNL(32), XCOEF
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION TAUX1(NPOIN2), DFINI(NPOIN2), DEPTH(NPOIN2)
      DOUBLE PRECISION XKMOY(NPOIN2)
      LOGICAL  PROINF
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
!V6P1 New subroutine
      INTERFACE
        SUBROUTINE QNLIN3
     &( TSTOT , TSDER , F     , NB_NOD, FREQ  , TETA  , NT    , NF    ,
     &  RAISF , TAILF , SEUIL , FSEUIL, LBUF  , DIMBUF, F_POIN, F_COEF,
     &  F_PROJ, T_POIN, TB_SCA, NQ_TE1, NQ_OM2, NF1   , NT1   , DFREQ ,
     &  K_IF1 , K_IF2 , K_IF3 , TB_V14, TB_V24, TB_V34, K_1P  , K_1M  ,
     &  K_1P2P, K_1P3M, K_1P2M, K_1P3P, K_1M2P, K_1M3M, K_1M2M, K_1M3P,
     &  TB_TPM, TB_TMP, TB_FAC, NCONF , NCONFM, IDCONF)
      IMPLICIT NONE
      INTEGER           NF    , NT    , NB_NOD
      DOUBLE PRECISION  TAILF , RAISF , SEUIL
      DOUBLE PRECISION  FREQ(NF), DFREQ(NF), TETA(NT), FSEUIL(NB_NOD)
      DOUBLE PRECISION  F(NB_NOD,NT,NF), TSTOT(NB_NOD,NT,NF)
      DOUBLE PRECISION  TSDER(NB_NOD,NT,NF)
      INTEGER           LBUF  , DIMBUF
      INTEGER           F_POIN(DIMBUF), T_POIN(DIMBUF)
      DOUBLE PRECISION  F_COEF(DIMBUF), F_PROJ(DIMBUF), TB_SCA(DIMBUF)
      INTEGER           NQ_TE1, NQ_OM2, NF1   , NT1
      INTEGER           K_IF1(NF1), K_1P(NT1,NF1), K_1M(NT1,NF1)
      INTEGER           K_IF2 (NQ_OM2,NT1,NF1), K_IF3 (NQ_OM2,NT1,NF1)
      INTEGER           K_1P2P(NQ_OM2,NT1,NF1), K_1P3M(NQ_OM2,NT1,NF1)
      INTEGER           K_1P2M(NQ_OM2,NT1,NF1), K_1P3P(NQ_OM2,NT1,NF1)
      INTEGER           K_1M2P(NQ_OM2,NT1,NF1), K_1M3M(NQ_OM2,NT1,NF1)
      INTEGER           K_1M2M(NQ_OM2,NT1,NF1), K_1M3P(NQ_OM2,NT1,NF1)
      DOUBLE PRECISION  TB_V14(NF1)           , TB_FAC(NQ_OM2,NT1,NF1)
      DOUBLE PRECISION  TB_V24(NQ_OM2,NT1,NF1), TB_V34(NQ_OM2,NT1,NF1)
      DOUBLE PRECISION  TB_TPM(NQ_OM2,NT1,NF1), TB_TMP(NQ_OM2,NT1,NF1)
      INTEGER           NCONF , NCONFM, IDCONF(NCONFM,3)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
       SUBROUTINE QTRIA1
     &( F     , XK    , FREQ  , DEPTH , RAISF , ALFLTA, RFMLTA,
     &  NF    , NPLAN , NPOIN2, TSTOT , TSDER , FTOT  , FMOY  )
      IMPLICIT NONE
      INTEGER  NF, NPLAN, NPOIN2
      DOUBLE PRECISION  RAISF , ALFLTA, RFMLTA
      DOUBLE PRECISION  F(NPOIN2,NPLAN,NF), XK(NPOIN2,NF)
      DOUBLE PRECISION  FREQ(NF), DEPTH(NPOIN2)
      DOUBLE PRECISION  TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION  FTOT(NPOIN2) , FMOY(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QTRIA2
     &( F     , XK    , FREQ  , DFREQ , DEPTH , TETA  , SINTET, COSTET ,
     &  KSPB  , BDISPB, BDSSPB, RAISF , NF    , NPLAN , NPOIN2 ,
     &  NBD   , INDI  , TSTOT , TSDER )
      IMPLICIT NONE
      INTEGER  NF, NPLAN, NPOIN2, NBD
      INTEGER           INDI(NBD)
      DOUBLE PRECISION  BDISPB , BDSSPB, KSPB  , RAISF
      DOUBLE PRECISION  F(NPOIN2,NPLAN,NF), XK(NPOIN2,NF)
      DOUBLE PRECISION  DFREQ(NF) , FREQ(NF), DEPTH(NPOIN2)
      DOUBLE PRECISION  TETA(NPLAN) , SINTET(NPLAN) , COSTET(NPLAN)
      DOUBLE PRECISION  TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QWIND1
     &( TSTOT , TSDER , F     , XK    , FREQ  , USOLD , USNEW , TWOLD ,
     &  TWNEW , Z0OLD , Z0NEW , TETA  , ROAIR , ROEAU , BETAM , XKAPPA,
     &  DECAL , GRAVIT, NF    , NPLAN , NPOIN2, CIMPLI, TOLD  , TNEW  ,
     &  CPHAS , USN   , USO   , OMNEW , OMOLD , BETAN , BETAO )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION GRAVIT,ROAIR,ROEAU,BETAM,XKAPPA,DECAL,CIMPLI
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF),TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF),XK(NPOIN2,NF),FREQ(NF)
      DOUBLE PRECISION USOLD(NPOIN2), USNEW(NPOIN2),TWOLD(NPOIN2)
      DOUBLE PRECISION TWNEW(NPOIN2),Z0OLD(NPOIN2),Z0NEW(NPOIN2)
      DOUBLE PRECISION TETA(NPLAN),TOLD(NPOIN2,NPLAN)
      DOUBLE PRECISION TNEW(NPOIN2,NPLAN), CPHAS(NPOIN2),USN(NPOIN2)
      DOUBLE PRECISION USO(NPOIN2), OMNEW(NPOIN2),OMOLD(NPOIN2)
      DOUBLE PRECISION BETAN(NPOIN2), BETAO(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE QWIND2
     &( TSTOT , TSDER , F     , XK    , FREQ  , USOLD , USNEW , TWOLD ,
     &  TWNEW , TETA  , ROAIR , ROEAU , NF    , NPLAN , NPOIN2,
     &  CIMPLI, USN   , USO   )
      IMPLICIT NONE
      INTEGER, INTENT(IN)            :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(IN)   :: ROAIR,ROEAU,CIMPLI
      DOUBLE PRECISION, INTENT(IN)   :: FREQ(NF),TETA(NPLAN)
      DOUBLE PRECISION, INTENT(IN)   :: TWOLD(NPOIN2),TWNEW(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)   :: USNEW(NPOIN2),USOLD(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT):: USO(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT):: USN(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT):: TSTOT(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT):: TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)   :: F(NPOIN2,NPLAN,NF),XK(NPOIN2,NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        SUBROUTINE QWIND3
     &( TSTOT , TSDER , F     , XK    , FREQ  , USOLD , USNEW , TWOLD ,
     &  TWNEW , TETA  , GRAVIT, NF    , NPLAN , NPOIN2, CIMPLI, COEFWD,
     &  COEFWE, COEFWF, COEFWH, BETAN , BETAO , DIRN  , DIRO  )
      IMPLICIT NONE
      INTEGER    NF  , NPLAN        , NPOIN2
      DOUBLE PRECISION GRAVIT       , CIMPLI
      DOUBLE PRECISION FREQ(NF)     , TETA(NPLAN)
      DOUBLE PRECISION TWOLD(NPOIN2), TWNEW(NPOIN2), USNEW(NPOIN2)
      DOUBLE PRECISION BETAO(NPOIN2), BETAN(NPOIN2), USOLD(NPOIN2)
      DOUBLE PRECISION DIRO(NPOIN2) , DIRN(NPOIN2)
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)    , XK(NPOIN2,NF)
      DOUBLE PRECISION COEFWD , COEFWE , COEFWF , COEFWH
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
! 
      INTERFACE
        SUBROUTINE QWINDL
     &( TSTOT , FREQ  , USOLD , USNEW , TWOLD , TWNEW , TETA  , 
     &  NF    , NPLAN , NPOIN2, CIMPLI, USN   , USO   , FPMO  , FPMN )
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(IN)    :: CIMPLI
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF),TETA(NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: FPMO(NPOIN2),FPMN(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: TWOLD(NPOIN2),TWNEW(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: USNEW(NPOIN2),USOLD(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: USO(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: USN(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: TSTOT(NPOIN2,NPLAN,NF)  
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE RADIAT
     &( FX    , FY    , SXX   , SXY   , SYY   , XK1   , FS    , CG1   ,
     &  DEPTH1, CGSUC1, DSXXDX, DSXYDX, DSXYDY, DSYYDY )
      USE BIEF_DEF
      USE DECLARATIONS_TOMAWAC, ONLY : NPLAN,NF,NPOIN2
      IMPLICIT NONE
      DOUBLE PRECISION FS(NPOIN2,NPLAN,NF),CG1(NPOIN2,NF)
      DOUBLE PRECISION DEPTH1(NPOIN2),CGSUC1(NPOIN2,NF),XK1(NPOIN2,NF)
      DOUBLE PRECISION DSXXDX(NPOIN2),DSXYDX(NPOIN2),FX(NPOIN2)
      DOUBLE PRECISION DSXYDY(NPOIN2),DSYYDY(NPOIN2),FY(NPOIN2)
      DOUBLE PRECISION SXX(NPOIN2),SXY(NPOIN2),SYY(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE RPI_INTR 
     &(NEIGB  , NB_CLOSE, RK      , RX  , RY      , RXX     , RYY , 
     & NPOIN2 , I       , MAXNSP  , FFD , FIRDIV1 , FIRDIV2 , 
     & SECDIV1, SECDIV2 , SECDIV3, FRSTDIV , SCNDDIV) 
      IMPLICIT NONE 
      INTEGER, INTENT(IN) :: NPOIN2, MAXNSP,I 
      INTEGER, INTENT(IN) :: NEIGB(NPOIN2,MAXNSP),NB_CLOSE(NPOIN2)  
      DOUBLE PRECISION, INTENT(IN)    :: RK(MAXNSP) 
      DOUBLE PRECISION, INTENT(IN)    :: RX(MAXNSP),RY(MAXNSP)   
      DOUBLE PRECISION, INTENT(IN)    :: RXX(MAXNSP),RYY(MAXNSP) 
      DOUBLE PRECISION, INTENT(INOUT) :: SECDIV1,SECDIV2,SECDIV3 
      DOUBLE PRECISION, INTENT(INOUT) :: FIRDIV1,FIRDIV2
      DOUBLE PRECISION, INTENT(IN)    :: FFD(NPOIN2)       
      LOGICAL, INTENT(IN)             :: FRSTDIV,SCNDDIV 
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
!V6P2 New subroutine
      INTERFACE
        SUBROUTINE RPI_INVR
     &( X     , Y     , NEIGB , NB_CLOSE, RK_D , RX_D , RY_D  , RXX_D ,
     &  RYY_D , NPOIN2, I     , QUO   , AC    , MAXNSP, MINDIST )
      IMPLICIT NONE
      INTEGER NPOIN2, MAXNSP, I
      INTEGER NEIGB(NPOIN2,MAXNSP), NB_CLOSE(NPOIN2)
      DOUBLE PRECISION QUO, AC
      DOUBLE PRECISION X(NPOIN2), Y(NPOIN2)
      DOUBLE PRECISION MINDIST(NPOIN2)       
      DOUBLE PRECISION RK_D(MAXNSP)
      DOUBLE PRECISION RX_D(MAXNSP), RY_D(MAXNSP)  
      DOUBLE PRECISION RXX_D(MAXNSP), RYY_D(MAXNSP)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SEMIMP 
     &( F     ,XK    ,FREQ  ,DFREQ ,DEPTH ,VENTX ,VENTY ,X     ,Y     ,
     &  NVEB  ,NVEF  ,NBOR  ,NPTFR ,DDC   ,TV1   ,TV2   ,
     &  U1    ,V1    ,U2    ,V2    ,TETA  ,SINTET,COSTET,INDIC ,
     &  TAILF ,RAISF ,GRAVIT,CFROT1,CMOUT1,CMOUT2,CMOUT3,CMOUT4,CMOUT5,
     &  CMOUT6,TPROP ,DTSI  ,ROAIR ,ROEAU ,XKAPPA,BETAM ,DECAL ,CDRAG ,
     &  ALPHA ,ZVENT ,NF    ,NPLAN ,NPOIN2,IANGNL,COEFNL,F1    ,NSITS ,
     &  SMOUT ,SFROT ,SVENT ,LVENT ,STRIF ,VENT  ,VENSTA,VX_CTE,VY_CTE,
     &  SBREK ,ALFABJ,GAMBJ1,GAMBJ2,IQBBJ ,IHMBJ ,IFRBJ ,BORETG,GAMATG, 
     &  IWHTG ,IFRTG ,ALFARO,GAMARO,GAM2RO,IDISRO,IEXPRO,IFRRO ,BETAIH,
     &  EM2SIH,IFRIH ,COEFHS,XDTBRK,NDTBRK,STRIA ,ALFLTA,RFMLTA,KSPB  ,
     &  BDISPB,BDSSPB,PROINF,DF_LIM,LIMIT ,CIMPLI,COEFWD,COEFWE,COEFWF,
     &  COEFWH,NOMVEB,NOMVEF,BINVEN,NBD   ,QINDI ,TAUWAV,USOLD ,TWOLD ,
     &  Z0OLD ,TSTOT ,TSDER ,TOLD  ,TNEW  ,VARIAN,FMOY  ,XKMOY ,USNEW ,
     &  Z0NEW ,TWNEW ,TAUX1 ,TAUX2 ,TAUX3 ,TAUX4 ,TAUX5 ,TAUX6 ,TAUX7 ,
     &  BETA  ,NQ_TE1,NQ_OM2,NF1   ,NF2   ,NT1   ,NCONF ,NCONFM,
     &  SEUIL ,LBUF  ,DIMBUF,F_POIN,T_POIN,F_COEF,F_PROJ,TB_SCA,K_IF1 ,
     &  K_1P  ,K_1M  ,K_IF2 ,K_IF3 ,K_1P2P,K_1P2M,K_1P3P,K_1P3M,K_1M2P,
     &  K_1M2M,K_1M3P,K_1M3M,IDCONF,TB_V14,TB_V24,TB_V34,TB_TPM,TB_TMP, 
     &  TB_FAC,MDIA  ,IANMDI,COEMDI,NVWIN,DIAGHF) 
      IMPLICIT NONE
      INTEGER          NPOIN2, NPLAN , NF    , NSITS , NPTFR , NVEB  
      INTEGER          NVEF  , LIMIT , NVWIN
      INTEGER          SMOUT , SFROT , SVENT , STRIF , SBREK , INDIC 
      INTEGER          IQBBJ , IHMBJ , IFRBJ , IWHTG , IFRTG , IFRRO 
      INTEGER          IEXPRO, IFRIH , NDTBRK, IDISRO, STRIA 
      INTEGER          NBOR(NPTFR)   , IANGNL(NPLAN,8)
      INTEGER          NBD   , QINDI(NBD)    ,DIAGHF
      DOUBLE PRECISION TAILF , CFROT1, GRAVIT, RAISF , DTSI  , TPROP ,
     &                 CMOUT1, CMOUT2, DDC   , TV1   , TV2   , ZVENT ,
     &                 ROAIR , ROEAU , XKAPPA, BETAM , DECAL , CDRAG ,
     &                 ALPHA , GAMBJ1, GAMBJ2, ALFABJ, BORETG, GAMATG,
     &                 COEFHS, VX_CTE, VY_CTE, CIMPLI,
     &                 GAMARO, ALFARO, GAM2RO, EM2SIH, BETAIH, XDTBRK,
     &                 ALFLTA, RFMLTA, KSPB  , BDISPB, BDSSPB, F1
      DOUBLE PRECISION  DEPTH(NPOIN2), USNEW(NPOIN2) , USOLD(NPOIN2) ,
     &                 VARIAN(NPOIN2),  FMOY(NPOIN2) , XKMOY(NPOIN2) ,
     &                  TWOLD(NPOIN2), TWNEW(NPOIN2) , Z0OLD(NPOIN2) ,
     &                  Z0NEW(NPOIN2), VENTX(NPOIN2) , VENTY(NPOIN2) ,
     &                     U1(NPOIN2),    U2(NPOIN2) ,    V1(NPOIN2) ,
     &                     V2(NPOIN2),     X(NPOIN2) ,     Y(NPOIN2) ,
     &                 TAUWAV(NPOIN2), TAUX1(NPOIN2) , TAUX2(NPOIN2) ,
     &                  TAUX3(NPOIN2), TAUX4(NPOIN2) , TAUX5(NPOIN2) ,
     &                  TAUX6(NPOIN2), TAUX7(NPOIN2) , COEFNL(16)    ,
     &                    TETA(NPLAN), SINTET(NPLAN) , COSTET(NPLAN) ,
     &                    F(NPOIN2,NPLAN,NF),   XK(NPOIN2,NF)        ,
     &                    DF_LIM(NPOIN2,NF) ,
     &                 TSDER(NPOIN2,NPLAN,NF),TSTOT(NPOIN2,NPLAN,NF) ,
     &                 FREQ(NF), DFREQ(NF), 
     &                 TOLD(NPOIN2,NPLAN), TNEW(NPOIN2,NPLAN)
      DOUBLE PRECISION BETA(NPOIN2)
      CHARACTER*144 NOMVEB, NOMVEF
      CHARACTER*3 BINVEN
      LOGICAL  PROINF, VENT , VENSTA
      INTEGER           LVENT 
      DOUBLE PRECISION  CMOUT3, CMOUT4, CMOUT5, CMOUT6
      DOUBLE PRECISION  COEFWD, COEFWE, COEFWF, COEFWH
      INTEGER           MDIA
      INTEGER           IANMDI(NPLAN,16,MDIA)
      DOUBLE PRECISION  COEMDI(32,MDIA)
      INTEGER  NQ_TE1, NQ_OM2, NF1, NF2 , NT1
      INTEGER  NCONF , NCONFM
      DOUBLE PRECISION SEUIL
      INTEGER  LBUF  , DIMBUF
      INTEGER           F_POIN(DIMBUF), T_POIN(DIMBUF)
      DOUBLE PRECISION  F_COEF(DIMBUF), F_PROJ(DIMBUF), TB_SCA(DIMBUF)
      INTEGER K_IF1 (1:NF1) 
      INTEGER K_1P  (1:NT1,1:NF1), K_1M(1:NT1,1:NF1)
      INTEGER K_IF2 (1:NF2,1:NT1,1:NF1), K_IF3 (1:NF2,1:NT1,1:NF1),
     &        K_1P2P(1:NF2,1:NT1,1:NF1), K_1P2M(1:NF2,1:NT1,1:NF1),
     &        K_1P3P(1:NF2,1:NT1,1:NF1), K_1P3M(1:NF2,1:NT1,1:NF1),
     &        K_1M2P(1:NF2,1:NT1,1:NF1), K_1M2M(1:NF2,1:NT1,1:NF1),
     &        K_1M3P(1:NF2,1:NT1,1:NF1), K_1M3M(1:NF2,1:NT1,1:NF1)
      INTEGER IDCONF(1:NCONFM,1:3)
      DOUBLE PRECISION TB_V14(1:NF1)
      DOUBLE PRECISION 
     &        TB_V24(1:NF2,1:NT1,1:NF1), TB_V34(1:NF2,1:NT1,1:NF1),
     &        TB_TPM(1:NF2,1:NT1,1:NF1), TB_TMP(1:NF2,1:NT1,1:NF1),
     &        TB_FAC(1:NF2,1:NT1,1:NF1)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SOR3D
     &(F,NPLAN,NF,TETA,FREQ,NELEM2,NPOIN2,AT,U,V,UV,VV,DEPTH,VENT,
     & COURAN,MAREE,TITRE,NR3D,BINR3D,TRA01,MESH3D)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NR3D,NF,NPLAN,NELEM2,NPOIN2
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF),AT
      DOUBLE PRECISION, INTENT(IN)    :: FREQ(NF),TETA(NPLAN)
      DOUBLE PRECISION, INTENT(IN)    :: U(NPOIN2),V(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: UV(NPOIN2),VV(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TRA01(NPOIN2*NPLAN)
      LOGICAL, INTENT(IN)             :: COURAN,VENT,MAREE
      CHARACTER(LEN=3), INTENT(IN)    :: BINR3D
      CHARACTER(LEN=80), INTENT(IN)   :: TITRE
      TYPE(BIEF_MESH), INTENT(IN)     :: MESH3D
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SPEINI
     &( F     , SPEC  , FRA   , UV    , VV    , FREQ  , TETA  , GRAVIT,
     &  FREMAX, FETCH , SIGMAA, SIGMAB, GAMMA , FPIC  , HM0   , ALPHIL,
     &  TETA1 , SPRED1, TETA2 , SPRED2, XLAMDA, NPOIN2, NPLAN , NF    ,
     &  INISPE, E2FMIN, DEPTH , FRABI )
      IMPLICIT NONE
      INTEGER  NPOIN2, NPLAN , NF    , INISPE, FRABI
      DOUBLE PRECISION GRAVIT, FREMAX, FETCH , SIGMAA, SIGMAB, GAMMA
      DOUBLE PRECISION FPIC  , HM0   , ALPHIL, TETA1 , SPRED1, TETA2
      DOUBLE PRECISION SPRED2, XLAMDA, E2FMIN
      DOUBLE PRECISION FREQ(NF) , TETA(NPLAN), SPEC(NF), FRA(NPLAN)
      DOUBLE PRECISION UV(NPOIN2) , VV(NPOIN2), DEPTH(NPOIN2)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SPEJON
     &( SPEC  , FREQ  , NF    , AL    , FP     , GAMMA , SIGMAA, SIGMAB,
     &  DEUPI , GRAVIT, E2FMIN, FPMIN )
      IMPLICIT NONE
      INTEGER  NF
      DOUBLE PRECISION GRAVIT, SIGMAA, SIGMAB, GAMMA , DEUPI , FPMIN
      DOUBLE PRECISION FP    , E2FMIN, AL
      DOUBLE PRECISION SPEC(NF)      , FREQ(NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SPETMA
     &( SPEC  , FREQ  , NF    , AL    , FP     , GAMMA , SIGMAA, SIGMAB,
     &  DEUPI , GRAVIT, E2FMIN, FPMIN , DEPTH  )
      IMPLICIT NONE
      INTEGER  NF
      DOUBLE PRECISION GRAVIT, SIGMAA, SIGMAB, GAMMA , DEUPI , FPMIN
      DOUBLE PRECISION FP    , E2FMIN, AL    , DEPTH
      DOUBLE PRECISION SPEC(NF)      , FREQ(NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SPREAD
     &( DIRSPR, F     , COSTET, SINTET, NPLAN , FREQ  , DFREQ , NF    ,
     &  NPOIN2, TAILF , COSMOY, SINMOY, VARIAN, TAUXC , TAUXS , TAUXE )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION TAILF
      DOUBLE PRECISION DIRSPR(NPOIN2), SINMOY(NPOIN2), COSMOY(NPOIN2)
      DOUBLE PRECISION TAUXS (NPOIN2), TAUXC (NPOIN2), TAUXE (NPOIN2)
      DOUBLE PRECISION COSTET(NPLAN) , SINTET(NPLAN)
      DOUBLE PRECISION FREQ(NF), DFREQ(NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), VARIAN(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE RE_INITIALISE_CHARS(NSEND,NLOSTCHAR,NLOSTAGAIN,NARRV)
          IMPLICIT NONE
          INTEGER, INTENT(OUT) :: NSEND,NLOSTCHAR,NLOSTAGAIN,NARRV
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PREP_LOST_AGAIN(NOMB,NSEND,NLOSTAGAIN,NARRV)
          IMPLICIT NONE
          INTEGER,INTENT(IN)   :: NOMB,NLOSTAGAIN,NARRV
          INTEGER, INTENT(OUT) :: NSEND
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PREP_SENDBACK(NOMB,NCHARA)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: NOMB
          INTEGER, INTENT(INOUT) :: NCHARA
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INTERP_RECVCHAR_41
     &      (VAL,N,IKLE,ELT,ETA,SHP,SHZ,NELEM,NPOIN2,NPLAN,NRANGE)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: N,NELEM,NPOIN2,NPLAN,NRANGE
          INTEGER, INTENT(IN) :: IKLE(NELEM,3)
          INTEGER, INTENT(IN) :: ELT(NRANGE), ETA(NRANGE)
          DOUBLE PRECISION, INTENT(IN) :: SHP(3,NRANGE), SHZ(NRANGE)
          DOUBLE PRECISION, INTENT(IN) :: VAL(NPOIN2,NPLAN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INTERP_RECVCHAR_41_MOD
     &      (VAL,IKLE,ELT,ETA,SHP1,SHP2,SHP3,SHZ,
     &                            NELEM,NPOIN2,NPLAN,NRANGE)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: NELEM,NPOIN2,NPLAN,NRANGE
          INTEGER, INTENT(IN) :: IKLE(NELEM,3)
          INTEGER, INTENT(IN) :: ELT(NRANGE), ETA(NRANGE)
          DOUBLE PRECISION, INTENT(IN) :: SHP1(NRANGE),SHP2(NRANGE),
     &                                    SHP3(NRANGE),SHZ(NRANGE)
          DOUBLE PRECISION, INTENT(IN) :: VAL(NPOIN2,NPLAN,2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INTERP_RECVCHAR_11
     &      (VAL,N,IKLE,ELT,SHP,NELEM,NPOIN,NRANGE,IELM)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: N,NELEM,NPOIN,NRANGE,IELM
          INTEGER, INTENT(IN) :: IKLE(NELEM,*)
          INTEGER, INTENT(IN) :: ELT(NRANGE)
          DOUBLE PRECISION, INTENT(IN) :: SHP(3,NRANGE)
          DOUBLE PRECISION, INTENT(IN) :: VAL(NPOIN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INTRODUCE_RECVCHAR(VAL,N,NPOIN,NOMB,NARRV)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: N,NPOIN,NOMB,NARRV
          DOUBLE PRECISION, INTENT(INOUT) :: VAL(NPOIN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE INTRODUCE_RECVCHAR_MOD(VAL,NPOIN,NARRV)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: NPOIN,NARRV
          DOUBLE PRECISION, INTENT(INOUT) :: VAL(NPOIN)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
!V6P2 New subroutine
      INTERFACE
        SUBROUTINE INVERT(RN, N, NP)
          IMPLICIT NONE
      INTEGER N, NP
      DOUBLE PRECISION RN(NP,NP)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PRINT_HEAPCHAR(MESSAGE,NOMB,NCHARA)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: NOMB,NCHARA
          CHARACTER(LEN=*), INTENT(IN) :: MESSAGE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PRINT_SENDCHAR(MESSAGE,NOMB,NSEND)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: NOMB,NSEND
          CHARACTER(LEN=*), INTENT(IN) :: MESSAGE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE PRINT_RECVCHAR(MESSAGE,NOMB,NARRV)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: NOMB,NARRV
          CHARACTER(LEN=*), INTENT(IN) :: MESSAGE
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SCHAR41
     &( U , V , W , DT , NRK , X , Y , ZSTAR , Z , IKLE2 , IBOR ,
     &  XPLOT , YPLOT , ZPLOT , DX , DY , DZ , SHP , SHZ , ELT , ETA ,
     &  NSP   , NPLOT , NPOIN2 , NELEM2 , NPLAN , SURDET ,
     &  SENS  , TEST  , IFAPAR, NCHDIM,NCHARA)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER         , INTENT(IN)    :: SENS,NPLAN,NCHDIM
      INTEGER         , INTENT(IN)    :: NPOIN2,NELEM2,NPLOT,NRK
      INTEGER         , INTENT(IN)    :: IKLE2(NELEM2,3)
      INTEGER         , INTENT(INOUT) :: ELT(NPLOT),NSP(NPLOT),NCHARA
      DOUBLE PRECISION, INTENT(IN)    :: U(NPOIN2,NPLAN),V(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(IN)    :: W(NPOIN2,NPLAN),SURDET(NELEM2)
      DOUBLE PRECISION, INTENT(INOUT) :: XPLOT(NPLOT),YPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: ZPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: SHP(3,NPLOT),SHZ(NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN2),Y(NPOIN2),DT
      DOUBLE PRECISION, INTENT(IN)    :: Z(NPOIN2,NPLAN),ZSTAR(NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: DX(NPLOT),DY(NPLOT),TEST(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: DZ(NPLOT)
      INTEGER         , INTENT(IN)    :: IBOR(NELEM2,5,NPLAN-1)
      INTEGER         , INTENT(INOUT) :: ETA(NPLOT)
      INTEGER         , INTENT(IN)    :: IFAPAR(6,*)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ADD_CHAR41
     & ( U , V , W , DT , NRK , X , Y , ZSTAR , Z , IKLE2 , IBOR ,
     &   XPLOT , YPLOT , ZPLOT , DX , DY , DZ , SHP , SHZ , ELT , ETA,
     &   NSP , ISPDONE, NPLOT , NPOIN2 , NELEM2 , NPLAN ,
     &   SURDET , SENS , TEST, IFAPAR, NOMB,NARRV)
      IMPLICIT NONE
      INTEGER         , INTENT(IN)    :: SENS,NPLAN,NOMB,NARRV
      INTEGER         , INTENT(IN)    :: NPOIN2,NELEM2,NPLOT,NRK
      INTEGER         , INTENT(IN)    :: IKLE2(NELEM2,3)
      INTEGER         , INTENT(INOUT) :: ELT(NPLOT),NSP(NPLOT)
      INTEGER         , INTENT(INOUT) :: ISPDONE(NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: U(NPOIN2,NPLAN),V(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(IN)    :: W(NPOIN2,NPLAN),SURDET(NELEM2)
      DOUBLE PRECISION, INTENT(INOUT) :: XPLOT(NPLOT),YPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: ZPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: SHP(3,NPLOT),SHZ(NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN2),Y(NPOIN2),DT
      DOUBLE PRECISION, INTENT(IN)    :: Z(NPOIN2,NPLAN),ZSTAR(NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: DX(NPLOT),DY(NPLOT),TEST(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: DZ(NPLOT)
      INTEGER         , INTENT(IN)    :: IBOR(NELEM2,5,NPLAN-1)
      INTEGER         , INTENT(INOUT) :: ETA(NPLOT)
      INTEGER, INTENT(IN)             :: IFAPAR(6,*)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ADD_CHAR41_MOD
     & ( U , V , W , DT , NRK , X , Y , ZSTAR , Z , IKLE2 , IBOR ,
     &   XPLOT,YPLOT,ZPLOT,DX,DY,DZ,SHP1,SHP2,SHP3,SHZ,ELT,ETA,
     &   NSP , ISPDONE, NPLOT , NPOIN2 , NELEM2 , NPLAN ,
     &   SURDET , SENS , TEST, IFAPAR, NOMB,NARRV)
      IMPLICIT NONE
      INTEGER         , INTENT(IN)    :: SENS,NPLAN,NOMB,NARRV
      INTEGER         , INTENT(IN)    :: NPOIN2,NELEM2,NPLOT,NRK
      INTEGER         , INTENT(IN)    :: IKLE2(NELEM2,3)
      INTEGER         , INTENT(INOUT) :: ELT(NPLOT),NSP(NPLOT)
      INTEGER         , INTENT(INOUT) :: ISPDONE(NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: U(NPOIN2,NPLAN),V(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(IN)    :: W(NPOIN2,NPLAN),SURDET(NELEM2)
      DOUBLE PRECISION, INTENT(INOUT) :: XPLOT(NPLOT),YPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: ZPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: SHP1(NPLOT),SHP2(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: SHP3(NPLOT),SHZ(NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN2),Y(NPOIN2),DT
      DOUBLE PRECISION, INTENT(IN)    :: Z(NPOIN2,NPLAN),ZSTAR(NPLAN+1)
      DOUBLE PRECISION, INTENT(INOUT) :: DX(NPLOT),DY(NPLOT),TEST(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: DZ(NPLOT)
      INTEGER         , INTENT(IN)    :: IBOR(NELEM2,5)
      INTEGER         , INTENT(INOUT) :: ETA(NPLOT)
      INTEGER, INTENT(IN)             :: IFAPAR(6,*)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SCHAR11
     & ( U , V , DT , NRK , X , Y , IKLE , IFABOR ,
     &   XPLOT , YPLOT , DX , DY , SHP , ELT , NSP ,
     &   NPLOT , NPOIN , NELEM , NELMAX , SURDET , SENS , TEST,
     &   IFAPAR, MESH,NCHDIM,NCHARA)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER         , INTENT(IN)    :: SENS,NCHDIM
      INTEGER         , INTENT(IN)    :: NPOIN,NELEM,NELMAX,NPLOT,NRK
      INTEGER         , INTENT(IN)    :: IKLE(NELMAX,3),IFABOR(NELMAX,3)
      INTEGER         , INTENT(INOUT) :: ELT(NPLOT),NCHARA
      INTEGER         , INTENT(OUT)   :: NSP(NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: U(NPOIN),V(NPOIN),SURDET(NELEM)
      DOUBLE PRECISION, INTENT(INOUT) :: XPLOT(NPLOT),YPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: SHP(3,NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: DT
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN),Y(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: DX(NPLOT),DY(NPLOT),TEST(NPLOT)
      INTEGER, INTENT(IN)             :: IFAPAR(6,*)
      TYPE (BIEF_MESH), INTENT(INOUT) :: MESH
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE ADD_CHAR11
     & ( U , V , DT , NRK , X , Y , IKLE , IFABOR ,
     &   XPLOT , YPLOT , DX , DY , SHP , ELT , NSP , ISPDONE,
     &   NPLOT , NPOIN , NELEM , NELMAX , SURDET , SENS , TEST,
     &   IFAPAR, NOMB,NARRV)
      IMPLICIT NONE
      INTEGER         , INTENT(IN)    :: SENS,NOMB,NARRV
      INTEGER         , INTENT(IN)    :: NPOIN,NELEM,NELMAX,NPLOT,NRK
      INTEGER         , INTENT(IN)    :: IKLE(NELMAX,3),IFABOR(NELMAX,3)
      INTEGER         , INTENT(INOUT) :: ELT(NPLOT),NSP(NPLOT)
      INTEGER         , INTENT(INOUT) :: ISPDONE(NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: U(NPOIN),V(NPOIN),SURDET(NELEM)
      DOUBLE PRECISION, INTENT(INOUT) :: XPLOT(NPLOT),YPLOT(NPLOT)
      DOUBLE PRECISION, INTENT(INOUT) :: SHP(3,NPLOT)
      DOUBLE PRECISION, INTENT(IN)    :: DT
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN),Y(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: DX(NPLOT),DY(NPLOT),TEST(NPLOT)
      INTEGER, INTENT(IN) :: IFAPAR(6,*)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE UPDATE_TEST(TEST,MESH,SHP1,SHP2,SHP3,NPOINT)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER NPOINT
      DOUBLE PRECISION TEST(NPOINT),SHP1(NPOINT),
     &SHP2(NPOINT),SHP3(NPOINT)
      TYPE(BIEF_MESH), INTENT(INOUT)   :: MESH
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SEND_RECV_TOMAWAC(U,UTILD,UCONV,VCONV,WCONV,DT,NRK,
     &              X, Y, ZSTAR, Z,
     &              IKLE, IFABOR, XCONV, YCONV, ZCONV, DX, DY, DZ,
     &              SHP1,SHP2,SHP3, SHZ, ELT, ETA, ITRAV1,ITRAV2,NARRV,
     &              NPOIN2, NELEM, NPLAN, SURDET,
     &              TEST,NPOIN,NCHDIM,NCHARA,NOMB,MESH,LAST_NOMB)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(INOUT)          :: NELEM,NPOIN,NPOIN2
      INTEGER, INTENT(IN)             :: NOMB,NPLAN
      TYPE(BIEF_OBJ)  , INTENT(INOUT) :: U
      TYPE(BIEF_OBJ)  , INTENT(INOUT) :: UTILD
      DOUBLE PRECISION, INTENT(IN)    :: UCONV(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: VCONV(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: WCONV(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: Y(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: Z(NPOIN2,NPLAN),ZSTAR(NPLAN+1)
      DOUBLE PRECISION, INTENT(INOUT) :: ZCONV(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(INOUT) :: DX(NPOIN),DY(NPOIN),DZ(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: SHP1(NPOIN),SHP2(NPOIN),
     &                    SHP3(NPOIN),SHZ(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: SURDET(NELEM)
      DOUBLE PRECISION, INTENT(IN)    :: DT
      INTEGER, INTENT(IN)             :: IKLE(NELEM,3)
      INTEGER, INTENT(IN)             :: IFABOR(NELEM,*)
      INTEGER, INTENT(INOUT)          :: ELT(NPOIN),ETA(NPOIN)
      INTEGER, INTENT(INOUT)          :: ITRAV1(NPOIN),ITRAV2(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: TEST(NPOIN)
      TYPE(BIEF_MESH) , INTENT(INOUT) :: MESH
      DOUBLE PRECISION, INTENT(INOUT) :: XCONV(NPOIN2,NPLAN),
     &                                   YCONV(NPOIN2,NPLAN)
      INTEGER NRK,NCHARA,NARRV,NCHDIM,LAST_NOMB
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE SCARACT
     & ( U , UTILD , UCONV , VCONV , WCONV , X , Y , ZSTAR ,
     &   XCONV , YCONV , ZCONV , DX , DY , DZ , Z , SHP , SHZ , SURDET ,
     &   DT , IKLE , IFABOR , ELT , ETA , ITRAV1, ITRAV2, IELM ,
     &   IELMU , NELEM , NELMAX , NOMB , NPOIN , NPOIN2 , NDP , NPLAN ,
     &   LV , MSK , MASKEL , MESH , FAC , TEST , STEST , INITLOC)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NELEM,NELMAX,NPOIN,NPOIN2
      INTEGER, INTENT(IN)             :: NOMB,NDP,NPLAN,IELM,IELMU,LV
      TYPE(BIEF_OBJ)  , INTENT(IN)    :: U
      TYPE(BIEF_OBJ)  , INTENT(INOUT) :: UTILD
      DOUBLE PRECISION, INTENT(IN)    :: UCONV(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: VCONV(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: WCONV(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: Y(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: Z(NPOIN2,NPLAN),ZSTAR(NPLAN)
      DOUBLE PRECISION, INTENT(OUT)   :: ZCONV(NPOIN2,NPLAN)
      DOUBLE PRECISION, INTENT(OUT)   :: DX(NPOIN),DY(NPOIN),DZ(NPOIN)
      DOUBLE PRECISION, INTENT(OUT)   :: SHP(NDP,NPOIN),SHZ(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: MASKEL(NELMAX)
      DOUBLE PRECISION, INTENT(IN)    :: SURDET(NELEM)
      DOUBLE PRECISION, INTENT(IN)    :: DT
      INTEGER, INTENT(IN)             :: IKLE(NELMAX,NDP)
      INTEGER, INTENT(IN)             :: IFABOR(NELMAX,*)
      INTEGER, INTENT(OUT)            :: ELT(NPOIN),ETA(NPOIN)
      INTEGER, INTENT(OUT)            :: ITRAV1(NPOIN),ITRAV2(NPOIN)
      LOGICAL, INTENT(IN)             :: MSK,INITLOC
      DOUBLE PRECISION, INTENT(OUT)   :: TEST(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: FAC(NPOIN)
      TYPE(BIEF_MESH) , INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ)  , INTENT(INOUT) :: STEST,XCONV,YCONV
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE STRESS
     &( TAUWAV, TSTOT , F     , USNEW , TWNEW , Z0NEW , FREQ  , DFREQ ,
     &  TETA  , SINTET, COSTET, ROAIR , ROEAU , XKAPPA, BETAM , DECAL ,
     &  GRAVIT, NPOIN2, NPLAN , NF    , XTAUW , YTAUW , TAUHF )
      IMPLICIT NONE
      INTEGER  NPOIN2, NPLAN , NF
      DOUBLE PRECISION ROAIR , ROEAU , XKAPPA , BETAM , DECAL , GRAVIT
      DOUBLE PRECISION TAUWAV(NPOIN2), USNEW(NPOIN2), TWNEW(NPOIN2)
      DOUBLE PRECISION  Z0NEW(NPOIN2), FREQ(NF) , DFREQ(NF)
      DOUBLE PRECISION TSTOT(NPOIN2,NPLAN,NF), F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION TETA(NPLAN), SINTET(NPLAN), COSTET(NPLAN)
      DOUBLE PRECISION XTAUW(NPOIN2) , YTAUW(NPOIN2), TAUHF(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE TAUTOT
     &( TAUT  , UVENT , TAUW  , CDRAG , ALPHA , XKAPPA, ZVENT , SEUIL ,
     &  GRAVIT, ITR   , ITRMIN, ITRMAX)
      IMPLICIT NONE
      INTEGER  ITRMIN, ITRMAX, ITR
      DOUBLE PRECISION TAUT  , UVENT , TAUW  , ALPHA , XKAPPA , ZVENT
      DOUBLE PRECISION SEUIL , CDRAG , GRAVIT
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE TETMOY
     &( TETAM , F     , COSTET, SINTET, NPLAN , FREQ  , DFREQ , NF    ,
     &  NPOIN2, TAILF , COSMOY, SINMOY, TAUXC , TAUXS )
      IMPLICIT NONE
      INTEGER  NF    , NPLAN , NPOIN2
      DOUBLE PRECISION TAILF
      DOUBLE PRECISION TETAM(NPOIN2) , DFREQ(NF)    , COSMOY(NPOIN2)
      DOUBLE PRECISION COSTET(NPLAN) , SINTET(NPLAN), SINMOY(NPOIN2)
      DOUBLE PRECISION TAUXC(NPOIN2) , TAUXS(NPOIN2)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), FREQ(NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE TOTNRJ
     &( VARIAN, F     , FREQ  , DFREQ , TAILF , NF    , NPLAN , NPOIN2)
      IMPLICIT NONE
      INTEGER          NF    , NPLAN , NPOIN2
      DOUBLE PRECISION TAILF , VARIAN(NPOIN2), FREQ(NF), DFREQ(NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE TRANSF
     &( FA    , FR    , FREQ  , DFREQ , COSTET, SINTET, UC    , VC    ,
     &  XK    , KNEW  , NEWF  , NEWF1 , TAUX1 , TAUX2 , NPOIN2, NPLAN ,
     &  NF    , RAISF , LT    , GRADEB, GRAPRD)
      IMPLICIT NONE
      INTEGER          NPOIN2, NPLAN , NF    , LT    , GRADEB, GRAPRD
      INTEGER          KNEW(NPOIN2)  , NEWF(NPOIN2)  , NEWF1(NPOIN2)
      DOUBLE PRECISION RAISF
      DOUBLE PRECISION FA(NPOIN2,NPLAN,NF),FR(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION FREQ(NF),DFREQ(NF),COSTET(NPLAN),SINTET(NPLAN)
      DOUBLE PRECISION UC(NPOIN2),VC(NPOIN2),TAUX1(NPOIN2),TAUX2(NPOIN2)
      DOUBLE PRECISION XK(NPOIN2,NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE USTAR1
     &( USTAR , Z0    , TAUWAV, UV    , VV    , CDRAG , ALPHA , XKAPPA,
     &  ZVENT , GRAVIT, NPOIN2)
      IMPLICIT NONE
      INTEGER  NPOIN2
      DOUBLE PRECISION USTAR(NPOIN2) , Z0(NPOIN2) , TAUWAV(NPOIN2)
      DOUBLE PRECISION    UV(NPOIN2) , VV(NPOIN2)
      DOUBLE PRECISION CDRAG , ALPHA , XKAPPA , ZVENT, GRAVIT
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE USTAR2
     &( USTAR , UV    , VV    , NPOIN2)
      IMPLICIT NONE
      INTEGER  NPOIN2
      DOUBLE PRECISION USTAR(NPOIN2) , UV(NPOIN2) , VV(NPOIN2)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE VARTEL
     &( VAR, X, Y, DEPTH, UC, VC, ZREPOS, TRA01, F, NPLAN, NF, NPOIN2)
      IMPLICIT NONE
      INTEGER  NPOIN2,NPLAN,NF
      DOUBLE PRECISION F (NPOIN2,NPLAN,NF) , TRA01(NPOIN2)
      DOUBLE PRECISION X (NPOIN2) , Y (NPOIN2) , DEPTH(NPOIN2)
      DOUBLE PRECISION UC(NPOIN2) , VC(NPOIN2) , VAR(NPOIN2)
      DOUBLE PRECISION ZREPOS
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE VENUTI
     &(X,Y,NPOIN,NVEN,BINVEN,NBOR,NPTFR,AT,DDC,TV1,TV2,U1,V1,U2,V2)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NVEN,NPOIN,NPTFR
      INTEGER, INTENT(IN)             :: NBOR(NPTFR,2)
      DOUBLE PRECISION, INTENT(IN)    :: X(NPOIN),Y(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: U1(NPOIN),V1(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: U2(NPOIN),V2(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: AT,DDC
      DOUBLE PRECISION, INTENT(INOUT) :: TV1,TV2
      CHARACTER(LEN=3), INTENT(IN)    :: BINVEN
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE VITFON(UWBM,F,XK,DEPTH,DFREQ,NF,NPOIN2,NPLAN,BETA)
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(INOUT) :: UWBM(NPOIN2),BETA(NPOIN2)
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)    :: XK(NPOIN2,NF)
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2),DFREQ(NF)
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE WAC
     &(PART, U_TEL, V_TEL, H_TEL, FX_WAC, FY_WAC, UV_WAC, VV_WAC,
     & CODE, T_TEL, DT_TEL,NIT_TEL,PERCOU_WAC,
     & DIRMOY_TEL,HM0_TEL,TPR5_TEL)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER,           INTENT(IN)      :: PART,NIT_TEL,PERCOU_WAC
      CHARACTER(LEN=24), INTENT(IN)      :: CODE
      TYPE(BIEF_OBJ),    INTENT(IN)      :: U_TEL,V_TEL,H_TEL
      TYPE(BIEF_OBJ),    INTENT(INOUT)   :: DIRMOY_TEL,HM0_TEL,TPR5_TEL
      TYPE(BIEF_OBJ),    INTENT(INOUT)   :: FX_WAC,FY_WAC
      TYPE(BIEF_OBJ),    INTENT(INOUT)   :: UV_WAC,VV_WAC
      DOUBLE PRECISION,  INTENT(IN)      :: DT_TEL,T_TEL
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE WNSCOU
     &( CK2   , FREQ  , DEPTH )
      IMPLICIT NONE
      DOUBLE PRECISION CK2   , FREQ  , DEPTH
        END SUBROUTINE
      END INTERFACE
!
!-----------------------------------------------------------------------
!
      INTERFACE
        SUBROUTINE WPOWER
     &( POWER , F     , FREQ  , DFREQ , CG    , TAILF , NF    , NPLAN ,
     &  NPOIN2, ROEAU )
      IMPLICIT NONE
      INTEGER          NF    , NPLAN , NPOIN2
      DOUBLE PRECISION TAILF , POWER(NPOIN2), FREQ(NF), DFREQ(NF)
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF), CG(NPOIN2,NF)
      DOUBLE PRECISION ROEAU
        END SUBROUTINE
      END INTERFACE
!
!=======================================================================
!
      END MODULE INTERFACE_TOMAWAC
!
!                    *****************
                     SUBROUTINE SEMIMP
!                    *****************
!
     &(F     ,XK    ,FREQ  ,DFREQ ,DEPTH ,VENTX ,VENTY ,X     ,Y     ,
     & NVEB  ,NVEF  ,NBOR  ,NPTFR ,DDC   ,TV1   ,TV2   ,
     & U1    ,V1    ,U2    ,V2    ,TETA  ,SINTET,COSTET,INDIC ,
     & TAILF ,RAISF ,GRAVIT,CFROT1,CMOUT1,CMOUT2,CMOUT3,CMOUT4,CMOUT5,
     & CMOUT6,TPROP ,DTSI  ,ROAIR ,ROEAU ,XKAPPA,BETAM ,DECAL ,CDRAG ,
     & ALPHA ,ZVENT ,NF    ,NPLAN ,NPOIN2,IANGNL,COEFNL,F1    ,NSITS ,
     & SMOUT ,SFROT ,SVENT ,LVENT ,STRIF ,VENT  ,VENSTA,VX_CTE,VY_CTE,
     & SBREK ,ALFABJ,GAMBJ1,GAMBJ2,IQBBJ ,IHMBJ ,IFRBJ ,BORETG,GAMATG,
     & IWHTG ,IFRTG ,ALFARO,GAMARO,GAM2RO,IDISRO,IEXPRO,IFRRO ,BETAIH,
     & EM2SIH,IFRIH ,COEFHS,XDTBRK,NDTBRK,STRIA ,ALFLTA,RFMLTA,KSPB  ,
     & BDISPB,BDSSPB,PROINF,DF_LIM,LIMIT ,CIMPLI,COEFWD,COEFWE,COEFWF,
     & COEFWH,NOMVEB,NOMVEF,BINVEN,NBD   ,QINDI ,TAUWAV,USOLD ,TWOLD ,
     & Z0OLD ,TSTOT ,TSDER ,TOLD  ,TNEW  ,VARIAN,FMOY  ,XKMOY ,USNEW ,
     & Z0NEW ,TWNEW ,TAUX1 ,TAUX2 ,TAUX3 ,TAUX4 ,TAUX5 ,TAUX6 ,TAUX7 ,
     & BETA  ,NQ_TE1,NQ_OM2,NF1   ,NF2   ,NT1   ,NCONF ,NCONFM,
     & SEUIL ,LBUF  ,DIMBUF,F_POIN,T_POIN,F_COEF,F_PROJ,TB_SCA,K_IF1 ,
     & K_1P  ,K_1M  ,K_IF2 ,K_IF3 ,K_1P2P,K_1P2M,K_1P3P,K_1P3M,K_1M2P,
     & K_1M2M,K_1M3P,K_1M3M,IDCONF,TB_V14,TB_V24,TB_V34,TB_TPM,TB_TMP,
     & TB_FAC,MDIA  ,IANMDI,COEMDI,NVWIN ,DIAGHF)
!
!***********************************************************************
! TOMAWAC   V6P2                                   27/06/2011
!***********************************************************************
!
!brief    SOLVES THE INTEGRATION STEP OF THE SOURCE TERMS USING
!+                A SCHEME WITH VARIABLE DEGREE OF IMPLICITATION.
!
!history  M. BENOIT
!+        26/03/95
!+        V1P0
!+   CREATED
!
!history  M. BENOIT
!+        07/11/96
!+        V1P2
!+   MODIFIED
!
!history
!+        25/08/2000
!+        V5P0
!+   MODIFIED
!
!history  JMH
!+        16/12/2008
!+        V5P9
!+   BETA HAS BEEN ADDED TO THE LIST OF ARGUMENTS AND
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        13/07/2010
!+        V6P0
!+   Translation of French comments within the FORTRAN sources into
!+   English comments
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        21/08/2010
!+        V6P0
!+   Creation of DOXYGEN tags for automated documentation and
!+   cross-referencing of the FORTRAN sources
!
!history  E.G.RENOU (EDF), G.MATTAROLO (EDF)
!+        12/05/2011
!+        V6P1
!+   MODIFIED: integration of new source terms, developed by
!+   E.G. Renou.
!+     - modification of the variables in argument list
!+     - modification of the local variable declarations
!+     - modification concerning friction velocity and roughness
!+       length calculation
!+     - calls to subroutines QWINDL, QWIND3, QMOUT2, QNLIN2,
!+       QNLIN3
!
!history  G.MATTAROLO (EDF - LNHE)
!+        27/06/2011
!+        V6P1
!+   Translation of French names of the variables in argument
!
!history  U.H.MERKEL
!+        27/06/2012
!+        V6P2
!+   Renamed SUM to SUME, due to NAG compiler
!
!history  E. GAGNAIRE-RENOU (EDF - LNHE)
!+        12/03/2013
!+        V6P3
!+   HF diagnostic tail is not necessarily imposed
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| ALFABJ         |-->| COEFFICIENT ALPHA OF BJ WAVE BREAKING MODEL
!| ALFARO         |-->| CONSTANTE ALPHA OF RO WAVE BREAKING MODEL
!| ALFLTA         |-->| COEFFICIENT ALPHA OF LTA TRIAD INTERACTION MODEL
!| ALPHA          |-->| CHARNOCK CONSTANT
!| BDISPB         |-->| LOWER DIRECTIONAL BOUND. OF SPB TRIAD MODEL
!| BDSSPB         |-->| UPPER DIRECTIONAL BOUND. OF SPB TRIAD MODEL
!| BETA           |<--| BREAKING WAVES COEFFICIENT
!| BETAIH         |-->| BETA0 CONSTANT OF BREAKING WAVES IH MODEL
!| BETAM          |-->| WIND GENERATION COEFFICIENT
!| BINVEN         |-->| WIND FILE BINARY
!| BORETG         |-->| COEFFICIENT B OF BREAKING WAVE TG MODEL
!| CDRAG          |-->| WIND DRAG COEFFICIENT
!| CFROT1         |-->| BOTTOM FRICTION COEFFICIENT
!| CIMPLI         |-->| IMPLICITATION COEFFICIENT FOR SOURCE TERM INTEG.
!| CMOUT1         |-->| WHITE CAPPING DISSIPATION COEFFICIENT
!| CMOUT2         |-->| WHITE CAPPING WEIGHTING COEFFICIENT
!| CMOUT3         |-->| WESTHUYSEN WHITE CAPPING DISSIPATION COEFFICIENT
!| CMOUT4         |-->| WESTHUYSEN SATURATION THRES. FOR THE DISSIPATION
!| CMOUT5         |-->| WESTHUYSEN WHITE CAPPING DISSIPATION COEFFICIENT
!| CMOUT6         |-->| WESTHUYSEN WHITE CAPPING WEIGHTING COEFFICIENT
!| COEFHS         |-->| MAXIMUM VALUE OF THE RATIO HM0 ON D
!| COEFNL         |-->| COEFFICIENTS USED FOR DIA METHOD
!| COEFWD         |-->| COEFFICIENT D OF YAN WIND GENERATION MODEL
!| COEFWE         |-->| COEFFICIENT E OF YAN WIND GENERATION MODEL
!| COEFWF         |-->| COEFFICIENT F OF YAN WIND GENERATION MODEL
!| COEFWH         |-->| COEFFICIENT H OF YAN WIND GENERATION MODEL
!| COEMDI         |-->| COEFFICIENTS USED FOR DIA METHOD
!| COSTET         |-->| COSINE OF TETA ANGLE
!| DDC            |-->| DATE OF COMPUTATION BEGINNING
!| DECAL          |-->| SHIFT GROWING CURVE DUE TO WIND
!| DEPTH          |-->| WATER DEPTH
!| DFREQ          |-->| FREQUENCY STEPS BETWEEN DISCRETIZED FREQUENCIES
!| DF_LIM         |<--| WORK TABLE
!| DIMBUF         |-->| VARIABLE FOR SPECTRUM INTERPOLATION
!| DTSI           |-->| INTEGRATION TIME STEP (SECONDS)
!| EM2SIH         |-->| M2* CONSTANT OF BREAKING WAVES IH MODEL
!| F              |<->| DIRECTIONAL SPECTRUM
!| F1             |-->| MINIMAL DISCRETIZED FREQUENCY
!| F_COEF         |-->| WORK TABLE FOR SPECTRUM INTERPOLATION
!| F_POIN         |-->| WORK TABLE FOR SPECTRUM INTERPOLATION
!| F_PROJ         |-->| WORK TABLE FOR SPECTRUM INTERPOLATION
!| FMOY           |<--| MEAN FREQUENCIES F-10
!| FREQ           |-->| DISCRETIZED FREQUENCIES
!| GAM2RO         |-->| GAMMA2 CONSTANT OF WAVE BREAKING RO MODEL
!| GAMARO         |-->| GAMMA CONSTANT OF WAVE BREAKING RO MODEL
!| GAMATG         |-->| GAMMA CONSTANT OF WAVE BREAKING TG MODEL
!| GAMBJ1         |-->| GAMMA1 CONSTANT OF WAVE BREAKING  BJ MODEL
!| GAMBJ2         |-->| GAMMA2 CONSTANT OF WAVE BREAKING BJ MODEL
!| GRAVIT         |-->| GRAVITY ACCELERATION
!| IANGNL         |-->| ANGULAR INDICES TABLE
!| IANMDI         |-->| ANGULAR INDICES TABLE FOR MDIA
!| IDCONF         |-->| WORK TABLE
!| IDISRO         |-->| WAVE HEIGHT DISTRIBUTION SLECTION FOR RO MODEL
!| IEXPRO         |-->| EXPONENT OF WAVE HEIGHT DISTR. FOR RO MODEL
!| IFRBJ          |-->| CHARACTERISTIC FREQUENCY BJ WAVE BREKING MODEL
!| IFRIH          |-->| CHARACTERISTIC FREQUENCY IH WAVE BREKING MODEL
!| IFRRO          |-->| CHARACTERISTIC FREQUENCY RO WAVE BREKING MODEL
!| IFRTG          |-->| CHARACTERISTIC FREQUENCY TG WAVE BREKING MODEL
!| IHMBJ          |-->| DEPTH-INDUCED BREAKING CRITERIUM GIVING THE
!|                |   | BREAKING WAVE HEIGHT (BJ MODEL)
!| INDIC          |-->| FILE FORMAT
!| IQBBJ          |-->| SELECTED QB COMPUTATION METHOD FOR BJ MODEL
!| IWHTG          |-->| WEIGHT. FUN.SELECTION OF WAVE BREAKING TG MODEL
!| K_IF1          |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1P           |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1M           |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_IF2          |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_IF3          |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1P2P         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1P2M         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1P3P         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1P3M         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1M2P         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1M2M         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1M3P         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| K_1M3M         |-->| WORK TABLE FOR GQM QNL4 METHOD
!| KSPB           |-->| COEFFICIENT K OF SPB TRIAD INTERACTION MODEL
!| LIMIT          |-->| TYPE OF WAVE GROWTH LIMITER MODEL SELECTED
!| LBUF           |-->| VARIABLE FOR SPECTRUM INTERPOLATION
!| LVENT          |-->| LINEAR WAVE GROWTH MODEL SELECTION
!| MDIA           |-->| NUMBER OF CONFIGURATIONS FOR MDIA METHOD
!| NBD            |-->| NUMBER OF TRIAD CONFIGURATIONS
!| NBOR           |-->| GLOBAL NUMBER OF BOUNDARY POINTS
!| NCONF          |-->| NUMBER OF RETAINED CONFIGURATIONS (GQM METHOD)
!| NCONFM         |-->| MAXIMUM NUMBER OF CONFIGURATIONS (GQM METHOD)
!| NDTBRK         |-->| NUMBER OF TIME STEPS FOR BREAKING SOURCE TERM
!| NF             |-->| NUMBER OF FREQUENCIES
!| NF1            |-->| NUMBER OF INTEGRATION POINT ON OMEGA1
!| NF2            |-->| NUMBER OF INTEGRATION POINT ON OMEGA2
!| NOMVEB         |-->| NAME OF BINARY WIND DATA FILE
!| NOMVEF         |-->| NAME OF FORMATTED WIND DATA FILE
!| NP             |<->| NUMBER OF POINTS READ FROM THE WIND FILE
!| NPLAN          |-->| NUMBER OF DIRECTIONS
!| NPOIN2         |-->| NUMBER OF POINTS IN 2D MESH
!| NPTFR          |-->| NUMBER OF BOUNDARY POINTS
!| NQ_TE1         |-->| SETTING FOR INTEGRATION ON THETA1 (GQM)
!| NQ_OM2         |-->| NUMBER OF INTEGRATION POINT ON OMEGA2
!| NSITS          |-->| NUMBER OF ITERATIONS FOR THE SOURCE TERMS
!| NT1            |-->| NUMBER OF INTEGRATION POINT ON TETA1
!| NVEB           |-->| LOGICAL UNIT N. OF BINARY WIND DATA FILE
!| NVEF           |-->| LOGICAL UNIT N. OF FORMATTED WIND DATA FILE
!| NVWIN          |-->| NUMBER OF VARIABLES IN THE WIND FILE.
!| PROINF         |-->| LOGICAL INDICATING INFINITE DEPTH ASSUMEPTION
!| QINDI          |-->| CONFIGURATION INDEX
!| RAISF          |-->| FREQUENTIAL RATIO
!| RFMLTA         |-->| COEFFICIENT OF LTA TRIAD INTERACTION MODEL
!| ROAIR          |-->| AIR DENSITY
!| ROEAU          |-->| WATER DENSITY
!| SBREK          |-->| DEPTH-INDUCED BREAKING DISSIPATION MODEL
!| SEUIL          |-->| THRESHOLD0 FOR CONFIGURATIONS ELIMINATION (GQM)
!| SFROT          |-->| SELECTION OF THE BOTTOM FRICTION DISSIPATION
!| SINTET         |-->| SINE OF TETA ANGLE
!| SMOUT          |-->| SELECTIO OF WHITE CAPPING SOURCE TERM MODEL
!| STRIA          |-->| SELECTION OF THE TRIAD INTERACTION MODEL
!| STRIF          |-->| SELECTION OF QUADRUPLET INTERACTION MODEL
!| SVENT          |-->| SELECTION OF THE WIND GENERATION MODEL
!| T_POIN         |-->| WORK TABLE FOR SPECTRUM INTERPOLATION
!| TAILF          |-->| SPECTRUM TAIL FACTOR
!| DIAGHF         |-->| OPTION FOR SPECTRUM DIAGNOSTIC TAIL
!| TAUWAV         |<->| STRESS DUE TO THE WAVES
!| TAUX1          |<->| WORK TABLE
!| TAUX2          |<->| WORK TABLE
!| TAUX3          |<->| WORK TABLE
!| TAUX4          |<->| WORK TABLE
!| TAUX5          |<->| WORK TABLE
!| TAUX6          |<->| WORK TABLE
!| TAUX7          |<->| WORK TABLE
!| TB_FAC         |-->| WORK TABLE (GQM)
!| TB_SCA         |-->| SCALE COEFFICIENT
!| TB_V14         |-->| WORK TABLE (GQM)
!| TB_V24         |-->| WORK TABLE (GQM)
!| TB_V34         |-->| WORK TABLE (GQM)
!| TB_TMP         |-->| WORK TABLE (GQM)
!| TB_TPM         |-->| WORK TABLE (GQM)
!| TETA           |---| DISCRETIZED DIRECTIONS
!| TNEW           |<->| WORK TABLE
!| TOLD           |<->| WORK TABLE
!| TPROP          |-->| COMPUTATION TIME
!| TSDER          |<--| DERIVED PART OF THE SOURCE TERM CONTRIBUTION
!| TSTOT          |<--| TOTAL PART OF THE SOURCE TERM CONTRIBUTION
!| TV1            |<->| TIME T1 IN THE WIND FILE
!| TV2            |<->| TIME T2 IN THE WIND FILE
!| TWNEW          |<->| WIND DIRECTION AT TIME N+1
!| TWOLD          |<->| WIND DIRECTION AT TIME N
!| U1,V1          |<->| WIND SPEED AT TIME T1 IN THE WIND FILE
!| U2,V2          |<->| WIND SPEED AT TIME T2 IN THE WIND FILE
!| USNEW          |<->| FRICTION VELOCITY AT TIME N+1
!| USOLD          |<->| FRICTION VELOCITY AT TIME N
!| VARIAN         |-->| SPECTRUM VARIANCE
!| VENSTA         |-->| INDICATES IF THE WIND IS STATIONARY
!| VENT           |-->| INDICATES IF WIND IS TAKEN INTO ACC
!| VENTX,VENTY    |<->| WIND DATA INTERPOLATED OVER 2D MESH
!| VX_CTE         |---| WIND ALONG X (CONSTANT VALUE IN STEERING FILE)
!| VY_CTE         |---| WIND ALONG Y (CONSTANT VALUE IN STEERING FILE)
!| X              |-->| ABSCISSAE OF POINTS IN THE MESH
!| XDTBRK         |-->| COEFFICIENT OF TIME SUB-INCREMENTS FOR BREAKING
!| XK             |-->| DISCRETIZED WAVE NUMBER
!| XKAPPA         |-->| VON KARMAN CONSTANT
!| XKMOY          |<--| AVERAGE WAVE NUMBER
!| Y              |-->| ORDINATES OF POINTS IN THE MESH
!| Z0NEW          |<->| SURFACE ROUGHNESS LENGTH AT TIME N+1
!| Z0OLD          |<->| SURFACE ROUGHNESS LENGTH AT TIME N
!| ZVENT          |-->| WIND MEASUREMENT LEVEL
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!  APPELS :    - PROGRAMME(S) APPELANT  :  WAC
!  ********    - PROGRAMME(S) APPELE(S) :  USTAR1, TOTNRJ, ANAVEN,
!                                          FREMOY, KMOYEN, OV    ,
!                                          QWIND1, STRESS, QNLIN1,
!                                          QMOUT1, QFROT1, NOUDON,
!                                          QWIND2, USTAR2, QBREK1,
!                                          QBREK2, QBREK3, QBREK4,
!                                          FPREAD, FREM01, FREM02,
!                                          FPEPIC, QWINDL, QWIND3,
!                                          QMOUT2, QNLIN2, QNLIN3
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE DECLARATIONS_TOMAWAC, ONLY : DEUPI,T3_01,T3_02,TEXVEB,MESH,
     &                                 NAMEWX,NAMEWY,UNITVEB,PHASVEB
      USE INTERFACE_TOMAWAC, EX_SEMIMP => SEMIMP
!
      IMPLICIT NONE
!
      INTEGER LNG,LU
      COMMON/INFO/ LNG,LU
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER NPOIN2,NPLAN,NF,NSITS,NPTFR,NVEB,NVEF,LIMIT,NVWIN 
      INTEGER SMOUT , SFROT , SVENT , STRIF , SBREK , INDIC
      INTEGER IQBBJ , IHMBJ , IFRBJ , IWHTG , IFRTG , IFRRO
      INTEGER IEXPRO, IFRIH , NDTBRK, IDISRO, STRIA
      INTEGER NBOR(NPTFR)   , IANGNL(NPLAN,8)
      INTEGER NBD   , QINDI(NBD) , DIAGHF
      DOUBLE PRECISION TAILF , CFROT1, GRAVIT, RAISF , DTSI  , TPROP
      DOUBLE PRECISION CMOUT1, CMOUT2, DDC   , TV1   , TV2   , ZVENT 
      DOUBLE PRECISION ROAIR , ROEAU , XKAPPA, BETAM , DECAL , CDRAG 
      DOUBLE PRECISION ALPHA , GAMBJ1, GAMBJ2, ALFABJ, BORETG, GAMATG
      DOUBLE PRECISION COEFHS, VX_CTE, VY_CTE, CIMPLI
      DOUBLE PRECISION GAMARO, ALFARO, GAM2RO, EM2SIH, BETAIH, XDTBRK
      DOUBLE PRECISION ALFLTA, RFMLTA, KSPB  , BDISPB, BDSSPB, F1
      DOUBLE PRECISION DEPTH(NPOIN2), USNEW(NPOIN2) , USOLD(NPOIN2) 
      DOUBLE PRECISION VARIAN(NPOIN2),  FMOY(NPOIN2) , XKMOY(NPOIN2)
      DOUBLE PRECISION TWOLD(NPOIN2), TWNEW(NPOIN2) , Z0OLD(NPOIN2) 
      DOUBLE PRECISION Z0NEW(NPOIN2), VENTX(NPOIN2) , VENTY(NPOIN2) 
      DOUBLE PRECISION U1(NPOIN2),    U2(NPOIN2) ,    V1(NPOIN2) 
      DOUBLE PRECISION V2(NPOIN2),     X(NPOIN2) ,     Y(NPOIN2) 
      DOUBLE PRECISION TAUWAV(NPOIN2), TAUX1(NPOIN2) , TAUX2(NPOIN2) 
      DOUBLE PRECISION TAUX3(NPOIN2), TAUX4(NPOIN2) , TAUX5(NPOIN2) 
      DOUBLE PRECISION TAUX6(NPOIN2), TAUX7(NPOIN2) , COEFNL(16)    
      DOUBLE PRECISION TETA(NPLAN), SINTET(NPLAN) , COSTET(NPLAN) 
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF),XK(NPOIN2,NF)       
      DOUBLE PRECISION DF_LIM(NPOIN2) 
      DOUBLE PRECISION TSDER(NPOIN2,NPLAN,NF),TSTOT(NPOIN2,NPLAN,NF) 
      DOUBLE PRECISION FREQ(NF), DFREQ(NF)
      DOUBLE PRECISION TOLD(NPOIN2,NPLAN), TNEW(NPOIN2,NPLAN)
      DOUBLE PRECISION BETA(NPOIN2)
      CHARACTER(LEN=144) NOMVEB, NOMVEF
      CHARACTER(LEN=3) BINVEN
      LOGICAL  PROINF, VENT , VENSTA
!....Linear wind growth declaration
      INTEGER           LVENT
!....Yan expression declarations
      DOUBLE PRECISION  CMOUT3, CMOUT4, CMOUT5, CMOUT6
!....Westhuysen expression decalaration
      DOUBLE PRECISION  COEFWD, COEFWE, COEFWF, COEFWH
!....MDIA method declarations
      INTEGER           MDIA
      INTEGER           IANMDI(NPLAN,16,MDIA)
      DOUBLE PRECISION  COEMDI(32,MDIA)
!....GQM method declarations
      INTEGER  NQ_TE1, NQ_OM2, NF1, NF2 , NT1
      INTEGER  NCONF , NCONFM
      DOUBLE PRECISION SEUIL
      INTEGER  LBUF  , DIMBUF
      INTEGER           F_POIN(DIMBUF), T_POIN(DIMBUF)
      DOUBLE PRECISION  F_COEF(DIMBUF), F_PROJ(DIMBUF), TB_SCA(DIMBUF)
      INTEGER K_IF1 (1:NF1)
      INTEGER K_1P  (1:NT1,1:NF1), K_1M(1:NT1,1:NF1)
      INTEGER K_IF2 (1:NF2,1:NT1,1:NF1), K_IF3 (1:NF2,1:NT1,1:NF1)
      INTEGER K_1P2P(1:NF2,1:NT1,1:NF1), K_1P2M(1:NF2,1:NT1,1:NF1)
      INTEGER K_1P3P(1:NF2,1:NT1,1:NF1), K_1P3M(1:NF2,1:NT1,1:NF1)
      INTEGER K_1M2P(1:NF2,1:NT1,1:NF1), K_1M2M(1:NF2,1:NT1,1:NF1)
      INTEGER K_1M3P(1:NF2,1:NT1,1:NF1), K_1M3M(1:NF2,1:NT1,1:NF1)
      INTEGER IDCONF(1:NCONFM,1:3)
      DOUBLE PRECISION TB_V14(1:NF1)
      DOUBLE PRECISION TB_V24(1:NF2,1:NT1,1:NF1)
      DOUBLE PRECISION TB_V34(1:NF2,1:NT1,1:NF1)
      DOUBLE PRECISION TB_TPM(1:NF2,1:NT1,1:NF1)
      DOUBLE PRECISION TB_TMP(1:NF2,1:NT1,1:NF1)
      DOUBLE PRECISION TB_FAC(1:NF2,1:NT1,1:NF1)
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER ISITS,IFF,IP,JP,K,NVENT,IFCAR,MF1,MF2,MFMAX,IDT
      DOUBLE PRECISION AUX1,AUX2,AUX3,AUX4,COEF   
      DOUBLE PRECISION FM1,FM2,TDEB,TFIN,VITVEN
      DOUBLE PRECISION VITMIN,HM0,HM0MAX,DTN,SUME,AUXI,USMIN
!                              MDIA, HERE HARDCODED    
      DOUBLE PRECISION  XCCMDI(4)
!
      LOGICAL TROUVE(3)
!
!-----------------------------------------------------------------------
!
      VITMIN=1.D-3
!
!     ------------------------------------------------------------------
!     CHOPS THE SPECTRUM IN ACCORDANCE WITH THE BATHYMETRY
!     -----------------------------------------------------------------
!
      IF(.NOT.PROINF) THEN
!
!       0.1 COMPUTES THE TOTAL VARIANCE OF THE SPECTRUM
!       -----------------------------------------------
!
        CALL TOTNRJ(VARIAN,F,FREQ,DFREQ,TAILF,NF,NPLAN,NPOIN2)
        WRITE(6,*)'VALEUR DE F = ',F(10,2,1)
!
!       0.2 COMPUTES THE CORRECTION COEFFICIENT ON THE SPECTRUM
!       -------------------------------------------------------
!
        DO IP=1,NPOIN2
          HM0MAX=COEFHS*DEPTH(IP)
          HM0 =MAX(4.D0*SQRT(VARIAN(IP)),1.D-20)
          TAUX1(IP)=MIN((HM0MAX/HM0)**2,1.D0)
        ENDDO
!
!       0.3 CORRECTS THE SPECTRUM
!       --------------------------
!
        DO IFF=1,NF
          DO JP=1,NPLAN
            DO IP=1,NPOIN2
              F(IP,JP,IFF)=F(IP,JP,IFF)*TAUX1(IP)
            ENDDO
          ENDDO
        ENDDO
!
      ENDIF
!
!     ----------------------------------------------------------------
!     IF THE COMPUTATION INCLUDES STATIONARY WINDS, DUPLICATES THE
!     CONDITIONS AT THE START OF THE TIME STEP TO THE END OF THE TIME
!     STEP. (THIS IS BECAUSE ARRAYS TWNEW, USNEW AND Z0NEW ARE WORKING
!     ARRAYS USED IN DUMP2D BETWEEN 2 CALLS TO SEMIMP).
!     ----------------------------------------------------------------
!
      IF(VENT.AND.VENSTA) THEN
        DO IP=1,NPOIN2
          TWNEW(IP)=TWOLD(IP)
        ENDDO
!
        IF (SVENT.GE.2.OR.(LVENT.EQ.1.AND.SVENT.NE.1).OR.
     &                                (SMOUT.EQ.2.AND.SVENT.NE.1)) THEN
          DO IP=1,NPOIN2
            USNEW(IP)=USOLD(IP)
            Z0NEW(IP)=Z0OLD(IP)
          ENDDO
        ENDIF
      ENDIF
!
!     -----------------------------------------------------------------
!     START OF THE MAIN LOOP ON THE NUMBER OF TIME STEPS (NSITS)
!     FOR INTEGRATION OF THE SOURCE TERMS, BY PROPAGATION TIME STEP
!     -----------------------------------------------------------------
!
      DO 100 ISITS=1,NSITS
!
!       1. ASSIGNS THE START AND END DATES OF TIME STEP
!       ===============================================
!
        TDEB=TPROP-(NSITS-ISITS+1)*DTSI
        TFIN=TDEB+DTSI
!
!
!       2. UPDATES (IF HAS TO) THE WIND ARRAYS
!       ======================================
!
        IF(VENT.AND..NOT.VENSTA) THEN
!
!         2.1 UPDATES THE WIND FIELD FOR DATE TFIN
!         ---------------------------------------------------
!
          IF(NOMVEB(1:1).NE.' '.OR.NOMVEF(1:1).NE.' ') THEN
            IF(NOMVEF(1:1).NE.' ') THEN
              NVENT=NVEF
            ELSE
              NVENT=NVEB
            ENDIF
            CALL NOUDON(VENTX,NAMEWX,
     &                        'WIND ALONG X    M/S             ',2,    
     &                  VENTY,NAMEWY,
     &                        'WIND ALONG Y    M/S             ',2, 
     &                  VENTY,'????????????????????????????????',
     &                        '????????????????????????????????',0, 
     &                  MESH%X%R,MESH%Y%R,NPOIN2,
     &                  NVENT,BINVEN,NBOR,NPTFR,TFIN,DDC,TV1,TV2, 
     &                  U1,U2,V1,V2,V1,V2,INDIC,
     &                  'WIND   ',NVWIN,TEXVEB,TROUVE,UNITVEB,PHASVEB)
          ELSE
            CALL ANAVEN(VENTX,VENTY,X,Y,NPOIN2,TFIN,DDC,VX_CTE,VY_CTE)
          ENDIF
!
!         2.2 COMPUTES THE WIND DIRECTION
!         -----------------------------------
!
          DO IP=1,NPOIN2
            VITVEN=SQRT(VENTX(IP)**2+VENTY(IP)**2)
            IF(VITVEN.GT.VITMIN) THEN
              TWNEW(IP)=ATAN2(VENTX(IP),VENTY(IP))
            ELSE
              TWNEW(IP)=0.D0
            ENDIF
          ENDDO
!
!         2.3 COMPUTES THE FRICTION VELOCITIES AND ROUGHNESS LENGTHS
!         ------------------------------------------------------------
!
          IF (SVENT.GE.2.OR.(LVENT.EQ.1.AND.SVENT.NE.1).OR.
     &                                    (SMOUT.EQ.2.AND.SVENT.NE.1))
     &                    CALL USTAR2( USNEW , VENTX , VENTY , NPOIN2)
        ENDIF
!
        IF(VENT.AND.SVENT.EQ.1) THEN
          CALL USTAR1(USNEW,Z0NEW,TAUWAV,VENTX,VENTY,
     &                CDRAG,ALPHA,XKAPPA,ZVENT,GRAVIT,NPOIN2)
        ENDIF
!
!
!       3. COMPUTES MEAN PARAMETERS FOR THE DIRECTIONAL SPECTRUM
!       =========================================================
!
!       3.1 COMPUTES THE TOTAL VARIANCE OF THE SPECTRUM
!       -----------------------------------------------
!
        CALL TOTNRJ(VARIAN,F,FREQ,DFREQ,TAILF,NF,NPLAN,NPOIN2)
!
!       3.2 COMPUTES THE MEAN FREQUENCY OF THE SPECTRUM
!       -----------------------------------------------
!
        CALL FREMOY(FMOY,F,FREQ,DFREQ,TAILF,NF,NPLAN,NPOIN2,
     &              TAUX1,TAUX2)
!
!       3.3 COMPUTES THE MEAN WAVE NUMBER OF THE SPECTRUM
!       -------------------------------------------------
        CALL KMOYEN
     &( XKMOY , XK    , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN ,
     &  NPOIN2, TAUX1 , TAUX2 , TAUX3 )
!
!
!       4. COMPUTES THE CONTRIBUTIONS OF THE SOURCE TERMS FOR GENERATION,
!          WHITECAPPING AND INTERACTIONS BETWEEN QUADRUPLETS
!       =============================================================
!
!       4.1 INITIALISES THE ARRAYS FOR THE SOURCE TERMS
!       ----------------------------------------------------
        DO IFF=1,NF
          DO JP=1,NPLAN
            DO IP=1,NPOIN2
              TSTOT(IP,JP,IFF)=0.D0
              TSDER(IP,JP,IFF)=0.D0
            ENDDO
          ENDDO
        ENDDO
!
!       4.2 GENERATION BY WIND
!       ----------------------
!
        IF(VENT) THEN
          IF(SVENT.EQ.1) THEN
            CALL QWIND1
     &( TSTOT , TSDER , F     , XK    , FREQ  , USOLD , USNEW , TWOLD ,
     &  TWNEW , Z0OLD , Z0NEW , TETA  , ROAIR , ROEAU , BETAM , XKAPPA,
     &  DECAL , GRAVIT, NF    , NPLAN , NPOIN2, CIMPLI, TOLD  , TNEW  ,
     &  TAUX1 , TAUX2 , TAUX3 , TAUX4 , TAUX5 , TAUX6 , TAUX7 )
            CALL STRESS
     &( TAUWAV, TSTOT , F     , USNEW , TWNEW , Z0NEW , FREQ  , DFREQ ,
     &  TETA  , SINTET, COSTET, ROAIR , ROEAU , XKAPPA, BETAM , DECAL ,
     &  GRAVIT, NPOIN2, NPLAN , NF    , TAUX1 , TAUX2 , TAUX3 )
          ELSEIF(SVENT.EQ.2) THEN
            CALL QWIND2
     &( TSTOT , TSDER , F     , XK    , FREQ  , USOLD , USNEW , TWOLD ,
     &  TWNEW , TETA  , ROAIR , ROEAU , NF    , NPLAN , NPOIN2,
     &  CIMPLI, T3_01%R,T3_02%R )
          ELSEIF(SVENT.EQ.3) THEN
            CALL QWIND3
     &( TSTOT , TSDER , F     , XK    , FREQ  , USOLD , USNEW , TWOLD ,
     &  TWNEW , TETA  , GRAVIT, NF    , NPLAN , NPOIN2, CIMPLI, COEFWD,
     &  COEFWE, COEFWF, COEFWH, TAUX1 , TAUX2 , TAUX3 , TAUX4 )
!
          ENDIF
!
!       ADDS THE LINEAR WIND GROWTH SOURCE TERME
!       """""""""""""""""""""""""""""""""""""""
!
          IF(LVENT.EQ.1) THEN
            CALL QWINDL(TSTOT,FREQ,USOLD,USNEW,TWOLD,TWNEW,TETA, 
     &                  NF,NPLAN,NPOIN2,CIMPLI,T3_01%R,T3_02%R,
     &                  TAUX5,TAUX6)
          ENDIF
!
        ELSE
!
          DO IP=1,NPOIN2
            USNEW(IP)=0.D0
          ENDDO
!
        ENDIF
!
!       4.3 NON-LINEAR INTERACTIONS BETWEEN QUADRUPLETS
!       -----------------------------------------------
!
        IF(STRIF.EQ.1) THEN
!
          CALL QNLIN1(TSTOT,TSDER,IANGNL,COEFNL,NF,NPLAN,F1,RAISF,
     &                TAILF,PROINF,NPOIN2,F,DEPTH,XKMOY,TAUX1,TAUX2,
     &                TAUX3,TAUX4,TAUX5,TAUX6)
!
        ELSEIF (STRIF.EQ.2) THEN
!
!         sets XCCMDI values for MDIA method
          XCCMDI(1)=8.360D7
          XCCMDI(2)=7.280D7
          XCCMDI(3)=3.340D7
          XCCMDI(4)=2.570D6
          DO K=1,MDIA
            XCCMDI(K)=XCCMDI(K)/DBLE(MDIA)
          ENDDO
!         alls MDIA method
          DO K=1,MDIA
            CALL QNLIN2
     &( TSTOT , TSDER , IANMDI(1,1,K) , COEMDI(1,K) , NF    , NPLAN,
     &  F1    , RAISF , TAILF , PROINF, NPOIN2, F   , DEPTH , XKMOY ,
     &  TAUX1 , TAUX2 , XCCMDI(K))
          ENDDO
!....calls GQM method
        ELSEIF (STRIF.EQ.3) THEN
          CALL QNLIN3
     &( TSTOT , TSDER , F     , NPOIN2, FREQ  , TETA  , NPLAN , NF    ,
     &  RAISF , TAILF , SEUIL , TAUX1 , LBUF  , DIMBUF, F_POIN, F_COEF,
     &  F_PROJ, T_POIN, TB_SCA, NQ_TE1, NQ_OM2, NF1   , NT1   , DFREQ ,
     &  K_IF1 , K_IF2 , K_IF3 , TB_V14, TB_V24, TB_V34, K_1P  , K_1M  ,
     &  K_1P2P, K_1P3M, K_1P2M, K_1P3P, K_1M2P, K_1M3M, K_1M2M, K_1M3P,
     &  TB_TPM, TB_TMP, TB_FAC, NCONF , NCONFM, IDCONF)
!GM Fin
        ENDIF
!
!       4.4 WHITE-CAPPING DISSIPATION
!       -------------------------------------------------
!
        IF(SMOUT.EQ.1) THEN
!
          CALL QMOUT1
     &( TSTOT , TSDER , F     , XK    , VARIAN, FREQ  , FMOY  , XKMOY ,
     &  PROINF, CMOUT1, CMOUT2, NF    , NPLAN , NPOIN2, TAUX1 , TAUX2 )
!
        ELSEIF(SMOUT.EQ.2) THEN
!
          CALL QMOUT2
     &( TSTOT , TSDER , F     , XK    , VARIAN, FREQ  , FMOY  , XKMOY ,
     &  USOLD , USNEW , DEPTH , PROINF, CMOUT3, CMOUT4, CMOUT5, CMOUT6,
     &  NF    , NPLAN , NPOIN2, CIMPLI, TAUX1 , TAUX2 , TAUX5 , TAUX6 )
!
        ENDIF
!
!       4.5 BOTTOM FRICTION DISSIPATION
!       -------------------------------
!
        IF(SFROT.EQ.1.AND..NOT.PROINF) CALL QFROT1
     &( TSTOT , TSDER , F     , XK    , DEPTH , CFROT1, GRAVIT, NF    ,
     &  NPLAN , NPOIN2, TAUX1 )
!
!       5. UPDATES THE SPECTRUM - TAKES THE SOURCE TERMS INTO ACCOUNT
!         (GENERATION, WHITECAPPING AND QUADRUPLET INTERACTIONS)
!       ==============================================================
!
!
!       JMH 04/12/2012: COMPUTATION OF LIMITING FACTOR INSERTED
!                       IN THE LOOP TO HAVE DF_LIM(NPOIN2) INSTEAD
!                       OF DF_LIM(NPOIN2,NF)
!
!
        DO IFF=1,NF
!         LIMITING FACTOR TAKEN FROM WAM-CYCLE 4
          IF(LIMIT.EQ.1) THEN
            COEF=0.62D-4*DTSI/1200.D0
            AUXI=COEF/FREQ(IFF)**5
            DO IP=1,NPOIN2
              DF_LIM(IP)=AUXI
            ENDDO
!         LIMITING FACTOR FROM HERSBACH AND JANSSEN (1999)
          ELSEIF(LIMIT.EQ.2) THEN
            COEF=3.D-7*GRAVIT*FREQ(NF)*DTSI
            AUXI=COEF/FREQ(IFF)**4
            USMIN=GRAVIT*5.6D-3/FREQ(IFF)
            DO IP=1,NPOIN2
              DF_LIM(IP)=AUXI*MAX(USNEW(IP),USMIN)
            ENDDO
          ELSEIF(LIMIT.NE.0) THEN
            WRITE(LU,*) 'UNKNOWN LIMITING FACTOR:',LIMIT
            CALL PLANTE(1)
            STOP
          ENDIF
          IF(LIMIT.NE.0) THEN
            DO JP=1,NPLAN
              DO IP=1,NPOIN2
                AUX1=MAX(1.D0-DTSI*TSDER(IP,JP,IFF)*CIMPLI,1.D0)
                AUX2=DTSI*TSTOT(IP,JP,IFF)/AUX1
                AUX3=MIN(ABS(AUX2),DF_LIM(IP))
                AUX4=SIGN(AUX3,AUX2)
                F(IP,JP,IFF)=MAX(F(IP,JP,IFF)+AUX4,0.D0)
              ENDDO
            ENDDO
          ELSE
            DO JP=1,NPLAN
              DO IP=1,NPOIN2
                AUX1=MAX(1.D0-DTSI*TSDER(IP,JP,IFF)*CIMPLI,1.D0)
                AUX2=DTSI*TSTOT(IP,JP,IFF)/AUX1
                F(IP,JP,IFF)=MAX(F(IP,JP,IFF)+AUX2,0.D0)
              ENDDO
            ENDDO
          ENDIF
        ENDDO
!
        IF(DIAGHF.EQ.1) THEN
!
!       6. TREATS THE HIGH FREQUENCIES DIFFERENTLY
!       =======================================================
!
!       6.1 COMPUTES THE MEAN FREQUENCY OF THE SPECTRUM
!       ----------------------------------------------
!
          CALL FREMOY(FMOY,F,FREQ,DFREQ,TAILF,NF,NPLAN,NPOIN2,
     &              TAUX1,TAUX2)
!
          AUX1=GRAVIT/(7.D0*DEUPI*FREQ(1))
          AUX2=2.5D0/FREQ(1)
          AUX3=1.D0/LOG10(RAISF)
!
          DO IP=1,NPOIN2
!
!       6.2 COMPUTES THE LAST FREQUENCY OF THE DISCRETISED SPECTRUM.
!           THIS FREQUENCY IS THE MAXIMUM OF (FM1=4.*FPM ; FM2=2.5*FMOY).
!           ITS INDEX IS MFMAX.
!       -------------------------------------------------------------
!
            FM1 =AUX1/MAX(USNEW(IP),1.D-90)
            FM2 =AUX2*FMOY(IP)
            MF1=INT(AUX3*LOG10(FM1)+1.D0)
            MF2=INT(AUX3*LOG10(FM2)+1.D0)
            MFMAX=MIN(MAX(MF1,MF2),NF)
!
!       6.3 MODIFIES THE HIGH FREQUENCY PART OF THE SPECTRUM
!           A DECREASE IN F**(-TAILF) IS IMPOSED BEYOND
!           FREQ(MFMAX).  (TAILF=5 IN WAM-CYCLE 4)
!       -------------------------------------------------------------
!
            DO IFF=MFMAX+1,NF
              AUX4=(FREQ(MFMAX)/FREQ(IFF))**TAILF
              DO JP=1,NPLAN
                F(IP,JP,IFF)=AUX4*F(IP,JP,MFMAX)
              ENDDO
            ENDDO
!
          ENDDO
        ELSEIF(DIAGHF.GE.2) THEN
          IF(LNG.EQ.1) THEN
            WRITE(LU,*) 'OPTION POUR LA QUEUE DIAGNOSTIQUE'
            WRITE(LU,*) 'INCONNUE : DIAGHF=',DIAGHF
          ENDIF
          IF(LNG.EQ.2) THEN
            WRITE(LU,*) 'OPTION FOR DIAGNOSTIC TAIL'
            WRITE(LU,*) 'UNKNOWN: DIAGHF=',DIAGHF
          ENDIF
          CALL PLANTE(1)
          STOP
        ENDIF 
!
!
!======================================================================
!VBA PRIS EN COMPTE VEGETATION
!======================================================================
       CALL QVEG1
     &( TSTOT , TSDER , F , VARIAN , DEPTH, FMOY , 
     &  XKMOY , NF    , NPLAN  , NPOIN2   , BETA  )
!       WRITE(6,*)'LA VALEUR DE TSDER EN SORTIE = ', TSDER(10,2,1)
!
!
!======================================================================
!VBA FIN PRISE EN COMTPE DE VEGETATION
!======================================================================
!
!       7. TAKES THE BREAKING SOURCE TERM INTO ACCOUNT
!       =================================================
!
        IF((SBREK.GT.0.OR.STRIA.GT.0).AND..NOT.PROINF) THEN
!
!         7.1 COMPUTES A REPRESENTATIVE FREQUENCY
!         ------------------------------------------
          IF (SBREK.GT.0.AND.SBREK.LT.5) THEN
            IF (SBREK.EQ.1) IFCAR = IFRBJ
            IF (SBREK.EQ.2) IFCAR = IFRTG
            IF (SBREK.GE.3) IFCAR = IFRRO
            IF (SBREK.GE.4) IFCAR = IFRIH
!
            GOTO (751,752,753,754,755,756), IFCAR
            IF(LNG.EQ.1) THEN
              WRITE(LU,*) 'FREQUENCE DE HOULE NON PREVUE......IFCAR=',
     &                     IFCAR
            ELSE
              WRITE(LU,*) 'WAVE FREQUENCY NOT EXPECTED......IFCAR=',
     &                     IFCAR
            ENDIF
            GOTO 759
!
!           MEAN FREQUENCY FMOY
!           - - - - - - - - - - - -
!
  751       CONTINUE
            DO IP=1,NPOIN2
              TAUX3(IP)=FMOY(IP)
            ENDDO
            GOTO 759
!
!           MEAN FREQUENCY F01
!           - - - - - - - - - - -
  752       CONTINUE
            CALL FREM01
     &( TAUX3 , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN , NPOIN2,
     &  TAUX1 , TAUX2 )
            GOTO 759
!
!           MEAN FREQUENCY F02
!           - - - - - - - - - - -
  753       CONTINUE
            CALL FREM02
     &( TAUX3 , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN , NPOIN2,
     &  TAUX1 , TAUX2 )
            GOTO 759
!
!           PEAK FREQUENCY (DISCRETE FREQUENCY WITH MAX VARIANCE)
!           - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  754       CONTINUE
            CALL FREPIC
     &( TAUX3 , F     , FREQ  , NF    , NPLAN , NPOIN2, TAUX1 , TAUX2 )
            GOTO 759
!
!           PEAK FREQUENCY (READ WITH EXPONENT 5)
!           - - - - - - - - - - - - - - - - - - - - - - - - - -
  755       CONTINUE
            CALL FPREAD
     &( TAUX3 , F     , FREQ  , DFREQ , NF    , NPLAN , NPOIN2, 5.D0  ,
     &  TAILF , TAUX1 , TAUX2 )
            GOTO 759
!
!           PEAK FREQUENCY (READ WITH EXPONENT 8)
!           - - - - - - - - - - - - - - - - - - - - - - - - - -
  756       CONTINUE
            CALL FPREAD
     &( TAUX3 , F     , FREQ  , DFREQ , NF    , NPLAN , NPOIN2, 8.D0  ,
     &  TAILF , TAUX1 , TAUX2 )
!
  759       CONTINUE
!
        ENDIF
!
!.........LOOP ON SUB-TIME STEPS FOR BREAKING
!         = = = = = = = = = = = = = = = = = = = = = = = = = = =
          SUME=(XDTBRK**NDTBRK-1.D0)/(XDTBRK-1.D0)
          DTN=DTSI/SUME
!
          DO 782 IDT=1,NDTBRK
!         7.2 INITIALISES THE ARRAYS FOR THE SOURCE-TERMS
!         ----------------------------------------------------
          DO IFF=1,NF
            DO JP=1,NPLAN
              DO IP=1,NPOIN2
                TSTOT(IP,JP,IFF)=0.D0
              ENDDO
            ENDDO
          ENDDO
!
!         7.3 COMPUTES THE TOTAL VARIANCE OF THE SPECTRUM
!         --------------------------------------------
!
          CALL TOTNRJ(VARIAN,F,FREQ,DFREQ,TAILF,NF,NPLAN,NPOIN2)
!
!
!         7.4 COMPUTES THE WAVE BREAKING CONTRIBUTION
!         --------------------------------------
!
!         7.4.1 BREAKING ACCORDING TO BATTJES AND JANSSEN (1978)
!         - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!
          IF(SBREK.EQ.1) THEN
!
          CALL QVEG1
     &( TSTOT , TSDER , F , VARIAN , DEPTH, FMOY , 
     &  XKMOY , NF    , NPLAN  , NPOIN2   , BETA  )
!          CALL QBREK1
!     &( TSTOT , TSDER , F     , TAUX3 , VARIAN, DEPTH , ALFABJ, GAMBJ1,
!     &  GAMBJ2, IQBBJ , IHMBJ , NF    , NPLAN , NPOIN2, BETA )
        WRITE(6,*) 'XKMOT en sortie=',XKMOY(10)
!
!
!         7.4.2 BREAKING ACCORDING TO THORNTON AND GUZA (1983)
!         - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!
          ELSEIF(SBREK.EQ.2) THEN
!  
          CALL QBREK2
     &( TSTOT , TSDER , F     , TAUX3 , VARIAN, DEPTH , BORETG, GAMATG,
     &  IWHTG , NF    , NPLAN , NPOIN2, BETA )
!
!
!         7.4.3 BREAKING ACCORDING TO ROELVINK (1993)
!         - - - - - - - - - - - - - - - - - - - - - -
!
          ELSEIF(SBREK.EQ.3) THEN
!
          CALL QBREK3
     &( TSTOT , TSDER , F     , TAUX3 , VARIAN, DEPTH , ALFARO, GAMARO,
     &  GAM2RO, IEXPRO, IDISRO, NF    , NPLAN , NPOIN2, BETA )
!
!
!         7.4.4 BREAKING ACCORDING TO IZUMIYA AND HORIKAWA (1984)
!         - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!
          ELSEIF(SBREK.EQ.4) THEN
!
          CALL QBREK4
     &( TSTOT , TSDER , F     ,TAUX3,VARIAN,DEPTH,BETAIH,EM2SIH,
     &  GRAVIT, NF    , NPLAN , NPOIN2, BETA )
!
          ELSEIF(SBREK.NE.0) THEN
            IF(LNG.EQ.1) THEN
              WRITE(LU,*) 'TYPE DE DEFERLEMENT NON IMPLANTE : ',SBREK
            ELSE
              WRITE(LU,*) 'BREAKING FORMULATION NOT PROGRAMMED: ',
     &                     SBREK
            ENDIF
            CALL PLANTE(1)
            STOP
          ENDIF
!
!       7.5 NON-LINEAR INTERACTIONS BETWEEN FREQUENCY TRIPLETS
!       -----------------------------------------------------------
          IF(STRIA.EQ.1) THEN
            CALL FREMOY
     &( FMOY  , F     , FREQ  , DFREQ , TAILF , NF    , NPLAN , NPOIN2,
     &  TAUX1 , TAUX2 )
            CALL QTRIA1
     &( F     , XK    , FREQ  , DEPTH , RAISF , ALFLTA, RFMLTA,
     &  NF    , NPLAN , NPOIN2, TSTOT , TSDER , VARIAN, FMOY  )
!
        ELSEIF(STRIA.EQ.2) THEN
            CALL QTRIA2
     &( F     , XK    , FREQ  , DFREQ , DEPTH , TETA  , SINTET, COSTET ,
     &  KSPB  , BDISPB, BDSSPB, RAISF , NF    , NPLAN , NPOIN2 ,
     &  NBD   , QINDI , TSTOT , TSDER )
        ENDIF
!
!         7.5 UPDATES THE SPECTRUM - TAKES THE BREAKING SOURCE TERM
!             INTO ACCOUNT (EXPLICIT EULER SCHEME)
!         ---------------------------------------------------------
!
        DO IFF=1,NF
          DO JP=1,NPLAN
            DO IP=1,NPOIN2
              F(IP,JP,IFF)=MAX(F(IP,JP,IFF)+DTN*TSTOT(IP,JP,IFF),0.D0)
            ENDDO
          ENDDO
        ENDDO
!
        DTN=DTN*XDTBRK
!
  782   CONTINUE
!
        ENDIF
!
!
!       8. TRANSFERS DATA FROM NEW TO OLD FOR THE NEXT TIME STEP
!       ==============================================================
        IF(VENT) THEN
          DO IP=1,NPOIN2
            USOLD(IP)=USNEW(IP)
            Z0OLD(IP)=Z0NEW(IP)
            TWOLD(IP)=TWNEW(IP)
          ENDDO
        ENDIF
!
!
  100 CONTINUE
!
!     -----------------------------------------------------------------
!     END OF THE MAIN LOOP ON THE NUMBER OF TIME STEPS (NSITS)
!     FOR INTEGRATION OF THE SOURCE TERMS, BY PROPAGATION TIME STEP
!     -----------------------------------------------------------------
!
      RETURN
      END
!                    *****************
                     SUBROUTINE TOM_CORFON
!                    *****************
!
!
!***********************************************************************
! TOMAWAC   V6P1                                   14/06/2011
!***********************************************************************
!
!brief    MODIFIES THE BOTTOM TOPOGRAPHY.
!
!warning  USER SUBROUTINE; MUST BE CODED BY THE USER
!
!history  F. MARCOS
!+
!+
!+
!
!history  OPTIMER (    )
!+        12/01/2001
!+
!+   TOMAWAC/COWADIS MERGE
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        13/07/2010
!+        V6P0
!+   Translation of French comments within the FORTRAN sources into
!+   English comments
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        21/08/2010
!+        V6P0
!+   Creation of DOXYGEN tags for automated documentation and
!+   cross-referencing of the FORTRAN sources
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE BIEF
      USE DECLARATIONS_TOMAWAC
!
      IMPLICIT NONE
!
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
!
!
CVB---------------------------------MODIF debut
      INTEGER IP
!
      DO IP=1,NPOIN2
        ZF(IP) = -2.0D0
      ENDDO
CVB---------------------------------MODIF fin
!
!
      RETURN
      END
!
!                    *****************
                     SUBROUTINE QVEG1
!                    *****************
!
     &( TSTOT , TSDER , F , VARIAN , DEPTH, FMOY , 
     &  XKMOY , NF    , NPLAN  , NPOIN2   , BETA  )
!
!***********************************************************************
! TOMAWAC   V6P3                                   23/06/2011
!***********************************************************************
!
!brief    COMPUTES THE CONTRIBUTION OF THE WHITECAPPING
!+                SOURCE TERM BASED ON KOMEN ET AL. (1984).
!
!note     CMOUT1 (USED IN WAM-CYCLE 4) EQUALS 4.5.
!note   CMOUT2 (USED IN WAM-CYCLE 4) EQUALS 0.5.
!
!reference  KOMEN G.J., HASSELMANN S., HASSELMANN K. (1984) :
!+                     "ON THE EXISTENCE OF A FULLY DEVELOPED WINDSEA
!+                      SPECTRUM". JPO, VOL 14, PP 1271-1285.
!
!history  P. THELLIER; M. BENOIT (EDF/DER/LNH)
!+        06/04/95
!+        V1P0
!+
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        13/07/2010
!+        V6P0
!+   Translation of French comments within the FORTRAN sources into
!+   English comments
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        21/08/2010
!+        V6P0
!+   Creation of DOXYGEN tags for automated documentation and
!+   cross-referencing of the FORTRAN sources
!
!history  G.MATTAROLO (EDF - LNHE)
!+        23/06/2011
!+        V6P1
!+   Translation of French names of the variables in argument
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| BETA           |<--| WORK TABLE
!| CMOUT1         |-->| WHITE CAPPING DISSIPATION COEFFICIENT
!| CMOUT2         |-->| WHITE CAPPING WEIGHTING COEFFICIENT
!| ENRJ           |-->| SPECTRUM VARIANCE
!| F              |-->| DIRECTIONAL SPECTRUM
!| FMOY           |-->| MEAN SPECTRAL FRQUENCY FMOY (relative frequency)
!| FREQ           |-->| DISCRETIZED FREQUENCIES
!| NF             |-->| NUMBER OF FREQUENCIES
!| NPLAN          |-->| NUMBER OF DIRECTIONS
!| NPOIN2         |-->| NUMBER OF POINTS IN 2D MESH
!| PROINF         |-->| LOGICAL INDICATING INFINITE DEPTH ASSUMPTION
!| TAUX1          |<--| WORK TABLE
!| TSDER          |<->| DERIVED PART OF THE SOURCE TERM CONTRIBUTION
!| TSTOT          |<->| TOTAL PART OF THE SOURCE TERM CONTRIBUTION
!| XK             |-->| DISCRETIZED WAVE NUMBER
!| XKMOY          |-->| AVERAGE WAVE NUMBER
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE DECLARATIONS_TOMAWAC, ONLY : DEUPI,GRAVIT,PI
!
      IMPLICIT NONE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER, INTENT(IN)             :: NF,NPLAN,NPOIN2
      DOUBLE PRECISION, INTENT(IN)    :: XKMOY(NPOIN2),VARIAN(NPOIN2) 
      DOUBLE PRECISION, INTENT(IN)    :: DEPTH(NPOIN2),FMOY(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: BETA(NPOIN2)
      DOUBLE PRECISION, INTENT(INOUT) :: TSTOT(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(INOUT) :: TSDER(NPOIN2,NPLAN,NF)
      DOUBLE PRECISION, INTENT(IN)    :: F(NPOIN2,NPLAN,NF)
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER  JP    , JF    , IP
      DOUBLE PRECISION C1,CVEG,CD,NV,BV,ALFA,KH,AKH,RO
      DOUBLE PRECISION AUX,NUM,DENUM,SHAKH
!
!     COEFFICIENTS DE DISSIPATION LIES À LA VEGETATION
      RO = 1.D0
      NV = 10
      BV = 0.04
      CD = 1.D0
      ALFA = 1.D0
      C1 = - DSQRT(2.0D0/PI)*GRAVIT**2
      CVEG = C1*CD*BV*NV/(DEUPI**3)
!
!       VEGETATION OVER A CONSTAT DEPTHV
!       COMPUTES THE BETA COEFFICIENT : QVEG1 = BETA * F
!    
        DO IP=1,NPOIN2
          KH = XKMOY(IP)*DEPTH(IP)
          AKH = ALFA*KH
          SHAKH = SINH(AKH)
          NUM = SHAKH*(SHAKH**2 + 3)
          DENUM = 3.0D0*XKMOY(IP)*COSH(KH)**3
          AUX = (XKMOY(IP)/FMOY(IP))**3
          BETA(IP) = RO*CVEG*AUX*(NUM/DENUM)*DSQRT(VARIAN(IP))
          write(*,*) 'BETA',BETA(IP)
        ENDDO
        WRITE(6,*)'VARIAN(IP) =,FMOY =',VARIAN(10)
!
!       LOOP OVER THE DISCRETISED FREQUENCIES
!          
!         TAKES THE SOURCE TERM INTO ACCOUNT
!         
        DO JF=1,NF
          DO JP=1,NPLAN
            DO IP=1,NPOIN2
              TSTOT(IP,JP,JF) = TSTOT(IP,JP,JF)+BETA(IP)*F(IP,JP,JF)
              TSDER(IP,JP,JF) = TSDER(IP,JP,JF)+BETA(IP)
            ENDDO
          ENDDO
        ENDDO
!        WRITE(6,*) 'TSDER=,BETA=,F=',TSDER(10,2,1),BETA(10),F(10,2,1)
!
!-----------------------------------------------------------------------
!
      RETURN
      END
!
!-----------------------------------------------------------------------
!
!                    *****************
                     SUBROUTINE LIMWAC
!                    *****************
!
     &(F     , FBOR  , LIFBOR, NPTFR , NPLAN , NF    ,  TETA , FREQ  ,
     & NPOIN2, NBOR  , AT    , LT    , DDC   , LIMSPE, FPMAXL, FETCHL,
     & SIGMAL, SIGMBL, GAMMAL, FPICL , HM0L  , APHILL, TETA1L, SPRE1L,
     & TETA2L, SPRE2L, XLAMDL, X ,Y  , KENT  , KSORT , NFO1  , NBI1  ,
     & BINBI1, UV    , VV    , SPEULI, VENT  , VENSTA, GRAVIT, DEUPI ,
     & PRIVE , NPRIV , SPEC  , FRA   , DEPTH , FRABL ,BOUNDARY_COLOUR)
!
!***********************************************************************
! TOMAWAC   V6P3                                   21/06/2011
!***********************************************************************
!
!brief    BOUNDARY CONDITIONS.
!
!warning  BY DEFAULT, THE BOUNDARY CONDITIONS SPECIFIED IN THE FILE
!+            DYNAM ARE DUPLICATED ON ALL THE DIRECTIONS AND FREQUENCIES
!
!history  F. MARCOS (LNH)
!+        01/02/95
!+        V1P0
!+
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        13/07/2010
!+        V6P0
!+   Translation of French comments within the FORTRAN sources into
!+   English comments
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        21/08/2010
!+        V6P0
!+   Creation of DOXYGEN tags for automated documentation and
!+   cross-referencing of the FORTRAN sources
!
!history  G.MATTAROLO (EDF - LNHE)
!+        20/06/2011
!+        V6P1
!+   Translation of French names of the variables in argument
!
!history  E. GAGNAIRE-RENOU & J.-M. HERVOUET (EDF R&D, LNHE)
!+        12/03/2013
!+        V6P3
!+   A line IF(LIMSPE.EQ.0...) RETURN removed.
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| APHILL         |-->| BOUNDARY PHILLIPS CONSTANT
!| AT             |-->| COMPUTATION TIME
!| BINBI1         |-->| BINARY FILE 1 BINARY
!| BOUNDARY_COLOUR|-->| COLOUR OF BOUNDARY POINT (DEFAULT: ITS RANK)
!| DDC            |-->| DATE OF COMPUTATION BEGINNING
!| DEPTH          |-->| WATER DEPTH
!| DEUPI          |-->| 2.PI
!| F              |-->| VARIANCE DENSITY DIRECTIONAL SPECTRUM
!| FBOR           |<->| SPECTRAL VARIANCE DENSITY AT THE BOUNDARIES
!| FETCHL         |-->| BOUNDARY MEAN FETCH VALUE
!| FPICL          |-->| BOUNDARY PEAK FREQUENCY
!| FPMAXL         |-->| BOUNDARY MAXIMUM PEAK FREQUENCY
!| FRA            |<--| DIRECTIONAL SPREADING FUNCTION VALUES
!| FRABL          |-->| BOUNDARY ANGULAR DISTRIBUTION FUNCTION
!| FREQ           |-->| DISCRETIZED FREQUENCIES
!| GAMMAL         |-->| BOUNDARY PEAK FACTOR
!| GRAVIT         |-->| GRAVITY ACCELERATION
!| HM0L           |-->| BOUNDARY SIGNIFICANT WAVE HEIGHT
!| KENT           |-->| B.C.: A SPECTRUM IS PRESCRIBED AT THE BOUNDARY
!| KSORT          |-->| B.C.: FREE BOUNDARY: NO ENERGY ENTERING THE DOMAIN
!| LIFBOR         |-->| TYPE OF BOUNDARY CONDITION ON F
!| LIMSPE         |-->| TYPE OF BOUNDARY DIRECTIONAL SPECTRUM
!| LT             |-->| NUMBER OF THE TIME STEP CURRENTLY SOLVED
!| NBI1           |-->| LOGICAL UNIT NUMBER OF THE USER BINARY FILE
!| NBOR           |-->| GLOBAL NUMBER OF BOUNDARY POINTS
!| NF             |-->| NUMBER OF FREQUENCIES
!| NFO1           |-->| LOGICAL UNIT NUMBER OF THE USER FORMATTED FILE
!| NPLAN          |-->| NUMBER OF DIRECTIONS
!| NPOIN2         |-->| NUMBER OF POINTS IN 2D MESH
!| NPRIV          |-->| NUMBER OF PRIVATE ARRAYS
!| NPTFR          |-->| NUMBER OF BOUNDARY POINTS
!| PRIVE          |-->| USER WORK TABLE
!| SIGMAL         |-->| BOUNDARY SPECTRUM VALUE OF SIGMA-A
!| SIGMBL         |-->| BOUNDARY SPECTRUM VALUE OF SIGMA-B
!| SPEC           |<--| VARIANCE DENSITY FREQUENCY SPECTRUM
!| SPEULI         |-->| INDICATES IF B.C. SPECTRUM IS MODIFIED BY USER
!| SPRE1L         |-->| BOUNDARY DIRECTIONAL SPREAD 1
!| SPRE2L         |-->| BOUNDARY DIRECTIONAL SPREAD 2
!| TETA           |-->| DISCRETIZED DIRECTIONS
!| TETA1L         |-->| BOUNDARY MAIN DIRECTION 1
!| TETA2L         |-->| BOUNDARY MAIN DIRECTION 2
!| UV, VV         |-->| WIND VELOCITIES AT THE MESH POINTS
!| VENSTA         |-->| INDICATES IF THE WIND IS STATIONARY
!| VENT           |-->| INDICATES IF WIND IS TAKEN INTO ACCOUNT
!| X              |-->| ABSCISSAE OF POINTS IN THE MESH
!| XLAMDL         |-->| BOUNDARY WEIGHTING FACTOR FOR ANGULAR
!|                |   | DISTRIBUTION FUNCTION
!| Y              |-->| ORDINATES OF POINTS IN THE MESH
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE INTERFACE_TOMAWAC, EX_LIMWAC => LIMWAC
      IMPLICIT NONE
!
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
!
      INTEGER NPLAN,NF,NPOIN2,NPTFR,LT,NPRIV
      INTEGER, INTENT(IN) :: BOUNDARY_COLOUR(NPTFR)
!
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF),X(NPOIN2),Y(NPOIN2)
      DOUBLE PRECISION FBOR(NPTFR,NPLAN,NF),TETA(NPLAN),FREQ(NF)
      DOUBLE PRECISION UV(NPOIN2),VV(NPOIN2), SPEC(NF), FRA(NPLAN)
      DOUBLE PRECISION PRIVE(NPOIN2,NPRIV),DDC, DEPTH(NPOIN2)
      DOUBLE PRECISION HM0L,FPICL,GAMMAL,SIGMAL,SIGMBL,APHILL,FETCHL
      DOUBLE PRECISION FPMAXL,TETA1L,SPRE1L,TETA2L,SPRE2L,XLAMDL
      DOUBLE PRECISION GRAVIT,DEUPI,E2FMIN
!
      DOUBLE PRECISION AT, DTETAR, DF3, AUX
!
      LOGICAL SPEULI, VENT, VENSTA
!
      INTEGER NBOR(NPTFR),LIFBOR(NPTFR),NFO1,NBI1,NPB
      INTEGER KENT,KSORT,IFF,IPLAN,IPTFR,LIMSPE,FRABL
!
!     DOUBLE PRECISION, ALLOCATABLE :: TRAV(:)
      DOUBLE PRECISION, ALLOCATABLE :: UV2D(:),VV2D(:),PROF(:)
      DOUBLE PRECISION, ALLOCATABLE :: FB_CTE(:,:)
      LOGICAL FLAG
!
      CHARACTER(LEN=3) BINBI1
!
      SAVE NPB,UV2D,VV2D,PROF,FB_CTE
!
!***********************************************************************
!
!     MODIFIES THE TYPE OF BOUNDARY CONDITION (OPTIONAL)
!
!     CAN BE CODED BY THE USER (SPEULI=.TRUE.)
!
!     LIFBOR(IPTFR)=KENT OR KSORT
!
      FLAG=.FALSE.
      IF (VENT .AND. (LIMSPE.EQ.1 .OR. LIMSPE.EQ.2 .OR. LIMSPE.EQ.3
     & .OR. LIMSPE.EQ.5)) FLAG=.TRUE.
!
!     THE FIRST TIME, ALLOCATES MEMORY FOR THE USEFUL ARRAYS
!     ---------------------------------------------------------------
!
      IF(LT.LT.1) THEN
        NPB=1
        IF(FLAG) THEN
          ALLOCATE(UV2D(1:NPTFR),VV2D(1:NPTFR))
          NPB=NPTFR
        ENDIF
        IF(LIMSPE.EQ.7 .OR. SPEULI) THEN
          ALLOCATE(PROF(1:NPTFR))
          NPB=NPTFR
        ENDIF
        IF(NPB.EQ.1) THEN
          ALLOCATE(FB_CTE(1:NPLAN,1:NF))
        ENDIF
      ENDIF
      IF (.NOT.ALLOCATED(UV2D)) ALLOCATE(UV2D(NPTFR))
      IF (.NOT.ALLOCATED(VV2D)) ALLOCATE(VV2D(NPTFR))
      IF (.NOT.ALLOCATED(PROF)) ALLOCATE(PROF(NPTFR))
      IF (.NOT.ALLOCATED(FB_CTE)) ALLOCATE(FB_CTE(1:NPLAN,1:NF))
!
!     THE FIRST TIME (AND POSSIBLY SUBSEQUENTLY IF THE WIND IS NOT
!     STATIONARY AND IF THE BOUNDARY SPECTRUM DEPENDS ON IT),
!     COMPUTES THE BOUNDARY SPECTRUM
!    
      IF(LT.LT.1 .OR. (.NOT.VENSTA.AND.FLAG) .OR. SPEULI) THEN
        IF(FLAG) THEN
          DO IPTFR=1,NPTFR
            UV2D(IPTFR)=UV(NBOR(IPTFR))
            VV2D(IPTFR)=VV(NBOR(IPTFR))
          ENDDO     
        ENDIF
        IF(LIMSPE.EQ.7 .OR. SPEULI) THEN
          DO IPTFR=1,NPTFR
            PROF(IPTFR)=DEPTH(NBOR(IPTFR))
          ENDDO
        ENDIF
!   
        E2FMIN = 1.D-30
!
!       WHEN NPB=1 FBOR ONLY FILLED FOR FIRST POINT
!
!       SPECTRUM ON BOUNDARIES
!
        IF(NPB.EQ.NPTFR) THEN
          CALL SPEINI
     &(   FBOR  ,SPEC  ,FRA   ,UV2D  ,VV2D  ,FREQ ,
     &    TETA  ,GRAVIT,FPMAXL,FETCHL,SIGMAL,SIGMBL,GAMMAL,FPICL,
     &    HM0L  ,APHILL,TETA1L,SPRE1L,TETA2L,SPRE2L,XLAMDL,
     &    NPB   ,NPLAN ,NF    ,LIMSPE,E2FMIN,PROF  ,FRABL )
        ELSE
          CALL SPEINI
     &(   FB_CTE,SPEC  ,FRA   ,UV2D  ,VV2D  ,FREQ ,
     &    TETA  ,GRAVIT,FPMAXL,FETCHL,SIGMAL,SIGMBL,GAMMAL,FPICL,
     &    HM0L  ,APHILL,TETA1L,SPRE1L,TETA2L,SPRE2L,XLAMDL,
     &    NPB   ,NPLAN ,NF    ,LIMSPE,E2FMIN,PROF  ,FRABL )
        ENDIF
!
!     ===========================================================
!     TO BE MODIFIED BY USER - RESU CAN BE CHANGED
!     ===========================================================
!
        IF(SPEULI) THEN
!
!======================================================================
!MJTS MODIF POUR CAS MONOCHROMATIQUE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!======================================================================
!         Permet d'avoir Hm0 = 0.5656 m qui est le Hm0 cible; freq=1 Hz
          DTETAR=DEUPI/DBLE(NPLAN)
          DF3=0.5D0*(FREQ(4)/FREQ(3)-1.0D0)*(FREQ(4)+FREQ(3))
          AUX=(0.5656D0)**2/(16.0D0*DTETAR*DF3)
!
          DO IFF=1,NF
            DO IPLAN=1,NPLAN
              FB_CTE(IPLAN,IFF)=0.0D0
            ENDDO
          ENDDO
!.........Put energy on a single bin : 10th direction (=90 deg for NPLAN=36
!         and 4rd frequency
          FB_CTE(10,4)=AUX
        ENDIF
!
!     ===========================================================
!     END OF USER MODIFICATIONS
!     ===========================================================
      ENDIF
!
!
!     -----------------------------------------------------------------
!     DUPLICATES THE BOUNDARY CONDITION FROM DYNAM ON ALL THE
!     DIRECTIONS AND FREQUENCIES, IF LIQUID BOUNDARY
!     -----------------------------------------------------------------
!       IF (FLAG .OR. LIMSPE.EQ.7 .OR. SPEULI) THEN
!         DO IPTFR=1,NPTFR
!           IF (LIFBOR(IPTFR).EQ.KENT) THEN
!             DO IFF=1,NF
!               DO IPLAN=1,NPLAN
!                 F(NBOR(IPTFR),IPLAN,IFF)=FBOR(IPTFR,IPLAN,IFF)
!               ENDDO
!             ENDDO
!           ENDIF
!         ENDDO
!       ELSE
          DO IPTFR=1,NPTFR
            IF (LIFBOR(IPTFR).EQ.KENT) THEN
              DO IFF=1,NF
                DO IPLAN=1,NPLAN
                  F(NBOR(IPTFR),IPLAN,IFF)=FB_CTE(IPLAN,IFF)
                ENDDO
              ENDDO
            ENDIF
          ENDDO
!       ENDIF
!
      RETURN
      END

!======================================================================
!MJTS - sous-programme ajoute pour mettre a zero toutes les valeurs du
!       spectre, sauf celle du bin (IFREQ, JDIR)
!======================================================================
      SUBROUTINE MONOCRO
     &(F, NPOIN2, NF, NPLAN, IFREQ, JDIR)
!
      IMPLICIT NONE
!
!.....Variables transmises
!     """"""""""""""""""""
      INTEGER NPOIN2, NF, NPLAN, IFREQ, JDIR
      DOUBLE PRECISION F(NPOIN2,NPLAN,NF)
!
!.....Variables locales
!     """"""""""""""""""""
      INTEGER IP, JF, JD
      DOUBLE PRECISION AUX
!
!
      DO IP=1,NPOIN2
        AUX=F(IP,JDIR,IFREQ)
        DO JF=1,NF
          DO JD=1,NPLAN
             F(IP,JD,JF)=0.0D0
          END DO
        END DO
        F(IP,JDIR,IFREQ)=AUX
      END DO
!
      RETURN
      END

!                    **************
                     SUBROUTINE WAC
!                    **************
!
     &(PART, U_TEL, V_TEL, H_TEL, FX_WAC, FY_WAC, UV_WAC, VV_WAC,
     & CODE, T_TEL, DT_TEL,NIT_TEL,PERCOU_WAC,
     & DIRMOY_TEL,HM0_TEL,TPR5_TEL)
!
!***********************************************************************
! TOMAWAC   V6P3                                   25/06/2012
!***********************************************************************
!
!brief    MAIN SUBROUTINE OF TOMAWAC
!+               SOLVES THE EQUATION FOR THE
!+               DIRECTIONAL WAVE SPECTRUM
!
!history  J-M HERVOUET (EDF - LNHE)
!+        29/01/2013
!+        V6P3
!+   Radiation stresses for Telemac now computed independently of the
!+   printouts on results file.
!+   Call to tomawac_constants moved to lecdon_tomawac.
!
!history  J-M HERVOUET (EDF - LNHE)
!+        22/03/2013
!+        V6P3
!+   New arguments DIRMOY_TEL,HM0_TEL, TPR5_TEL for transmission to
!+   Sisyphe through Telemac-2D or 3D. Values computed in case of triple
!+   coupling.
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| CODE           |-->| CALLING PROGRAM (IF COUPLING)
!| DT_TEL         |-->| TELEMAC MODEL TIME STEP
!| FX_WAC         |<--| DRIVING FORCE ALONG X PASSED TO TELEMAC
!| FY_WAC         |<--| DRIVING FORCE ALONG Y PASSED TO TELEMAC
!| H_TEL          |-->| TELEMAC MODEL WATER DEPTH
!| NIT_TEL        |-->| NUMBER OF TELEMAC TIME STEPS
!| PART           |-->| -1: NO COUPLING
!|                |   |  0: COUPLING WITH TELEMAC (INITIALISATION) 
!|                |   |  1: COUPLING WITH TELEMAC (LOOP OVER TIME STEPS) 
!| PERCOU_WAC     |   | VARIABLE CURRENTLY NOT USED
!| T_TEL          |-->| COMPUTATION TIME OF TELEMAC MODEL
!| U_TEL          |-->| CURRENT VELOCITY ALONG X IN TELEMAC MODEL
!| V_TEL          |-->| CURRENT VELOCITY ALONG Y IN TELEMAC MODEL
!| UV_WAC         |<--| WIND VELOCITY ALONG X IN TOMAWAC MODEL
!| VV_WAC         |<--| WIND VELOCITY ALONG Y IN TOMAWAC MODEL
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_TOMAWAC
      USE INTERFACE_TOMAWAC, EX_WAC => WAC
!
      IMPLICIT NONE
!
      INTEGER LNG,LU
      COMMON/INFO/ LNG,LU
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER,           INTENT(IN)      :: PART,NIT_TEL,PERCOU_WAC
      CHARACTER(LEN=24), INTENT(IN)      :: CODE
      TYPE(BIEF_OBJ),    INTENT(IN)      :: U_TEL,V_TEL,H_TEL
      TYPE(BIEF_OBJ),    INTENT(INOUT)   :: DIRMOY_TEL,HM0_TEL,TPR5_TEL
      TYPE(BIEF_OBJ),    INTENT(INOUT)   :: FX_WAC,FY_WAC
      TYPE(BIEF_OBJ),    INTENT(INOUT)   :: UV_WAC,VV_WAC
      DOUBLE PRECISION,  INTENT(IN)      :: DT_TEL,T_TEL
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      DOUBLE PRECISION DT_MIN,DT_MAX
      INTEGER          DUMMY,LT_WAC
!
      INTEGER LT,LT1
      INTEGER NOLEO(99)
      INTEGER DATE(3),TIME(3),IP
!
!     TV1 TEMPS CORRESPONDANT AU VENT 1
!     TV2 TEMPS CORRESPONDANT AU VENT 2
!
      DOUBLE PRECISION LAMBD0,DTSI,AT,AT0,TV1,TV2,TC1,TC2,TM1,TM2
      DOUBLE PRECISION VITVEN,VITMIN
      INTEGER ADC,MDC,JDC,HDC,NVHMA,NVCOU,NVWIN,NBD,K,IPLAN,IFREQ
      LOGICAL IMPRES, DEBRES
!
      INTEGER, ALLOCATABLE :: QINDI(:)
!
      LOGICAL DEJA
      DATA DEJA/.FALSE./
!
!     SAVING LOCAL VARIABLES FROM ONE CALL TO THE OTHER
!     VERY IMPORTANT WITH CODE COUPLING
!
      SAVE
!
!-----------------------------------------------------------------------
!
!     QINDI ALLOCATED ONLY AT FIRST CALL
!
      IF(.NOT.DEJA) THEN
        ALLOCATE(QINDI(NPLAN))
        DEJA=.TRUE.
      ENDIF
!
!=====C
!  1  C INITIALISATIONS DES VARIABLES LOCALES
!=====C======================================
!COUPLAGE : verification des conditions pour le couplage
!           TELEMAC-TOMAWAC
!
      IF(PART.GE.0) THEN
        IF(MAREE.OR.COUSTA.OR.DONTEL) THEN
           IF(LNG.EQ.1) THEN
             WRITE(LU,*) ''
             WRITE(LU,*) '***************************************'
             WRITE(LU,*) ' ATTENTION : COUPLAGE TELEMAC-TOMAWAC :'
             WRITE(LU,*) ' AUCUN FICHIER DE COURANT/MAREE NE DOIT'
             WRITE(LU,*) ' ETRE UTILISE EN ENTREE.               '
             WRITE(LU,*) '           ARRET DU PROGRAMME          '
             WRITE(LU,*) '***************************************'
           ELSE
             WRITE(LU,*) ''
             WRITE(LU,*) '***************************************'
             WRITE(LU,*) ' ATTENTION : COUPLING TELEMAC-TOMAWAC :'
             WRITE(LU,*) ' CURRENT/WATER LEVEL FILE CANNOT BE    '
             WRITE(LU,*) ' USED AS INPUT FILE.                   '
             WRITE(LU,*) '         END OF THE COMPUTATION        '
             WRITE(LU,*) '***************************************'
           ENDIF
           CALL PLANTE(1)
           STOP
        ENDIF
!
        DT_MAX=MAX(DT,DT_TEL)
        DT_MIN=MIN(DT,DT_TEL)
        IF(ABS(NINT(DT_MAX/DT_MIN)-DT_MAX/DT_MIN).GT.1.D-6) THEN
           IF(LNG.EQ.1) THEN
             WRITE(LU,*) ''
             WRITE(LU,*) '***************************************'
             WRITE(LU,*) ' ATTENTION : COUPLAGE TELEMAC-TOMAWAC :'
             WRITE(LU,*) ' LES DEUX PAS DE TEMPS UTILISES NE SONT'
             WRITE(LU,*) ' PAS UN MULTIPLE DE L''AUTRE.          '
             WRITE(LU,*) '           ARRET DU PROGRAMME          '
             WRITE(LU,*) '***************************************'
           ELSE
             WRITE(LU,*) ''
             WRITE(LU,*) '***************************************'
             WRITE(LU,*) ' ATTENTION : COUPLING TELEMAC-TOMAWAC :'
             WRITE(LU,*) ' THE CHOSEN TIME STEPS ARE NOT MULTIPLE'
             WRITE(LU,*) ' OF EACH OTHER.                        '
             WRITE(LU,*) '         END OF THE COMPUTATION        '
             WRITE(LU,*) '***************************************'
           ENDIF
           CALL PLANTE(1)
           STOP
        ENDIF
      ENDIF
!
!.....1.4 INITIALISATION DES TABLEAUX DATE ET TIME
!     
      ADC=INT(DDC*1.D-8)
      MDC=INT(DDC*1.D-6)
      JDC=INT(DDC*1.D-4)
      HDC=INT(DDC*1.D-2)
      DATE(1)=ADC
      DATE(2)=MDC-100*ADC
      DATE(3)=JDC-100*MDC
      TIME(1)=HDC-100*JDC
      TIME(2)=INT(DDC-100.D0*HDC)
      TIME(3)=0
!
!=====C
!  2  C LECTURE DES CONDITIONS LIMITES ET INDICES DES POINTS FRONTIERES
!=====C================================================================
!
!COUPLAGE TELEMAC-TOMAWAC : initialisation
!
      IF(PART.LE.0) THEN
!
!-----------------------------------------------------------------------
!
!     MESH ORGANISATION - 2D LEVEL
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE LECLIM POUR MESH2D'
      CALL LECLIM(SLIFBR%I,SITR31%I,SITR31%I,SITR31%I,SFBOR%R,
     &            STSDER%R,STSDER%R,STSDER%R,STSDER%R,STSDER%R,STSDER%R,
     &            NPTFR,3,.FALSE.,WAC_FILES(WACCLI)%LU,
     &            KENT,KENTU,KSORT,KADH,KLOG,KINC,SITR31%I,
     &            MESH,BOUNDARY_COLOUR%I)
      IF(DEBUG.GT.0) WRITE(LU,*) 'SORTIE DE LECLIM'
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE INBIEF POUR MESH2D'
      CALL INBIEF(SLIFBR%I,KLOG,SITR31,SITR32,SITR33,
     &            LVMAC,IELM2,LAMBD0,SPHE,MESH,STSDER,STSTOT,1,1,EQUA)
      IF(DEBUG.GT.0) WRITE(LU,*) 'SORTIE DE INBIEF'
!
!     EXTENSION OF IKLE2 (SEE CALL TO POST_INTERP IN PROPA)
!
      CALL BUILD_IKLE_EXT(IKLE_EXT%I,IKLE_EXT%DIM1,IKLE2,NELEM2)
!
!     MESH ORGANISATION - 3D LEVEL
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE LECLIM POUR MESH3D'
      CALL LECLIM
     & (SLIFBR%I,SITR31%I,SITR31%I,SITR31%I,SFBOR%R,STSDER%R,STSDER%R,
     &  STSDER%R,STSDER%R,STSDER%R,STSDER%R,NPTFR,3,.FALSE.,
     &  WAC_FILES(WACCLI)%LU,
     &  KENT,KENTU,KSORT,KADH,KLOG,KINC,SITR31%I,MESH3D)
      IF(DEBUG.GT.0) WRITE(LU,*) 'SORTIE DE LECLIM'
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE INBIEF POUR MESH3D'
      CALL INBIEF(SLIFBR%I,KLOG,SITR31,SITR32,SITR33,
     &            LVMAC,IELM3,LAMBD0,SPHE,MESH3D,
     &            STSDER,STSTOT,1,1,EQUA)
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE INBIEF'
!
!     3D IFABOR
!
      CALL IFABTOM(MESH3D%IFABOR%I,NELEM2,NPLAN-1)
!
!-----------------------------------------------------------------------
!
!     V6P2 Diffraction : FREEMESH METHOD
!
      IF(DIFFRA.GT.0) THEN
        IF(NCSIZE.GT.1.AND.OPTDER.EQ.1) THEN
          IF(LNG.EQ.1) THEN
            WRITE(LU,*) ''
            WRITE(LU,*) '***************************************'
            WRITE(LU,*) ' ATTENTION : DIFFRACTION               '
            WRITE(LU,*) ' OPTION POUR LES DERIVEES SECONDES   '
            WRITE(LU,*) ' PASSE A 2 EN PARALLELE              '
            WRITE(LU,*) '***************************************'
          ELSE
            WRITE(LU,*) ''
            WRITE(LU,*) '***************************************'
            WRITE(LU,*) ' ATTENTION : DIFFRACTION               '
            WRITE(LU,*) ' OPTION FOR THE SECOND DERIVATIVES     '
            WRITE(LU,*) ' SET TO 2 IN PARALLEL MODE             '
            WRITE(LU,*) '***************************************'
          ENDIF
        ENDIF
        WRITE(LU,*) '****************************************'
        WRITE(LU,*) 'DIFFRACTION IS TAKEN INTO ACCOUNT      '
        WRITE(LU,*) 'STARTING FROM TIME STEP ',NPTDIF
        IF(DIFFRA.EQ.1) THEN
          WRITE(LU,*) 'MILD SLOPE EQUATION FORMULATION'
        ELSE
          WRITE(LU,*)'REVISED MILD SLOPE EQUATION FORMULATION'
        ENDIF
        WRITE(LU,*) '****************************************'
!
!    SETS UP OF THE SUBDOMAINS FOR THE FREEMSESH METHOD
!    AND CALCULATES THE INVERSE MATRICES FOR EACH SUBDOMAIN
!
        IF(OPTDER.EQ.1) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE FREEMESH'
          CALL FRMSET(MESH%X%R, MESH%Y%R,SNEIGB%I,SNB_CLOSE%I,
     &                NPOIN2  , MAXNSP , NRD    , NELEM2 ,
     &                MESH%IKLE%I,SRK%R, SRX%R  ,SRY%R   ,
     &                SRXX%R  , SRYY%R )
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE FREEMESH'
        ENDIF
      ENDIF
!
!-----------------------------------------------------------------------
!
! LECTURE DE LA COTE DU FOND (ZF) SUR LE FICHIER DE GEOMETRIE
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE FONSTR'
      CALL FONSTR(ST1,SZF,ST2,ST3,WAC_FILES(WACGEO)%LU,
     &            WAC_FILES(WACGEO)%FMT,
     &            WAC_FILES(WACFON)%LU,WAC_FILES(WACFON)%NAME,MESH,
     &            1.D0,.TRUE.)
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE FONSTR'
!
! CORRECTION EVENTUELLE DES VALEURS DU FOND (OU CALCUL DU FOND SI CELA
! N'A PAS ETE FAIT DANS FONSTR)
! EN STANDARD, TOM_CORFON NE FAIT RIEN (ATTENTION, ALLER CHERCHER LE TOM_CORFON
! DE TOMAWAC).
! DANS LE CAS DE COUPLAGE AVEC TELEMAC, ON LIT LE FOND A PARTIR DU
! MODELE TELEMAC ET TOM_CORFON N EST PAS UTILISE
!
      IF(PART.LT.0)THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE TOM_CORFON'
        CALL TOM_CORFON
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE TOM_CORFON'
      ENDIF
!
!     CALCUL DE LA PROFONDEUR D'EAU (TABLEAU DEPTH)
!
      DO IP=1,NPOIN2
        DEPTH(IP)=MAX(ZREPOS-ZF(IP),0.9D0*PROMIN)
      ENDDO
!
!-----------------------------------------------------------------------
!
!     PREPARATION DES SORTIES GRAPHIQUES
!
!     CREATION DU JEU DE DONNEES POUR UN FORMAT DE FICHIER FORMAT_RES.
!     LE JEU DE DONNEES EST CREE DANS LE FICHIER NRES, ET EST DEFINI  
!     PAR UN TITRE ET LES VARIABLES A ECRIRE.
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE CREATE_DATASET'
      CALL CREATE_DATASET(WAC_FILES(WACRES)%FMT, ! FORMAT FICHIER RESULTAT
     &                    WAC_FILES(WACRES)%LU,  ! LU FICHIER RESULTAT
     &                    TITCAS,     ! TITRE DE L'ETUDE
     &                    MAXVAR,     ! MAX VARIABLES SORTIE
     &                    TEXTE,      ! NOMS VARIABLES SORTIE
     &                    SORLEO)     ! SORTIE OU PAS DES VARIABLES
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE CREATE_DATASET'
!
!     ECRITURE DU MAILLAGE DANS LE FICHIER SORTIE :
!     SI ON EST ON PARALLEL, FAUT L'INDIQUER VIA NCSIZE ET NPTIR.
!     LES AUTRES INFORMATIONS SONT DANS MESH.
!     EN PLUS : DATE/TEMPS DE DEPART ET LES COORDONNEES DE L'ORIGINE.
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE WRITE_MESH'
      CALL WRITE_MESH(WAC_FILES(WACRES)%FMT, ! FORMAT FICHIER RESULTAT
     &                WAC_FILES(WACRES)%LU,  ! LU FICHIER RESULTAT
     &                MESH,          ! DESCRIPTEUR MAILLAGE
     &                1,             ! NOMBRE DE PLAN /NA/
     &                DATE,          ! DATE DEBUT
     &                TIME,          ! HEURE DEBUT
     &                I_ORIG,J_ORIG) ! COORDONNEES DE L'ORIGINE.
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE WRITE_MESH'
!
!-----------------------------------------------------------------------
!
! CONDITIONS INITIALES
!
!
!
!=====C INITIALISATION DES VECTEURS DE DISCRETISATION, DU COURANT,
!  2  C DU VENT ET DU SPECTRE DE VARIANCE.
!=====C===========================================================
!
      LT=0
      DTSI=DT/NSITS
!
!-----------------------------------------------------------------------
!
!     INITIALISES TETA
!     BY DEFAULT THE DIRECTIONS OF PROPAGATION ARE EVENLY DISTRIBUTED
!
      DO IPLAN = 1,NPLAN+1
        TETA(IPLAN) = (IPLAN-1)*DEUPI/NPLAN
      ENDDO
!
!-----------------------------------------------------------------------
!
!     INITIALISES FREQ AND DFREQ, THE FREQUENCIES OF PROPAGATION
!     ARE DISTRIBUTED USING AN EXPONENTIAL LAW
!
      DO IFREQ = 1,NF
        FREQ(IFREQ) = F1*RAISF**(IFREQ-1)
      ENDDO
!
!-----------------------------------------------------------------------
!
!     INITIALISING DZHDT (BUT MAYBE REDONE IN LECSUI OR CONDIW)
!
      DO IP=1,NPOIN2
        SDZHDT%R(IP)=0.D0
      ENDDO
!
      IF(SUIT) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE LECSUI'
        CALL LECSUI(SF%R  ,NPLAN ,NF    ,STETA%R, SFR%R  ,
     &              NELEM2,NPOIN2,AT    ,SUC%R  , SVC%R  ,
     &              SUC1%R,SVC1%R,SUC2%R,SVC2%R , SUV%R  ,
     &              SVV%R ,SUV1%R,SVV1%R,SUV2%R , SVV2%R ,
     &              VENT  ,TV1   ,TV2   ,COUSTA.OR.PART.EQ.0 ,
     &              WAC_FILES(WACPRE)%LU,
     &              BINPRE,SDEPTH%R,TC1,TC2,ZM1,ZM2,
     &              SDZHDT%R,TM1,TM2,MAREE.OR.PART.EQ.0,STSDER%R)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE LECSUI'
      ELSE
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE CONDIW'
        CALL CONDIW(AT,LT,TC1,TC2,TV1,TV2,TM1,TM2, 
     &              NVHMA,NVCOU,NVWIN,PART,U_TEL,V_TEL,H_TEL)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE CONDIW'
!       JMH: DEPTH MAY BE MODIFIED IN CONDIW
        DO IP=1,NPOIN2
          IF(DEPTH(IP).LT.PROMIN) DEPTH(IP)=0.9D0*PROMIN
        ENDDO
      ENDIF
!
!      IF(RAZTIM) AT=0.D0
!
      AT0=AT
!
      DO IP=1,NPOIN2
        IF(DEPTH(IP).LE.0.D0) THEN
          IF(LNG.EQ.1) THEN
            WRITE(LU,*) ''
            WRITE(LU,*) '*************************'
            WRITE(LU,*) ' ! PROFONDEUR NEGATIVE ! '
            WRITE(LU,*) '   ARRET DU PROGRAMME    '
            WRITE(LU,*) '*************************'
            CALL PLANTE(1)
          ELSEIF(LNG.EQ.2) THEN
            WRITE(LU,*) ''
            WRITE(LU,*) '**************************'
            WRITE(LU,*) ' ! NEGATIVE WATER DEPTH ! '
            WRITE(LU,*) '   END OF THE COMPUTATION '
            WRITE(LU,*) '**************************'
          ENDIF
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDDO
!
!=====C
!  4  C CALCULS PREPARATOIRES POUR INTERACTIONS NON-LINEAIRES.
!=====C=======================================================
!.....DIA method (Hasselmann et al., 1985)
!
      IF(STRIF.EQ.1) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PRENL1'
        CALL PRENL1( IANGNL, COEFNL, NPLAN , NF , RAISF , XLAMD )
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PRENL1'
!
!.....MDIA method (Tolman, 2004)
!
      ELSEIF (STRIF.EQ.2) THEN
!.....Setting parametres for MDIA
        XLAMDI(1)=0.075D0
        XMUMDI(1)=0.023D0
        XLAMDI(2)=0.219D0
        XMUMDI(2)=0.127D0
        XLAMDI(3)=0.299D0
        XMUMDI(3)=0.184D0
        XLAMDI(4)=0.394D0
        XMUMDI(4)=0.135D0
!        
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PRENL2'
        DO K=1,MDIA
          CALL PRENL2(IANMDI(1,1,K),COEMDI(1,K),NPLAN,NF,RAISF,
     *                XLAMDI(K),XMUMDI(K))
        ENDDO
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PRENL2'
!        
!.....GQM method (Lavrenov, 2001)
!   
      ELSEIF(STRIF.EQ.3) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PRENL3'
        CALL PRENL3
     *( NF    , NPLAN , RAISF , TAILF , FREQ  , TB_SCA, LBUF  , DIMBUF,
     *  F_POIN, F_COEF, T_POIN, F_PROJ, IQ_OM1, NQ_TE1, NQ_OM2, NF1   ,
     *  NT1   , K_IF1 , K_IF2 , K_IF3 , TB_V14, TB_V24, TB_V34, K_1P  , 
     *  K_1M  , K_1P2P, K_1P3M, K_1P2M, K_1P3P, K_1M2P, K_1M3M, K_1M2M,
     *  K_1M3P, TB_TPM, TB_TMP, TB_FAC, SEUIL1, SEUIL2, ELIM  , NCONF ,
     *  NCONFM, IDCONF)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PRENL3'
      ENDIF       
!
      IF(STRIA.EQ.2) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PREQT2'
        CALL PREQT2(STETA%R,NPLAN,BDISPB,BDSSPB,NBD,QINDI)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PREQT2'
      ENDIF
!
!=====C INITIALISATION DE LA CONTRAINTE DE HOULE, PUIS CALCUL DES
!  5  C VITESSE DE FROTTEMENT U*, RUGOSITE Z0 ET DIRECTION INITIALES.
!=====C==============================================================
!
!.....5.1 INITIALISATION DE LA CONTRAINTE DE HOULE INITIALE.
!     """"""""""""""""""""""""""""""""""""""""""""""""""""""
      CALL OV('X=C     ',STRA41%R,STRA32%R,STRA33%R,0.D0,NPOIN2)
!
!.....5.2 CALCUL DE U* ET Z0 SELON LA METHODE CONSIDEREE.
!     """""""""""""""""""""""""""""""""""""""""""""""""""
      IF (VENT) THEN
        IF (SVENT.EQ.1) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE USTAR1'
          CALL USTAR1
     &( STRA42%R , STRA44%R , STRA41%R , SUV%R , SVV%R ,
     &  CDRAG    , ALPHA    , XKAPPA   , ZVENT , GRAVIT,
     &  NPOIN2   )
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE USTAR1'
        ELSEIF (SVENT.GE.2) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE USTAR2'
          CALL USTAR2(STRA42%R,SUV%R,SVV%R,NPOIN2)
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE USTAR2'
        ELSEIF (SVENT.EQ.0.AND.LVENT.EQ.1) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE USTAR2'
          CALL USTAR2(STRA42%R,SUV%R,SVV%R,NPOIN2)
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE USTAR2' 
        ELSEIF (SVENT.EQ.0.AND.LVENT.EQ.0.AND.SMOUT.EQ.2) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE USTAR2'
          CALL USTAR2(STRA42%R,SUV%R,SVV%R,NPOIN2)
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE USTAR2'    
        ELSE
          IF(LNG.EQ.1) THEN
            WRITE(LU,*)
     &      'PB DANS WAC : VENT PRESENT, MAIS SVENT NON CORRECT'
          ELSE
            WRITE(LU,*)
     &      'PB IN WAC : WIND PRESENT, BUT SVENT NOT CORRECT'
          ENDIF
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDIF
!
!.....5.3 CALCUL DE LA DIRECTION DU VENT
!     """"""""""""""""""""""""""""""""""
      VITMIN=1.D-3
      IF (VENT) THEN
        DO IP=1,NPOIN2
          VITVEN=SQRT(SUV%R(IP)**2+SVV%R(IP)**2)
          IF (VITVEN.GT.VITMIN) THEN
            STRA43%R(IP)=ATAN2(SUV%R(IP),SVV%R(IP))
          ELSE
            STRA43%R(IP)=0.D0
          ENDIF
        ENDDO
      ENDIF
!
!=====C
!  6  C INITIALISATION DE CERTAINS TABLEAUX UTILES.
!=====C============================================
!
!     COUPLAGE TELEMAC-TOMAWAC si PART=0
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE INITAB'
      CALL INITAB( SIBOR%I, MESH%IFABOR%I, NELEM2, PART)
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE INITAB'
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE IMPR'
      CALL IMPR(LISPRD,LT,AT,LT,3)
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE IMPR'
!
!=====C
!  7  C AFFECTATION DES CONDITIONS AUX LIMITES A L'INSTANT INITIAL.
!=====C============================================================
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE LIMWAC'
      CALL LIMWAC
     &(SF%R    , SFBOR%R , SLIFBR%I , NPTFR  , NPLAN , NF    ,
     & STETA%R , SFR%R   , NPOIN2   , NBOR   , AT    , LT    ,
     & DDC     , LIMSPE  , FPMAXL   , FETCHL , SIGMAL, SIGMBL,
     & GAMMAL  , FPICL   , HM0L     , APHILL , TETA1L, SPRE1L,
     & TETA2L  , SPRE2L  , XLAMDL   , MESH%X%R   ,
     & MESH%Y%R, KENT    , KSORT    , WAC_FILES(WACFO1)%LU  ,
     & WAC_FILES(WACBI1)%LU         , BINBI1 ,
     & SUV%R   , SVV%R   , SPEULI   , VENT  , VENSTA, GRAVIT ,
     & DEUPI   , SPRIVE%R, NPRIV    , STRA31%R , STRA32%R,
     & DEPTH   , FRABL   , BOUNDARY_COLOUR%I)
       IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE LIMWAC'
!
!=====C CALCUL DES NOMBRES D'ONDE (XK), DE LA VITESSE DE GROUPE (CG) ET
!  8  C DU FACTEUR DE PASSAGE (B) EN SPECTRE DE VARIANCE EN (FR,TETA).
!=====C=================================================================
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE INIPHY'
      CALL INIPHY
     &( SXK%R   , SCG%R , SB%R , SDEPTH%R , SFR%R ,
     &  SCOSF%R , NPOIN2   , NF      , PROINF      , SPHE     )
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE INIPHY'
!
!=====C
!  8b C MISE A ZERO DU SPECTRE SUR LES POINTS OU PROF < PROMIN
!=====C=======================================================
!
      IF(.NOT.PROINF) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE ECRETE'
        CALL ECRETE(SF%R,SDEPTH%R,NPOIN2,NPLAN,NF,PROMIN)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE ECRETE'
      ENDIF
!
!=====C
!  9  C SORTIES GRAPHIQUES (EVENTUELLES) A L'ETAT INITIAL.
!=====C===================================================
!
!.....9.1 CHOIX DES POINTS DE SORTIE DU SPECTRE DIRECTIONNEL.
!     
!
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PROXIM'
      IF(NPLEO.GT.0) THEN
        CALL PROXIM(NOLEO,XLEO,YLEO,MESH%X%R,MESH%Y%R,
     &              NPLEO,NPOIN2,MESH%IKLE%I,NELEM2,NELEM2)
      ENDIF
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PROXIM'
!
!.....9.2 TEST POUR SAVOIR SI ON IMPRIME OU PAS.
!     
      IMPRES=.FALSE.
      DEBRES=.FALSE.
      IF(LT.EQ.GRADEB) THEN
        IMPRES=.TRUE.
        DEBRES=.TRUE.
      ENDIF
!
      IF(IMPRES) THEN
!
!.....9.3 IMPRESSION (EVENTUELLE) DES VARIABLES SUR LE MAILLAGE 2D.
!
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE DUMP2D'
!
!       THE VARIABLES ARE COMPUTED HERE WITH THE ORIGINAL SPECTRUM
!       DONE IN SPEINI, THERE IS NO CALL TRANSF BEFORE BECAUSE
!       CURRENTS ARE NOT TAKEN INTO ACCOUNT IN SPEINI
!
        CALL DUMP2D(LT,SF%R,NPOIN3*NF)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE DUMP2D'
!
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE BIEF_DESIMP'
        CALL BIEF_DESIMP(WAC_FILES(WACRES)%FMT,VARSOR,
     &            HIST,0,NPOIN2,WAC_FILES(WACRES)%LU,'STD',AT,
     &            LT,GRAPRD,GRAPRD,
     &            SORLEO,SORIMP,MAXVAR,TEXTE,GRADEB,GRADEB)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE BIEF_DESIMP'
!
!.....9.4 IMPRESSION (EVENTUELLE) DES SPECTRES DIRECTIONNELS.
!    
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE ECRSPE'
        CALL ECRSPE
     &( SF%R    , STETA%R, NPLAN ,
     &  SFR%R   , NF  , NF   , NPOIN2      , AT ,
     &  STSDER%R, NOLEO , NPLEO , WAC_FILES(WACLEO)%LU ,
     &  WAC_FILES(WACLEO)%FMT, DEBRES , TITCAS , DATE , TIME ,
     &  MESH%KNOLG%I ,MESH ,WAC_FILES(WACSPE)%LU ,
     &  WAC_FILES(WACSPE)%NAME)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE ECRSPE'
!
      ENDIF
!
!     CASE OF TRIPLE COUPLING, INITIAL CONDITIONS     
!
      IF(INCLUS(COUPLING,'SISYPHE').AND.PART.EQ.0) THEN
!       3 VARIABLES THAT WILL BE TRANSMITTED TO SISYPHE
!       ALL THIS IF BLOCK ADAPTED FROM DUMP2D
!       MEAN DIRECTION
        CALL TETMOY(DIRMOY_TEL%R,SF%R,SCOSTE%R,SSINTE%R,
     &             NPLAN,FREQ,SDFR%R,NF,NPOIN2,TAILF,STRA36%R,
     &             STRA37%R,STRA38%R,STRA39%R)
        IF(TRIGO) THEN
          DO IP=1,NPOIN2
            DIRMOY_TEL%R(IP)=(PISUR2-DIRMOY_TEL%R(IP))*GRADEG
          ENDDO
        ELSE
          DO IP=1,NPOIN2
            DIRMOY_TEL%R(IP)=DIRMOY_TEL%R(IP)*GRADEG
          ENDDO
        ENDIF
!       SIGNIFICANT WAVE HEIGHT
        CALL TOTNRJ(STRA37%R,SF%R,SFR%R,SDFR%R,TAILF,
     &              NF,NPLAN,NPOIN2)
        DO IP=1,NPOIN2
          HM0_TEL%R(IP)=4.D0*SQRT(TRA37(IP))
        ENDDO
!       TPR5
        CALL FPREAD(TPR5_TEL%R,SF%R,SFR%R,SDFR%R,NF,NPLAN,
     &              NPOIN2,5.D0,TAILF,STRA38%R,STRA39%R)
        DO IP=1,NPOIN2
          TPR5_TEL%R(IP)=
     &    1.D0/MIN(MAX(TPR5_TEL%R(IP),FREQ(1)),FREQ(NF))
        ENDDO
      ENDIF
!
!=====C
!  10 C PREPARATION DE LA PROPAGATION (REMONTEE DES CARACTERISTIQUES).
!=====C===============================================================
!
      IF(PROP) THEN
!
        CALL IMPR(LISPRD,LT,AT,LT,1)
        CALL IMPR(LISPRD,LT,AT,LT,2)
!
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PREPRO 1'
!
        CALL PREPRO
!        EX-SCX      EX-SCY (MEMORY OPTIMISATION)
     & ( STSDER    , STSTOT   , SCT      , SCF     , DT  ,
     &   MESH%X%R , MESH%Y%R  , STETA    ,
     &   SCOSTE%R , SSINTE%R  , SFR      , MESH%IKLE%I   ,
     &   SIBOR%I  , SETAP1%I  , STRA01%R , SSHP1 ,
     &   SSHZ     , SSHF      ,
     &   SELT%I   , SETA%I    , SFRE%I   , SDEPTH%R,
     &   SDZHDT%R , SDZX%R    , SDZY%R   , SUC%R   ,
     &   SVC%R    , SDUX%R    , SDUY%R   , SDVX%R  ,
     &   SDVY%R   , SXK%R     , SCG%R    , SCOSF%R ,
     &   STGF%R   , SITR01%I  , NPOIN3   , NPOIN2  , NELEM2,
     &   NPLAN    , NF    , MESH%SURDET%R, COURAN.OR.PART.EQ.0,
     &   SPHE     , PROINF   , PROMIN,MESH,MESH3D,MESH%IKLE,TB,
     &   IELM3    , DIFFRA   , MAREE ,ISUB)
!Fin COUPLAGE
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PREPRO 1'
!
      ENDIF
!
!COUPLAGE : end cycle IF(PART.LE.0) pour couplage avec TELEMAC
      ENDIF
!
!=====C
!  11 C BOUCLE EN TEMPS PRINCIPALE.
!=====C============================
!
!COUPLAGE TELEMAC-TOMAWAC
      IF(PART.NE.0) THEN
!
!Preparation au couplage : on calcule le nombre de cycle
! de la boucle en temps, selon la duree du pas de temps dans
! Telemac (DT_TEL) et dans Tomawac (DT).
! On assigne a DUMMY la valeur originaire du nombre de pas
! de temps specifie dans le fichier .cas de Tomawac.
      IF(PART.EQ.1) THEN
        AT=T_TEL
        DUMMY=NIT
        IF(DT.GE.DT_TEL) NIT=1
        IF(DT.LT.DT_TEL) NIT=NINT(DT_TEL/DT)
      ENDIF
!Fin COUPLAGE
!
!COUPLAGE TELEMAC-TOMAWAC : LT est defini comme le numero de pas
!         de temps effectifs de TOMAWAC. La variable LT_WAC
!         compte les pas de temps de chaque boucle, meme
!         quand TOMAWAC est appele par TELEMAC
!      DO 10 LT=1,NIT
      DO 10 LT_WAC=1,NIT
!
!.....11.1 AFFECTATION DE LA DATE DE FIN DU PAS DE TEMPS COURANT.
!    
      AT=AT+DT
!Calcul de LT (NOTE JMH: WHY NOT LT=LT+1 ?)
      LT=NINT((AT-AT0)/DT)
!
!Fin COUPLAGE
!
      CALL IMPR(LISPRD,LT,AT,LT,3)
!
!     11.2 AFFECTATION DES CONDITIONS AUX LIMITES.
!     
      IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE LIMWAC'
      CALL LIMWAC
     &(SF%R    , SFBOR%R , SLIFBR%I , NPTFR  , NPLAN , NF    ,
     & STETA%R , SFR%R   , NPOIN2      , NBOR   , AT    , LT    ,
     & DDC     , LIMSPE  , FPMAXL      , FETCHL , SIGMAL, SIGMBL,
     & GAMMAL     , FPICL      , HM0L  , APHILL , TETA1L, SPRE1L,
     & TETA2L     , SPRE2L     , XLAMDL, MESH%X%R   ,
     & MESH%Y%R   , KENT       , KSORT , WAC_FILES(WACFO1)%LU ,
     & WAC_FILES(WACBI1)%LU    , BINBI1,
     & SUV%R   , SVV%R   , SPEULI      , VENT  , VENSTA, GRAVIT ,
     & DEUPI      , SPRIVE%R, NPRIV      , STRA31%R , STRA32%R,
     & DEPTH      , FRABL   ,BOUNDARY_COLOUR%I)
      IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE LIMWAC'
!
!     11.2b MISE A ZERO DU SPECTRE SUR LES POINTS OU PROF < PROMIN
!     
      IF (.NOT.PROINF) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE ECRETE'
        CALL ECRETE(SF%R,SDEPTH%R,NPOIN2,NPLAN,NF,PROMIN)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE ECRETE'
      ENDIF
!
      IF(MAREE) THEN
        LT1=MAX((LT/LAM)*LAM,2)
!       JMH 08/02/20013 : THIS WAS DONE TO ADD AFTER THE
!       ELEVATION READ IN CORMAR. NOW WE READ DIRECTLY THE DEPTH
!       SO THIS IS PROBABLY USELESS.
        IF(LT.EQ.LT1) THEN
          DO IP=1,NPOIN2
            DEPTH(IP)=ZREPOS-ZF(IP)
          ENDDO
        ENDIF
      ENDIF
!
!......11.3 UPDATING DEPTH AND CURRENTS
!      
!     COUPLING TELEMAC-TOMAWAC OR CURRENTS AND/OR DEPTH IN A FILE
!     THEY ARE UPDATED HERE.
!         
      IF(MAREE.AND.LT.EQ.LT1.OR.
     &   (PART.EQ.1.AND.LT_WAC.EQ.1)) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE CORMAR'       
        CALL CORMAR(AT,LT,TC1,TC2,TV1,TV2,TM1,TM2,
     &              NVHMA,NVCOU,PART,U_TEL,V_TEL,H_TEL)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE CORMAR'
        DO IP=1,NPOIN2
          IF(DEPTH(IP).LT.PROMIN) DEPTH(IP)=0.9D0*PROMIN
        ENDDO
!
!......11.3.1 PREPARING PROPAGATION (METHOD OF CHARACTERISTICS).
!      
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE INIPHY'
        CALL INIPHY(SXK%R,SCG%R,SB%R,SDEPTH%R,SFR%R,
     &              SCOSF%R,NPOIN2,NF,PROINF,SPHE)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE INIPHY'
!
        IF(PROP) THEN
!
         CALL IMPR(LISPRD,LT,AT,LT,1)
         CALL IMPR(LISPRD,LT,AT,LT,2)
         IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PREPRO 2'
!
         CALL PREPRO
!        EX-SCX      EX-SCY (MEMORY OPTIMISATION)
     & ( STSDER    , STSTOT     , SCT      , SCF     , DT  ,
     &   MESH%X%R , MESH%Y%R  , STETA    ,
     &   SCOSTE%R , SSINTE%R  , SFR      , MESH%IKLE%I   ,
     &   SIBOR%I  , SETAP1%I  , STRA01%R , SSHP1 ,
     &   SSHZ     , SSHF      ,
     &   SELT%I   , SETA%I    , SFRE%I   , SDEPTH%R,
     &   SDZHDT%R , SDZX%R    , SDZY%R   , SUC%R   ,
     &   SVC%R    , SDUX%R    , SDUY%R   , SDVX%R  ,
     &   SDVY%R   , SXK%R     , SCG%R    , SCOSF%R ,
     &   STGF%R   , SITR01%I  , NPOIN3   , NPOIN2  , NELEM2,
     &   NPLAN    , NF    , MESH%SURDET%R, COURAN.OR.PART.EQ.1,
     &   SPHE     , PROINF    , PROMIN,MESH,MESH3D,MESH%IKLE,TB,
     &   IELM3    , DIFFRA    , MAREE ,ISUB )
!Fin COUPLAGE
         IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PREPRO 2'
        ENDIF
      ENDIF
!Fin cycle IF((MAREE.AND.LT.EQ.LT1).OR.(PART.EQ.1.AND.LT_WAC.EQ.1))
!------------------------------------------------------------------
!V6P2 Diffraction : diffraction term calculation
      IF(DIFFRA.GT.0) THEN
        IF(LT.EQ.NPTDIF)THEN
          WRITE(LU,*)'*********************************'
          WRITE(LU,*)'DIFFRACTION IS TAKEN INTO ACCOUNT'
          WRITE(LU,*)'*********************************'
        ENDIF
        IF(LT.GE.NPTDIF) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PREDIF'
          CALL PREDIF
!        EX-SCX%R     EX-SCY%R (MEMORY OPTIMISATION)
     & ( STSDER   , STSTOT    , SCT    , DT    ,
     &   MESH%X%R  , MESH%Y%R , STETA ,
     &   SCOSTE%R , SSINTE%R  , SFR%R    , MESH%IKLE%I     ,
     &   SIBOR%I  , SETAP1%I  , STRA01%R , SSHP1 , SSHZ    , 
     &   SELT%I   , SETA%I    , SDEPTH%R,
     &   SDZX%R    , SDZY%R   , 
     &   SXK%R     , SCG%R    , 
     &   SITR01%I  , NPOIN3   , NPOIN2  , NELEM2,
     &   NPLAN    , NF        , MESH%SURDET%R, COURAN.OR.PART.EQ.1,
     &   SPHE     , PROINF    , SA%R     , SDFR%R  , 
     &   SF%R,SCCG%R,SDIV%R   , SDELTA%R , SDDX%R  ,
     &   SDDY%R   , F2DIFM    , NBOR     , NPTFR   ,
     &   SXKONPT%R , SRK%R    , SRX%R    ,
     &   SRY%R    , SRXX%R    , SRYY%R   , SNEIGB%I,
     &   SNB_CLOSE%I, DIFFRA  , MAXNSP   , FLTDIF  ,
     &   MESH3D,MESH,IELM3,TB,ISUB,MESH%IKLE)
         IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PREDIF'
        ENDIF
      ENDIF
!V6P2 End diffraction
!-------------------------------------------------------------------
!
!.....11.3 PROPAGATION (INTERPOLATION AU PIED DES CARACTERISTIQUES).
!     
      IF(PROP) THEN
        CALL IMPR(LISPRD,LT,AT,LT,5)
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PROPA'
        CALL PROPA(SF%R,SB%R,SSHP1, 
     &             SSHZ,SSHF,SELT%I,SETA%I,SFRE%I,
     &             IKLE_EXT,NPOIN3,NPOIN2, 
!                                               WORK ARRAYS HERE
     &             NPLAN,NF,COURAN.OR.PART.EQ.1,STSDER%R,STSTOT,
     &             ITR01,T3_01,T3_02,ISUB,MESH3D)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PROPA'
      ENDIF
!
!.....11.4 INTEGRATION DES TERMES SOURCES.
!   
      IF(TSOU) THEN
        CALL IMPR(LISPRD,LT,AT,NSITS,4)
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE SEMIMP'
        CALL SEMIMP(SF%R,SXK%R,SFR%R,SDFR%R,SDEPTH%R, SUV%R, SVV%R ,
     &  MESH%X%R,MESH%Y%R,WAC_FILES(WACVEB)%LU,WAC_FILES(WACVEF)%LU ,
     &  NBOR,NPTFR,DDC,TV1,TV2,SUV1%R,SVV1%R,
     &  SUV2%R,SVV2%R,STETA%R,SSINTE%R,SCOSTE%R,INDIV,TAILF,RAISF      ,
     &  GRAVIT,CFROT1,CMOUT1,CMOUT2,CMOUT3,CMOUT4,CMOUT5,CMOUT6,AT,DTSI,
     &  ROAIR,ROEAU,XKAPPA,BETAM,DECAL,CDRAG,ALPHA,ZVENT,NF,NPLAN      ,
     &  NPOIN2,IANGNL,COEFNL,F1,NSITS,SMOUT,SFROT,SVENT,LVENT,STRIF    ,
     &  VENT,VENSTA,VX_CTE,VY_CTE,SBREK,ALFABJ,GAMBJ1,GAMBJ2,IQBBJ     ,
     &  IHMBJ,IFRBJ,BORETG,GAMATG,IWHTG,IFRTG,ALFARO,GAMARO,GAM2RO     ,
     &  IDISRO,IEXPRO,IFRRO,BETAIH,EM2SIH,IFRIH,COEFHS,XDTBRK,NDTBRK   ,
     &  STRIA,ALFLTA,RFMLTA,KSPB,BDISPB,BDSSPB,PROINF,DF_LIM,LIMIT     , 
     &  CIMPLI,COEFWD,COEFWE,COEFWF,COEFWH,WAC_FILES(WACVEB)%NAME      ,
     &  WAC_FILES(WACVEF)%NAME,BINVEN,NBD,QINDI,STRA41%R,STRA42%R      ,
     &  STRA43%R,STRA44%R,STSTOT%R,STSDER%R,STOLD%R,STNEW%R,STRA31%R   ,
     &  STRA32%R,STRA33%R,STRA34%R,STRA35%R,STRA36%R,STRA37%R,STRA38%R ,
     &  STRA39%R,ST1%R,ST2%R,ST3%R,ST4%R,SBETA%R,NQ_TE1,NQ_OM2,
     &  NF1,NF2,NT1,NCONF,NCONFM,SEUIL,LBUF,DIMBUF,F_POIN,T_POIN,
     &  F_COEF,F_PROJ,TB_SCA,K_IF1,K_1P,K_1M,K_IF2,K_IF3,K_1P2P,K_1P2M,
     &  K_1P3P,K_1P3M,K_1M2P,K_1M2M,K_1M3P,K_1M3M,IDCONF,TB_V14,TB_V24,
     &  TB_V34,TB_TPM,TB_TMP,TB_FAC,MDIA,IANMDI,COEMDI,NVWIN,DIAGHF)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE SEMIMP'
      ENDIF
!

!======================================================================
!MJTS MODIF POUR CAS MONOCHROMATIQUE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!======================================================================
!     On force le spectre à 0 sauf sur le bin qui porte de l'energie
!     ici la direction 7 et la frequence 3.
      CALL MONOCRO(SF%R, NPOIN2, NF, NPLAN, 4, 10)
!MJTS FIN DE MODIF
!.....11.6 TEST POUR SAVOIR SI ON IMPRIME OU PAS.
!     """""""""""""""""""""""""""""""""""""""""""
      IMPRES=.FALSE.
      DEBRES=.FALSE.
      IF(LT.GE.GRADEB.AND.MOD(LT-GRADEB,GRAPRD).EQ.0) IMPRES=.TRUE.
      IF(LT.EQ.GRADEB) DEBRES=.TRUE.
!
      IF(IMPRES) THEN
!
!.....11.5 PASSAGE EN FREQUENCE ABSOLUE.
!     """""""""""""""""""""""""""""""""""""""""""""
!
        IF(COURAN.OR.PART.EQ.1) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE TRANSF'
          CALL TRANSF
!         WORK ARRAY UNTIL CALL ECRSPE BELOW
     &(   STSTOT%R , SF%R  , SFR%R , SDFR%R, SCOSTE%R,
     &    SSINTE%R , SUC%R , SVC%R , SXK%R , SITR11%I,
     &    SITR12%I , SITR13%I      , STRA31%R, STRA32%R,
     &    NPOIN2   , NPLAN , NF    , RAISF , LT , GRADEB, GRAPRD)
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE TRANSF'
        ENDIF
!
!.....11.7 IMPRESSION (EVENTUELLE) DES VARIABLES SUR LE MAILLAGE 2D.
!     
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE DUMP2D'
        IF(COURAN.OR.PART.EQ.1) THEN
          CALL DUMP2D(LT,STSTOT%R,NPOIN3*NF)
        ELSE
          CALL DUMP2D(LT,SF%R,NPOIN3*NF)
        ENDIF       
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE DUMP2D'
!
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE BIEF_DESIMP'
        CALL BIEF_DESIMP(WAC_FILES(WACRES)%FMT,VARSOR,
     &            HIST,0,NPOIN2,WAC_FILES(WACRES)%LU,'STD',AT,
     &            LT,GRAPRD,GRAPRD,
     &            SORLEO,SORIMP,MAXVAR,TEXTE,GRADEB,GRADEB)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE BIEF_DESIMP'
!
!.....11.8 IMPRESSION (EVENTUELLE) DES SPECTRES DIRECTIONNELS.
!     
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE ECRSPE'
        IF(COURAN.OR.PART.EQ.1) THEN
          CALL ECRSPE(STSTOT%R,STETA%R,NPLAN,
     &                SFR%R,NF,NF,NPOIN2,AT,
     &                STSDER%R,NOLEO,NPLEO,WAC_FILES(WACLEO)%LU,
     &                WAC_FILES(WACLEO)%FMT,DEBRES,TITCAS,DATE,TIME,
     &                MESH%KNOLG%I,MESH,WAC_FILES(WACSPE)%LU ,
     &                WAC_FILES(WACSPE)%NAME)
        ELSE
          CALL ECRSPE(SF%R,STETA%R,NPLAN,
     &                SFR%R,NF,NF,NPOIN2,AT,
     &                STSDER%R,NOLEO,NPLEO,WAC_FILES(WACLEO)%LU,
     &                WAC_FILES(WACLEO)%FMT,DEBRES,TITCAS,DATE,TIME,
     &                MESH%KNOLG%I,MESH,WAC_FILES(WACSPE)%LU ,
     &                WAC_FILES(WACSPE)%NAME)     
        ENDIF
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE ECRSPE'
!
      ENDIF
!
!     RADIATION STRESSES COMPUTED HERE FOR TELEMAC INDEPENDENTLY
!     OF THE PRINTS TO RESULT FILE, WHICH IS NOT MANDATORY  
!
      IF(PART.EQ.1.AND.LT_WAC.EQ.NIT) THEN
!       STSTOT WORK ARRAY (ABSOLUTE FREQUENCY) IN ALL THIS IF BLOCK
        CALL TRANSF(STSTOT%R , SF%R  , SFR%R , SDFR%R, SCOSTE%R,
     &              SSINTE%R , SUC%R , SVC%R , SXK%R , SITR11%I,
     &              SITR12%I , SITR13%I      , STRA31%R, STRA32%R,
     &              NPOIN2   , NPLAN , NF    , RAISF ,
!                   TO FORCE THE WORK WHATEVER LT,GRADEB,GRAPRD
     &              1,1,1)                   
        CALL RADIAT(FX_WAC%R,FY_WAC%R,STRA53%R,STRA54%R,STRA55%R,
     &              SXK%R,STSTOT%R,SCG%R,SDEPTH%R,
!                   STSDER%R WORK TABLE HERE
     &              STSDER%R,
     &              STRA36%R,STRA37%R,STRA38%R,STRA39%R)        
        IF(VENT) THEN
          CALL OV('X=Y     ',UV_WAC%R,SUV%R,SUV%R,0.D0,NPOIN2)
          CALL OV('X=Y     ',VV_WAC%R,SVV%R,SVV%R,0.D0,NPOIN2)
        ENDIF
        IF(INCLUS(COUPLING,'SISYPHE')) THEN
!         3 VARIABLES THAT WILL BE TRANSMITTED TO SISYPHE
!         ALL THIS IF BLOCK ADAPTED FROM DUMP2D
!         MEAN DIRECTION
          CALL TETMOY(DIRMOY_TEL%R,STSTOT%R,SCOSTE%R,SSINTE%R,
     &                NPLAN,FREQ,SDFR%R,NF,NPOIN2,TAILF,STRA36%R,
     &                STRA37%R,STRA38%R,STRA39%R)
          IF(TRIGO) THEN
            DO IP=1,NPOIN2
              DIRMOY_TEL%R(IP)=(PISUR2-DIRMOY_TEL%R(IP))*GRADEG
            ENDDO
          ELSE
            DO IP=1,NPOIN2
              DIRMOY_TEL%R(IP)=DIRMOY_TEL%R(IP)*GRADEG
            ENDDO
          ENDIF
!         SIGNIFICANT WAVE HEIGHT
          CALL TOTNRJ(STRA37%R,STSTOT%R,SFR%R,SDFR%R,TAILF,
     &                NF,NPLAN,NPOIN2)
          DO IP=1,NPOIN2
            HM0_TEL%R(IP)=4.D0*SQRT(TRA37(IP))
          ENDDO
!         TPR5
          CALL FPREAD(TPR5_TEL%R,STSTOT%R,SFR%R,SDFR%R,NF,NPLAN,
     &                NPOIN2,5.D0,TAILF,STRA38%R,STRA39%R)
          DO IP=1,NPOIN2
            TPR5_TEL%R(IP)=
     &      1.D0/MIN(MAX(TPR5_TEL%R(IP),FREQ(1)),FREQ(NF))
          ENDDO
        ENDIF
!
      ENDIF
!
10    CONTINUE
!
!Fin COUPLAGE : fin du cycle IF(PART.NE.0)
      ENDIF
!
!=====C
!  12 C IMPRESSIONS GLOBALES (EVENTUELLES) EN FIN DE CALCUL.
!=====C=====================================================
!
!COUPLAGE TELEMAC-TOMAWAC : reset de la variable NIT (nombre
!         de pas de temps de TOMAWAC indique dans la fichier .cas)
      IF(PART.EQ.1) NIT=DUMMY
!Fin COUPLAGE
!
      IF(ABS(AT-AT0-NIT*DT).LT.1.D-6) THEN
!
        IF(GLOB) THEN
          CALL IMPR(LISPRD,NIT,AT,NIT,6)
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE SOR3D'
          CALL SOR3D(SF%R,NPLAN,NF,STETA%R,SFR%R,
     &               NELEM2,NPOIN2,AT,SUC%R,SVC%R,
     &               SUV%R,SVV%R,SDEPTH%R,VENT,
     &               COURAN.OR.PART.EQ.1,
     &               MAREE.OR.PART.EQ.1,TITCAS,WAC_FILES(WACRBI)%LU,
     &               BINRBI,STSDER%R,MESH3D)
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE SOR3D'
        ENDIF
!
!----------------------------------------------------------------------
!
!       VALIDATION DES RESULTATS SUR LE FICHIER DE REFERENCES
!
        IF(VALID) CALL BIEF_VALIDA(BST1,TEXTE,
     &                     WAC_FILES(WACREF)%LU,WAC_FILES(WACREF)%FMT,
     &                     VARSOR,TEXTE,
     &                     WAC_FILES(WACRES)%LU,WAC_FILES(WACRES)%FMT,
     &                     MAXVAR,NPOIN2,NIT,NIT,ALIRE)
!
      ENDIF
!
!----------------------------------------------------------------------
!
      RETURN
      END
!                    *****************
                     SUBROUTINE DUMP2D
!                    *****************
!
     &( LT , XF1 , NP1 )
!
!***********************************************************************
! TOMAWAC   V6P3                                   15/06/2011
!***********************************************************************
!
!brief    WRITES OUT WAVE, WIND, CURRENT, BATHYMETRY, ...
!+                VARIABLES AT EACH NODE OF THE MESH.
!+                VARIES SPATIALLY IN 2D (BINARY SELAFIN FORMAT).
!
!warning  STSDER used as work array here.
!
!
!history  F. MARCOS
!+        01/02/95
!+        V1P0
!+   CREATED
!
!history  M. BENOIT
!+        04/07/96
!+        V1P2
!+   MODIFIED
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        13/07/2010
!+        V6P0
!+   Translation of French comments within the FORTRAN sources into
!+   English comments
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        21/08/2010
!+        V6P0
!+   Creation of DOXYGEN tags for automated documentation and
!+   cross-referencing of the FORTRAN sources
!
!history  G.MATTAROLO (EDF - LNHE)
!+        15/06/2011
!+        V6P1
!+   Translation of French names of the variables in argument
!
!history  J-M HERVOUETO (EDF R&D, LNHE)
!+        26/02/2013
!+        V6P3
!+   Use of work arrays optimised.
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| LT             |-->| NUMBER OF THE TIME STEP CURRENTLY SOLVED
!| NP1            |-->| NPOIN2.NPLAN.NF
!| XF1            |-->| VARIANCE DENSITY DIRECTIONAL SPECTRUM
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE DECLARATIONS_TOMAWAC
      USE INTERFACE_TOMAWAC, EX_DUMP2D => DUMP2D
!
      IMPLICIT NONE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER, INTENT(IN)          :: LT,NP1
      DOUBLE PRECISION, INTENT(IN) :: XF1(NP1)
CVB_modif
      DOUBLE PRECISION AUX1(NPOIN2),AUX2(NPOIN2)
      DOUBLE PRECISION AUX3(NPOIN2)
!      DOUBLE PRECISION TAUX1(NPOIN2)
CVB_modif
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER          IP
      DOUBLE PRECISION U10   , FMIN  , FMAX
!
      FMIN=FREQ(1)
      FMAX=FREQ(NF)
!
!=====C====================================
!     C COMPUTES THE SELECTED VARIABLES
!=====C====================================
! THE ORDER IN WHICH THE VARIABLES ARE COMPUTED DOES NOT CORRESPOND TO THAT OF
! THE GRAPHICAL OUTPUT IN AN EFFORT TO LIMIT THE NUMBER OF WORKING ARRAYS.
!
!     ------------------------------- RADIATION STRESSES
!
      IF(.NOT.PROINF) THEN
        IF(SORLEO(11).OR.SORLEO(12).OR.SORLEO(13).OR.
     &     SORLEO(14).OR.SORLEO(15) ) CALL RADIAT
     &( STRA51%R, STRA52%R, STRA53%R, STRA54%R, STRA55%R,
     &  SXK%R   , XF1     , SCG%R   , SDEPTH%R,
!       WORK TABLE HERE
     &  STSDER%R,STRA36%R, STRA37%R, STRA38%R, STRA39%R)
      ENDIF
!
!     ------------------------------- DIRECTIONAL SPREADING
!
      IF(SORLEO(4)) THEN
        CALL SPREAD
     &( STRA31%R,XF1,SCOSTE%R,SSINTE%R,NPLAN ,
     &  SFR%R,SDFR%R,NF,NPOIN2,TAILF,
     &  STRA34%R,STRA35%R,STRA36%R,STRA37%R,STRA38%R,
     &  STRA39%R)
      ENDIF
!
!     ------------------------------- MEAN DIRECTION
!
      IF(SORLEO(3)) THEN
        CALL TETMOY
     &( STRA32%R, XF1 , SCOSTE%R, SSINTE%R, NPLAN , FREQ ,
     &  SDFR%R  , NF  , NPOIN2  , TAILF, STRA36%R ,
     &  STRA37%R, STRA38%R, STRA39%R )
        IF(TRIGO) THEN
          DO IP=1,NPOIN2
            TRA32(IP)=(PISUR2-TRA32(IP))*GRADEG
          ENDDO
        ELSE
          DO IP=1,NPOIN2
            TRA32(IP)=TRA32(IP)*GRADEG
          ENDDO
        ENDIF
      ENDIF
!
!     ------------------------------- MEAN FREQUENCY FMOY
!
      IF(SORLEO(18).OR.SORLEO(28)) THEN
        CALL FREMOY
     &( STRA33%R, XF1   , SFR%R   , SDFR%R  , TAILF , NF  ,
     &  NPLAN      , NPOIN2, STRA38%R, STRA39%R)
        IF(SORLEO(28)) THEN
          DO IP=1,NPOIN2
            TRA61(IP)=1.D0/MIN(MAX(TRA33(IP),FMIN),FMAX)
          ENDDO
        ENDIF
      ENDIF
!
!     ------------------------------- MEAN FREQUENCY FM01
!
      IF(SORLEO(19).OR.SORLEO(29)) THEN
        CALL FREM01
     &( STRA34%R, XF1   , SFR%R   , SDFR%R  , TAILF , NF  ,
     &  NPLAN      , NPOIN2, STRA38%R, STRA39%R)
        IF (SORLEO(29)) THEN
          DO IP=1,NPOIN2
            TRA62(IP)=1.D0/MIN(MAX(TRA34(IP),FMIN),FMAX)
          ENDDO
        ENDIF
      ENDIF
!
!     ------------------------------- MEAN FREQUENCY FM02
!
      IF (SORLEO(20).OR.SORLEO(30)) THEN
        CALL FREM02
     &( STRA35%R, XF1   , SFR%R   , SDFR%R  , TAILF , NF  ,
     &  NPLAN      , NPOIN2, STRA38%R, STRA39%R)
        IF (SORLEO(30)) THEN
          DO IP=1,NPOIN2
            TRA63(IP)=1.D0/MIN(MAX(TRA35(IP),FMIN),FMAX)
          ENDDO
        ENDIF
      ENDIF
!
!     ------------------------------- DISCRETE PEAK FREQUENCY
!
      IF (SORLEO(21).OR.SORLEO(31)) THEN
        CALL FREPIC
     &( STRA36%R, XF1   , SFR%R , NF   , NPLAN , NPOIN2,
     &  STRA38%R, STRA39%R      )
        IF (SORLEO(31)) THEN
          DO IP=1,NPOIN2
            TRA64(IP)=1.D0/MIN(MAX(TRA36(IP),FMIN),FMAX)
          ENDDO
        ENDIF
      ENDIF
!
!     ------------------------------- PEAK FREQUENCY (READ 5TH ORDER)
!
      IF (SORLEO(22).OR.SORLEO(32)) THEN
        CALL FPREAD
     &( STRA56%R, XF1   , SFR%R, SDFR%R  , NF   , NPLAN ,
     &  NPOIN2     , 5.D0  , TAILF   , STRA38%R, STRA39%R  )
        IF (SORLEO(32)) THEN
          DO IP=1,NPOIN2
            TRA65(IP)=1.D0/MIN(MAX(TRA56(IP),FMIN),FMAX)
          ENDDO
        ENDIF
      ENDIF
!
!     ------------------------------- PEAK FREQUENCY (READ 8TH ORDER)
!
      IF (SORLEO(23).OR.SORLEO(33)) THEN
        CALL FPREAD
     &( STRA57%R, XF1   , SFR%R , SDFR%R  , NF   , NPLAN ,
     &  NPOIN2     , 8.D0  , TAILF    , STRA38%R, STRA39%R  )
        IF (SORLEO(33)) THEN
          DO IP=1,NPOIN2
            TRA66(IP)=1.D0/MIN(MAX(TRA57(IP),FMIN),FMAX)
          ENDDO
        ENDIF
      ENDIF
!
      IF(VENT) THEN
!
!       ------------------------------- DRAG COEFFICIENT
!
        IF(SORLEO(25)) THEN
          DO IP=1,NPOIN2
            U10=UV(IP)**2+VV(IP)**2
            IF (U10.GT.1.D-6) THEN
              TRA58(IP)=TRA42(IP)**2/U10
            ELSE
              TRA58(IP)=0.D0
            ENDIF
          ENDDO
        ENDIF
      ENDIF
!
!       ------------------------------- BOTTOM SPEED
!
      IF(.NOT.PROINF) THEN
        IF(SORLEO(16)) THEN
          CALL VITFON(STRA59%R,XF1,SXK%R,SDEPTH%R,SDFR%R,NF,
     &                NPOIN2,NPLAN,STRA39%R)
        ENDIF
      ENDIF
!
!     ------------------------------- VARIANCE
!
      IF(SORLEO(1).OR.SORLEO(2)) THEN
        CALL TOTNRJ
     &( STRA37%R , XF1   , SFR%R  , SDFR%R , TAILF ,
     &  NF  , NPLAN , NPOIN2)
!
!     ------------------------------- SIGNIFICANT WAVE HEIGHT
!
        IF(SORLEO(2)) THEN
          DO IP=1,NPOIN2
            TRA38(IP)=4.D0*SQRT(TRA37(IP))
          ENDDO
        ENDIF
      ENDIF
!
!     ------------------------------- POWER PER UNIT LENGTH
!
      IF(SORLEO(34)) THEN
        CALL WPOWER(STRA60%R,XF1,SFR%R,SDFR%R,SCG%R,TAILF,NF,
     &              NPLAN,NPOIN2,ROEAU)
      ENDIF
!     ------------------------------- KMOYEN AND QMOUT1
!
      IF(SORLEO(17)) THEN
         CALL KMOYEN(SPRIVE%R,SXK%R,SF%R,SFR%R,SDFR%R,TAILF,NF,NPLAN,
     &               NPOIN2,AUX1,AUX2,AUX3)
!         CALL QMOUT1(SPRIVE2%R,TSDER,SF%R,SXK%R,STRA37%R,SFR%R,
!     &               STRA33%R,SPRIVE1%R,PROINF,CMOUT1,CMOUT2,NF,NPLAN,
!     &               NPOIN2,TAUX1,BETA,SDEPTH%R)
      ENDIF

!
!-----------------------------------------------------------------------
!
      RETURN
      END
