C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       BAILARD FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ALPHAW, CF, DENS, FCW, FW, GRAV, HOULE, NPOIN, PI, QSC, QSCX, QSCY, QSS, QSSX, QSSY, THETAC, THETAW, TOB, TOBW, U2D, UC3X, UC3Y, UCMOY, US4X, US4Y, UW, V2D, XMVE, XWC
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C3, C4, EPSC, EPSS, I, NUM, PHI, U3X, U3Y
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_BAILARD
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_DIRECTION(), BEDLOAD_INTERACT(), CPSTVC(), OS(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 21/12/2006
!> </td><td> JMH
!> </td><td> BEDLOAD_CALCBAIL DELETED; 'HOULE' ARGUMENT ADDED
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 01/10/2003
!> </td><td> C. VILLARET (LNHE)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ALPHAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FCW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSSX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSSY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UC3X
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UC3Y
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCMOY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>US4X
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>US4Y
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_BAILARD !
     &(U2D,V2D,UCMOY,TOB,TOBW,THETAW,UW,FW,CF,NPOIN,PI,
     & XMVE,GRAV,DENS,XWC,ALPHAW,QSCX,QSCY,QSSX,QSSY,
     & UC3X,UC3Y,US4X,US4Y,THETAC,FCW,QSC,QSS,HOULE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ALPHAW         |---| 
C| CF             |---| 
C| DENS           |---| 
C| FCW            |---| 
C| FW             |---| 
C| GRAV           |---| 
C| HOULE          |---| 
C| NPOIN          |---| 
C| PI             |---| 
C| QSC            |---| 
C| QSCX           |---| 
C| QSCY           |---| 
C| QSS            |---| 
C| QSSX           |---| 
C| QSSY           |---| 
C| THETAC         |---| 
C| THETAW         |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| U2D            |---| 
C| UC3X           |---| 
C| UC3Y           |---| 
C| UCMOY          |---| 
C| US4X           |---| 
C| US4Y           |---| 
C| UW             |---| 
C| V2D            |---| 
C| XMVE           |---| 
C| XWC            |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_BAILARD => BEDLOAD_BAILARD
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
!
C 2/ GLOBAL VARIABLES
!
      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D,V2D,UCMOY, TOB
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOBW, THETAW, UW, FW, CF
      INTEGER,          INTENT(IN)    :: NPOIN
      LOGICAL,          INTENT(IN)    :: HOULE
      DOUBLE PRECISION, INTENT(IN)    :: PI, XMVE, GRAV, DENS, XWC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ALPHAW        ! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSCX, QSCY    ! WORK ARRAY T2 AND T3
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSSX, QSSY    ! WORK ARRAY T4 AND T5
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: UC3X, UC3Y    ! WORK ARRAY T6 AND T7
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: US4X, US4Y    ! WORK ARRAY T8 AND T9
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: THETAC, FCW   ! WORK ARRAY T10 AND T11
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC, QSS
!
C 3/ LOCAL VARIABLES
!
      INTEGER                     :: I
      DOUBLE PRECISION            :: C3, C4, PHI
      DOUBLE PRECISION, PARAMETER :: EPSC = 0.21D0   ! BEDLOAD
      DOUBLE PRECISION, PARAMETER :: EPSS = 0.025D0  ! SUSPENSION
      DOUBLE PRECISION            :: U3X, U3Y, NUM
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C     CASE WITH WAVES
!
      IF(HOULE) THEN
!
C     ANGLE OF VELOCITY WITH OX (IN RADIANS)
!
      CALL BEDLOAD_DIRECTION(U2D,V2D,NPOIN,PI,THETAC)
!
C     ANGLE OF WAVES WITH OX (IN RADIANS)
!
      CALL OS('X=CY    ', X=ALPHAW, Y=THETAW, C=-PI/180.D0)
      CALL OS('X=X+C   ', X=ALPHAW, C=0.5D0*PI)
      CALL OS('X=Y-Z   ', X=ALPHAW, Y=ALPHAW, Z=THETAC)
!
C     PARAMETERS  ,
!
!
C     US4X AND US4Y ARE WORK ARRAYS, THEIR STRUCTURE IS GIVEN HERE
C     THE STRUCTURE OF THETAC (CATHERINE DON'T REMOVE THIS PLEASE)
      CALL CPSTVC(THETAC,US4X)
      CALL CPSTVC(THETAC,US4Y)
!
      DO I = 1, NPOIN

         ! ********************* !
         ! I - CURRENT REFERENCE SYSTEM !
         ! ********************* !

         U3X = UCMOY%R(I)**3
     &       + UCMOY%R(I)*UW%R(I)**2 * (1 + COS(2.D0*ALPHAW%R(I))/ 2.D0)
         U3Y = UCMOY%R(I)*UW%R(I)**2 * SIN(2.D0*ALPHAW%R(I)) / 2.D0

         ! ********************************************** !
         ! II - 3RD ORDER MOMENTUM (LINEAR WAVE THEORY)   !
         ! ********************************************** !

         UC3X%R(I) = U3X * COS(THETAC%R(I)) - U3Y * SIN(THETAC%R(I))
         UC3Y%R(I) = U3X * SIN(THETAC%R(I)) + U3Y * COS(THETAC%R(I))

         ! ************************************************************ !
         ! III -  4TH ORDER MOMENTUM (COLINEAR WAVES AND CURRENTS)      !
         ! ************************************************************ !

         NUM = ( 8.D0*UCMOY%R(I)**4 + 3.D0*UW%R(I)**4
     &           + 24.D0*(UCMOY%R(I)**2)*(UW%R(I)**2) )*0.125D0
         US4X%R(I) = NUM * COS(THETAC%R(I))
         US4Y%R(I) = NUM * SIN(THETAC%R(I))

       ENDDO

      ! *********************************************** !
      ! IV -  FRICTION COEFFICIENT WAVE + CURRENT       !
      ! *********************************************** !

      CALL BEDLOAD_INTERACT
     &     (UCMOY,TOBW,TOB,ALPHAW,FW,CF,UW,NPOIN,XMVE,FCW)

      ! ******************************** !
      ! V - TRANSPORT RATES              !
      ! ******************************** !

      PHI = PI   / 6.D0  ! FRICTION ANGLE
      C3  = EPSC / (GRAV*DENS*TAN(PHI))
      C4  = EPSS / (GRAV*DENS*XWC)
      CALL OS('X=CYZ   ', X=QSCX, Y=FCW,  Z=UC3X, C=C3)
      CALL OS('X=CYZ   ', X=QSCY, Y=FCW,  Z=UC3Y, C=C3)
      CALL OS('X=CYZ   ', X=QSSX, Y=FCW,  Z=US4X, C=C4)
      CALL OS('X=CYZ   ', X=QSSY, Y=FCW,  Z=US4Y, C=C4)
!
C     CASE WITHOUT WAVES
!
      ELSE
!
        CALL PLANTE(1)
        STOP 'BAILARD WITHOUT WAVES NOT PROGRAMMED'
!
      ENDIF
!
C     NORMS
!
      CALL OS('X=N(Y,Z)', X=QSC,  Y=QSCX, Z=QSCY)
      CALL OS('X=N(Y,Z)', X=QSS,  Y=QSSX, Z=QSSY)

!======================================================================!
!======================================================================!

      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       BIJKER BEDLOAD TRANSPORT FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> BIJK, DENS, DM, GRAV, HN, HOULE, KARMAN, KSP, KSR, MU, NPOIN, QSC, QSS, T4, T7, T8, T9, TOB, TOBW, XMVE, XWC, ZERO
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C1, C2, I, UCF
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_BIJKER
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> INTEG(), OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.6                                       </center>
!> </td><td> **/12/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> 10/03/2004
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 26/11/2001
!> </td><td> C. MACHET; T. BOULET; E. BEN SLAMA
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>BIJK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_BIJKER !
     &  (TOBW,TOB,MU,KSP,KSR,HN,NPOIN,DM,DENS,XMVE,GRAV,XWC,
     &   KARMAN,ZERO,T4,T7,T8,T9,QSC,QSS,BIJK,HOULE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| BIJK           |---| 
C| DENS           |---| 
C| DM             |---| 
C| GRAV           |---| 
C| HN             |---| 
C| HOULE          |---| 
C| KARMAN         |---| 
C| KSP            |---| 
C| KSR            |---| 
C| MU             |---| 
C| NPOIN          |---| 
C| QSC            |---| 
C| QSS            |---| 
C| T4             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| XMVE           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_BIJKER => BEDLOAD_BIJKER
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOBW, TOB, KSR,KSP, HN,MU
      INTEGER,          INTENT(IN)    :: NPOIN
      LOGICAL,          INTENT(IN)    :: HOULE
      DOUBLE PRECISION, INTENT(IN)    :: DM, DENS, XMVE, GRAV, XWC
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, ZERO
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T4
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T7, T8, T9
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: QSC, QSS


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER                      :: I
      DOUBLE PRECISION             :: C1, C2, UCF
      DOUBLE PRECISION, INTENT(IN) :: BIJK

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ***************************************************** !
      ! I - STRESS UNDER THE COMBINED ACTION OF WAVES AND CURRENTS !
      ! ***************************************************** !

      IF(HOULE) THEN
        CALL OS('X=CY    ', X=T4, Y=TOBW, C= 0.5D0)
        CALL OS('X=X+Y   ', X=T4, Y=TOB)
      ELSE
        CALL OS('X=Y     ', X=T4, Y=TOB)
      ENDIF

      ! ******************************************************* !
      ! II - CORRECTION TO TAKE BED FORMS INTO ACCOUNT          !
      ! ******************************************************* !

C      CALL OS('X=Y/Z   ', X=MU, Y=CFP, Z=CF)
C      CALL OS('X=Y**C  ', X=MU, Y=MU , C=0.75D0)

      ! ***************************** !
      ! III - BEDLOAD TRANSPORT       !
      ! ***************************** !
      C1 = BIJK*DM
      C2 = DENS*DM*XMVE*GRAV
      DO I = 1, NPOIN
         IF (T4%R(I)*MU%R(I)> ZERO) THEN
            QSC%R(I) = C1*SQRT(TOB%R(I)/XMVE )
     &               * EXP(-0.27D0*(C2/(T4%R(I)*MU%R(I))))
         ELSE
            QSC%R(I) = 0.D0
         ENDIF
      ENDDO

      ! *********************************************************** !
      ! IV- ROUSE NUMBER AND LOWER BOUND OF EINSTEIN INTEGRAL       ! (_IMP_)
      ! *********************************************************** !
      DO I = 1, NPOIN
         IF (T4%R(I) > 0.D0) THEN
            UCF     = SQRT( T4%R(I) / XMVE)
            T7%R(I) = XWC / ( KARMAN * UCF )
C            AUX     = 1.D0 + KARMAN*SQRT(2.D0/MAX(CF%R(I),ZERO))
C            T8%R(I) = 30.D0*EXP(-AUX)
             T8%R(I) = MAX(KSR%R(I),KSP%R(I))/MAX(HN%R(I),ZERO)
         ELSE
            T7%R(I)= 100001.D0
            T8%R(I)= 100001.D0
         ENDIF
      ENDDO

      ! ************************************ !
      ! V - EINSTEIN INTEGRAL                ! (_IMP_)
      ! ************************************ !
      CALL INTEG(T7%R, T8%R, T9%R, NPOIN)

      ! ************************************** !
      ! VI - TRANSPORT BY SUSPENSION           ! (_IMP_)
      ! ************************************** !
      CALL OS('X=YZ    ', X=QSS, Y=T9, Z=QSC)

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE BEDLOAD_BIJKER
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES QUADRATIC VELOCITIES AND PERIODS
!>               (CASE WITH WAVES).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> NPOIN, PI, TW, TW1, TW2, UCW, UW, UW1, UW2
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ACOSMRAP, ACOSPRAP, I, RAP, SQRTRAP, UCMOY, ZERO
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_CALCDW
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_DIBWAT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/10/2003
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW2
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_CALCDW ! (_IMP_)
     &  (UCW, UW, TW, NPOIN, PI, UW1, UW2, TW1, TW2)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| NPOIN          |---| 
C| PI             |---| 
C| TW             |---| 
C| TW1            |---| 
C| TW2            |---| 
C| UCW            |---| 
C| UW             |---| 
C| UW1            |---| 
C| UW2            |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_CALCDW => BEDLOAD_CALCDW
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
!
C     2/ GLOBAL VARIABLES
!
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UCW, UW, TW
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: PI
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: UW1, UW2, TW1, TW2
!
C     3/ LOCAL VARIABLES
!
      INTEGER                     :: I
      DOUBLE PRECISION            :: UCMOY, RAP
      DOUBLE PRECISION            :: ACOSMRAP, ACOSPRAP, SQRTRAP
      DOUBLE PRECISION, PARAMETER :: ZERO = 1.D-06
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
      DO I = 1,NPOIN
         UCMOY = ABS(UCW%R(I))
         ! ****************** !
         !    I - WAVES ONLY  ! (_IMP_)
         ! ****************** !
         IF (UCMOY <= ZERO) THEN
            UW1%R(I) = UW%R(I)
            UW2%R(I) = UW%R(I)
            TW1%R(I) = TW%R(I) / 2.D0
            TW2%R(I) = TW%R(I) / 2.D0
         ELSE
            RAP = UW%R(I) / UCMOY
            ! ******************** !
            ! II - WAVES ARE PREDOMINANT ! (_IMP_)
            ! ******************** !
            IF (RAP > 1.D0) THEN
               ACOSMRAP = ACOS(-1.D0/RAP)
               ACOSPRAP = ACOS( 1.D0/RAP)
               SQRTRAP  = SQRT(1.D0-1.D0/RAP**2)
               TW1%R(I) = TW%R(I)*ACOSMRAP / PI
               TW2%R(I) = TW%R(I)*ACOSPRAP / PI
               UW1%R(I) = 2.D0*UCMOY**2 + UW%R(I)**2
     &                  + 3.D0*UCMOY*UW%R(I)*SQRTRAP/ACOSMRAP
               UW1%R(I) = SQRT(UW1%R(I))
               UW2%R(I) = 2.D0*UCMOY**2 + UW%R(I)**2
     &                  - 3.D0*UCMOY*UW%R(I)*SQRTRAP/ACOSPRAP
               UW2%R(I) = SQRT(UW2%R(I))

            ! ********************** !
            ! III - CURRENTS ARE PREDOMINANT ! (_IMP_)
            ! ********************** !
            ELSE
               UW1%R(I) = UCW%R(I)*SQRT(2.D0 + RAP**2)
               UW2%R(I) = ZERO
               TW1%R(I) = TW%R(I)
               TW2%R(I) = ZERO
            ENDIF
         ENDIF
      ENDDO
!
!======================================================================!
!======================================================================!
!
      RETURN
      END SUBROUTINE BEDLOAD_CALCDW
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       DIBAJNIA & WATANABE FORMULATION (1992).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ALPHAW, CF, DENS, DM, FCW, FW, GRAV, HOULE, NPOIN, PI, QSC, T2, T3, THETAC, THETAW, TOB, TOBW, TW, TW1, TW2, U2D, UCMOY, UCN, UCW, UW, UW1, UW2, V2D, XMVE, XWC
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ALPHA, BETA, GAMMA, GAMMAN, GAMMAW, I, OMEGA1, OMEGA2, OMEGACR, QSN, QSW, SHIELDS, UCW2, W1, W2, WP1, WP2, ZERO
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_DIBWAT
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_CALCDW(), BEDLOAD_DIRECTION(), BEDLOAD_INTERACT(), OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.7                                       </center>
!> </td><td> 09/05/2007
!> </td><td> JMH
!> </td><td> CHECKS FOR GAMMA=0 DIVISION
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 15/11/2003
!> </td><td> C. VILLARET (LNHE)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ALPHAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FCW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCMOY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_DIBWAT !
     &  (U2D,V2D,UCMOY, CF, TOB, TOBW, UW, TW, FW, THETAW, NPOIN,
     &   XMVE, DENS, GRAV, DM, XWC, PI, ALPHAW, T2, T3, UCW, UCN,
     &   UW1, UW2, TW1, TW2, THETAC, FCW, QSC,HOULE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ALPHAW         |---| 
C| CF             |---| 
C| DENS           |---| 
C| DM             |---| 
C| FCW            |---| 
C| FW             |---| 
C| GRAV           |---| 
C| HOULE          |---| 
C| NPOIN          |---| 
C| PI             |---| 
C| QSC            |---| 
C| T2             |---| 
C| T3             |---| 
C| THETAC         |---| 
C| THETAW         |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| TW             |---| 
C| TW1            |---| 
C| TW2            |---| 
C| U2D            |---| 
C| UCMOY          |---| 
C| UCN            |---| 
C| UCW            |---| 
C| UW             |---| 
C| UW1            |---| 
C| UW2            |---| 
C| V2D            |---| 
C| XMVE           |---| 
C| XWC            |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_DIBWAT => BEDLOAD_DIBWAT
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D,V2D,UCMOY, CF, TOB, TOBW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UW, TW, FW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: THETAW
      INTEGER,          INTENT(IN)    :: NPOIN
      LOGICAL,          INTENT(IN)    :: HOULE
      DOUBLE PRECISION, INTENT(IN)    :: XMVE, DENS, GRAV, DM, XWC, PI
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ALPHAW          ! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T2, T3          !
      TYPE(BIEF_OBJ),   INTENT(INOUT) ::  UCW, UCN ! WORK ARRAY T4, T5, T6
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: UW1, UW2, TW1   ! WORK ARRAY T7, T8, T9
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TW2, THETAC     ! WORK ARRAY T10, T11
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: FCW, QSC        ! WORK ARRAY T12


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER                     :: I
      DOUBLE PRECISION            :: UCW2, SHIELDS, OMEGACR, OMEGA1
      DOUBLE PRECISION            :: OMEGA2, W1, WP1, W2, WP2, GAMMAW
      DOUBLE PRECISION            :: GAMMAN, GAMMA, QSW, QSN
      DOUBLE PRECISION, PARAMETER :: ZERO  = 1.D-6
      DOUBLE PRECISION, PARAMETER :: ALPHA = 0.0001D0
      DOUBLE PRECISION, PARAMETER :: BETA  = 0.55D0
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C     ANGLE OF VELOCITY WITH OX
!
      CALL BEDLOAD_DIRECTION(U2D,V2D,NPOIN,PI,THETAC)
!
C     PROJECTIONS OF UCMOY IN THE WAVE DIRECTION
!
      CALL OS('X=CY    ', X=ALPHAW, Y=THETAW, C=-PI/180.D0)
      CALL OS('X=X+C   ', X=ALPHAW, C=0.5D0*PI)
      CALL OS('X=Y-Z   ', X=ALPHAW, Y=ALPHAW, Z=THETAC)
      CALL OS('X=COS(Y)', X=T2    , Y=ALPHAW)
      CALL OS('X=SIN(Y)', X=T3    , Y=ALPHAW)
      CALL OS('X=YZ    ', X=UCW   , Y=UCMOY , Z=T2)
      CALL OS('X=CYZ   ', X=UCN   , Y=UCMOY , Z=T3, C= -1.D0)
!
C     QUADRATIC VELOCITIES (UW1=U(T)> 0 AND UW2=U(T)
!
      CALL BEDLOAD_CALCDW(UCW,UW,TW,NPOIN,PI,UW1,UW2,TW1,TW2)
!
C     FRICTION COEFFICIENT
!
      CALL BEDLOAD_INTERACT
     &     (UCMOY,TOBW,TOB,ALPHAW,FW,CF,UW,NPOIN,XMVE,FCW)
!
      DO I = 1, NPOIN
!
C        SHIELDS PARAMETER
         UCW2    = UCMOY%R(I)**2 + 0.5D0 * UW%R(I)**2
         SHIELDS = FCW%R(I)*UCW2/DENS/GRAV/DM
!
C        CRITICAL OMEGA (TEMPERVILLE AND GUIZA,2000)  !
         IF (SHIELDS <= 0.2D0) THEN
            OMEGACR = 0.03D0
         ELSEIF (SHIELDS <= 0.4D0) THEN
            OMEGACR = 1.D0 - SQRT(1.D0-((SHIELDS-0.2D0)/0.58D0)**2)
         ELSEIF (SHIELDS <= 1.5D0) THEN
            OMEGACR = 0.8104D0 * SQRT(SHIELDS) - 0.4225D0
         ELSE
            OMEGACR = 0.7236D0 * SQRT(SHIELDS) - 0.3162D0
         ENDIF
!
C        OMEGA1, OMEGA2  !
         IF(TW1%R(I) > ZERO) THEN
            OMEGA1 = UW1%R(I)**2 / (2.D0*DENS*GRAV*XWC*TW1%R(I))
         ELSE
            OMEGA1 = ZERO
         ENDIF
!
         IF(TW2%R(I) > ZERO) THEN
            OMEGA2 = UW2%R(I)**2 / (2.D0*DENS*GRAV*XWC*TW2%R(I))
         ELSE
            OMEGA2 = ZERO
         ENDIF
!
C        QUANTITIES OF SAND DEPOSITED AND
C        IN SUSPENSION AT EACH PHASE OF THE CYCLE
!
C        PHASE 1
         IF (OMEGA1 <= OMEGACR) THEN
            W1  = 2.D0 * OMEGA1 * XWC * TW1%R(I) / DM
            WP1 = 0.D0
         ELSE
            W1  = 2.D0 * OMEGACR * XWC * TW1%R(I) / DM
            WP1 = 2.D0 * (OMEGA1-OMEGACR) * XWC * TW1%R(I) / DM
         ENDIF
!
C        PHASE 2
         IF (OMEGA2 <= OMEGACR) THEN
            W2  = 2.D0 * OMEGA2 * XWC * TW2%R(I) / DM
            WP2 = 0.D0
         ELSE
            W2  = 2.D0 * OMEGACR * XWC * TW2%R(I) / DM
            WP2 = 2.D0 * (OMEGA2-OMEGACR) * XWC * TW2%R(I) / DM
         ENDIF
!
C        GAMMAW, GAMMAN,GAMMA
         IF ((UW2%R(I)*TW2%R(I) + UW1%R(I)*TW1%R(I)) > 0.D0 ) THEN
            GAMMAW = (  UW1%R(I) * TW1%R(I) * (W1**3+WP2**3)
     &                - UW2%R(I) * TW2%R(I) * (W2**3+WP1**3))
     &             / ( (UW1%R(I)+UW2%R(I)) * TW%R(I) )
C AFTER CAMENEN / ((UW1(I)*TW1(I)+UW2(I)*TW2(I)) ??
         ELSE
            GAMMAW = (2.D0 * UCW%R(I)**2 / DENS / GRAV / DM)**3
         ENDIF
         GAMMAN = (2.D0 * UCN%R(I)**2 / DENS / GRAV / DM)**3
         GAMMA  = MAX(SQRT(GAMMAW**2 + GAMMAN**2),1.D-10)
!
C        SOLID TRANSPORT IN THE WAVE DIRECTION : QSW
C        AND IN THE NORMAL DIRECTION : QSN
!
         QSW      = ALPHA * GAMMAW * XWC * DM / GAMMA**(1.D0-BETA)
         QSN      = ALPHA * GAMMAN * XWC * DM / GAMMA**(1.D0-BETA)
         QSC%R(I) = SQRT(QSW**2 + QSN**2)
!
      ENDDO
C
C----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       INITIALISES THE BOUNDARY CONDITIONS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CLT, KDDL, KDIR, KENT, KINC, KLOG, KNEU, KP1BOR, KSORT, LIMTRA, LITBOR, MASKEL, MASKTR, MSK, NBOR, NELBOR, NPTFR, U, V, XNEBOR, YNEBOR
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C, DDL, DIR, K, K1, K2, NEU, OND, USCALN
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_DIFFIN
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_MAIN()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 17/08/2004
!> </td><td> FRANCOIS MENARD (PLACEMENT @ LNHE)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CLT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDDL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDIR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KINC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KLOG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KNEU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KP1BOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSORT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIMTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LITBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKTR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NELBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XNEBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>YNEBOR
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_DIFFIN !
     &  (U, V, NBOR, XNEBOR, YNEBOR, KP1BOR, MASKEL, NELBOR, NPTFR,
     &   KENT, KSORT, KLOG, KINC, KDIR, KDDL, KNEU, MSK, CLT, LITBOR,
     &   MASKTR, LIMTRA)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CLT            |---| 
C| KDDL           |---| 
C| KDIR           |---| 
C| KENT           |---| 
C| KINC           |---| 
C| KLOG           |---| 
C| KNEU           |---| 
C| KP1BOR         |---| 
C| KSORT          |---| 
C| LIMTRA         |---| 
C| LITBOR         |---| 
C| MASKEL         |---| 
C| MASKTR         |---| 
C| MSK            |---| 
C| NBOR           |---| 
C| NELBOR         |---| 
C| NPTFR          |---| 
C| U             |---| 
C| V             |---| 
C| XNEBOR         |---| 
C| YNEBOR         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_BEDLOAD_DIFFIN => BEDLOAD_DIFFIN
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ), INTENT(IN)    :: U, V, NBOR, XNEBOR, YNEBOR
      TYPE(BIEF_OBJ), INTENT(IN)    :: KP1BOR, MASKEL, NELBOR
      INTEGER,        INTENT(IN)    :: NPTFR, KENT, KSORT, KLOG
      INTEGER,        INTENT(IN)    :: KINC, KDIR, KDDL, KNEU
      LOGICAL,        INTENT(IN)    :: MSK
      TYPE(BIEF_OBJ), INTENT(INOUT) :: CLT
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: LITBOR, MASKTR, LIMTRA


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER            :: K, K1, K2
      DOUBLE PRECISION   :: USCALN,C
      INTEGER, PARAMETER :: DIR = 1
      INTEGER, PARAMETER :: DDL = 2
      INTEGER, PARAMETER :: NEU = 3
      INTEGER, PARAMETER :: OND = 4


!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ****************************************************** !
      ! I - TYPES OF BOUNDARY CONDITIONS FOR THE TRACER        ! (_IMP_)
      !     MAY BE MODIFIED DEPENDING ON THE SIGN OF U.N       ! (_IMP_)
      !     FOR THE LIQUID BOUNDARIES (N : OUTGOING NORMAL)    ! (_IMP_)
      ! ****************************************************** !
      DO K = 1, NPTFR

         CLT%I(K) = LITBOR%I(K)

         ! I.1 - LIQUID BOUNDARIES (_IMP_)
         ! --------------------------------------
         IF (CLT%I(K) == KENT) THEN
            USCALN = U%R(NBOR%I(K))*XNEBOR%R(K)
     &             + V%R(NBOR%I(K))*YNEBOR%R(K)

            ! OUTGOING VELOCITY, FREE TRACER
            ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            IF (USCALN >= 0.D0) CLT%I(K) = KSORT

         ELSEIF(CLT%I(K) == KSORT) THEN

            USCALN = U%R(NBOR%I(K))*XNEBOR%R(K)
     &             + V%R(NBOR%I(K))*YNEBOR%R(K)

            ! ENTERING VELOCITY, FREE TRACER
            ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            IF (USCALN <= 0.D0) CLT%I(K) = KENT
         ENDIF

      ENDDO


      ! **************************************************************** !
      ! II - MASKTR ARRAY DEFINED AS A FUNCTION OF CLT                   ! (_IMP_)
      !      EQUALS 1 FOR A SEGMENT OF NEUMANN TYPE, AND 0 OTHERWISE     ! (_IMP_)
      !      A SEGMENT IS OF NEUMANN TYPE IF THE USER SPECIFIES AT LEAST ! (_IMP_)
      !      ONE OF ITS NODES AS NEUMANN.                                ! (_IMP_)
      ! **************************************************************** !
      CALL OS('X=0     ', X=MASKTR)

      DO K1 = 1 , NPTFR

         K2 = KP1BOR%I(K1)

         ! II.1 - NEUMANN TYPE SEGMENTS
         ! -------------------------------
         IF (CLT%I(K1).EQ.KLOG.OR.CLT%I(K2).EQ.KLOG) THEN
            MASKTR%ADR(NEU)%P%R(K1) = 1.D0

         ! II.2 - OUTGOING TYPE SEGMENTS (_IMP_)
         ! ------------------------------
         ELSEIF ((CLT%I(K1) == KENT) .AND. (CLT%I(K2) == KSORT)) THEN
            MASKTR%ADR(DDL)%P%R(K1) = 1.D0

         ELSEIF ((CLT%I(K1) == KSORT) .OR. (CLT%I(K2) == KSORT)) THEN
            MASKTR%ADR(DDL)%P%R(K1) = 1.D0

         ! II.3 - OUTGOING TYPE SEGMENTS (_IMP_)
         ! ------------------------------
         ELSEIF ((CLT%I(K1) == KSORT) .AND. (CLT%I(K2) == KENT)) THEN
            MASKTR%ADR(DDL)%P%R(K1) = 1.D0
         ELSEIF ((CLT%I(K1) == KENT) .OR. (CLT%I(K2) == KENT)) THEN
            MASKTR%ADR(DIR)%P%R(K1) = 1.D0
         ELSEIF ((CLT%I(K1) == KINC) .OR. (CLT%I(K2) == KINC)) THEN
            MASKTR%ADR(OND)%P%R(K1)=1.D0
         ELSE
            IF (LNG == 1) WRITE(LU,101)
            IF (LNG == 2) WRITE(LU,102)
            CALL PLANTE(1)
         ENDIF
      ENDDO


      ! *********************** !
      ! III - POTENTIAL MASKING !
      ! *********************** !
      IF(MSK) THEN
        DO K1 = 1 , NPTFR
          C=MASKEL%R(NELBOR%I(K1))
          MASKTR%ADR(DIR)%P%R(K1) = MASKTR%ADR(DIR)%P%R(K1)*C
          MASKTR%ADR(DDL)%P%R(K1) = MASKTR%ADR(DDL)%P%R(K1)*C
          MASKTR%ADR(NEU)%P%R(K1) = MASKTR%ADR(NEU)%P%R(K1)*C
          MASKTR%ADR(OND)%P%R(K1) = MASKTR%ADR(OND)%P%R(K1)*C
        ENDDO
      ENDIF


      ! ************************************************************** !
      ! IV - FROM PHYSICAL CONDITION TO TECHNICAL CONDITIONS           !
      ! ************************************************************** !
      DO K = 1, NPTFR

         ! IV.1 - 'INCOMING' BOUNDARY : IMPOSED TRACER (_IMP_)
         ! -----------------------------------------
         IF(CLT%I(K).EQ.KENT) THEN
            LIMTRA%I(K) = KDIR

         ELSEIF(CLT%I(K).EQ.KSORT) THEN
            LIMTRA%I(K) = KDDL

         ! IV.2 - SOLID BOUNDARY : NEUMANN CONDITIONS (_IMP_)
         ! ------------------------------------
         ELSEIF(CLT%I(K).EQ.KLOG ) THEN
            LIMTRA%I(K) = KNEU

         ! IV.3 - ERROR: UNKNOWN LITBOR VALUE (_IMP_)
         ! ----------------------------------------
         ELSE
            IF (LNG == 1) WRITE(LU,11) K, LITBOR%I(K)
            IF (LNG == 2) WRITE(LU,12) K, LITBOR%I(K)
            CALL PLANTE(1)
            STOP
         ENDIF

      ENDDO

      !----------------------------------------------------------------!
101   FORMAT(' DIFFIN_SISYPHE : CAS NON PREVU')
11    FORMAT(' DIFFIN_SISYPHE : POINT ',1I8,' LITBOR= ',1I8,' ?')
      !----------------------------------------------------------------!
102   FORMAT(' DIFFIN_SISYPHE: UNEXPECTED CASE')
12    FORMAT(' DIFFIN_SISYPHE : POINT ',1I8,' LITBOR= ',1I8,' ?')
      !----------------------------------------------------------------!


!======================================================================!
!======================================================================!

      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE THETAC ANGLE (FLOW DIRECTION).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> NPOIN, PI, QU, QV, THETAC
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I, LOCAL_ZERO
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_DIRECTION
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_BAILARD(), BEDLOAD_DIBWAT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> 01/10/2003
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAC
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_DIRECTION ! (_IMP_)
     &  (QU, QV, NPOIN, PI, THETAC)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| NPOIN          |---| 
C| PI             |---| 
C| QU             |---| 
C| QV             |---| 
C| THETAC         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_BEDLOAD_DIRECTION => BEDLOAD_DIRECTION
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),  INTENT(IN)  :: QU, QV
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: PI
      TYPE(BIEF_OBJ),  INTENT(INOUT) :: THETAC


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER                     :: I
      DOUBLE PRECISION, PARAMETER :: LOCAL_ZERO = 1.D-6


!======================================================================!
!======================================================================!
C                    DECLARES TYPES AND DIMENSIONS                     !
!======================================================================!
!======================================================================!

      DO I = 1, NPOIN

         IF (ABS(QU%R(I)) <= LOCAL_ZERO) THEN

            IF (QV%R(I) < = LOCAL_ZERO) THEN
               THETAC%R(I) = -PI*0.5D0
            ELSE
               THETAC%R(I) =  PI*0.5D0
            ENDIF

         ELSE

            THETAC%R(I) = ATAN(QV%R(I) / QU%R(I))

            IF (QU%R(I) < 0.D0) THEN
               THETAC%R(I) = PI + THETAC%R(I)
            ENDIF

         ENDIF

      END DO

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE BEDLOAD_DIRECTION
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE PARAMETERS OF THE SLOPE EFFECT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> BETA, BETA2, CALFA, COEF, CTETA, DEVIA, DM, DZFDX, DZFDY, GRAV, IELMT, KENT, LIQBOR, MASKEL, MESH, MSK, NPOIN, NPTFR, PHISED, PI, S, SALFA, SLOPEFF, STETA, TOB, U2D, UCMOY, UNSV2D, V2D, XMVE, XMVS, ZF
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AA, BB, C, C1, CALPHA, CPSI, CZETA, DZF, I, K, NORM, SALPHA, SPSI, SURBETA2, SZETA, TANPHI, TT1, ZETA
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_EFFPNT
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), PARCOM(), VECTOR()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_SOLIDISCHARGE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>BETA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BETA2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>COEF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CTETA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEVIA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DZFDX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DZFDY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIQBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PHISED
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLOPEFF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>STETA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCMOY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_EFFPNT ! (_IMP_)
     & (MASKEL,LIQBOR,S,ZF,U2D,V2D,UCMOY,NPOIN,NPTFR,IELMT,KENT,
     &  BETA,PI,MSK,MESH,DZFDX,DZFDY,CTETA,STETA,
     &  COEF,CALFA,SALFA,SLOPEFF,PHISED,DEVIA,BETA2,
     &  TOB,XMVS,XMVE,DM,GRAV,UNSV2D,
!RK
     &  U3D,V3D,CODE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| BETA           |---| 
C| BETA2          |---| 
C| CALFA          |---| 
C| COEF           |---| 
C| CTETA          |---| 
C| DEVIA          |---| 
C| DM             |---| 
C| DZFDX          |---| 
C| DZFDY          |---| 
C| GRAV           |---| 
C| IELMT          |---| 
C| KENT           |---| 
C| LIQBOR         |---| 
C| MASKEL         |---| 
C| MESH           |---| 
C| MSK            |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| PHISED         |---| 
C| PI             |---| 
C| S             |---| 
C| SALFA          |---| 
C| SLOPEFF        |---| 
C| STETA          |---| 
C| TOB            |---| 
C| U2D            |---| 
C| UCMOY          |---| 
C| UNSV2D         |---| 
C| V2D            |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| ZF             |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_EFFPNT => BEDLOAD_EFFPNT
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASKEL,LIQBOR,S,UNSV2D
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZF, U2D,V2D, UCMOY, TOB
      INTEGER,          INTENT(IN)    :: NPOIN, NPTFR, IELMT, KENT
      INTEGER,          INTENT(IN)    :: SLOPEFF,DEVIA
      DOUBLE PRECISION, INTENT(IN)    :: BETA, PI, PHISED, BETA2
      DOUBLE PRECISION, INTENT(IN)    :: XMVS, XMVE, GRAV, DM
      LOGICAL,          INTENT(IN)    :: MSK
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: DZFDX, DZFDY
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CTETA,STETA
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: COEF, CALFA, SALFA
!RK
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
      CHARACTER(LEN=24), INTENT(IN)    :: CODE


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: I, K
      DOUBLE PRECISION :: C,ZETA,C1,CALPHA,SALPHA,AA,BB
      DOUBLE PRECISION :: CPSI,SPSI,DZF,TANPHI,CZETA,SZETA,SURBETA2
      DOUBLE PRECISION :: NORM ,TT1
!
!RK
      DOUBLE PRECISION :: U3DNORM
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C     DETERMINES COS AND SIN TETA
C     TETA = ANGLE OF THE FLOW WITH OX
!RK
      IF(CODE(1:9).EQ.'TELEMAC3D') THEN
!
        DO I=1,NPOIN
          IF(UCMOY%R(I).GE.1.D-12) THEN
            u3dnorm=SQRT(U3D%R(I)*U3D%R(I)+V3D%R(I)*V3D%R(I))
            CTETA%R(I)=U3D%R(I)/u3dnorm
            STETA%R(I)=V3D%R(I)/u3dnorm
          ELSE
            CTETA%R(I)=1.D0
            STETA%R(I)=0.D0
          ENDIF
        ENDDO
!
      ELSE
!
        DO I=1,NPOIN
          IF(UCMOY%R(I).GE.1.D-12) THEN
            CTETA%R(I)=U2D%R(I)/UCMOY%R(I)
            STETA%R(I)=V2D%R(I)/UCMOY%R(I)
          ELSE
            CTETA%R(I)=1.D0
            STETA%R(I)=0.D0
          ENDIF
        ENDDO
!
      ENDIF
! 
!
!----------------------------------------------------------------------
!
C     COMPUTES THE SLOPE  : D(ZF)/DX ET D(ZF)/DY (AT THE NODES)
!
      CALL VECTOR(DZFDX, '=', 'GRADF          X',IELMT,1.D0,ZF,S,S,
     &            S,S,S,MESH,MSK,MASKEL)
      CALL VECTOR(DZFDY, '=', 'GRADF          Y',IELMT,1.D0,ZF,S,S,
     &            S,S,S,MESH,MSK,MASKEL)
C
      IF(NCSIZE.GT.1) THEN
        CALL PARCOM(DZFDX,2,MESH)
        CALL PARCOM(DZFDY,2,MESH)
      ENDIF
C
      CALL OS('X=XY    ',X=DZFDX,Y=UNSV2D)
      CALL OS('X=XY    ',X=DZFDY,Y=UNSV2D)
!
!======================================================================
!
C     COMPUTES THE SOLID TRANSPORT ANGLE ALFA = TETA + DEVIATION
!
C     1 : KOCH AND FLOKSTRA
!
      IF(DEVIA==1) THEN
!
      C = 2.D0*(XMVS-XMVE)*GRAV*DM/3.D0
      DO I=1,NPOIN
        TT1=C/MAX(TOB%R(I),1.D-10)
        AA=STETA%R(I)-TT1*DZFDY%R(I)
        BB=CTETA%R(I)-TT1*DZFDX%R(I)
        NORM=MAX(SQRT(AA**2+BB**2),1.D-10)
        SALFA%R(I)=AA/NORM
        CALFA%R(I)=BB/NORM
      ENDDO
!
C     2 : TALMON ET AL. JHR 1995 33(4)
!
      ELSEIF(DEVIA==2) THEN
!
      SURBETA2=1.D0/BETA2
      C = (XMVS-XMVE)*GRAV*DM*SURBETA2**2
      DO I=1,NPOIN
        TT1=SQRT(C/MAX(TOB%R(I),1.D-10))
        AA=STETA%R(I)-TT1*DZFDY%R(I)
        BB=CTETA%R(I)-TT1*DZFDX%R(I)
        NORM=MAX(SQRT(AA**2+BB**2),1.D-10)
        SALFA%R(I)=AA/NORM
        CALFA%R(I)=BB/NORM
      ENDDO
!
      ENDIF
!
!======================================================================
!
C     COMPUTES THE COEFFICIENT TO TAKE THE SLOPE EFFECT ON THE MAGNITUDE
C     OF THE SOLID TRANSPORT INTO ACCOUNT
!
C     METHOD 1 (EMPIRICAL)
!
      IF(SLOPEFF==1) THEN
!
        DO I=1,NPOIN
          COEF%R(I)=MAX(0.D0,
     &    1.D0-BETA*(DZFDX%R(I)*CTETA%R(I)+DZFDY%R(I)*STETA%R(I)) )
        ENDDO
!
C     METHOD 2 : SOULSBY 1997 DYNAMICS OF MARINE SANDS P107-108
!
      ELSEIF(SLOPEFF.EQ.2) THEN
C
        TANPHI = TAN(PHISED*PI/180.D0)
C
        DO I=1,NPOIN
C
C         COSINE AND SINE OF THE DIRECTION OF THE SLOPE
          DZF=SQRT(DZFDX%R(I)**2+DZFDY%R(I)**2)
          IF(DZF.GT.1.D-12) THEN
            CALPHA=DZFDX%R(I)/DZF
            SALPHA=DZFDY%R(I)/DZF
          ELSE
            CALPHA=1.D0
            SALPHA=0.D0
          ENDIF
C
C         ZETA: ANGLE OF THE SLOPE WITH HORIZONTAL (BETA IN SOULSBY)
          ZETA=ATAN(DZF)
          CZETA=COS(ZETA)
          SZETA=SIN(ZETA)
C
C         PSI: ANGLE OF THE CURRENT WITH THE SLOPE DIRECTION
C         PSI=TETA%R(I)-ALPHA
          CPSI=CTETA%R(I)*CALPHA+STETA%R(I)*SALPHA
          SPSI=STETA%R(I)*CALPHA-CTETA%R(I)*SALPHA
          C1=(CZETA*TANPHI)**2-(SPSI*SZETA)**2
          COEF%R(I)=MAX((CPSI*SZETA+SQRT(MAX(C1,0.D0)))/TANPHI,0.D0)
          COEF%R(I)=MAX(COEF%R(I),0.D0)
C
        ENDDO
!
      ENDIF
!
! ********************************************************************* !
C     V - TREATS THE BOUNDARY POINTS WITH IMPOSED RATE                  !
C         QS IS NOT MODIFIED WHEN SPECIFIED BY THE USER                 !
! ********************************************************************* !
!
      DO K = 1 , NPTFR
         IF (LIQBOR%I(K) == KENT) COEF%R(MESH%NBOR%I(K)) = 1.D0
C                           R.K. MAY 2007
C                           KSORT = 4
         IF (LIQBOR%I(K) == 4) COEF%R(MESH%NBOR%I(K)) = 1.D0
      ENDDO
!
!======================================================================
!======================================================================
!
      RETURN
      END SUBROUTINE BEDLOAD_EFFPNT
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       EINSTEIN-BROWN BEDLOAD TRANSPORT FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> DENS, DM, DSTAR, GRAV, NPOIN, QSC, TETAP
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CEINST, I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_EINST
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/10/2003
!> </td><td> C.VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DSTAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETAP
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_EINST ! (_IMP)
     &  (TETAP, NPOIN, DENS, GRAV, DM, DSTAR, QSC)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| DENS           |---| 
C| DM             |---| 
C| DSTAR          |---| 
C| GRAV           |---| 
C| NPOIN          |---| 
C| QSC            |---| 
C| TETAP          |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_BEDLOAD_EINST => BEDLOAD_EINST
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TETAP
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DENS, GRAV, DM, DSTAR
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: QSC


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: I
      DOUBLE PRECISION :: CEINST


!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!



      ! **************************** !
      ! II - BEDLOAD TRANSPORT       ! (_IMP_)
      ! **************************** !
      CEINST = 36.D0/(DSTAR**3)
      CEINST = SQRT(2.D0/3.D0+CEINST) -  SQRT(CEINST)
      CEINST = CEINST * SQRT(DENS*GRAV*(DM**3))
      DO I = 1, NPOIN

         IF (TETAP%R(I) < 2.5D-3) THEN
            QSC%R(I) = 0.D0
         ELSE IF (TETAP%R(I) < 0.2D0) THEN
            QSC%R(I) = 2.15D0* CEINST * EXP(-0.391D0/TETAP%R(I))
         ELSE
            QSC%R(I) = 40.D0 * CEINST * (TETAP%R(I)**3.D0)
         ENDIF

      ENDDO

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE BEDLOAD_EINST
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       ENGELUND-HANSEN BEDLOAD TRANSPORT FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CF, DENS, DM, GRAV, QSC, TETA, TOB, XMVE
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C1, CENGEL
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_ENGEL
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/10/2003
!> </td><td> C.VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_ENGEL ! (_IMP_)
     &  (TOB, CF, DENS, GRAV, DM, XMVE, TETA, QSC)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CF             |---| 
C| DENS           |---| 
C| DM             |---| 
C| GRAV           |---| 
C| QSC            |---| 
C| TETA           |---| 
C| TOB            |---| 
C| XMVE           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_BEDLOAD_ENGEL => BEDLOAD_ENGEL
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOB, CF
      DOUBLE PRECISION, INTENT(IN)    :: DENS, GRAV, DM, XMVE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TETA ! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC


      ! 3/ LOCAL VARIABLES
      ! ------------------
      DOUBLE PRECISION :: CENGEL, C1


!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ************************** !
      ! I - TOTAL STRESS ADIM      ! (_IMP_)
      ! ************************** !
      C1 = 1.D0/(DENS*XMVE*GRAV*DM)
      CALL OS('X=CY    ', X=TETA, Y=TOB , C=C1)
      CALL OS('X=Y**C  ', X=TETA, Y=TETA, C=5.D0/2.D0)


      ! *************************** !
      ! II - BEDLOAD TRANSPORT      ! (_IMP_)
      ! *************************** !
      CENGEL = 0.1D0*SQRT(DENS*GRAV*DM**3)
      CALL OS('X=+(Y,C)', X=QSC , Y=CF  , C=1.D-06)
      CALL OS('X=1/Y   ', X=QSC , Y=QSC)
      CALL OS('X=CXY   ', X=QSC , Y=TETA, C=CENGEL)

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE BEDLOAD_ENGEL
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       ENGELUND-HANSEN BEDLOAD TRANSPORT FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @warning  FORMULATION IS DIFFERENT FROM THAT IN BEDLOAD_ENGEL

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CF, DENS, DM, GRAV, NPOIN, QSC, TETA, TETAP
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CENGEL, I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_ENGEL_OLD
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.8                                       </center>
!> </td><td> 11/07/2007
!> </td><td> J-M HERVOUET
!> </td><td> DELETED OS REFERENCES
!> </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/11/2003
!> </td><td> C.VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETAP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCMOY
!></td><td>--></td><td>NORM OF VELOCITY
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE BEDLOAD_ENGEL_OLD
     &(TETAP,CF,NPOIN,GRAV,DM,DENS,TETA,QSC)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CF             |---| 
C| DENS           |---| 
C| DM             |---| 
C| GRAV           |---| 
C| NPOIN          |---| 
C| QSC            |---| 
C| TETA           |---| 
C| TETAP          |---| 
C| UCMOY          |-->| NORM OF VELOCITY
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_ENGEL_OLD => BEDLOAD_ENGEL_OLD
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TETAP,CF
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: GRAV, DM, DENS
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TETA! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER          :: I
      DOUBLE PRECISION :: CENGEL
!
      INTRINSIC SQRT
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C     ADIMENSIONAL SKIN STRESS: TETAP
!
C     ADIMENSIONAL TOTAL STRESS
!
      DO I = 1, NPOIN
        IF(TETAP%R(I) <= 0.06D0) THEN
          TETA%R(I) = 0.D0
        ELSEIF(TETAP%R(I) <  0.384D0) THEN
          TETA%R(I) = SQRT( 2.5D0 * (TETAP%R(I) - 0.06D0))
        ELSEIF(TETAP%R(I) <  1.080D0) THEN
          TETA%R(I) = 1.066D0 * TETAP%R(I)**0.176D0
        ELSE
          TETA%R(I) = TETAP%R(I)
        ENDIF
      ENDDO
!
C     BEDLOAD TRANSPORT
!
      CENGEL = 0.1D0*SQRT(DENS*GRAV*DM**3)
      DO I=1,NPOIN
        QSC%R(I)=CENGEL*SQRT(TETA%R(I)**5)/MAX(CF%R(I),1.D-6)
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE EVOLUTION FOR THE BEDLOAD TRANSPORT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ACLADM, AVA, BREACH, CALFA, COEFPN, CONST_ALAYER, D90, DEBUG, DM, DTS, EBOR, ELAY, ELAY0, ENTET, GRAV, HMIN, HN, IELMT, KDDL, KDIR, KENT, LCONDIS, LIMTEC, LOADMETH, LS0, MASK, MASKEL, MESH, MSK, NPOIN, NPTFR, Q, QS, QSX, QSY, S, SALFA, SLOPEFF, T1, T10, T11, T12, T13, T2, T3, T4, T5, T6, T7, T8, T9, UNSV2D, V2DPAR, VCE, VF, XMVE, XMVS, ZFCL
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> J
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_EVOL
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_NERBED_VF(), BEDLOAD_SOLVS_FE(), BEDLOAD_SOLVS_VF(), OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_MAIN()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 14/09/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BREACH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>COEFPN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CONST_ALAYER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>D90
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DTS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>EBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTET
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDDL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDIR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LCONDIS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIMTEC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LOADMETH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LS0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>Q
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLOPEFF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T11
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T12
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T13
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T5
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T6
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2DPAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_EVOL !
     &(HN,Q,S,ELAY,ACLADM, AVA,COEFPN,CALFA,SALFA,LIMTEC,EBOR,
     & MASKEL,MASK,V2DPAR,UNSV2D,DEBUG,NPOIN,NPTFR,
     & IELMT,KENT,KDIR,KDDL,LOADMETH,
     & DTS,DM,D90,HMIN,LS0,GRAV,XMVS,XMVE,VCE,
     & VF,ENTET,MSK,CONST_ALAYER,LCONDIS,MESH,
     & QS,T1, T2, T3, T4, T5, T6, T7, T8, T9,
     & T10, T11, T12, T13, ELAY0, BREACH, QSX, QSY, ZFCL,SLOPEFF)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLADM         |---| 
C| AVA            |---| 
C| BREACH         |---| 
C| CALFA          |---| 
C| COEFPN         |---| 
C| CONST_ALAYER   |---| 
C| D90            |---| 
C| DEBUG          |---| 
C| DM             |---| 
C| DTS            |---| 
C| EBOR           |---| 
C| ELAY           |---| 
C| ELAY0          |---| 
C| ENTET          |---| 
C| GRAV           |---| 
C| HMIN           |---| 
C| HN             |---| 
C| IELMT          |---| 
C| KDDL           |---| 
C| KDIR           |---| 
C| KENT           |---| 
C| LCONDIS        |---| 
C| LIMTEC         |---| 
C| LOADMETH       |---| 
C| LS0            |---| 
C| MASK           |---| 
C| MASKEL         |---| 
C| MESH           |---| 
C| MSK            |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| Q             |---| 
C| QS             |---| 
C| QSX            |---| 
C| QSY            |---| 
C| S             |---| 
C| SALFA          |---| 
C| SLOPEFF        |---| 
C| T1             |---| 
C| T10            |---| 
C| T11            |---| 
C| T12            |---| 
C| T13            |---| 
C| T2             |---| 
C| T3             |---| 
C| T4             |---| 
C| T5             |---| 
C| T6             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| UNSV2D         |---| 
C| V2DPAR         |---| 
C| VCE            |---| 
C| VF             |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| ZFCL           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_BEDLOAD_EVOL => BEDLOAD_EVOL
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------

      TYPE(BIEF_OBJ),   INTENT(IN)    :: HN,Q,S,UNSV2D,ELAY,ACLADM
      TYPE(BIEF_OBJ),   INTENT(IN)    :: COEFPN,CALFA,SALFA,LIMTEC
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASKEL,MASK,V2DPAR
      INTEGER,          INTENT(IN)    :: DEBUG,SLOPEFF,NPOIN,NPTFR
      INTEGER,          INTENT(IN)    :: IELMT,KENT,KDIR,LOADMETH,KDDL
      DOUBLE PRECISION, INTENT(IN)    :: DTS,DM,D90,HMIN,LS0
      DOUBLE PRECISION, INTENT(IN)    :: GRAV,XMVS,XMVE,VCE,AVA(NPOIN)
      LOGICAL,          INTENT(IN)    :: VF,ENTET,MSK
      LOGICAL,          INTENT(IN)    :: CONST_ALAYER,LCONDIS
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QS,EBOR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1, T2, T3, T4, T5, T6, T7
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T8, T9, T10, T11, T12, T13
      DOUBLE PRECISION, INTENT(INOUT) :: ELAY0
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: BREACH, QSX, QSY, ZFCL


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: J


!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! **************** !
      ! I - SLOPE EFFECT !
      ! **************** !
        IF (SLOPEFF == 1) THEN
          CALL OS('X=XY    ', X=QS , Y=COEFPN)
        ENDIF
        CALL OS('X=YZ    ', X=QSX, Y=QS, Z=CALFA)
        CALL OS('X=YZ    ', X=QSY, Y=QS, Z=SALFA)

      ! ************************************* !
      ! II - TREATMENT OF NON ERODABLE BOTTOM !
      ! ************************************* !
      IF(DEBUG > 0) WRITE(LU,*) 'BEDLOAD_NERBED_VF'
      IF(VF) THEN
        CALL BEDLOAD_NERBED_VF
     &        (MESH,LIMTEC,KDDL,ELAY%R,V2DPAR%R,QSX,QSY,AVA,NPOIN,
     &         MESH%NSEG, NPTFR, DTS, QS, T1, T2, T3, BREACH)
        CALL OS('X=YZ    ', X=QSX, Y=QS, Z=CALFA)
        CALL OS('X=YZ    ', X=QSY, Y=QS, Z=SALFA)
      ENDIF
      IF(DEBUG > 0) WRITE(LU,*) 'BEDLOAD_NERBED_VF'

      ! ***************************************************** !
      ! IVA - SOLVES THE BED-EVOLUTION EQUATION : F.V.        !
      ! ***************************************************** !
      IF (VF) THEN
         IF(DEBUG > 0) WRITE(LU,*) 'BEDLOAD_SOLVS_VF'

         CALL BEDLOAD_SOLVS_VF
     &        (MESH, QSX, QSY, LIMTEC,UNSV2D, EBOR, BREACH,
     &         MESH%NSEG,NPTFR,NPOIN,KDIR,KDDL,DTS,T10,ZFCL,T11)
         IF(DEBUG > 0) WRITE(LU,*) 'END_BEDLOAD_SOLVS_VF'

      ! ****************************************************** !
      ! IVB - SOLVES THE BED-EVOLUTION EQUATION  : F.E.        !
      ! ****************************************************** !
      ELSE
         IF(DEBUG > 0) WRITE(LU,*) 'BEDLOAD_SOLVS_FE'
         DO J=1,NPOIN
           T13%R(J)=AVA(J)*ELAY%R(J)
         ENDDO
         CALL BEDLOAD_SOLVS_FE
     &        (MESH,S,EBOR,MASKEL,MASK,
     &         QSX,QSY,IELMT,NPOIN,NPTFR,KENT,KDIR,
     &         LIMTEC,DTS,MSK,ENTET,T1,T4,T8,
     &         ZFCL,T12,T13,MESH%GLOSEG%I,
     &         MESH%GLOSEG%DIM1,MESH%MSEG%X,
     &         MESH%MSEG%X%R(MESH%NSEG+1:2*MESH%NSEG),
     &         MESH%NSEG,UNSV2D)
         IF(DEBUG > 0) WRITE(LU,*) 'END_BEDLOAD_SOLVS_FE'
      ENDIF

      ! ************************************ !
      ! V - VARIABLE ACTIVE LAYER THICKNESS  !
      ! ************************************ !

C     IF(.NOT.CONST_ALAYER.OR.LCONDIS) THEN
C       DO J = 1,NPOIN
C         IF(.NOT.CONST_ALAYER) THEN
C           ELAY0 = MAX(ABS(ZFCL%R(J)),3.D0*ACLADM%R(J))
C         ENDIF
C         IF((QS%R(J)
C    &          (ABS(ZFCL%R(J)/(ELAY0*DTS))
C               ZFCL%R(J) = 0.D0
C         ENDIF
C       ENDDO
C     ENDIF

!======================================================================!
!======================================================================!

      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE BED-LOAD TRANSPORT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AVA, BIJK, CF, COEFPN, D90, DM, FW, GRAV, HIDFAC, HIDING, HMIN, HN, HOULE, ICF, IELMT, KARMAN, KSP, KSR, MU, NPOIN, PI, QSC, QSS, SECCURRENT, SLOPEFF, SUSP, T1, T10, T11, T2, T3, T4, T5, T6, T7, T8, T9, TETAP, THETAW, TOB, TOBW, TW, U2D, UCMOY, UNLADM, UW, V2D, VCE, XKV, XMVE, XMVS, XWC, ZERO
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ALPHA, C1, DENS, DSTAR, I, ZERO_LOCAL
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_FORMULA
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_BAILARD(), BEDLOAD_BIJKER(), BEDLOAD_DIBWAT(), BEDLOAD_EINST(), BEDLOAD_ENGEL(), BEDLOAD_ENGEL_OLD(), BEDLOAD_HUNZ_MEYER(), BEDLOAD_MEYER(), BEDLOAD_SECCURRENT(), BEDLOAD_SOULSBY(), BEDLOAD_VANRIJN(), OS(), PLANTE(), QSFORM()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_SOLIDISCHARGE(), INIT_TRANSPORT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.6                                       </center>
!> </td><td> 12/01/2005
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/10/2003
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.2                                       </center>
!> </td><td> **/01/2002
!> </td><td> BUI MINH DUC
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BIJK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>COEFPN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>D90
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDFAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDING
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SECCURRENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLOPEFF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SUSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T11
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T5
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T6
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETAP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCMOY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_FORMULA
     &(U2D,V2D,UCMOY,HN,CF,MU,TOB,TOBW,UW,TW,THETAW,FW,
     & ACLADM, UNLADM,KSP,KSR,AVA,NPOIN,ICF,HIDFAC,XMVS,XMVE,
     & DM,GRAV,VCE,XKV,HMIN,XWC,D90,KARMAN,ZERO,
     & PI,SUSP, AC, HIDING, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,
     & T11,TETAP, QSC, QSS,IELMT,SECCURRENT,SLOPEFF,
     & COEFPN,BIJK,HOULE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AVA            |---| 
C| BIJK           |---| 
C| CF             |---| 
C| COEFPN         |---| 
C| D90            |---| 
C| DM             |---| 
C| FW             |---| 
C| GRAV           |---| 
C| HIDFAC         |---| 
C| HIDING         |---| 
C| HMIN           |---| 
C| HN             |---| 
C| HOULE          |---| 
C| ICF            |---| 
C| IELMT          |---| 
C| KARMAN         |---| 
C| KSP            |---| 
C| KSR            |---| 
C| MU             |---| 
C| NPOIN          |---| 
C| PI             |---| 
C| QSC            |---| 
C| QSS            |---| 
C| SECCURRENT     |---| 
C| SLOPEFF        |---| 
C| SUSP           |---| 
C| T1             |---| 
C| T10            |---| 
C| T11            |---| 
C| T2             |---| 
C| T3             |---| 
C| T4             |---| 
C| T5             |---| 
C| T6             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| TETAP          |---| 
C| THETAW         |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| TW             |---| 
C| U2D            |---| 
C| UCMOY          |---| 
C| UNLADM         |---| 
C| UW             |---| 
C| V2D            |---| 
C| VCE            |---| 
C| XKV            |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_FORMULA => BEDLOAD_FORMULA
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D, V2D, UCMOY,HN, CF, TOB
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MU,TOBW, UW, TW, THETAW, FW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM,UNLADM,KSR,KSP
      INTEGER,          INTENT(IN)    :: NPOIN, ICF, HIDFAC,IELMT
      DOUBLE PRECISION, INTENT(IN)    :: XMVS, XMVE, DM, GRAV, VCE
      DOUBLE PRECISION, INTENT(IN)    :: XKV, HMIN, XWC, D90
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, ZERO, PI
      LOGICAL,          INTENT(IN)    :: SUSP,SECCURRENT,HOULE
      DOUBLE PRECISION, INTENT(INOUT) :: AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1, T2, T3, T4, T5, T6, T7
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T8, T9, T10,T11
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TETAP ! WORK ARRAY T12
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC, QSS
      TYPE(BIEF_OBJ),   INTENT(INOUT) ::  COEFPN
      INTEGER,          INTENT(IN)    :: SLOPEFF
C
      DOUBLE PRECISION, INTENT (IN) :: BIJK,AVA(NPOIN)
      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER                     :: I
      DOUBLE PRECISION            :: DENS,DSTAR,ALPHA
      DOUBLE PRECISION, PARAMETER :: ZERO_LOCAL = 1.D-6
      DOUBLE PRECISION            :: C1


!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!


      ! *************************** !
      ! I - ADIMENSIONAL PARAMETERS !
      ! *************************** !

      DENS  = (XMVS - XMVE )/ XMVE
      DSTAR = DM*(GRAV*DENS/VCE**2)**(1.D0/3.D0)

      ! ************************ !
      ! II -  SKIN FRICTION      !
      ! ************************ !
!
      C1 = 1.D0/(DENS*XMVE*GRAV*DM)
      CALL OS('X=CYZ   ', X=TETAP, Y=TOB,Z=MU,  C=C1)
      CALL OS('X=+(Y,C)', X= TETAP,Y=TETAP, C=ZERO_LOCAL)
!
      ! *********************************************** !
      ! III - CRITICAL SHIELDS NUMBER FOR ENTRAINMENT   !
      !       VAN RIJN FORMULATION                      !
      ! *********************************************** !
C MOVED TO INIT_SEDIMENT.F
!
C      IF(ICF.EQ.7.OR.ICF.EQ.6.OR.AC.LE.0.D0) THEN
C         IF (DSTAR
C            AC = 0.24*DSTAR**(-1.0D0)
C         ELSEIF (DSTAR
C            AC = 0.14D0*DSTAR**(-0.64D0)
C         ELSEIF (DSTAR
C            AC = 0.04D0*DSTAR**(-0.1D0)
C         ELSEIF (DSTAR
C            AC = 0.013D0*DSTAR**(0.29D0)
C         ELSE
C            AC = 0.055D0
C         ENDIF
C      ENDIF

      IF(SECCURRENT) CALL BEDLOAD_SECCURRENT(IELMT)

      ! ****************************************** !
      ! IV - COMPUTES 2 TRANSPORT TERMS            !
      !      QSS : SUSPENSION                      !
      !      QSC : BEDLOAD                         !
      ! ****************************************** !

      ! ===================================== !
      ! IV(1) - MEYER-PETER-MULLER FORMULATION!
      !         FOR BEDLOAD ONLY              !
      ! ===================================== !

      IF(ICF == 1) THEN

          CALL BEDLOAD_MEYER(TETAP,HIDING,HIDFAC,DENS,GRAV,DM,AC,
     &                       T1,QSC,SLOPEFF,COEFPN)
          DO I=1,NPOIN
            QSC%R(I)=XKV*QSC%R(I)*AVA(I)
          ENDDO
          ALPHA = -3.D0

      ! =========================== !
      ! IV(2) - EINSTEIN FORMULATION!
      !         FOR BEDLOAD ONLY    !
      ! =========================== !

      ELSEIF(ICF == 2) THEN

         CALL BEDLOAD_EINST(TETAP,NPOIN,DENS,GRAV,DM,DSTAR,QSC)
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -6.D0

      ! =================================== !
      ! IV(30) - ENGELUND-HANSEN FORMULATION!
      !          FOR TOTAL TRANSPORT        !
      ! =================================== !

      ELSEIF(ICF == 30) THEN
C V6P0 MU IS USED INSTEAD OF CF
C BEWARE: DIFFERENCES
C         CALL BEDLOAD_ENGEL(TETAP,DENS,GRAV,DM,QSC)
C BACK TO EARLIER VERSION OF BEDLOAD_ENGEL
         CALL BEDLOAD_ENGEL(TOB,CF,DENS,GRAV,DM,XMVE,T1,QSC)
C        ARBITRARY DISTRIBUTION
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -5.D0

      ! ======================================== !
      ! IV(3) - ENGELUND-HANSEN FORMULATION      !
      !         MODIFIED: CHOLLET ET CUNGE       !
      !         FOR TOTAL TRANSPORT              !
      ! ======================================== !

      ELSEIF(ICF == 3) THEN
C        KSP IS USED INSTEAD OF CFP
         CALL BEDLOAD_ENGEL_OLD
     &        (TETAP,CF,NPOIN,GRAV,DM,DENS,T1,QSC)
C        ARBITRARY DISTRIBUTION
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -5.D0

      ! ============================== !
      ! IV(4) - BIJKER FORMULATION     !
      !         FOR BEDLOAD + SUSPENSION !
      ! ============================== !

      ELSEIF (ICF == 4) THEN

         CALL BEDLOAD_BIJKER
     &    (TOBW,TOB,MU,KSP,KSR,HN,NPOIN,DM,DENS,XMVE,GRAV,
     &     XWC,KARMAN,ZERO,T4,T7,T8,T9,QSC,QSS,BIJK,HOULE)
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
           QSS%R(I)=XKV*QSS%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -1.D0

      ! ============================== !
      ! IV(5) - SOULSBY FORMULATION    !
      !         FOR BEDLOAD + SUSPENSION !
      ! ============================== !

      ELSEIF (ICF == 5) THEN

         CALL BEDLOAD_SOULSBY
     &        (UCMOY,HN,UW,NPOIN,DENS,GRAV,DM,DSTAR,HMIN,
     &         D90,QSC,QSS)
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
           QSS%R(I)=XKV*QSS%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -4.6D0

      ! ================================================== !
      ! IV(6) - HUNZIKER / MEYER-PETER & MULLER FORMULATION!
      !         FOR BEDLOAD ONLY                           !
      ! ================================================== !

      ELSEIF (ICF == 6) THEN

         CALL BEDLOAD_HUNZ_MEYER
     &        (TOB, MU, ACLADM, UNLADM, NPOIN, DENS, XMVE, GRAV,
     &         DM, AC, T1, T2, T3, HIDING, QSC)
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)
         ENDDO
         ALPHA = -3.D0

      ! =========================== !
      ! IV(7) - VAN RIJN FORMULATION!
      !         FOR BEDLOAD ONLY    !
      ! =========================== !

      ELSEIF (ICF == 7) THEN
C
         CALL BEDLOAD_VANRIJN
C     &        (TOB,MU,NPOIN,DM,DENS,GRAV,DSTAR,AC,QSC)
     &        (TETAP,MU,NPOIN,DM,DENS,GRAV,DSTAR,AC,QSC)
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -4.2D0

      ! ============================== !
      ! IV(8) - BAILARD FORMULATION    !
      !         FOR BEDLOAD + SUSPENSION !
      ! ============================== !

      ELSEIF (ICF == 8) THEN
C
         CALL BEDLOAD_BAILARD
     &        (U2D,V2D,UCMOY,TOB,TOBW,THETAW,UW,FW,CF,NPOIN,
     &         PI,XMVE,GRAV,DENS,XWC,T1,T2,T3,T4,T5,T6,T7,
     &         T8,T9,T10,T11,QSC,QSS,HOULE)
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
           QSS%R(I)=XKV*QSS%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -3.D0

      ! ======================================= !
      ! IV(9) - DIBAJNIA AND WATANABE FORMULATION!
      !         FOR TOTAL TRANSPORT             !
      ! ======================================= !

      ELSEIF(ICF == 9) THEN
C
         CALL BEDLOAD_DIBWAT
     &        (U2D,V2D,UCMOY, CF, TOB, TOBW, UW, TW, FW, THETAW,
     &         NPOIN, XMVE, DENS, GRAV, DM, XWC, PI, T1, T2, T3, T4,
     &         T5, T6, T7, T8, T9, T10, T11, QSC,HOULE)
C        ARBITRARY DISTRIBUTION
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
         ENDDO
         ALPHA = -3.D0

      ! ============================================ !
      ! IV(0) - USER-DEFINED FORMULATION             !
      ! ============================================ !

      ELSEIF (ICF == 0) THEN

         ALPHA = -1.D0 ! INITIALISES ALPHA
         CALL QSFORM
         DO I=1,NPOIN
           QSC%R(I)=XKV*QSC%R(I)*AVA(I)*HIDING%R(I)
           QSS%R(I)=XKV*QSS%R(I)*AVA(I)*HIDING%R(I)
         ENDDO

      ! ================= !
      ! IV(ELSE) - ERROR  !
      ! ================= !

      ELSE
        IF(LNG == 1) WRITE(LU,200) ICF
        IF(LNG == 2) WRITE(LU,201) ICF
200     FORMAT(1X,'TRANSP : FORMULE DE TRANSPORT INCONNUE :',1I6)
201     FORMAT(1X,'TRANSP : TRANSPORT FORMULA UNKNOWN:',1I6)
        CALL PLANTE(1)
        STOP
      ENDIF
!
!-----------------------------------------------------------------------
!
C     WHEN SUSPENSION IS NOT ASKED SPECIFICALLY, SOME BEDLOAD TRANSPORT
C     FORMULAS GIVE A VALUE
!
      IF(.NOT.SUSP) THEN
        IF(ICF.EQ.4.OR.ICF.EQ.5.OR.ICF.EQ.8.OR.ICF.EQ.0) THEN
          DO I = 1,NPOIN
            QSC%R(I) = QSC%R(I) + QSS%R(I)
          ENDDO
        ELSE
C         NOTE JMH: IS THIS REALLY USEFUL ???
          DO I = 1,NPOIN
            QSS%R(I) = 0.D0
          ENDDO
        ENDIF
      ENDIF
!
!=======================================================================
!=======================================================================
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       HIDING FACTOR FOR EACH NODE, SEDIMENT CLASS
!>                AND TIME STEP.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ACLADM, DM, HIDFAC, HIDI, HIDING, KARIM_HOLLY_YANG, NPOIN
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_HIDING_FACTOR
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), PLANTE()
!>   </td></tr>
!>     <tr><th> Unknown(s)
!>    </th><td> BIEF_OBJ, C1, C2, DOUBLE, GLOBAL, IN, INOUT, INTEGER, INTENT, J, LOCAL, TYPE, VARIABLES
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_SOLIDISCHARGE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 14/09/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.3                                       </center>
!> </td><td> **/**/2002
!> </td><td> M. GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.3                                       </center>
!> </td><td> **/11/2002
!> </td><td> B. MINH DUC
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDFAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDING
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARIM_HOLLY_YANG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_HIDING_FACTOR
     &(ACLADM, HIDFAC, NPOIN, HIDI, DM, KARIM_HOLLY_YANG, HIDING)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLADM         |---| 
C| DM             |---| 
C| HIDFAC         |---| 
C| HIDI           |---| 
C| HIDING         |---| 
C| KARIM_HOLLY_YAN|---| 
C| NPOIN          |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_BEDLOAD_HIDING_FACTOR => BEDLOAD_HIDING_FACTOR
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
      !
      !
      ! 2/ GLOBAL VARIABLES
      ! -------------------
      !
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM
      INTEGER,          INTENT(IN)    :: HIDFAC, NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: HIDI, DM, KARIM_HOLLY_YANG
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING
      !
      !
      ! 3/ LOCAL VARIABLES
      ! ------------------
      !
      INTEGER          :: J
      DOUBLE PRECISION :: C1, C2
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
! *************************** !
C IA - CONSTANT HIDING FACTOR !
! *************************** !
!
      IF (HIDFAC == 0) THEN
!
         CALL OS('X=C     ', X=HIDING, C=HIDI)
!
! ************************** !
C IB - EGIAZAROFF FORMULATION !
! ************************** !
!
      ELSEIF (HIDFAC == 1) THEN
!
         C1 = LOG10(19.D0)
         C2 = 19.D0*DM
         DO J = 1, NPOIN
           HIDING%R(J) = (C1/LOG10(C2/ACLADM%R(J)))**2
         ENDDO
!
! ********************************** !
C IC - ASHIDA AND MICHIUE FORMULATION !
! ********************************** !
!
      ELSEIF (HIDFAC == 2) THEN
!
         C1 = LOG10(19.D0)
         C2 = 19.D0*DM
         DO J = 1, NPOIN
!
            IF(DM/ACLADM%R(J) >= 0.4D0) THEN
              HIDING%R(J) = (C1 / LOG10(C2/ACLADM%R(J)) )**2
            ELSE
              HIDING%R(J) = 0.85D0*(ACLADM%R(J)/DM)
            ENDIF
!
         ENDDO
!
! ************************************* !
C IE - KARIM, HOLLY AND YANG FORMULATION !
! ************************************* !
!
      ELSEIF (HIDFAC == 4) THEN
!
         CALL OS('X=1/Y   ', X=HIDING, Y=ACLADM)
         CALL OS('X=CX    ', X=HIDING, C=DM)
         CALL OS('X=Y**C  ', X=HIDING, Y=HIDING, C=KARIM_HOLLY_YANG)
!
      ELSE
!
        IF(LNG.EQ.1) THEN
          WRITE(LU,*) 'FORMULE DE MASQUAGE INCONNUE : ',HIDFAC
        ENDIF
        IF(LNG.EQ.2) THEN
          WRITE(LU,*) 'UNKNOWN HIDING FACTOR FORMULA: ',HIDFAC
        ENDIF
        CALL PLANTE(1)
        STOP
!
      ENDIF
!
!======================================================================!
!======================================================================!
!
      RETURN
      END SUBROUTINE BEDLOAD_HIDING_FACTOR
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       HUNZIKER BEDLOAD FORMULATION (1995)
!><br>           (ADAPTED FROM MEYER-PETER FORMULATION).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  **-1.5 AND **1.5 SHOULD BE OPTIMISED (JMH)

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, ACP, AHUNZI, DENS, DM, GRAV, HIDING, MU, NPOIN, QSC, TETAP, TOB, UNLADM, XMVE
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C1, C2, I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_HUNZ_MEYER
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td>
!> </td><td>
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/10/2003
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.2                                       </center>
!> </td><td> **/01/2002
!> </td><td> BUI MINH DUC
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AHUNZI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDING
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETAP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_HUNZ_MEYER !
     &  (TOB, MU, ACLADM, UNLADM, NPOIN, DENS, XMVE, GRAV, DM, AC,
     &    TETAP, AHUNZI, ACP, HIDING, QSC)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| ACP            |---| 
C| AHUNZI         |---| 
C| DENS           |---| 
C| DM             |---| 
C| GRAV           |---| 
C| HIDING         |---| 
C| MU             |---| 
C| NPOIN          |---| 
C| QSC            |---| 
C| TETAP          |---| 
C| TOB            |---| 
C| UNLADM         |---| 
C| XMVE           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &          EX_BEDLOAD_HUNZ_MEYER => BEDLOAD_HUNZ_MEYER
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOB, MU, ACLADM, UNLADM
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DENS, XMVE, GRAV, DM, AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TETAP, AHUNZI ! WORK ARRAY T1, T2
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ACP           ! WORK ARRAY T3
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: HIDING, QSC


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: I
      DOUBLE PRECISION :: C1, C2

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ************************************* !
      ! I - ADIMENSIONAL SKIN STRESS          !
      ! ************************************* !
      C1 = 1.D0/(DENS*XMVE*GRAV*DM)
      CALL OS('X=CYZ   ', X=TETAP, Y=TOB, Z=MU, C=C1)
!
C     CHANGED BY JMH ON 28/10/2009 AFTER MODIFICATIONS BY
C     REBEKKA KOPMANN TRANSMITTED BY JACEK JANKOWSKI
C     CALL OS('X=+(Y,C)', X=TETAP , Y=TETAP, C= 1.D-06 )
      CALL OS('X=+(Y,C)', X=TETAP , Y=TETAP, C= 1.D-02 )
C
      CALL OS('X=Y**C  ', X=AHUNZI, Y=TETAP, C=-1.5D0  )
      CALL OS('X=CX    ', X=AHUNZI, C= 0.011D0)
      CALL OS('X=X+C   ', X=AHUNZI, C=-0.3D0  )
!
C RK COMMENT:
C BEWARE: AHUNZI CAN BECOME SO LARGE THAT THE HIDING FACTOR BECOMES
C INFINITE; HUNZIKER HIMSELF SUGGESTS THAT IT BE CAPPED TO 2.3.
C THIS INITIALLY ADOPTS A LIMIT OF APPROXIMATELY 10.
C (WHICH IS APPARENT IN TETAP BEING SET TO VALUES .GE. 0.01)
!
C     REMARK BY JMH: I WOULD STRONGLY RECOMMEND A SINGLE LOOP
C                    WITH THE WHOLE FORMULA, INSTEAD OF PILING
C                    UP CALLS TO OS
!
      DO I = 1, NPOIN
        HIDING%R(I) = (DM/ACLADM%R(I))**(-AHUNZI%R(I))
      ENDDO

      ! ************************************************* !
      ! IV - CORRECTS THE ADIMENSIONAL CRITICAL STRESS    !
      ! ************************************************* !
      CALL OS('X=Y/Z   ', X=ACP, Y=UNLADM, Z=ACLADM)
      CALL OS('X=Y**C  ', X=ACP, Y=ACP   , C=0.33D0)
      CALL OS('X=CX    ', X=ACP, C=AC)

      ! ********************* !
      ! V - TRANSPORT RATE    !
      ! ********************* !
      CALL OS('X=Y-Z   ', X=QSC, Y=TETAP , Z=ACP )
      CALL OS('X=+(Y,C)', X=QSC, Y=QSC   , C=0.D0)
      CALL OS('X=XY    ', X=QSC, Y=HIDING)
      CALL OS('X=Y**C  ', X=QSC, Y=QSC   , C=1.5D0)
      C2 = 5.D0*SQRT(GRAV*DENS*DM**3)
      CALL OS('X=CX    ', X=QSC, C=C2)

!======================================================================!
!======================================================================!

      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE FRICTION COEFFICIENT UNDER
!>                WAVE AND CURRENT COMBINED ACTION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ALPHAW, CF, FCW, FW, NPOIN, TOB, TOBW, UCMOY, UW, XMVE
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AX, BX, CSAL, CSAL1, CSAL2, CSAL3, I, LOGF, MX, NX, PX, QX, TAUCW, TX, UCW2, ZERO
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_INTERACT
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_BAILARD(), BEDLOAD_DIBWAT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 23/09/2010
!> </td><td> C. VILLARET (LNHE)
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.7                                       </center>
!> </td><td> 01/10/2003
!> </td><td> C. VILLARET (LNHE)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ALPHAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FCW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCMOY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                       SUBROUTINE BEDLOAD_INTERACT
     &(UCMOY,TOBW,TOB,ALPHAW,FW,CF,UW,NPOIN,XMVE,FCW)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ALPHAW         |---| 
C| CF             |---| 
C| FCW            |---| 
C| FW             |---| 
C| NPOIN          |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| UCMOY          |---| 
C| UW             |---| 
C| XMVE           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_INTERACT => BEDLOAD_INTERACT
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
      !
      ! 2/ GLOBAL VARIABLES
      ! -------------------
      !
      TYPE(BIEF_OBJ),   INTENT(IN)  :: UCMOY, TOBW, TOB, ALPHAW
      TYPE(BIEF_OBJ),   INTENT(IN)  :: FW, CF, UW
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: XMVE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: FCW
      !
      ! 3/ LOCAL VARIABLES
      ! ------------------
      !
      INTEGER                     :: I
      DOUBLE PRECISION            :: TX, LOGF
      DOUBLE PRECISION            :: CSAL,CSAL1, CSAL2, CSAL3
      DOUBLE PRECISION            :: AX, MX, NX, BX, PX, QX
      DOUBLE PRECISION            :: UCW2, TAUCW,ZERO
C
      INTRINSIC MAX
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
      ZERO = 1.D-6
!
      DO I = 1, NPOIN
!
        TX = TOB%R(I) / MAX((TOB%R(I) + TOBW%R(I)),ZERO)
!
        LOGF  = LOG10(2.D0*MAX(FW%R(I),ZERO)/MAX(CF%R(I),ZERO))
        CSAL  = ABS(COS(ALPHAW%R(I)))
        CSAL1 = CSAL**0.82D0
        CSAL3 = CSAL**2.70D0
!
        AX = -0.07D0 + 1.87D0*CSAL1 + (-0.34D0 - 0.12D0*CSAL1)*LOGF
        MX =  0.72D0 - 0.33D0*CSAL1 + ( 0.08D0 + 0.34D0*CSAL1)*LOGF
        NX =  0.78D0 - 0.23D0*CSAL1 + ( 0.12D0 - 0.12D0*CSAL1)*LOGF
!
        BX =  0.27D0 + 0.51D0*CSAL3 + (-0.10D0 - 0.24D0*CSAL3)*LOGF
        PX = -0.75D0 + 0.13D0*CSAL3 + ( 0.12D0 + 0.02D0*CSAL3)*LOGF
        QX =  0.89D0 + 0.40D0*CSAL3 + ( 0.50D0 - 0.28D0*CSAL3)*LOGF
!
        IF(TX.LE.ZERO) THEN
          TAUCW = TOBW%R(I)
        ELSEIF(TX.LT.1.D0) THEN
          TAUCW = (1.D0 + BX * TX**PX * (1.D0 - TX)**QX)*TOB%R(I)*TX
     &          + (1.D0 + AX * TX**MX * (1.D0 - TX)**NX)*TOBW%R(I)
        ELSE
          TAUCW = TOB%R(I)
        ENDIF
!
        UCW2 = (UCMOY%R(I)**2 + 0.5D0 * UW%R(I)**2) * XMVE
        FCW%R(I) = TAUCW / MAX(UCW2,1.D-10)
!
      ENDDO
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       MAIN SUBROUTINE FOR THE BEDLOAD TRANSPORT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AT0, AVAIL, BETA, BETA2, BIJK, BREACH, CALFA, CF, COEFPN, CONST_ALAYER, DEBUG, DEVIA, DTS, DZF_GF, EBOR, ELAY, ELAY0, ENTET, ENTETS, FD90, FDM, FRACSED_GF, FW, GRAV, HIDFAC, HIDI, HIDING, HMIN, HN, HOULE, ICF, IELMT, ISOUS, IT1, KARIM_HOLLY_YANG, KARMAN, KDDL, KDIR, KENT, KINC, KLOG, KNEU, KSORT, KSP, KSR, LCONDIS, LGRAFED, LIEBOR, LIMTEC, LIQBOR, LOADMETH, LS0, LT, MASK, MASKEL, MASKPT, MASKTR, MESH, MSK, MU, NPOIN, NPTFR, NSICLA, NSOUS, OPTBAN, PHISED, PI, Q, QBOR, QSCLXC, QSCLYC, QSCL_C, QSCL_S, QSXC, QSYC, QS_C, S, SALFA, SECCURRENT, SEDCO, SLOPEFF, SUSP, T1, T10, T11, T12, T13, T2, T3, T4, T5, T6, T7, T8, T9, THETAW, TOB, TOBW, TW, U2D, UNLADM, UNORM, UNSV2D, UW, V2D, V2DPAR, VCE, VF, XKV, XMVE, XMVS, XWC, ZERO, ZF, ZFCL_C, ZF_C
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_MAIN
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_DIFFIN(), BEDLOAD_EVOL(), BEDLOAD_SOLIDISCHARGE(), DREDGESIM_INTERFACE(), OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 21/12/2006
!> </td><td> JMH
!> </td><td> BEDLOAD_TIMESTEP NO LONGER EXISTS
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 14/09/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AT0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BETA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BETA2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BIJK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BREACH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>COEFPN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CONST_ALAYER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEVIA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DTS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DZF_GF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>EBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTET
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTETS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FD90
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FDM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FRACSED_GF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDFAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDING
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ISOUS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARIM_HOLLY_YANG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDDL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDIR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KINC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KLOG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KNEU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSORT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LCONDIS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LGRAFED
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIEBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIMTEC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIQBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LOADMETH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LS0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKTR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSOUS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTBAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PHISED
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>Q
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLXC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLYC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCL_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSXC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSYC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SECCURRENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SEDCO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLOPEFF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SUSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T11
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T12
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T13
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T5
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T6
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNORM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2DPAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF_C
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_MAIN !
     &  (ACLADM,KSP,KSR, V2DPAR,UNSV2D,CF,EBOR,FW,HN,LIQBOR,
     &   MASK, MASKEL, MASKPT, Q, QBOR, U2D,
     &   V2D, S,UNLADM,UW,THETAW,MU,TOB,TOBW,TW,ZF,
     &   DEBUG, HIDFAC, ICF, IELMT, ISOUS, KDDL, KDIR,
     &   KENT, KINC, KLOG, KNEU, KSORT, LOADMETH, LT,
     &   NPOIN, NPTFR, NSICLA, OPTBAN, LS0, BETA, FD90, FDM,
     &   GRAV, HIDI, HMIN, VCE, XKV, XMVE, XMVS, XWC,
     &   PI, KARMAN, ZERO, KARIM_HOLLY_YANG,MSK, SUSP, VF,
     &   ENTET, CONST_ALAYER, LCONDIS, LGRAFED, MESH,
     &   ELAY, LIEBOR, LIMTEC, MASKTR,
     &   IT1, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,
     &   T12,T13,UNORM,AC, AT0, DTS, ELAY0, FRACSED_GF,
     &   AVAIL, BREACH, CALFA, COEFPN,
     &   DZF_GF, HIDING, QSCL_C, QSCL_S, QS_C,
     &   QSCLXC, QSXC, QSCLYC, QSYC, SALFA, ZF_C, ZFCL_C, NSOUS,
     &   ENTETS, SECCURRENT, SLOPEFF,
     &   PHISED, DEVIA, BETA2, BIJK,SEDCO,HOULE,
!RK
     &   U3D,V3D,CODE)

C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AT0            |---| 
C| AVAIL          |---| 
C| BETA           |---| 
C| BETA2          |---| 
C| BIJK           |---| 
C| BREACH         |---| 
C| CALFA          |---| 
C| CF             |---| 
C| COEFPN         |---| 
C| CONST_ALAYER   |---| 
C| DEBUG          |---| 
C| DEVIA          |---| 
C| DTS            |---| 
C| DZF_GF         |---| 
C| EBOR           |---| 
C| ELAY           |---| 
C| ELAY0          |---| 
C| ENTET          |---| 
C| ENTETS         |---| 
C| FD90           |---| 
C| FDM            |---| 
C| FRACSED_GF     |---| 
C| FW             |---| 
C| GRAV           |---| 
C| HIDFAC         |---| 
C| HIDI           |---| 
C| HIDING         |---| 
C| HMIN           |---| 
C| HN             |---| 
C| HOULE          |---| 
C| ICF            |---| 
C| IELMT          |---| 
C| ISOUS          |---| 
C| IT1            |---| 
C| KARIM_HOLLY_YAN|---| 
C| KARMAN         |---| 
C| KDDL           |---| 
C| KDIR           |---| 
C| KENT           |---| 
C| KINC           |---| 
C| KLOG           |---| 
C| KNEU           |---| 
C| KSORT          |---| 
C| KSP            |---| 
C| KSR            |---| 
C| LCONDIS        |---| 
C| LGRAFED        |---| 
C| LIEBOR         |---| 
C| LIMTEC         |---| 
C| LIQBOR         |---| 
C| LOADMETH       |---| 
C| LS0            |---| 
C| LT             |---| 
C| MASK           |---| 
C| MASKEL         |---| 
C| MASKPT         |---| 
C| MASKTR         |---| 
C| MESH           |---| 
C| MSK            |---| 
C| MU             |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| NSICLA         |---| 
C| NSOUS          |---| 
C| OPTBAN         |---| 
C| PHISED         |---| 
C| PI             |---| 
C| Q             |---| 
C| QBOR           |---| 
C| QSCLXC         |---| 
C| QSCLYC         |---| 
C| QSCL_C         |---| 
C| QSCL_S         |---| 
C| QSXC           |---| 
C| QSYC           |---| 
C| QS_C           |---| 
C| S             |---| 
C| SALFA          |---| 
C| SECCURRENT     |---| 
C| SEDCO          |---| 
C| SLOPEFF        |---| 
C| SUSP           |---| 
C| T1             |---| 
C| T10            |---| 
C| T11            |---| 
C| T12            |---| 
C| T13            |---| 
C| T2             |---| 
C| T3             |---| 
C| T4             |---| 
C| T5             |---| 
C| T6             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| THETAW         |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| TW             |---| 
C| U2D            |---| 
C| UNLADM         |---| 
C| UNORM          |---| 
C| UNSV2D         |---| 
C| UW             |---| 
C| V2D            |---| 
C| V2DPAR         |---| 
C| VCE            |---| 
C| VF             |---| 
C| XKV            |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C| ZF             |---| 
C| ZFCL_C         |---| 
C| ZF_C           |---| 
C| CODE           |---| 
C| U3D            |---| 
C| V3D            |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE INTERFACE_SISYPHE, EX_BEDLOAD_MAIN => BEDLOAD_MAIN
      USE DECLARATIONS_SISYPHE, ONLY : DREDGESIM
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------

      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, KSR,V2DPAR,UNSV2D
      TYPE(BIEF_OBJ),   INTENT(IN)    :: CF,FW,KSP,HN,LIQBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASK, MASKEL, MASKPT
      TYPE(BIEF_OBJ),   INTENT(IN)    :: Q, QBOR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: U2D, V2D,TOB, MU,UNORM,EBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: S,UNLADM
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UW, THETAW,  TOBW, TW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZF
      INTEGER,          INTENT(IN)    :: DEBUG, HIDFAC, ICF
      INTEGER,          INTENT(IN)    :: IELMT, ISOUS, KDDL, KDIR, KENT
      INTEGER,          INTENT(IN)    :: KINC, KLOG, KNEU, KSORT
      INTEGER,          INTENT(IN)    :: LOADMETH, LT,NPOIN, NPTFR
      INTEGER,          INTENT(IN)    :: NSICLA, OPTBAN
      DOUBLE PRECISION, INTENT(IN)    :: LS0, BETA, FD90(NSICLA)
      DOUBLE PRECISION, INTENT(IN)    :: FDM(NSICLA),GRAV
      DOUBLE PRECISION, INTENT(IN)    :: HIDI(NSICLA),HMIN,VCE
      DOUBLE PRECISION, INTENT(IN)    :: XKV,XMVE,XMVS,XWC(NSICLA)
      DOUBLE PRECISION, INTENT(IN)    :: PI,KARMAN,ZERO
      DOUBLE PRECISION, INTENT(IN)    :: KARIM_HOLLY_YANG
      LOGICAL,          INTENT(IN)    :: MSK, SUSP, VF
      LOGICAL,          INTENT(IN)    :: ENTET, CONST_ALAYER
      LOGICAL,          INTENT(IN)    :: LCONDIS, LGRAFED,SECCURRENT
      LOGICAL,          INTENT(IN)    :: SEDCO(NSICLA),HOULE
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ELAY
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: LIEBOR, LIMTEC, MASKTR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: IT1,T1,T2,T3,T4,T5,T6,T7
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T8,T9,T10,T11,T12,T13
      DOUBLE PRECISION, INTENT(INOUT) :: AC(NSICLA), AT0, DTS, ELAY0
      DOUBLE PRECISION, INTENT(INOUT) :: FRACSED_GF(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: BREACH, CALFA, COEFPN
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: DZF_GF
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSCL_C,QSCL_S
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QS_C, QSCLXC, QSXC, QSCLYC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSYC, SALFA, ZF_C, ZFCL_C
      INTEGER,          INTENT(INOUT) :: NSOUS
      LOGICAL,          INTENT(INOUT) :: ENTETS
      DOUBLE PRECISION,   INTENT(IN)  :: BETA2, PHISED
      INTEGER, INTENT (IN)            :: SLOPEFF, DEVIA
      DOUBLE PRECISION, INTENT(IN)    :: BIJK
!RK
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
      CHARACTER(LEN=24), INTENT(IN)    :: CODE

      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER :: I
!
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
!
C     INITIALISES TECHNICAL BOUNDARY CONDITIONS
!
      IF (DEBUG > 0) WRITE(LU,*) 'BEDLOAD_DIFFIN'
      CALL BEDLOAD_DIFFIN
     &        (U2D, V2D, MESH%NBOR, MESH%XNEBOR, MESH%YNEBOR,
     &         MESH%KP1BOR,
     &         MASKEL, MESH%NELBOR, NPTFR, KENT, KSORT, KLOG, KINC,
     &         KDIR, KDDL, KNEU, MSK, IT1, LIEBOR, MASKTR, LIMTEC)
      IF (DEBUG > 0) WRITE(LU,*) 'END_BEDLOAD_DIFFIN'
!
      DO I = 1, NSICLA
!
C        FOR SAND
         IF(.NOT.SEDCO(I)) THEN
           IF (DEBUG > 0) WRITE(LU,*)
     &       'BEDLOAD_SOLIDISCHARGE : ',I,'/',NSICLA
!
           CALL BEDLOAD_SOLIDISCHARGE
     &        (MESH, U2D, V2D, UNORM,HN, TW, UW, MU,TOB,CF,
     &          TOBW,FW,THETAW,AVAIL(1:NPOIN,1,I),
     &          MASKPT, MASKEL, ACLADM,
     &          UNLADM,KSP,KSR, LIQBOR, QBOR%ADR(I)%P, DEBUG, NPOIN,
     &          NPTFR, IELMT, ICF, KENT, OPTBAN, HIDFAC, GRAV,
     &          FDM(I), FD90(I), XWC(I), XMVE, XMVS, XKV, VCE, HMIN,
     &          HIDI(I),KARMAN,ZERO,PI,
     &          KARIM_HOLLY_YANG,SUSP,MSK,T1,T2,
     &          T3, T4, T5, T6, T7, T8, T9, T10, T11,T12, AC(I),
     &          HIDING,QSCL_C%ADR(I)%P,QSCL_S%ADR(I)%P,
     &          SLOPEFF,COEFPN,PHISED,CALFA,SALFA,BETA,ZF,S,
     &          DEVIA, BETA2 , SECCURRENT, BIJK,HOULE,UNSV2D,
!RK
     &          U3D,V3D,CODE)

          IF(DEBUG > 0) WRITE(LU,*) 'END_BEDLOAD_SOLIDISCHARGE'
        ELSE
C         FOR COHESIVE SEDIMENT: ZERO BEDLOAD TRANSPORT RATE
C         JMH: IS THIS USEFUL ???
          CALL OS('X=0     ',X=QSCL_C%ADR(I)%P)
          CALL OS('X=0     ',X=QSCLXC%ADR(I)%P)
          CALL OS('X=0     ',X=QSCLYC%ADR(I)%P)
        ENDIF
C
      ENDDO
!
C     COMPUTES THE EVOLUTION FOR EACH CLASS
!
      DO I = 1, NSICLA
!
        IF(.NOT.SEDCO(I)) THEN
!
          IF (DEBUG > 0) WRITE(LU,*) 'BEDLOAD_EVOL : ',I,'/',NSICLA
          CALL BEDLOAD_EVOL(HN,Q,S,ELAY,ACLADM,AVAIL(1:NPOIN,1,I),
     &                      COEFPN,CALFA,SALFA,LIMTEC,
     &                      EBOR%ADR(I)%P,MASKEL,MASK,
     &                      V2DPAR,UNSV2D,DEBUG,NPOIN,NPTFR,IELMT,
     &                      KENT,KDIR,KDDL,LOADMETH,
     &                      DTS,FDM(I),FD90(I),HMIN,LS0,GRAV,XMVS,XMVE,
     &                      VCE,VF,ENTETS,MSK,CONST_ALAYER,
     &                      LCONDIS,MESH,QSCL_C%ADR(I)%P,
     &                      T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,
     &                      T13,ELAY0,BREACH,QSCLXC%ADR(I)%P,
     &                      QSCLYC%ADR(I)%P,ZFCL_C%ADR(I)%P,SLOPEFF)
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_BEDLOAD_EVOL'
C
        ELSE
C
C         NO EVOLUTION FOR COHESIVE SEDIMENT
          CALL OS('X=0     ',X=ZFCL_C%ADR(I)%P)
C
        ENDIF
C
      ENDDO
C
C     CALLS DREDGESIM
C
      IF(DREDGESIM) CALL DREDGESIM_INTERFACE(2)

      ! *********************************************** !
      ! II - EVOLUTIONS AND QS FOR EACH CLASS ARE ADDED !
      ! *********************************************** !

      ! II.1 - INITIALISES
      ! ---------------------

      CALL OS('X=0     ', X=QS_C)
      CALL OS('X=0     ', X=ZF_C)

      ! II.2 - ADDS THE CLASSES
      ! ----------------------
      DO I=1,NSICLA
         ! CORRECTS THE SOLID TRANSPORT TO NOT TAKE INTO ACCOUNT THE
         ! POROSITY COEFFICIENT (MUST BE A NON-ZERO VALUE...)
         ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        IF(.NOT.SEDCO(I)) THEN
          CALL OS('X=CX    ', X=QSCL_C%ADR(I)%P, C=1.D0/XKV)
          CALL OS('X=CX    ', X=QSCLXC%ADR(I)%P, C=1.D0/XKV)
          CALL OS('X=CX    ', X=QSCLYC%ADR(I)%P, C=1.D0/XKV)
          CALL OS('X=X+Y   ', X=QS_C, Y=QSCL_C%ADR(I)%P)
          CALL OS('X=X+Y   ', X=ZF_C, Y=ZFCL_C%ADR(I)%P)
        ENDIF
      ENDDO
!
C     TIDAL FLATS WITH MASKING     JMH ON 27/07/2006
!
      IF(OPTBAN.EQ.2) CALL OS('X=XY    ',X=ZF_C,Y=MASKPT)
!
      ! II.3 - SLOPE EFFECT FOR THE SUM OF THE QS
      ! -----------------------------------------
      ! QS : COEFPN ALREADY ADDED IN QSCL_C
      CALL OS('X=YZ    ', X=QSXC, Y=QS_C, Z=CALFA)
      CALL OS('X=YZ    ', X=QSYC, Y=QS_C, Z=SALFA)

!======================================================================!
!======================================================================!

      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       MEYER-PETER BEDLOAD TRANSPORT FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACP, COEFPN, DENS, DM, GRAV, HIDFAC, HIDING, QSC, SLOPEFF, TETAP
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C2
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_MEYER
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> CPSTVC(), OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/10/2003
!> </td><td> C.VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>COEFPN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDFAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDING
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLOPEFF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETAP
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
       SUBROUTINE BEDLOAD_MEYER !
     &  (TETAP, HIDING, HIDFAC, DENS, GRAV, DM, AC,
     &   ACP, QSC, SLOPEFF, COEFPN)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACP            |---| 
C| COEFPN         |---| 
C| DENS           |---| 
C| DM             |---| 
C| GRAV           |---| 
C| HIDFAC         |---| 
C| HIDING         |---| 
C| QSC            |---| 
C| SLOPEFF        |---| 
C| TETAP          |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_BEDLOAD_MEYER => BEDLOAD_MEYER
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TETAP, HIDING
      INTEGER,          INTENT(IN)    :: HIDFAC, SLOPEFF
      DOUBLE PRECISION, INTENT(IN)    :: DENS, GRAV, DM, AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ACP ! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: QSC, COEFPN


      ! 3/ LOCAL VARIABLES
      ! ------------------
      DOUBLE PRECISION :: C2


!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      CALL CPSTVC(QSC,ACP)
      CALL OS('X=C     ', X=ACP, C=AC)

      ! **************************************** !
      ! 0 - SLOPE EFFECT: SOULBY FORMULATION     ! (_IMP_)
      ! **************************************** !
      IF(SLOPEFF == 2) THEN
        CALL OS('X=XY    ', X=ACP, Y=COEFPN )
      ENDIF

      ! **************************************** !
      ! III - BEDLOAD TRANSPORT CORRECTED        ! (_IMP_)
      !       FOR EXTENDED GRAIN SIZE            ! (_IMP_)
      ! **************************************** !
      C2 = 8.D0 * SQRT(GRAV*DENS*DM**3)
      IF ((HIDFAC == 1) .OR. (HIDFAC == 2) ) THEN
         CALL OS('X=XY    ', X=ACP, Y=HIDING)
         CALL OS('X=Y-Z   ', X=QSC, Y=TETAP, Z=ACP)
         CALL OS('X=+(Y,C)', X=QSC, Y=QSC , C=0.D0)
         CALL OS('X=Y**C  ', X=QSC, Y=QSC , C=1.5D0)
         CALL OS('X=CX    ', X=QSC, C=C2)
      ELSE
          CALL OS('X=Y-Z   ', X=QSC, Y=TETAP, Z=ACP)
          CALL OS('X=+(Y,C)', X=QSC, Y=QSC, C=0.D0)
         CALL OS('X=Y**C  ', X=QSC, Y=QSC, C=1.5D0)
         CALL OS('X=CX    ', X=QSC, C=C2)
         CALL OS('X=XY    ', X=QSC, Y=HIDING)
      ENDIF

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE BEDLOAD_MEYER
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       NON ERODABLE METHOD FOR FINITE VOLUMES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AVA, BREACH, DT, ELAY, KSORT, LIEBOR, MESH, NPOIN, NPTFR, NSEG, QS, QSX, QSY, T1, T2, T3, V2DPAR
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I, IEL, IEL1, IEL2, ISEGIN, K, QSP1, QSP2, QSPC, RNORM, TEMP, VNOIN1, VNOIN2, XN, YN
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_NERBED_VF
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> CPSTVC(), PARCOM()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_EVOL()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 31/01/2008
!> </td><td> JMH
!> </td><td> CORRECTED INITIALISATION ERROR FOR T1 AND T2
!> <br>      KSORT ADDED (WAS HARD-CODED BEFORE !!!!)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 14/09/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.3                                       </center>
!> </td><td> 07/05/2002
!> </td><td> M. GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AVA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BREACH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSORT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIEBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSEG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2DPAR
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_NERBED_VF !
     &(MESH,LIEBOR,KSORT,ELAY,V2DPAR,QSX,QSY,AVA,NPOIN,NSEG,NPTFR,
     & DT,QS,T1,T2,T3,BREACH)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AVA            |---| 
C| BREACH         |---| 
C| DT             |---| 
C| ELAY           |---| 
C| KSORT          |---| 
C| LIEBOR         |---| 
C| MESH           |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| NSEG           |---| 
C| QS             |---| 
C| QSX            |---| 
C| QSY            |---| 
C| T1             |---| 
C| T2             |---| 
C| T3             |---| 
C| V2DPAR         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_BEDLOAD_NERBED_VF => BEDLOAD_NERBED_VF
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: LIEBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: QSX, QSY
      INTEGER,          INTENT(IN)    :: NPOIN, NSEG, NPTFR,KSORT
      DOUBLE PRECISION, INTENT(IN)    :: DT
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QS, T1, T2, T3
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: BREACH
      DOUBLE PRECISION, INTENT(IN)    :: ELAY(NPOIN),V2DPAR(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: AVA(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER          :: I, K
      INTEGER          :: IEL, IEL1, IEL2, ISEGIN
      DOUBLE PRECISION :: QSP1, QSP2, QSPC
      DOUBLE PRECISION :: XN, YN, TEMP
      DOUBLE PRECISION :: VNOIN1, VNOIN2, RNORM
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
      ! ****************** !
      ! I - INITIALISES    !
      ! ****************** !
!
      ! BREACH INDICATES IF NON ERODABLE BED WILL BE REACHED
      ! DURING TIME STEP FOR THIS POINT
      ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
C     GIVE T1 AND T2 THE SAME STRUCTURE AS QS
!
      CALL CPSTVC(QS,T1)
      CALL CPSTVC(QS,T2)
!
      DO IEL = 1, NPOIN
        BREACH%I(IEL) = 0
        T1%R(IEL)=0.D0
        T2%R(IEL)=0.D0
      ENDDO
!
      ! ************************************************* !
      ! II - DETERMINES THE OUTGOING FLUX FOR EACH CELL   ! (_IMP_)
      ! ************************************************* !
      ! THE PRINCIPLE IS THAT QS IS CALCULATED FOR EACH SEGMENT AS
      ! HALF THE SUM OF THE QS AT THE CENTERS OF THE ELEMENTS WHICH
      ! SEGMENT FORMS THE BOUNDARY. IT IS THEN PROJECTED ON THE NORMAL
      ! TO THE SEGMENT, MULTIPLIED BY THE LENGTH OF THE SEGMENT, AND
      ! THIS FLUX TERM IS ADDED (OR SUBTRACTED) TO THE TWO ELEMENTS.
!
      DO ISEGIN = 1, NSEG
!
         IEL1 = MESH%NUBO%I(2*ISEGIN - 1)
         IEL2 = MESH%NUBO%I(2*ISEGIN    )
!
         ! II.1 - SEGMENT LENGTH (RNORM)
         ! ----------------------------------
         VNOIN1 = MESH%VNOIN%R(3*ISEGIN - 2)
         VNOIN2 = MESH%VNOIN%R(3*ISEGIN - 1)
         RNORM  = MESH%VNOIN%R(3*ISEGIN    )
!
         ! II.2 - PROJECTS QS FOR THE SEGMENT ONTO THE SEGMENT NORMAL
         ! ------------------------------------------------------------
         QSP1 = VNOIN1*QSX%R(IEL1) + VNOIN2*QSY%R(IEL1)
         QSP2 = VNOIN1*QSX%R(IEL2) + VNOIN2*QSY%R(IEL2)
         QSPC = (QSP1+QSP2)*0.5D0
!
         ! II.3 - QS SUCH AS THE OUTGOING FLUX IS MAXIMUM
         ! ----------------------------------------------
         T1%R(IEL1) = T1%R(IEL1) + RNORM*MAX(QSPC,QSP1,0.D0)
         T1%R(IEL2) = T1%R(IEL2) - RNORM*MIN(QSPC,QSP2,0.D0)
!
         IF(QSPC > 0.D0) THEN
           T2%R(IEL1) = T2%R(IEL1) + RNORM*QSP1
         ELSEIF(QSPC < 0.D0) THEN
           T2%R(IEL2) = T2%R(IEL2) - RNORM*QSP2
         ENDIF
!
      ENDDO
!
      ! ************************************** !
      ! III - LOOP ON THE BOUNDARY NODES       !
      ! ************************************** !
!
      DO K = 1, NPTFR
         IEL = MESH%NBOR%I(K)
!
         ! III.1 - FREE EVOLUTION: SEDIMENTS ARE FREE TO LEAVE
         ! ---------------------------------------------------------
         IF (LIEBOR%I(K) == KSORT) THEN
!
            ! XNEBOR (*+NPTFR) AND YNEBOR (*+NPTFR)
            ! CONTAIN THE VECTOR NORMAL TO A BOUNDARY NODE
            ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            XN   = MESH%XNEBOR%R(K+NPTFR)
            YN   = MESH%YNEBOR%R(K+NPTFR)
            TEMP = QSX%R(IEL)*XN + QSY%R(IEL)*YN

            IF (TEMP > 0.D0) THEN
               T1%R(IEL) = T1%R(IEL) + TEMP
               T2%R(IEL) = T2%R(IEL) + TEMP
            ENDIF
!
         ENDIF
!
         ! III.2 - FOR A SOLID BOUNDARY: NOTHING TO PROGRAM
         !         BECAUSE THE SEDIMENT FLUX IS ZERO HERE
         !         FOR IMPOSED EVOLUTION : SEE BEDLOAD_SOLVS_VF.F
         ! --------------------------------------------------------
      ENDDO
!
      IF(NCSIZE > 1) THEN
        CALL PARCOM(T1, 2, MESH)
        CALL PARCOM(T2, 2, MESH)
      ENDIF
!
      ! ************************************************ !
      ! IV - COMPUTES THE MAXIMUM FLUX AUTHORISED PER CELL!
      ! ************************************************ !
!
      DO I = 1, NPOIN
!
         T3%R(I)=ELAY(I)*V2DPAR(I)*AVA(I)*(1.D0-1.D-6)/DT
         IF (T3%R(I) < 0.D0) T3%R(I) = 0.D0
!
         ! IF THE OUTGOING FLUX IS TOO LARGE, QS IS CAPPED AT THE NODE
         ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         IF(T1%R(I) > T3%R(I)) THEN
            BREACH%I(I) = 1
            IF(T2%R(I) > T3%R(I)) THEN
              QS%R(I) = QS%R(I)*T3%R(I)/T2%R(I)
            ENDIF
         ENDIF
!
      ENDDO
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE NEW TAU FROM SECONDARY CURRENTS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> IELMU
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::CALFA CALFA@endlink, 
!> @link DECLARATIONS_SISYPHE::CF CF@endlink, 
!> @link DECLARATIONS_SISYPHE::COEFPN COEFPN@endlink, 
!> @link DECLARATIONS_SISYPHE::GRAV GRAV@endlink, 
!> @link DECLARATIONS_SISYPHE::HN HN@endlink, 
!> @link DECLARATIONS_SISYPHE::LIQBOR LIQBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKEL MASKEL@endlink, 
!> @link DECLARATIONS_SISYPHE::MESH MESH@endlink, 
!> @link DECLARATIONS_SISYPHE::MSK MSK@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::NPTFR NPTFR@endlink, 
!> @link DECLARATIONS_SISYPHE::QU QU@endlink, 
!> @link DECLARATIONS_SISYPHE::QV QV@endlink, 
!> @link DECLARATIONS_SISYPHE::S S@endlink, 
!> @link DECLARATIONS_SISYPHE::SALFA SALFA@endlink, 
!> @link DECLARATIONS_SISYPHE::T1 T1@endlink, 
!> @link DECLARATIONS_SISYPHE::T2 T2@endlink, 
!> @link DECLARATIONS_SISYPHE::T3 T3@endlink, 
!> @link DECLARATIONS_SISYPHE::T4 T4@endlink, 
!> @link DECLARATIONS_SISYPHE::T5 T5@endlink, 
!> @link DECLARATIONS_SISYPHE::T6 T6@endlink, 
!> @link DECLARATIONS_SISYPHE::TOB TOB@endlink, 
!> @link DECLARATIONS_SISYPHE::XMVE XMVE@endlink, 
!> @link DECLARATIONS_SISYPHE::Z Z@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ALPHA, C, I
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), PARCOM(), VECTOR()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>IELMU
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
       SUBROUTINE BEDLOAD_SECCURRENT(IELMU)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| IELMU          |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
       USE DECLARATIONS_SISYPHE
       USE BIEF
       IMPLICIT NONE
!
       INTEGER LNG,LU
       COMMON/INFO/LNG,LU
!
       INTEGER I, IELMU
       DOUBLE PRECISION C, ALPHA
!
C REMEMBER: QU = U_TEL*H_TEL, QV=V_TEL*H_TEL
!
!
!
C COMPUTES PI
C       PI = ACOS(-1.D0)
!
CRK MODIFICATION FOR SECONDARY CURRENTS
C COMPUTES THE GRADIENT OF THE FREE SURFACE IN X-DIRECTION
       CALL VECTOR(T5,'=','GRADF          X',IELMU,
     &      1.D0,Z,S,S,S,S,S,MESH,MSK,MASKEL)
C FOR PARALLEL COMPUTING
       IF (NCSIZE.GT.1) CALL PARCOM (T5, 2, MESH)
C COMPUTES THE GRADIENT OF THE FREE SURFACE IN Y-DIRECTION
       CALL VECTOR(T6,'=','GRADF          Y',IELMU,
     &      1.D0,Z,S,S,S,S,S,MESH,MSK,MASKEL)
C FOR PARALLEL COMPUTING
       IF (NCSIZE.GT.1) CALL PARCOM (T6, 2, MESH)
C COMPUTES THE MASS-MATRIX
      CALL VECTOR(T4,'=','MASBAS          ',IELMU,
     &      1.D0,S,S,S,S,S,S,MESH,MSK,MASKEL)
C FOR PARALLEL COMPUTING
       IF (NCSIZE.GT.1) CALL PARCOM (T4, 2, MESH)
C FOR THE WEAK FORMULATION IN FEM, MUST BE DIVIDED BY THE MASS-MATRIX
       CALL OS ('X=Y/Z   ', T5,T5,T4,C,2,0.D0,1.D-12)
       CALL OS ('X=Y/Z   ', T6,T6,T4,C,2,0.D0,1.D-12)
!
!
C COMPUTES THE X- AND Y-COMPONENTS OF THE SECONDARY CURRENT ACCORDING TO ENGELUNG
C TAU_X_SEC = C*QV, TAU_Y_SEC = C*QU
!
C AT THE MOMENT ALPHA MUST BE SET HERE  (0.75 FOR VERY ROUGH BOTTOMS, 1 FOR SMOOTH ONES)
C BEWARE: THE VARIABLE ALPHA IS MORE THAN THE ALPHA FROM THE THEORY
      ALPHA = 1.0D0
      ALPHA = 7.D0 / ALPHA * XMVE *GRAV
C     WRITE(LU,*)'ALPHA',1.D0/ALPHA*7.D0*GRAV*XMVE
!
!
      CALL OS( 'X=YZ    ' , T1 , T6      , QU   , C   ) ! DZSDY*QU
      CALL OS( 'X=Y/Z   ' , T1 , T1      , HN   , C   ) ! DZSDY*QU/HN
      CALL OS( 'X=YZ    ' , T2 , T5      , QV   , C   ) ! DZSDX*QV
      CALL OS( 'X=Y/Z   ' , T2 , T2      , HN   , C   ) ! DZSDX*QV/HN
      CALL OS( 'X=-Y    ' , T2 , T2      , T3   , C   )
      CALL OS( 'X=X+Y   ' , T1 , T2      , T3   , C   ) ! QU*DZSDY - QV*DZSDX
!
      CALL OS( 'X=YZ    ' , T2 , QU      , QU   , C   ) ! QU**2
      CALL OS( 'X=Y/Z   ' , T2 , T2      , HN   , C   ) ! QU**2/HN
      CALL OS( 'X=Y/Z   ' , T2 , T2      , HN   , C   ) ! QU**2/HN**2
      CALL OS( 'X=YZ    ' , T3 , QV      , QV   , C   ) ! QV**2
      CALL OS( 'X=Y/Z   ' , T3 , T3      , HN   , C   ) ! QV**2/HN
      CALL OS( 'X=Y/Z   ' , T3 , T3      , HN   , C   ) ! QV**2/HN**2
      CALL OS( 'X=X+Y   ' , T2 , T3      , T3   , C   ) ! QU**2+QV**2
!
      CALL OS('X=Y/Z   ' , T1 , T1 , T2, C ,2 , 0.D0,1.D-12) !(QU*DZSDY - QV*DZSDX)/(QU**2+QV**2)
!
      CALL OS( 'X=CX    ' , T1 , T2      , T3   , ALPHA   ) ! T1 * 7/ALPHA*XMVE*GRAV
      CALL OS( 'X=XY    ' , T1 , HN      , T3   , C   ) ! T1*HN
!
C ONLY FOR STRICKLER ROUGHNESS
C T4: CHESTR AS KSTR
C      CALL OS( 'X=C     ' , T4 , T2      , T3   ,71.2D0   ) ! SET OF KSTR

C      CALL OS( 'X=XC    ' , T1 , HN      , T3   , GRAV   ) ! T1*HN*GRAV
C      CALL OS( 'X=YZ    ' , T2 , T4  , T4  , C   ) ! CHESTR**2
C      CALL OS( 'X=Y/Z   ' , T1 , T1 , T2, C ,2 , 0.D0,1.D-12) ! T1 / CHESTR**2
C      C = 1.D0/3.D0
C      CALL OS( 'X=Y**C   ' , T2 , HN   , HN   , C   ) ! HN**1/3
C      CALL OS( 'X=Y/Z   ' , T1 , T1 , T2, C ,2 , 0.D0,1.D-12) ! T1 / HN**1/3
!
!
C FOR ALL ROUGHNESS LAWS
      CALL OS( 'X=CXY   ' , T1 , CF      , T3   , 0.5D0   )!T1*CF/2
!
C TAU_X_SEK = -C*QV : T5
C TAU_Y_SEK = C*QU : T6
      CALL OS('X=YZ    ' , T5 , T1    , QV,  C ) ! C*QV
      CALL OS('X=Y/Z   ' , T5 , T5    , HN,  C ) ! C*QV/HN
      CALL OS('X=YZ    ' , T6 , T1    , QU,  C ) ! C*QU
      CALL OS('X=Y/Z   ' , T6 , T6    , HN,  C ) ! C*QU/HN
      CALL OS('X=-Y    ' , T6 , T6    , QV,   C ) ! -C*QU
C SQRT(TAU_X_SEK**2+TAU_Y_SEK**2) : T3
      CALL OS('X=YZ    ' , T2 , T5    , T5,  C ) ! T2 = (C*QV)**2
      CALL OS('X=YZ    ' , T3 , T6    , T6,  C ) ! T3 = (C*QU)**2
      CALL OS('X=X+Y   ' , T2 , T3    , T3,  C ) ! T2 = (C*QV)**2+(C*QU)**2
      CALL OS('X=SQR(Y)' , T3 , T2    , T3,  C ) ! T3 = SQRT((C*QU)**2+(C*QV)**2
C      PRINT*,'TAUX',T5%R(1061),T6%R(1061)
!
C TAU_X_GES = TOB*EFFPNT*CALFA + TAU_X_SEK : T1
C TAU_Y_GES = TOB*EFFPNT*SALFA + TAU_Y_SEK : T2
      CALL OS( 'X=YZ    ' , T1 , TOB      , COEFPN   , C   ) ! TOB*EFFPNT
      CALL OS( 'X=YZ    ' , T2 , T1      ,  SALFA   , C   ) ! TOB*EFFPNT*SALFA
      CALL OS( 'X=YZ    ' , T1 , T1      , CALFA   , C   ) ! TOB*EFFPNT*CALFA
      CALL OS('X=X+Y   ' , T1 , T5    , T3,  C ) ! TAU_X_GES = TOB*CALFA+TAU_X_SEK
      CALL OS('X=X+Y   ' , T2 , T6    , T3,  C ) ! TAU_Y_GES = TOB*SALFA+TAU_Y_SEK
CTAU_GES=SQRT(TAU_X_GES**2+TAU_Y_GES**2)
      CALL OS( 'X=YZ    ' , T3 , T1      , T1   , C   ) ! TAU_X_GES**2
      CALL OS( 'X=YZ    ' , T4 , T2      , T2   , C   ) ! TAU_Y_GES**2
      CALL OS('X=X+Y   ' , T4 , T3    , T3,  C ) !TAU_X_GES**2+TAU_Y_GES**2
      CALL OS('X=SQR(Y)' , T4 , T4    , T3,  C ) ! SQRT(TAU_X_GES**2+TAU_Y_GES**2)
!
!
C NEW ANGLE
C CALFA_NEW = COS(TAU_X_GES/TAU_GES)
C SALFA_NEW = SIN(TAU_Y_GES/TAU_GES)
      CALL OS('X=Y/Z   ' , T1 , T1 , T4, C ,2 , 0.D0,1.D-12) !TAU_X_GES/TAU_GES
      CALL OS('X=Y/Z   ' , T2 , T2 , T4, C ,2 , 0.D0,1.D-12) !TAU_Y_GES/TAU_GES
!
C TAKEN FROM EFFPNT UEBER
C TO MAKE SURE THAT TAU_X_GES/TAU_GES IS IN RANGE [-1,1]
       DO I=1,NPOIN
         IF(T1%R(I).LT.-1.D0.OR.T1%R(I).GT.1.D0.OR.
     &      T2%R(I).LT.-1.D0.OR.T2%R(I).GT.1.D0) THEN
            PRINT*,'NOT ACCEPTABLE BORDER CROSSING',I
         ENDIF
         T1%R(I) = MIN(T1%R(I),1.D0)
         T1%R(I) = MAX(T1%R(I),-1.D0)
         T2%R(I) = MIN(T2%R(I),1.D0)
         T2%R(I) = MAX(T2%R(I),-1.D0)
       ENDDO
!
      CALL OS( 'X=Y     ' ,X=CALFA ,Y=T1 ) ! (TAU_X_GES/TAU_GES)
      CALL OS( 'X=Y     ' ,X=SALFA ,Y=T2 ) ! (TAU_Y_GES/TAU_GES)
!
C COEFPN_NEW = TAU_GES / TOB
      CALL OS('X=Y/Z   ' , COEFPN , T4 , TOB, C ,2 , 0.D0,1.D-12) !COEFPN=TAU_GES/TOB
!
C FROM EFFPNT
C FOR BOUNDARY NODES WITH IMPOSED FLOW :
C QS IS NOT MODIFIED WHEN USER-DEFINED
      DO 10 I = 1 , NPTFR
        IF (LIQBOR%I(I).EQ.5) THEN
          COEFPN%R(MESH%NBOR%I(I)) = 1.D0
        ENDIF
10    CONTINUE
!
      RETURN
      END


C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief  

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AVA, BETA, BETA2, BIJK, CALFA, CF, COEFPN, D90, DEBUG, DEVIA, DM, FW, GRAV, HIDFAC, HIDI, HIDING, HMIN, HN, HOULE, ICF, IELMT, KARIM_HOLLY_YANG, KARMAN, KENT, KSP, KSR, LIQBOR, MASKEL, MASKPT, MESH, MSK, MU, NPOIN, NPTFR, OPTBAN, PHISED, PI, QBOR, QSC, QSS, S, SALFA, SECCURRENT, SLOPEFF, SUSP, T1, T10, T11, T12, T2, T3, T4, T5, T6, T7, T8, T9, THETAW, TOB, TOBW, TW, U2D, UNLADM, UNORM, UNSV2D, UW, V2D, VCE, XKV, XMVE, XMVS, XWC, ZERO, ZF_C
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_SOLIDISCHARGE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_EFFPNT(), BEDLOAD_FORMULA(), BEDLOAD_HIDING_FACTOR(), OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_MAIN()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 15/09/2009
!> </td><td> J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 11/03/2009
!> </td><td>
!> </td><td> MODIFICATIONS FOR PARALLEL MODE
!> </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td> 11/03/2008
!> </td><td> J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 14/09/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/10/2003
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.3                                       </center>
!> </td><td> **/07/2002
!> </td><td> M. GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.2                                       </center>
!> </td><td> **/12/2001
!> </td><td> B. MINH DUC
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 20/05/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BETA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BETA2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BIJK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>COEFPN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>D90
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEVIA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDFAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDING
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARIM_HOLLY_YANG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIQBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTBAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PHISED
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SECCURRENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLOPEFF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SUSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T11
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T12
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T5
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T6
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNORM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF_C
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                     SUBROUTINE BEDLOAD_SOLIDISCHARGE
     &(MESH,U2D,V2D,UNORM,HN,TW,UW,MU,TOB,CF,TOBW,FW,THETAW,
     & AVA,MASKPT,MASKEL,ACLADM,UNLADM,KSP,KSR,LIQBOR,
     & QBOR,DEBUG,NPOIN,NPTFR,IELMT,ICF,KENT,OPTBAN,
     & HIDFAC,GRAV,DM,D90,XWC,XMVE,XMVS,XKV,VCE,HMIN,
     & HIDI,KARMAN,ZERO,PI,KARIM_HOLLY_YANG,
     & SUSP,MSK,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,
     & T11,T12,AC,HIDING,QSC,QSS,
     & SLOPEFF,COEFPN,PHISED,CALFA,SALFA,BETA,ZF_C,S,
     & DEVIA,BETA2,SECCURRENT,BIJK,HOULE,UNSV2D,
!RK
     & U3D,V3D,CODE)
C
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AVA            |---| 
C| BETA           |---| 
C| BETA2          |---| 
C| BIJK           |---| 
C| CALFA          |---| 
C| CF             |---| 
C| COEFPN         |---| 
C| D90            |---| 
C| DEBUG          |---| 
C| DEVIA          |---| 
C| DM             |---| 
C| FW             |---| 
C| GRAV           |---| 
C| HIDFAC         |---| 
C| HIDI           |---| 
C| HIDING         |---| 
C| HMIN           |---| 
C| HN             |---| 
C| HOULE          |---| 
C| ICF            |---| 
C| IELMT          |---| 
C| KARIM_HOLLY_YAN|---| 
C| KARMAN         |---| 
C| KENT           |---| 
C| KSP            |---| 
C| KSR            |---| 
C| LIQBOR         |---| 
C| MASKEL         |---| 
C| MASKPT         |---| 
C| MESH           |---| 
C| MSK            |---| 
C| MU             |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| OPTBAN         |---| 
C| PHISED         |---| 
C| PI             |---| 
C| QBOR           |---| 
C| QSC            |---| 
C| QSS            |---| 
C| S             |---| 
C| SALFA          |---| 
C| SECCURRENT     |---| 
C| SLOPEFF        |---| 
C| SUSP           |---| 
C| T1             |---| 
C| T10            |---| 
C| T11            |---| 
C| T12            |---| 
C| T2             |---| 
C| T3             |---| 
C| T4             |---| 
C| T5             |---| 
C| T6             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| THETAW         |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| TW             |---| 
C| U2D            |---| 
C| UNLADM         |---| 
C| UNORM          |---| 
C| UNSV2D         |---| 
C| UW             |---| 
C| V2D            |---| 
C| VCE            |---| 
C| XKV            |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C| ZF_C           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_BEDLOAD_SOLIDISCHARGE => BEDLOAD_SOLIDISCHARGE
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D, V2D,  HN, TW, UW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UNORM ,MU, KSR ,KSP
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOB, CF, TOBW, FW, THETAW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASKPT, MASKEL
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, UNLADM, LIQBOR, QBOR
      INTEGER,          INTENT(IN)    :: DEBUG
      INTEGER,          INTENT(IN)    :: NPOIN, NPTFR, IELMT, ICF
      INTEGER,          INTENT(IN)    :: KENT, OPTBAN,HIDFAC
      DOUBLE PRECISION, INTENT(IN)    :: GRAV, DM, D90, XWC, XMVE, XMVS
      DOUBLE PRECISION, INTENT(IN)    :: XKV, VCE, HMIN
      DOUBLE PRECISION, INTENT(IN)    :: HIDI
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, ZERO, PI
      DOUBLE PRECISION, INTENT(IN)    :: KARIM_HOLLY_YANG
      LOGICAL,          INTENT(IN)    :: SUSP, MSK,SECCURRENT,HOULE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1,T2,T3,T4,T5,T6
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T7,T8,T9,T10,T11,T12
      DOUBLE PRECISION, INTENT(INOUT) :: AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC,QSS
C
      INTEGER,          INTENT(IN)    :: SLOPEFF,DEVIA
      DOUBLE PRECISION, INTENT(IN)    :: PHISED,BETA,BETA2
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZF_C,S,UNSV2D
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CALFA,SALFA,COEFPN
C
      DOUBLE PRECISION, INTENT(IN)    :: BIJK,AVA(NPOIN)
C
!RK
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
      CHARACTER(LEN=24), INTENT(IN)    :: CODE  
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION P_DMAX
      EXTERNAL         P_DMAX
CRK
      DOUBLE PRECISION U3DNORM
C
      INTEGER          :: I
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
! ********************************************************
C 0 - COMPUTES THE PARAMETERS FOR THE SLOPE EFFECT
! ********************************************************
!
      IF (DEBUG > 0) WRITE(LU,*) 'BEDLOAD_EFFPNT'
C
C     SLOPE EFFECT
C
      IF(DEVIA.EQ.0) THEN
!RK
      IF(CODE(1:9).EQ.'TELEMAC3D') THEN
        DO I=1,NPOIN
          u3dnorm=SQRT(U3D%R(I)*U3D%R(I)+V3D%R(I)*V3D%R(I))
          IF(U3DNORM.GE.1.D-12) THEN
            CALFA%R(I)=U3D%R(I)/u3dnorm
            SALFA%R(I)=V3D%R(I)/u3dnorm
          ELSE
            CALFA%R(I)=1.D0
            SALFA%R(I)=0.D0  
          ENDIF
        ENDDO
      ELSE
        CALL OS('X=Y/Z   ',CALFA, U2D, UNORM, 0.D0, 2, 1.D0, 1.D-12) 
        CALL OS('X=Y/Z   ',SALFA, V2D, UNORM, 0.D0, 2, 0.D0, 1.D-12) 
      ENDIF
      ENDIF
C
      IF(SLOPEFF.EQ.0) CALL OS('X=C     ',X=COEFPN,C=1.D0)
C
      IF(SLOPEFF.NE.0.OR.DEVIA.NE.0) THEN
C
      CALL BEDLOAD_EFFPNT
     &     (MASKEL,LIQBOR,S,ZF_C,U2D,V2D,UNORM,NPOIN,NPTFR,IELMT,
     &      KENT,BETA,PI,MSK,MESH,T1,T2,T3,T4,
     &      COEFPN,CALFA,SALFA,SLOPEFF,PHISED,DEVIA,BETA2,
     &      TOB,XMVS,XMVE,DM,GRAV,UNSV2D,
!RK
     &      U3D,V3D,CODE)
      ENDIF
C
      IF (DEBUG > 0) WRITE(LU,*) 'END_BEDLOAD_EFFPNT'
!
      ! **************************************** !
      ! I - MASKING/EXPOSURE COEFFICIENT         !
      ! **************************************** !
      IF (DEBUG > 0) WRITE(LU,*) 'BEDLOAD_HIDING_FACTOR'
!
C     WITH HUNZIKER FORMULATION (6), THE HIDING FACTOR IS COMPUTED
C     WITH THE SOLID DISCHARGE (SEE BEDLOAD_HUNZ_MEYER.F)
!
      IF(ICF.NE.6) THEN
        CALL BEDLOAD_HIDING_FACTOR
     &     (ACLADM, HIDFAC, NPOIN, HIDI, DM, KARIM_HOLLY_YANG, HIDING)
      ENDIF
      IF (DEBUG > 0) WRITE(LU,*) 'END_BEDLOAD_HIDING_FACTOR'
!
      ! ******************************************* !
      ! II - QSC COMPUTED USING EMPIRICAL FORMULATION !
      !      T1 = DQSC/DH                           !
      ! ******************************************* !
      IF (DEBUG > 0) WRITE(LU,*) 'BEDLOAD_FORMULA'
!
      CALL BEDLOAD_FORMULA
     &  (U2D,V2D, UNORM,HN, CF, MU,TOB, TOBW, UW, TW, THETAW, FW,
     &   ACLADM, UNLADM, KSP,KSR,AVA, NPOIN, ICF, HIDFAC, XMVS, XMVE,
     &   DM, GRAV, VCE, XKV, HMIN, XWC, D90, KARMAN, ZERO,
     &   PI, SUSP, AC, HIDING, T1, T2, T3, T4, T5, T6, T7, T8, T9,
     &   T10, T11, T12, QSC, QSS, IELMT,SECCURRENT,
     &   SLOPEFF, COEFPN, BIJK, HOULE)
      IF (DEBUG > 0) WRITE(LU,*) 'END_BEDLOAD_FORMULA'
!
      ! **************************************************** !
      ! IV - BOUNDARY NODES WITH IMPOSED FLOW                !
      ! **************************************************** !
      IF (DEBUG > 0) WRITE(LU,*) 'BOUNDARY_NODES_TREATMENT'
      DO I = 1 , NPTFR
        IF(LIQBOR%I(I).EQ.KENT) QSC%R(MESH%NBOR%I(I)) = QBOR%R(I)
      ENDDO
      IF (DEBUG > 0) WRITE(LU,*) 'END_BOUNDARY_NODES_TREATMENT'
!
      ! ************************************ !
      ! V - TIDAL FLATS                      !
      ! ************************************ !
      IF(OPTBAN.EQ.2) THEN
        IF (DEBUG > 0) WRITE(LU,*) 'TIDAL_FLATS_TREATMENT'
        CALL OS('X=XY    ', X=QSC, Y=MASKPT)
        IF (DEBUG > 0) WRITE(LU,*) 'END_TIDAL_FLATS_TREATMENT'
      ENDIF
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       SOLVES:
!>  @code
!>     D(HZ)
!>     ---- + DIV(T) = 0
!>      DT
!>  @endcode

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> DIMGLO, DT, EBOR, ENTET, FLODEL, FLULIM, GLOSEG, HZ, HZN, IELMT, KDIR, KENT, LIMTEC, MASK, MASKEL, MESH, MSK, NPOIN, NPTFR, NSEG, QSX, QSY, S, T1, T4, T8, UNSV2D, ZFCL
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> K
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_SOLVS_FE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> CPSTVC(), IELBOR(), NBPTS(), OS(), POSITIVE_DEPTHS(), VECTOR(), VECTOS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_EVOL()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 05/09/2009
!> </td><td> J.-M. HERVOUET
!> </td><td> NEW METHOD
!> </td></tr>
!>      <tr>
!>      <td><center> 5.8                                       </center>
!> </td><td> 29/10/2007
!> </td><td> J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 14/09/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.3                                       </center>
!> </td><td> **/**/2002
!> </td><td> B. MINH DUC
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER;C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>DIMGLO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>EBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTET
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLODEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLULIM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GLOSEG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HZ
!></td><td><--</td><td>NEW AVAILABLE LAYER OF SEDIMENT
!>    </td></tr>
!>          <tr><td>HZN
!></td><td>--></td><td>OLD AVAILABLE LAYER OF SEDIMENT
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDIR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIMTEC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSEG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL
!></td><td><--</td><td>ZFCL=HZ-HZN
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_SOLVS_FE !
     &(MESH,S,EBOR,MASKEL,MASK,
     & QSX,QSY,IELMT,NPOIN,NPTFR,KENT,KDIR,LIMTEC,DT,
     & MSK, ENTET, T1, T4, T8,
     & ZFCL,HZ,HZN,GLOSEG,DIMGLO,FLODEL,FLULIM,NSEG,UNSV2D)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| DIMGLO         |---| 
C| DT             |---| 
C| EBOR           |---| 
C| ENTET          |---| 
C| FLODEL         |---| 
C| FLULIM         |---| 
C| GLOSEG         |---| 
C| HZ             |<--| NEW AVAILABLE LAYER OF SEDIMENT
C| HZN            |-->| OLD AVAILABLE LAYER OF SEDIMENT
C| IELMT          |---| 
C| KDIR           |---| 
C| KENT           |---| 
C| LIMTEC         |---| 
C| MASK           |---| 
C| MASKEL         |---| 
C| MESH           |---| 
C| MSK            |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| NSEG           |---| 
C| QSX            |---| 
C| QSY            |---| 
C| S             |---| 
C| T1             |---| 
C| T4             |---| 
C| T8             |---| 
C| UNSV2D         |---| 
C| ZFCL           |<--| ZFCL=HZ-HZN
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE INTERFACE_SISYPHE, EX_BEDLOAD_SOLVS_FE => BEDLOAD_SOLVS_FE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      TYPE(BIEF_MESH), INTENT(INOUT)  :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: S,LIMTEC,MASKEL,MASK,QSX,QSY
      INTEGER,          INTENT(IN)    :: IELMT,NPOIN,NPTFR,KENT,KDIR
      INTEGER,          INTENT(IN)    :: DIMGLO,NSEG
      INTEGER,          INTENT(IN)    :: GLOSEG(DIMGLO,2)
      DOUBLE PRECISION, INTENT(IN)    :: DT
      DOUBLE PRECISION, INTENT(INOUT) :: FLULIM(NSEG)
      LOGICAL,          INTENT(IN)    :: MSK,ENTET
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: FLODEL,T1,T4,T8
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HZ,EBOR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ZFCL
      TYPE(BIEF_OBJ),   INTENT(IN)    :: HZN,UNSV2D
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER K
C
C-----------------------------------------------------------------------
C
C     BOUNDARY FLUXES
C
      CALL CPSTVC(QSX,T4)
      CALL OS('X=C     ',X=T4,C=1.D0)
      CALL VECTOR(T8, '=', 'FLUBDF          ',IELBOR(IELMT,1),1.D0,
     &            T4,S,S,QSX,QSY,S,MESH,.TRUE.,MASK)
C
C     HERE THE VARIABLE WILL BE THE LAYER DEPTH OF THE SEDIMENT CLASS
C     NOT THE EVOLUTION
C
      DO K=1,NPTFR
        IF(LIMTEC%I(K).EQ.KDIR) THEN
          EBOR%R(K)=EBOR%R(K)+HZN%R(MESH%NBOR%I(K))
        ENDIF
      ENDDO
C
C     CALL VECTOR(T1,'=','VGRADP          ',QSX%ELM,-1.D0,
C    *            S,S,S,QSX,QSY,S,MESH,MSK,MASKEL)
C                 T1 AS HUGRADP IS NOT USED AS AN ASSEMBLED VECTOR
C                 BUT TO GET THE NON ASSEMBLED FORM MESH%W
C     JUST LIKE CALL VECTOR BUT WITHOUT ASSEMBLING T1 BECAUSE LEGO IS SET
C     TO FALSE (ONLY NON ASSEMBLED MESH%W%R IS USED AFTER)
      CALL VECTOS(T1%R,'=','VGRADP          ',-1.D0,
     &            S%R,S%R,S%R,QSX%R,QSY%R,S%R,
     &            S,S,S,QSX,QSY,S,
C                           LEGO
     &            MESH%W%R,.FALSE.,
     &            MESH%XEL%R  , MESH%YEL%R  , MESH%ZEL%R  ,
     &            MESH%SURFAC%R,MESH%IKLE%I,MESH%NBOR%I,
     &            MESH%XSGBOR%R, MESH%YSGBOR%R, MESH%ZSGBOR%R,
     &            NBPTS(QSX%ELM),MESH%NELEM,MESH%NELMAX,
     &            QSX%ELM,MESH%LV,MSK,MASKEL%R,MESH)
C
      CALL POSITIVE_DEPTHS(T1,T4,HZ,HZN,MESH,
     &                     FLODEL,.TRUE.,T8,DT,UNSV2D,NPOIN,
     &                     GLOSEG(1:DIMGLO,1),GLOSEG(1:DIMGLO,2),
     &                     MESH%NBOR%I,NPTFR,.FALSE.,T8,.FALSE.,
     &                     1,FLULIM,
     &                     LIMTEC%I,EBOR%R,KDIR,ENTET,MESH%W%R)
C
      CALL OS('X=Y-Z   ' ,X=ZFCL,Y=HZ,Z=HZN)
C
C     DIRICHLET CONDITIONS
C
      DO K=1,NPTFR
        IF(LIMTEC%I(K).EQ.KDIR) THEN
          EBOR%R(K)=EBOR%R(K)-HZN%R(MESH%NBOR%I(K))
          ZFCL%R(MESH%NBOR%I(K)) = EBOR%R(K)
        ENDIF
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       SOLVES EXNER EQUATION WITH THE FINITE VOLUME METHOD.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> BREACH, DT, EBOR, FLUX, KENT, KSORT, LIEBOR, MESH, NPOIN, NPTFR, NSEG, QSX, QSY, T10, UNSV2D, ZFCL
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> IEL, IEL1, IEL2, ISEGIN, K, QSMOY1, QSMOY2, QSP, RNORM, VNOIN1, VNOIN2, XN, YN
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_SOLVS_VF
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), PARCOM()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_EVOL()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 15/09/2009
!> </td><td> JMH
!> </td><td> KENT KSORT ADDED (WERE HARD-CODED BEFORE !!!)
!> </td></tr>
!>      <tr>
!>      <td><center> 5.8                                       </center>
!> </td><td> 30/10/2007
!> </td><td> J-M HERVOUET
!> </td><td> UNSV2D +DIRICL DELETED
!> </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 14/09/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 07/05/2002
!> </td><td> M. GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>BREACH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>EBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSORT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIEBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSEG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_SOLVS_VF !
     &(MESH,QSX,QSY,LIEBOR,UNSV2D,EBOR,BREACH,NSEG,NPTFR,
     & NPOIN,KENT,KSORT,DT,T10,ZFCL,FLUX)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| BREACH         |---| 
C| DT             |---| 
C| EBOR           |---| 
C| FLUX           |---| 
C| KENT           |---| 
C| KSORT          |---| 
C| LIEBOR         |---| 
C| MESH           |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| NSEG           |---| 
C| QSX            |---| 
C| QSY            |---| 
C| T10            |---| 
C| UNSV2D         |---| 
C| ZFCL           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_BEDLOAD_SOLVS_VF => BEDLOAD_SOLVS_VF
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: QSX, QSY
      TYPE(BIEF_OBJ),   INTENT(IN)    :: LIEBOR,UNSV2D, EBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: BREACH
      INTEGER,          INTENT(IN)    :: NSEG,NPTFR,NPOIN,KENT,KSORT
      DOUBLE PRECISION, INTENT(IN)    :: DT
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T10
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: ZFCL, FLUX


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: ISEGIN, K
      INTEGER          :: IEL, IEL1, IEL2
      DOUBLE PRECISION :: QSMOY1, QSMOY2
      DOUBLE PRECISION :: QSP
      DOUBLE PRECISION :: VNOIN1, VNOIN2, RNORM
      DOUBLE PRECISION :: XN, YN

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ***************** !
      ! I - INTIALISES !
      ! ***************** !

      CALL OS('X=0     ', X=FLUX)

      ! ************************************************* !
      ! II - DETERMINES THE OUTGOING FLUX FOR EACH CELL   !
      ! ************************************************* !

      DO ISEGIN = 1, NSEG

         IEL1 = MESH%NUBO%I(2*ISEGIN - 1)
         IEL2 = MESH%NUBO%I(2*ISEGIN    )

         ! II.1 - RNORM : SEGMENT LENGTH
         ! ----------------------------------
         VNOIN1 = MESH%VNOIN%R(3*ISEGIN - 2)
         VNOIN2 = MESH%VNOIN%R(3*ISEGIN - 1)
         RNORM  = MESH%VNOIN%R(3*ISEGIN    )

         ! II.2 - QS FOR THE SEGMENT, BROKEN UP ACCORDING TO X AND Y
         ! ---------------------------------------------
         QSMOY1 = 0.5D0*(QSX%R(IEL1) + QSX%R(IEL2))
         QSMOY2 = 0.5D0*(QSY%R(IEL1) + QSY%R(IEL2))

         ! II.3 - PROJECTS QS FOR THE SEGMENT ONTO THE SEGMENT NORMAL
         ! ------------------------------------------------------------
         QSP = VNOIN1*QSMOY1 + VNOIN2*QSMOY2

         ! II.4 - UPWIND SCHEME ON NODES WITH A "PROBLEM"
         ! ----------------------------------------------
         IF(BREACH%I(IEL1).EQ.1.AND.QSP.GT.0.D0) THEN
           QSMOY1 = QSX%R(IEL1)
           QSMOY2 = QSY%R(IEL1)
         ENDIF
         IF(BREACH%I(IEL2).EQ.1.AND.QSP.LT.0.D0) THEN
           QSMOY1 = QSX%R(IEL2)
           QSMOY2 = QSY%R(IEL2)
         ENDIF

         QSP = VNOIN1*QSMOY1 + VNOIN2*QSMOY2

         ! II.5 - INTEGRATES BY THE SEGMENT LENGTH
         ! ---------------------------------------------
         FLUX%R(IEL1) = FLUX%R(IEL1) + RNORM*QSP
         FLUX%R(IEL2) = FLUX%R(IEL2) - RNORM*QSP

      ENDDO

      ! ******************************* !
      ! III - BOUNDARIES                ! (_IMP_)
      ! ******************************* !
      DO K = 1 , NPTFR

         IEL = MESH%NBOR%I(K)

         ! III.1 - FREE EVOLUTION: SEDIMENTS ARE FREE TO LEAVE
         ! --------------------------------------------------------
         IF (LIEBOR%I(K).EQ.KSORT) THEN

            ! XNEBOR (*+NPTFR) AND YNEBOR (*+NPTFR)
            ! CONTAIN THE VECTOR NORMAL TO A BOUNDARY NODE
            ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            XN = MESH%XNEBOR%R(K+NPTFR)
            YN = MESH%YNEBOR%R(K+NPTFR)

            ! ADDS THE CONTRIBUTION OF THE FLUX ON THE BOUNDARY SEGMENT
            ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            FLUX%R(IEL) = FLUX%R(IEL) + QSX%R(IEL)*XN + QSY%R(IEL)*YN

         ENDIF

         ! III.2 - FOR A SOLID BOUNDARY: NOTHING TO PROGRAM
         !         BECAUSE THE SEDIMENT FLUX IS ZERO HERE
         ! -------------------------------------------------------

      ENDDO

      IF(NCSIZE.GT.1) CALL PARCOM(FLUX, 2, MESH)

      ! ************************** !
      ! IV - SOLVES THE SYSTEM     !
      ! ************************** !

      ! NEGATIVE SIGN BECAUSE OUTGOING FLUX IS POSITIVE
      ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      CALL OS('X=CYZ   ', X=ZFCL, Y=FLUX, Z=UNSV2D, C=-DT)
!
      DO K=1,NPTFR
        IF(LIEBOR%I(K).EQ.KENT) THEN
          ZFCL%R(MESH%NBOR%I(K)) = EBOR%R(K)
        ENDIF
      ENDDO
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       SOULSBY & VAN RIJN BEDLOAD TRANSPORT FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> D90, DENS, DM, DSTAR, GRAV, HMIN, HN, NPOIN, QSC, QSS, UCMOY, UW
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ASB, ASS, CD, COEF, I, TRA, UCR, VTOT, Z0
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_SOULSBY
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/11/2003
!> </td><td> C.VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.2                                       </center>
!> </td><td> 22/05/2001
!> </td><td> SOGREAH
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>D90
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DSTAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCMOY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_SOULSBY ! (_IMP_)
     &  (UCMOY,HN, UW, NPOIN, DENS, GRAV, DM, DSTAR, HMIN, D90, QSC,
     &   QSS)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| D90            |---| 
C| DENS           |---| 
C| DM             |---| 
C| DSTAR          |---| 
C| GRAV           |---| 
C| HMIN           |---| 
C| HN             |---| 
C| NPOIN          |---| 
C| QSC            |---| 
C| QSS            |---| 
C| UCMOY          |---| 
C| UW             |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_SOULSBY => BEDLOAD_SOULSBY
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)  :: HN, UCMOY, UW
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: DENS, GRAV, DM, DSTAR, HMIN, D90
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC, QSS


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER                     :: I
      DOUBLE PRECISION            :: COEF, ASS, ASB, CD
      DOUBLE PRECISION            :: UCR, VTOT, TRA
      DOUBLE PRECISION, PARAMETER :: Z0=0.006D0


!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ************************* !
      ! I - SUSPENSION COEFFCIENT !
      ! ************************* !
      COEF = (DENS *GRAV*DM)**1.2D0
      ASS  = 0.012D0*DM*(DSTAR**(-0.6D0))/COEF


      DO I = 1, NPOIN


         ! *************************** !
         ! III - BEDLOAD COEFFICIENT   !
         ! *************************** !
         ASB = 0.005D0*HN%R(I)*(DM/MAX(HN%R(I),DM))**1.2D0 / COEF


         ! ********************************** !
         ! IV - ROUGHNESS COEFFICIENT CD      !
         !      SOULSBY: Z0=0.006 --> KS=18CM !
         ! ********************************** !
         CD = (0.4D0 / (LOG(MAX(HN%R(I),Z0)/Z0)-1.D0))**2


         ! ************************************************ !
         ! V - CRTITICAL CURRENT SPEED UCR                  !
         ! ************************************************ !
         IF (DM < 0.0005D0) THEN
            UCR = 0.19D0*(DM**0.1D0)*LOG10(4.D0*MAX(HN%R(I),D90)/D90)
         ELSE
            UCR = 8.50D0*(DM**0.6D0)*LOG10(4.D0*MAX(HN%R(I),D90)/D90)
         ENDIF


         ! ************************************************* !
         ! VI - SPEED INDUCED BY THE CURRENT AND WAVES       !
         ! ************************************************* !
         VTOT = SQRT(UCMOY%R(I)**2+(0.018D0/CD)*UW%R(I)**2)


         ! *********************************************** !
         ! VII - SUSPENDED AND BEDLOAD TRANSPORT           !
         ! *********************************************** !
         IF (VTOT > UCR) THEN
            TRA     = UCMOY%R(I)  * (VTOT - UCR )**2.4D0
            QSS%R(I)= ASS * TRA
            QSC%R(I)= ASB * TRA
         ELSE
            QSS%R(I) = 0.D0
            QSC%R(I) = 0.D0
         ENDIF
      ENDDO

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE BEDLOAD_SOULSBY
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       VAN RIJN BEDLOAD TRANSPORT FORMULATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, DENS, DM, DSTAR, GRAV, MU, NPOIN, QSC, TETAP
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C1, C2, I, T
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_BEDLOAD_VANRIJN
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/**/2004
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.2                                       </center>
!> </td><td> **/10/2001
!> </td><td> BUI MINH DUC
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DENS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DSTAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETAP
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE BEDLOAD_VANRIJN !
     &  (TETAP,MU, NPOIN, DM, DENS, GRAV, DSTAR, AC, QSC)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| DENS           |---| 
C| DM             |---| 
C| DSTAR          |---| 
C| GRAV           |---| 
C| MU             |---| 
C| NPOIN          |---| 
C| QSC            |---| 
C| TETAP          |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_BEDLOAD_VANRIJN => BEDLOAD_VANRIJN
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)  :: TETAP,MU
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: DM, DENS, GRAV, DSTAR, AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC

      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: I
      DOUBLE PRECISION :: C1, C2, T

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      C1 = DENS * GRAV * DM
      C2 = 0.053D0 * SQRT(DM**3.0D0*DENS*GRAV) * DSTAR**(-0.3D0)

      DO I = 1, NPOIN

         ! ****************************** !
         ! I - TRANSPORT STAGE PARAMETER  !
         ! ****************************** !
         IF(TETAP%R(I) .LE. AC) THEN
            T=0.D0
         ELSE
            T = (TETAP%R(I)-AC)/MAX(AC,1.D-06)
         ENDIF


         ! ***************************** !
         ! II - BEDLOAD TRANSPORT RATE   !
         ! ***************************** !
         QSC%R(I) = C2 * (T**2.1D0)

       ENDDO

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE BEDLOAD_VANRIJN
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE MASS BALANCE.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  T2 IS NOT USED

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> DT, DZF_GF, E, ESOMT, IELMU, INFO, LGRAFED, MASKEL, MASS_GF, MESH, MSK, NFRLIQ, NPTFR, NSICLA, NUMLIQ, QSCLXC, QSCLYC, QSX, QSY, S, T1, T2, VCUMU, VOLTOT, ZFCL_C
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> FLT_BOUND, FLUXT, I, IFRLIQ, IPTFR, MASST, RCUMU, RMASCLA, RMASSE, VCUMUCLA
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BIEF_SUM(), IELBOR(), P_DSUM(), VECTOR()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td>
!> </td><td> CMGDL
!> </td><td> CHANGED FOR GRADED SEDIMENT
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DZF_GF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>E
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ESOMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>INFO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LGRAFED
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASS_GF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NFRLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NUMLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLXC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLYC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCUMU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLTOT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_C
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE BILAN_SISYPHE
     &( E      , ESOMT  , QSX    , QSY    , MESH   , MSK    , MASKEL ,
     &  T1     , T2     , S      , IELMU  , VCUMU  , DT     , NPTFR  ,
     &  INFO   , ZFCL_C , QSCLXC , QSCLYC , NSICLA ,
     &  VOLTOT , DZF_GF , MASS_GF, LGRAFED, NUMLIQ , NFRLIQ)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| DT             |---| 
C| DZF_GF         |---| 
C| E             |---| 
C| ESOMT          |---| 
C| IELMU          |---| 
C| INFO           |---| 
C| LGRAFED        |---| 
C| MASKEL         |---| 
C| MASS_GF        |---| 
C| MESH           |---| 
C| MSK            |---| 
C| NFRLIQ         |---| 
C| NPTFR          |---| 
C| NSICLA         |---| 
C| NUMLIQ         |---| 
C| QSCLXC         |---| 
C| QSCLYC         |---| 
C| QSX            |---| 
C| QSY            |---| 
C| S             |---| 
C| T1             |---| 
C| T2             |---| 
C| VCUMU          |---| 
C| VOLTOT         |---| 
C| ZFCL_C         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)          :: NPTFR,NFRLIQ,IELMU,NSICLA
      INTEGER, INTENT(IN)          :: NUMLIQ(NPTFR)
      DOUBLE PRECISION, INTENT(IN) :: DT
      LOGICAL, INTENT(IN)          :: MSK, INFO
C
      LOGICAL,          INTENT(IN)    :: LGRAFED
      DOUBLE PRECISION, INTENT(INOUT) :: MASS_GF,VCUMU
      DOUBLE PRECISION, INTENT(IN)    :: VOLTOT(10)
C
C-----------------------------------------------------------------------
C
C     VECTOR STRUCTURES
C
      TYPE(BIEF_OBJ), INTENT(IN)    :: MASKEL,S,ZFCL_C,QSCLXC,QSCLYC
      TYPE(BIEF_OBJ), INTENT(IN)    :: E,ESOMT,QSX,QSY,DZF_GF
      TYPE(BIEF_OBJ), INTENT(INOUT) :: T1,T2
C
C-----------------------------------------------------------------------
C
C     MESH STRUCTURES
C
      TYPE(BIEF_MESH) :: MESH
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I,IFRLIQ,IPTFR
      DOUBLE PRECISION RMASSE,RCUMU,RMASCLA(10)
      DOUBLE PRECISION VCUMUCLA(10),MASST,FLUXT
C     300 STANDS FOR MAXFRO, THE MAXIMUM NUMBER OF LIQUID BOUNDARIES
      DOUBLE PRECISION FLT_BOUND(300)
C
      DOUBLE PRECISION P_DSUM
      EXTERNAL         P_DSUM
C
C-----------------------------------------------------------------------
C
C     COMPUTES THE EVOLUTION (E)
C
      CALL VECTOR(T1,'=','MASVEC          ',IELMU,
     &            1.D0,E,S,S,S,S,S,MESH,MSK,MASKEL)
      RMASSE = BIEF_SUM(T1)
      IF(NCSIZE.GT.1) RMASSE = P_DSUM(RMASSE)
C
C=======================================================================
C
C     COMPUTES THE INTEGRAL OF EVOLUTION (ESOMT)
C
      CALL VECTOR(T1,'=','MASVEC          ',IELMU,
     &            1.D0,ESOMT,S,S,S,S,S,MESH,MSK,MASKEL)
      RCUMU = BIEF_SUM(T1)
      IF(NCSIZE.GT.1) RCUMU = P_DSUM(RCUMU)
C
C=======================================================================
C
C     COMPUTES THE FLUXES AT THE BOUNDARIES
C
      CALL VECTOR(T1,'=','FLUBOR          ',IELBOR(IELMU,1),
     &            1.D0,S,S,S,QSX,QSY,S,MESH,MSK,MASKEL)
C
      FLUXT=0.D0
C
      IF(NFRLIQ.GT.0) THEN
        DO IFRLIQ=1,NFRLIQ
          FLT_BOUND(IFRLIQ)=0.D0
        ENDDO
        IF(NPTFR.GT.0) THEN
          DO IPTFR=1,NPTFR
            IFRLIQ=NUMLIQ(IPTFR)
            IF(IFRLIQ.GT.0) THEN
              FLT_BOUND(IFRLIQ)=FLT_BOUND(IFRLIQ)+T1%R(IPTFR)
            ENDIF
          ENDDO
        ENDIF
        IF(NCSIZE.GT.1) THEN
          DO IFRLIQ=1,NFRLIQ
            FLT_BOUND(IFRLIQ)=P_DSUM(FLT_BOUND(IFRLIQ))
          ENDDO
        ENDIF
        DO IFRLIQ=1,NFRLIQ
          FLUXT=FLUXT+FLT_BOUND(IFRLIQ)
        ENDDO
      ENDIF
C
      VCUMU = VCUMU - FLUXT*DT
C
C     BALANCE IN EXTENDED GRANULOMETRY
C
      IF(NSICLA.GT.1) THEN
C
        DO I=1,NSICLA
C
C       COMPUTES THE EVOLUTION PER CLASS
C
        CALL VECTOR(T1,'=','MASVEC          ',IELMU,
     &              1.D0,ZFCL_C%ADR(I)%P,S,S,S,S,S,
     &              MESH,MSK,MASKEL)
        RMASCLA(I) = BIEF_SUM(T1)
        IF(NCSIZE.GT.1) RMASCLA(I) = P_DSUM(RMASCLA(I))
C
C       COMPUTES THE FREE FLUXES BY CLASS
C
        CALL VECTOR(T1,'=','FLUBOR          ',IELBOR(IELMU,1),
     &              1.D0,S,S,S,QSCLXC%ADR(I)%P,QSCLYC%ADR(I)%P,
     &              S,MESH,MSK,MASKEL)
C
        FLUXT=0.D0
        IF(NFRLIQ.GT.0) THEN
          IF(NPTFR.GT.0) THEN
            DO IPTFR=1,NPTFR
              IFRLIQ=NUMLIQ(IPTFR)
              IF(IFRLIQ.GT.0) THEN
                FLUXT=FLUXT+T1%R(IPTFR)
              ENDIF
            ENDDO
          ENDIF
          IF(NCSIZE.GT.1) FLUXT=P_DSUM(FLUXT)
        ENDIF
C
        VCUMUCLA(I) = - FLUXT*DT
C
        ENDDO
C
      ENDIF
C
C=======================================================================
C
C     GRAIN-FEEDING
C     IF (LGRAFED) THEN
C        CALL VECTOR(T1,'=','MASVEC          ',IELMU,
C    &               1.D0,DZF_GF,S,S,S,S,S,MESH,MSK,MASKEL)
C        MASST = BIEF_SUM(T1)
C        IF(NCSIZE.GT.1) MASST = P_DSUM(MASST)
C        MASS_GF = MASS_GF + MASST
C     ENDIF
C     IF(DREDGESIM) ...   ?????
C
C  WRITES OUT THE BALANCE
C
      IF (INFO) THEN
C
          WRITE(LU,*)
          IF(LNG.EQ.1) THEN
            WRITE(LU,1000)
            WRITE(LU,1010) RMASSE
            IF(NFRLIQ.GT.0) THEN
              DO IFRLIQ=1,NFRLIQ
                WRITE(LU,1110) IFRLIQ,-FLT_BOUND(IFRLIQ)
              ENDDO
            ENDIF
            WRITE(LU,1030) RCUMU
            WRITE(LU,1031) VCUMU
          ELSEIF(LNG.EQ.2) THEN
            WRITE(LU,2000)
            WRITE(LU,2010) RMASSE
            IF(NFRLIQ.GT.0) THEN
              DO IFRLIQ=1,NFRLIQ
                WRITE(LU,2110) IFRLIQ,-FLT_BOUND(IFRLIQ)
              ENDDO
            ENDIF
            WRITE(LU,2030) RCUMU
            WRITE(LU,2031) VCUMU
          ENDIF
         IF (NSICLA>1) THEN
          DO I=1,NSICLA
           IF(LNG.EQ.1) THEN
             WRITE(LU,*) '     BILAN POUR LA CLASSE DE SEDIMENT :',I
             WRITE(LU,*) '     VOLUME TOTAL DE LA CLASSE :',VOLTOT(I)
             WRITE(LU,3011) RMASCLA(I)
             WRITE(LU,3032) VCUMUCLA(I)
           ELSEIF(LNG.EQ.2) THEN
             WRITE(LU,*) '     MASS BALANCE FOR SEDIMENT CLASS :',I
             WRITE(LU,*) '     TOTAL VOLUME:',VOLTOT(I)
             WRITE(LU,3010) RMASCLA(I)
             WRITE(LU,3031) VCUMUCLA(I)
           ENDIF
          ENDDO
         ENDIF
         IF (LGRAFED) THEN
            IF (LNG.EQ.1) THEN
               WRITE(LU, 4000) MASST
               WRITE(LU, 4010) MASS_GF
            ENDIF
            IF (LNG.EQ.2) THEN
               WRITE(LU, 4001) MASST
               WRITE(LU, 4011) MASS_GF
            ENDIF
         ENDIF
      ENDIF
C
1000  FORMAT(1X,'BILAN DE MASSE : ')
1010  FORMAT(1X,'SOMME DES EVOLUTIONS : ',G16.7)
1020  FORMAT(1X,'FLUX IMPOSE          : ', G16.7,' M3/S'
     &         ,'  ( >0 : ENTRANT  <0 : SORTANT )')
1021  FORMAT(1X,'FLUX LIBRE           : ', G16.7,' M3/S'
     &         ,'  ( >0 : ENTRANT  <0 : SORTANT )')
1030  FORMAT(1X,'SOMME DES EVOLUTIONS CUMULEES : ',G16.7)
1031  FORMAT(1X,'VOLUME ENTRE AUX FRONTIERES   : ',G16.7,' M3'
     &         ,'  ( SI <0 VOLUME SORTI )')
1110  FORMAT(1X,'FRONTIERE ',1I3,' FLUX EN CHARRIAGE = ',G16.7,
     &          ' ( >0 : ENTRANT  <0 : SORTANT )')
2000  FORMAT(1X,'MASS-BALANCE          : ')
2010  FORMAT(1X,'SUM OF THE EVOLUTIONS : ',G16.7)
2020  FORMAT(1X,'PRESCRIBED FLOW       : ',G16.7,' M3/S'
     &         ,'  ( >0 : ENTERING  <0 : EXITING )')
2021  FORMAT(1X,'FREE FLOW             : ',G16.7,' M3/S'
     &         ,'  ( >0 : ENTERING  <0 : EXITING )')
2030  FORMAT(1X,'SUM OF THE CUMULATED EVOLUTIONS : ',G16.7)
2031  FORMAT(1X,'VOLUME THAT ENTERED THE DOMAIN  : ',G16.7,' M3'
     &         ,'  ( IF <0 EXIT )')
2110  FORMAT(1X,'BOUNDARY ',1I3,' BEDLOAD FLUX = ',G16.7,
     &          ' ( >0 : ENTERING  <0 : EXITING )')
3010  FORMAT(1X,'SUM OF THE EVOLUTIONS FOR THIS CLASS: ',G16.7)
3031  FORMAT(1X,'VOLUME THAT ENTERED THE DOMAIN FOR THIS CLASS: '
     &       ,G16.7,' M3')
3011  FORMAT(1X,'SOMME DES EVOLUTIONS POUR CETTE CLASSE : ',G16.7)
3032  FORMAT(1X,'VOLUME ENTRE DANS LE DOMAINE POUR CETTE CLASSE : '
     &       ,G16.7,' M3')

4000  FORMAT(1X,'GRAIN-FEEDING A CET INSTANT       : ',G16.7)
4010  FORMAT(1X,'GRAIN-FEEDING JUSQU''A MAINTENANT : ',G16.7)
4001  FORMAT(1X,'GRAIN-FEEDING THIS MOMENT : ',G16.7)
4011  FORMAT(1X,'GRAIN-FEEDING UNTIL NOW   : ',G16.7)

C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE WAVE ORBITAL VELOCITY.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> GRAV, H, HW, NPOIN, TW, UW
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> DPI2, I, PI, POL, X, Y
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 20/05/96
!> </td><td>
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>GRAVITE
!>    </td></tr>
!>          <tr><td>H
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>HW
!></td><td>--></td><td>HAUTEUR DE HOULE
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS
!>    </td></tr>
!>          <tr><td>TW
!></td><td>--></td><td>PERIODE DE LA HOULE
!>    </td></tr>
!>          <tr><td>UW
!></td><td><--</td><td>VITESSE ORBITALE DE LA HOULE
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE CALCUW
     & ( UW, H, HW, TW, GRAV ,NPOIN)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| GRAV           |-->| GRAVITE
C| H             |-->| HAUTEUR D'EAU
C| HW             |-->| HAUTEUR DE HOULE
C| NPOIN          |-->| NOMBRE DE POINTS
C| TW             |-->| PERIODE DE LA HOULE
C| UW             |<--| VITESSE ORBITALE DE LA HOULE
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN) :: NPOIN
      DOUBLE PRECISION, INTENT(INOUT) :: UW(NPOIN)
      DOUBLE PRECISION, INTENT(IN) :: TW(NPOIN),H(NPOIN), HW(NPOIN)
      DOUBLE PRECISION, INTENT(IN) :: GRAV
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION   PI,DPI2
      PARAMETER ( PI = 3.141592653589793D0 , DPI2 = (4.D0*PI*PI) )
      DOUBLE PRECISION   POL, Y ,X
      INTEGER I
      INTRINSIC SQRT, SINH
C
C  SOLVES Y=X*TH(X) WITH Y=(2*PI/TW)**2*H/G AND X=(2*PI/L)*H
C  USING A POLYNOMIAL FUNCTION (HUNT METHOD - 9TH ORDER)
C
      DO 10 I=1,NPOIN
       IF ( (TW(I) .GT. 0.D0).AND.(HW(I).GT.0.D0) ) THEN
         Y = DPI2 / GRAV * H(I) / (TW(I) * TW(I))
         POL = 1.D0 + Y * ( 0.66667D0 +
     &                Y * ( 0.35550D0 +
     &                Y * ( 0.16084D0 +
     &                Y * ( 0.06320D0 +
     &                Y * ( 0.02174D0 +
     &                Y * ( 0.00654D0 +
     &                Y * ( 0.00171D0 +
     &                Y * ( 0.00039D0 +
     &                Y * ( 0.00011D0 ) ))))))))
         X = SQRT( Y*Y + Y / POL )
C
         IF ( X .GT. 10.D0) THEN
            UW(I) = 0.D0
         ELSE
            UW(I) = PI / TW(I) * HW(I) / (SINH(X))
         ENDIF
       ELSE
         UW(I) = 0.D0
       ENDIF
 10   CONTINUE

      RETURN
      END SUBROUTINE CALCUW
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE QUADRATIC FRICTION COEFFICIENT CF.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CF, CHESTR, GRAV, H, HMIN, KARMAN, KFROT, NPOIN
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AUX, HC, N, TIERS
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>TOB_SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> 01/10/2003
!> </td><td> C. VILLARET (LNHE)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CHESTR
!></td><td>--></td><td>COEFFICIENTS DE FROTTEMENT SUR LE  FOND.
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>ACCELERATION DE LA PESANTEUR
!>    </td></tr>
!>          <tr><td>H
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>--></td><td>HAUTEUR D'EAU MINIMALE
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>--></td><td>CONSTANTE DE KARMAN
!>    </td></tr>
!>          <tr><td>KFROT
!></td><td>--></td><td>LOI DE FROTTEMENT SUR LE FOND
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                       SUBROUTINE COEFRO_SISYPHE
     &(CF,H,KFROT,CHESTR,GRAV,NPOIN,HMIN,KARMAN)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CF             |---| 
C| CHESTR         |-->| COEFFICIENTS DE FROTTEMENT SUR LE  FOND.
C| GRAV           |-->| ACCELERATION DE LA PESANTEUR
C| H             |-->| HAUTEUR D'EAU
C| HMIN           |-->| HAUTEUR D'EAU MINIMALE
C| KARMAN         |-->| CONSTANTE DE KARMAN
C| KFROT          |-->| LOI DE FROTTEMENT SUR LE FOND
C| NPOIN          |-->| NOMBRE DE POINTS
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN):: NPOIN,KFROT
      DOUBLE PRECISION,INTENT(IN):: GRAV,KARMAN,HMIN
C
      TYPE(BIEF_OBJ), INTENT(INOUT) :: CF
      TYPE(BIEF_OBJ),INTENT(IN) :: CHESTR,H
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER N
      DOUBLE PRECISION HC, AUX, TIERS
      INTRINSIC MAX,LOG
C
C-----------------------------------------------------------------------
C
      TIERS  = 1.D0/3.D0
C
C  CONSTRUCTION OF THE FRICTION COEFFICIENT
C
C     FRICTION LAWS:
C
C     KFROT = 0 :  FLAT BOTTOM  (KS=3D50)
C     KFROT = 1 :  EQUILIBRIUM SAND RIPPLES (WAVES ONLY) KS=(MAX 3D50,ETA)
C     KFROT = 2 :  CHEZY
C     KFROT = 3 :  STRICKLER
C     KFROT = 4 :  MANNING
C     KFROT = 5 :  NIKURADSE
C
      DO N=1,NPOIN
        IF(CHESTR%R(N).LE.0.D0) THEN
          WRITE(LU,*) 'FROTTEMENT NON DEFINI DANS COEFRO AU POINT ',N
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDDO
C
C     ***********************
      IF(KFROT.EQ.5) THEN 
C    ***********************
        AUX=30.D0/EXP(1.D0)
        DO N=1,NPOIN
           HC = MAX(H%R(N),CHESTR%R(N))
           CF%R(N) = 2.D0 / (LOG( AUX*HC/CHESTR%R(N))/KARMAN )**2
        ENDDO
C SUGGESTION:
C       DO N=1,NPOIN
C          AUX=MAX( 1.001D0 , H%R(N)/EXP(1.D0)/(CHESTR%R(N)/30.D0) )
C          CF%R(N) = 2.D0 / (  LOG(AUX) / KARMAN  )**2
C       ENDDO
C     ***********************
      ELSEIF(KFROT.EQ.2) THEN
C     ***********************
C
        DO N=1,NPOIN
           CF%R(N) = 2.D0 * GRAV / CHESTR%R(N)**2
        ENDDO
C
C     ***********************
      ELSEIF(KFROT.EQ.3) THEN
C     ***********************
C
        DO N=1,NPOIN
           HC = MAX(H%R(N),HMIN)
           CF%R(N) = 2.D0 * GRAV / CHESTR%R(N)**2 / HC**TIERS
        ENDDO
C
C     ***********************
      ELSEIF(KFROT.EQ.4) THEN
C     ***********************
C
        DO N=1,NPOIN
           HC = MAX(H%R(N),HMIN)
           CF%R(N) = 2.D0 * CHESTR%R(N)**2 * GRAV / HC**TIERS
        ENDDO
C
C     ****
      ELSE
C     ****
C
        IF(LNG.EQ.1) WRITE(LU,300) KFROT
        IF(LNG.EQ.2) WRITE(LU,301) KFROT
300     FORMAT(1X,'COEFRO : LOI DE FROTTEMENT INCONNUE :',1I6)
301     FORMAT(1X,'COEFRO: UNKNOWN LAW OF BOTTOM FRICTION: ',1I6)
        CALL PLANTE(1)
        STOP
C
C     *****
      ENDIF
C     *****
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       INITIALISES THE VARIABLES NOT READ FROM THE RESULTS
!>                FILE (REPLACES THE VALUES READ IN THE RESULTS FILE).
!><br>         IMPOSED VALUES OF :
!><br>         -  DEPTH-AVERAGED FLOW RATE (X,Y): QU, QV
!><br>         -  WATER DEPTH:                    H
!><br>         -  BOTTOM ELEVATION:               ZF
!><br>         -  FREE SURFACE:                   Z
!><br>         -  TOTAL BED VOLUTION:             ESOMT
!><br>         -  FLOW RATE:                      Q
!><br>         -  WAVE HEIGHT:                    HWR
!><br>         -  WAVE PERIOD:                    TWR
!><br>         -  WAVE DIRECTION (WRT OY AXIS):   THETAWR.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @warning  USER SUBROUTINE; DOES NOTHING BY DEFAULT
!>  @code
!>     EXAMPLE WITH NO WAVES:
!>
!>     AMPLITUDE = 0
!>     CALL OS('X=0     ',X=HW)
!>     PERIOD = 1 S
!>     CALL OS('X=C     ',X=TW,C=1.D0)
!>     ANGLE = 0
!>     CALL OS('X=0     ',X=THETAW)
!>  @endcode

!>  @warning  CONDIM_SISYPHE IS CALLED AT EACH TIME STEP IN ORDER TO
!>            IMPOSE A VARIABLE FORCING (TIDAL CURRENT, FOR EXAMPLE)

!>  @warning  IT IS NOT SUFFICIENT TO PRESCRIBE THE FLOW RATE.
!>            THE MAIN VARIABLES ARE NOW THE 2D FLOW VELOCITY FIELD
!>            AND THE FLOW DEPTH

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AT, ESOMT, H, HWR, NPOIN, PMAREE, Q, QU, QV, THETAWR, TWR, U, V, X, Y, Z, ZF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> **/05/2006
!> </td><td>
!> </td><td> THE VARIABLES U AND V, H, MUST BE DEFINED; THE OTHER ONES ARE OPTIONAL
!> </td></tr>
!>      <tr>
!>      <td><center> 5.3                                       </center>
!> </td><td> 11/09/95
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AT
!></td><td>--></td><td>TIME
!>    </td></tr>
!>          <tr><td>ESOMT
!></td><td><-></td><td>TOTAL BED EVOLUTION
!>    </td></tr>
!>          <tr><td>H
!></td><td><-></td><td>WATER DEPTH
!>    </td></tr>
!>          <tr><td>HW
!></td><td><-></td><td>WAVE HEIGHT (M)
!>    </td></tr>
!>          <tr><td>HWR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF 2D POINTS
!>    </td></tr>
!>          <tr><td>PMAREE
!></td><td>--></td><td>TIDAL PERIOD
!>    </td></tr>
!>          <tr><td>Q
!></td><td><-></td><td>FLOW RATE
!>    </td></tr>
!>          <tr><td>QU , QV
!></td><td><--</td><td>FLOW RATE COORDINATES
!>    </td></tr>
!>          <tr><td>TETHAW
!></td><td><-></td><td>WAVE ANGLE (DEG)
!>    </td></tr>
!>          <tr><td>THETAWR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TW
!></td><td><-></td><td>WAVE PERIOD (S)
!>    </td></tr>
!>          <tr><td>TWR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U , V
!></td><td><--</td><td>FLOW VELOCITY COORDINATES
!>    </td></tr>
!>          <tr><td>X,Y
!></td><td>--></td><td>COORDINATES
!>    </td></tr>
!>          <tr><td>Z
!></td><td><-></td><td>FREE SURFACE
!>    </td></tr>
!>          <tr><td>ZF
!></td><td><-></td><td>BED ELEVATION
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE CONDIM_SISYPHE
     & (U      , V       , QU    , QV   , H    , ZF , Z ,
     &  ESOMT  , THETAWR ,  Q    , HWR  , TWR  ,
     &  X      , Y       , NPOIN , AT   , PMAREE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AT             |-->| TIME
C| ESOMT          |<->| TOTAL BED EVOLUTION
C| H             |<->| WATER DEPTH
C| HW             |<->| WAVE HEIGHT (M)
C| HWR            |---| 
C| NPOIN          |-->| NUMBER OF 2D POINTS
C| PMAREE         |-->| TIDAL PERIOD
C| Q             |<->| FLOW RATE
C| QU , QV        |<--| FLOW RATE COORDINATES
C| TETHAW         |<->| WAVE ANGLE (DEG)
C| THETAWR        |---| 
C| TW             |<->| WAVE PERIOD (S)
C| TWR            |---| 
C| U , V          |<--| FLOW VELOCITY COORDINATES
C| X,Y            |-->| COORDINATES
C| Z             |<->| FREE SURFACE
C| ZF             |<->| BED ELEVATION
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_SISYPHE, ONLY: HW,TW,THETAW
C
      IMPLICIT NONE
C
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)::NPOIN
C
      DOUBLE PRECISION, INTENT(IN):: X(NPOIN),Y(NPOIN)
      DOUBLE PRECISION, INTENT(IN):: AT , PMAREE
C SEDIMENT
      DOUBLE PRECISION, INTENT(INOUT) ::  ZF(NPOIN)
      DOUBLE PRECISION, INTENT (INOUT)::  ESOMT(NPOIN)
C HYDRODYNAMICS
      DOUBLE PRECISION, INTENT(INOUT):: Z(NPOIN) , H(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT):: U(NPOIN) , V(NPOIN)
      DOUBLE PRECISION, INTENT (INOUT)::QU(NPOIN), QV(NPOIN), Q(NPOIN)
C WAVES
      DOUBLE PRECISION, INTENT (INOUT):: HWR(NPOIN) , TWR(NPOIN)
      DOUBLE PRECISION, INTENT (INOUT):: THETAWR(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
C      INTEGER I
C-----------------------------------------------------------------------
C
C     ------------------------
C     THE USER SHOULD BE AWARE
C     ++++++++++++++++++++++++
C
C     SUBROUTINE CONDIM_SISYPHE IS CALLED AT EACH TIME STEP
C     IN ORDER TO IMPOSE A VARIABLE FORCING
C     (TIDAL CURRENT, FOR EXAMPLE)
C
C     IT IS NOT SUFFICIENT TO PRESCRIBE THE FLOW RATE
C     THE MAIN VARIABLES ARE NOW THE 2D FLOW VELOCITY FIELD
C     AND THE FLOW DEPTH
C
C-----------------------------------------------------------------------
C
C     WAVES, EXAMPLE WITH NO WAVES:
C
C     AMPLITUDE = 0
C     CALL OS('X=0     ',X=HW)
C     PERIOD = 1 S
C     CALL OS('X=C     ',X=TW,C=1.D0)
C     ANGLE = 0
C     CALL OS('X=0     ',X=THETAW)
C
C     AFTER SETTING HWR, TWR AND THETAWR, PLEASE ADD:
C
C     HW%TYPR    ='Q'
C     TW%TYPR    ='Q'
C     THETAW%TYPR='Q'
C
C     TO ENABLE THE CONTROL OF WAVE DATA
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE CONDIM_SISYPHE
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       INITIALISES THE SUSPENDED SEDIMENT CONCENTRATION
!>               (CONDIM_SISYPHE.F IS READ EVEN IF CHARR=NO).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AT, CS, CS0, NPOIN, NSICLA, X, Y
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_TRANSPORT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td> 2004
!> </td><td> M. GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSi
!></td><td><--</td><td>SUSPENDED SEDIMENT CONCENTRATION FOR CLASS I
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>X
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>Y
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE CONDIM_SUSP
     &(CS,CS0,NSICLA,X,Y,AT,NPOIN)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AT             |---| 
C| CS             |---| 
C| CS0            |---| 
C| CSi            |<--| SUSPENDED SEDIMENT CONCENTRATION FOR CLASS I
C| NPOIN          |---| 
C| NSICLA         |---| 
C| X             |---| 
C| Y             |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)           :: NPOIN,NSICLA
      DOUBLE PRECISION,INTENT(IN)   :: AT,CS0(NSICLA)
      DOUBLE PRECISION,INTENT(IN)   :: X(NPOIN),Y(NPOIN)
C
      TYPE(BIEF_OBJ), INTENT(INOUT) :: CS
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I
C
C-----------------------------------------------------------------------
C
C  --------------------------------------------------------------
C  INITIALISES THE ARRAYS THAT HAVE NOT BEEN READ IN THE RESULTS FILE:
C  --------------------------------------------------------------
C
      IF(NSICLA.GT.0) THEN
        DO I=1,NSICLA
          CALL OS('X=C     ',X=CS%ADR(I)%P,C=CS0(I))
        ENDDO
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END

C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief  

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CONSTFLOW
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::CRIT_CFD CRIT_CFD@endlink, 
!> @link DECLARATIONS_SISYPHE::E E@endlink, 
!> @link DECLARATIONS_SISYPHE::ECPL ECPL@endlink, 
!> @link DECLARATIONS_SISYPHE::HCPL HCPL@endlink, 
!> @link DECLARATIONS_SISYPHE::HN HN@endlink, 
!> @link DECLARATIONS_SISYPHE::MESH MESH@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::S S@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> C, I, NZFMAX, P_ISUM, ZFMAX
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), PARCOM()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td>
!> </td><td> B. MINH DUC; F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/02/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> **/08/2003
!> </td><td> BUI MINH DUC
!> </td><td> DEVELOPED THE SUBROUTINE
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CONSTFLOW
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                 SUBROUTINE CONDIS_SISYPHE
     &(CONSTFLOW)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CONSTFLOW      |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_SISYPHE
      !
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      LOGICAL, INTENT(INOUT) :: CONSTFLOW
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, EXTERNAL      :: P_ISUM
!
C3/ LOCAL VARIABLES
!--------------------
!
      INTEGER          :: NZFMAX, I
      DOUBLE PRECISION :: ZFMAX, C
!
!=======================================================================!
!=======================================================================!
C                               PROGRAM                                 !
!=======================================================================!
!=======================================================================!
!
      NZFMAX = 0
!
      IF(CONSTFLOW) THEN
         CALL OS('X=X+Y   ', ECPL, E, S, C)
!
         DO I=1,NPOIN
            ZFMAX = ABS(ECPL%R(I)) - CRIT_CFD*HCPL%R(I)
            IF (ZFMAX.GT.1.D-8) NZFMAX=NZFMAX+1
         ENDDO
!
         IF (NCSIZE.GT.1) THEN
            NZFMAX=P_ISUM(NZFMAX)
            CALL PARCOM(ECPL,2,MESH)
         ENDIF
!
         IF (NZFMAX.GE.1) CONSTFLOW = .FALSE.
      ENDIF
!
      IF(.NOT.CONSTFLOW) THEN
         CALL OS('X=C     ', ECPL,  S, S, 0.D0)
         CALL OS('X=Y     ', HCPL, HN, S,    C)
!
         IF (NCSIZE.GT.1) THEN
            CALL PARCOM(ECPL,2,MESH)
            CALL PARCOM(HCPL,2,MESH)
         ENDIF
      ENDIF
!
!=======================================================================!
!=======================================================================!
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       ALLOWS TO IMPOSE TIME VARYING BOUNDARY CONDITIONS
!>               (CONSTANT VALUES CAN BE DIRECTLY IMPOSED IN CONDIM
!>                INPUT FILE).<br>
!><br>            ALLOWS TO IMPOSE A SAND TRANSPORT RATE AT SOME
!>                BOUNDARY NODES (QBOR AND LIQBOR). IT IS THEN NECESSARY
!>                TO ALSO IMPOSE LIEBOR = KSORT AT THESE NODES !

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> NBOR
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::CBOR CBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::CBOR_CLASSE CBOR_CLASSE@endlink, 
!> @link DECLARATIONS_SISYPHE::LICBOR LICBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::LIEBOR LIEBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::NPTFR NPTFR@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::NUMLIQ NUMLIQ@endlink, 
!> @link DECLARATIONS_SISYPHE::SUSP SUSP@endlink<hr>
!> DECLARATIONS_TELEMAC :<br>
!> @link DECLARATIONS_TELEMAC::KADH KADH@endlink, 
!> @link DECLARATIONS_TELEMAC::KENT KENT@endlink, 
!> @link DECLARATIONS_TELEMAC::KLOG KLOG@endlink, 
!> @link DECLARATIONS_TELEMAC::KSORT KSORT@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I, IFRLIQ, IRANK, K
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td> 19/06/2008
!> </td><td> CV
!> </td><td> TAKES INTO ACCOUNT CBOR_VASE AND CBOR_SABLE
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 07/06/2002
!> </td><td> C. MACHET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CBOR
!></td><td><-></td><td>IMPOSED SUSPENDED SAND CONC AT THE BOUNDARY
!>    </td></tr>
!>          <tr><td>EBOR
!></td><td><-></td><td>IMPOSED BED EVOLUTION AT THE BOUNDARY
!>    </td></tr>
!>          <tr><td>KADH,KLOG
!></td><td>--></td><td>BOUNDARY
!>    </td></tr>
!>          <tr><td>KENT,KSORT
!></td><td>--></td><td>TYPES OF
!>    </td></tr>
!>          <tr><td>KNEU,KDIR,KDDL
!></td><td>--></td><td>CONDITIONS
!>    </td></tr>
!>          <tr><td>LICBOR
!></td><td><-></td><td>TYPE OF BOUNDARY CONDITIONS ON SUSPENDED SAND CONC
!>    </td></tr>
!>          <tr><td>LIEBOR
!></td><td><-></td><td>TYPE OF BOUNDARY CONDITIONS ON BED EVOLUTION
!>    </td></tr>
!>          <tr><td>LIQBOR
!></td><td><-></td><td>TYPE OF BOUNDARY CONDITIONS ON SAND TRANSPORT RATE
!>    </td></tr>
!>          <tr><td>NBOR
!></td><td>--></td><td>GLOBAL NUMBER OF BOUNDARY POINT
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF 2D POINTS
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>--></td><td>NUMBER OF BOUNDARY POINTS
!>    </td></tr>
!>          <tr><td>QBOR
!></td><td><-></td><td>IMPOSED SOLID TRANSPORT AT THE BOUNDARY
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE CONLIT
     &(NBOR)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CBOR           |<->| IMPOSED SUSPENDED SAND CONC AT THE BOUNDARY
C| EBOR           |<->| IMPOSED BED EVOLUTION AT THE BOUNDARY
C| KADH,KLOG      |-->| BOUNDARY
C| KENT,KSORT     |-->| TYPES OF
C| KNEU,KDIR,KDDL |-->| CONDITIONS
C| LICBOR         |<->| TYPE OF BOUNDARY CONDITIONS ON SUSPENDED SAND CONC
C| LIEBOR         |<->| TYPE OF BOUNDARY CONDITIONS ON BED EVOLUTION
C| LIQBOR         |<->| TYPE OF BOUNDARY CONDITIONS ON SAND TRANSPORT RATE
C| NBOR           |-->| GLOBAL NUMBER OF BOUNDARY POINT
C| NPOIN          |-->| NUMBER OF 2D POINTS
C| NPTFR          |-->| NUMBER OF BOUNDARY POINTS
C| QBOR           |<->| IMPOSED SOLID TRANSPORT AT THE BOUNDARY
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_SISYPHE
      USE DECLARATIONS_TELEMAC
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN):: NBOR(NPTFR)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I,K,IFRLIQ,IRANK
C
C-----------------------------------------------------------------------
C
      DO  K=1,NPTFR
C
        I = NBOR(K)
C
C
C  DIRICHLET CONDITIONS
C  +++++++++++++++++++++
C
        IF(LIEBOR%I(K).EQ.KADH) THEN
          LIEBOR%I(K)= KLOG
        ENDIF
C
C IMPOSED SOLID DISCHARGE - FREE BED EVOLUTION
C ++++++++++++++++++++++++++++++++++++++++++++
C QBOR%ADR(J)%P%R(K) IS THE SOLID DISCHARGE IMPOSED AT THE BOUNDARY
C                   NODE K , CLASS OF SEDIMENT J
C
C               LIEBOR%I(K)=KSORT
C               LIQBOR%I(K)=KENT
C
C               QBOR%ADR(1)%P%R(K)=1.D-4
C               QBOR%ADR(2)%P%R(K)=1.D-4 .....
C
C  IMPOSED BED EVOLUTON
C +++++++++++++++++++++
C          IF (LIEBOR%I(K).EQ.KENT) THEN
C               EBOR%ADR(1)%P%R(K)=1.D-4
C               EBOR%ADR(2)%P%R(K)=1.D-4.....
C         ENDIF
C
       ENDDO
C
C-----------------------------------------------------------------------
C     LICBOR : BOUNDARY CONDITION FOR SEDIMENT CONCENTRATION
C-----------------------------------------------------------------------

      IF(SUSP) THEN
C
        DO K=1,NPTFR
C
C         SO FAR LICBOR=LIEBOR (WITH KADH CHANGED INTO KLOG, SEE ABOVE,
C                               BUT CAN BE CHANGED)
C
          LICBOR%I(K) = LIEBOR%I(K)
C
C         ENTRANCE : IMPOSED CONCENTRATION
C         -------------------------------
C
C         NOTE JMH: KSORT MUST BE TREATED ALSO BECAUSE SUBROUTINE DIFFIN
C                   MAY CHANGE A KSORT INTO KENT, DEPENDING OF FLOW
C
          IFRLIQ=NUMLIQ%I(K)
          IF(LIEBOR%I(K).EQ.KENT.OR.LIEBOR%I(K).EQ.KSORT) THEN
            DO I=1,NSICLA
               IRANK=I+(IFRLIQ-1)*NSICLA
               CBOR%ADR(I)%P%R(K) = CBOR_CLASSE(IRANK)
            ENDDO
          ENDIF
C
        ENDDO
C
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE CONLIT
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       CORRECTS THE BOTTOM FRICTION COEFFICIENT
!>               (IF VARIABLE IN TIME).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 12/11/97
!> </td><td> C. LE NORMANT (LNH) 30 87 78 54
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CHESTR
!></td><td><--</td><td>BOTTOM FRICTION COEFFICIENT
!>    </td></tr>
!>          <tr><td>H
!></td><td>--></td><td>WATER DEPTH
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF GRID POINTS
!>    </td></tr>
!>          <tr><td>PRIVE
!></td><td>--></td><td>ARRAY FOR USER
!>    </td></tr>
!>          <tr><td>QU , QV
!></td><td><--</td><td>FLOW RATE ALONG X AND Y
!>    </td></tr>
!>          <tr><td>TIME
!></td><td>--></td><td>TIME
!>    </td></tr>
!>          <tr><td>X,Y
!></td><td>--></td><td>2D COORDINATES
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>--></td><td>BOTTOM ELEVATION
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE CORSTR_SISYPHE
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CHESTR         |<--| BOTTOM FRICTION COEFFICIENT
C| H             |-->| WATER DEPTH
C| NPOIN          |-->| NUMBER OF GRID POINTS
C| PRIVE          |-->| ARRAY FOR USER
C| QU , QV        |<--| FLOW RATE ALONG X AND Y
C| TIME           |-->| TIME
C| X,Y            |-->| 2D COORDINATES
C| ZF             |-->| BOTTOM ELEVATION
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_SISYPHE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C-----------------------------------------------------------------------
C
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE CORSTR_SISYPHE
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       DECLARATION OF PRINICIPAL SISYPHE VARIABLES

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF_DEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Internal(s)
!>    </th><td> AC, ACLADM, AFBOR, AM1_S, AM2_S, AVA0, AVAI, AVAIL, BANDEC, BETA, BETA2, BFBOR, BIJK, BILMA, BINGEOSIS, BINHYDSIS, BINPRESIS, BINREFSIS, BINRESSIS, BOUNDARY_COLOUR, BREACH, CALAC, CALFA, CALWC, CBOR, CBOR_CLASSE, CF, CHAIN, CHARR, CHESTR, CHOIX, CLT, CLU, CLV, CMAX, COEFPN, CONC_VASE, CONST_ALAYER, CORR_CONV, COUPLINGSIS, CRIT_CFD, CS, CS0, CSF_SABLE, CSF_VASE, CSGL, CST, CSTAEQ, CTILD, CTRLSC, DEBLIQ, DEBSOL, DEBU, DEBUG, DELT, DEL_QU, DEL_QV, DEL_Z, DEPER, DEVIA, DIFT, DIM, DISP, DISP_C, DREDGESIM, DT, DZF_GF, E, EBOR, ECPL, ELAY, ELAY0, EMAX, ENTET, EQUA, ES, ESOMT, ESTRAT, FD90, FDM, FINLIQ, FINSOL, FLBOR, FLBORTRA, FLBOR_SIS, FLUDP, FLUDPT, FLUER, FLUERT, FLUER_VASE, FRACSED_GF, FW, GRAV, HCLIP, HCPL, HIDFAC, HIDI, HIDING, HMIN, HN, HOULE, HPROP, HW, HYDRO, ICF, ICQ, ICR, IELMH_SIS, IELMT, IELMU_SIS, IELMX, IFAMAS, IKLE, IMP_INFLOW_C, INDIC, IT1, IT2, IT3, IT4, I_ORIG, J_ORIG, KARIM_HOLLY_YANG, KARMAN, KFROT, KS, KSP, KSPRATIO, KSR, KX, KY, KZ, LAYTHI, LCONDIS, LEOPR, LGRAFED, LICBOR, LIEBOR, LIHBOR, LIMDIF, LIMPRO, LIMTEC, LIQBOR, LISPR, LOADMETH, LOGDES, LOGPRE, LS0, LT, LUMPI, LV, LVMAC, MARDAT, MARTIM, MASDEP, MASDEPT, MASED0, MASFIN, MASINI, MASK, MASKB, MASKEL, MASKPT, MASKTR, MASSOU, MASTCP, MASTEN, MASTOU, MAXFRO, MAXLU_SIS, MAXVAR, MBOR, MESH, MIXTE, MNEMO, MSK, MSKTMP, MS_SABLE, MS_VASE, MU, MXELVS, MXPTVS, NCONDIS, NCOUCH_TASS, NCP, NELEM, NELMAX, NFRLIQ, NFRSOL, NLAYER, NLAYMAX, NMAREE, NOEQUBED, NOMBLAY, NPAS, NPMAX, NPOIN, NPRIV, NPTFR, NPTFRX, NSICLA, NSICLM, NSOUS, NUMLIQ, NVARCL, OPDTRA, OPTASS, OPTBAN, OPTDIF, OPTSUP, PARTHENIADES, PERCOU, PERMA, PHI0, PHISED, PI, PMAREE, PRIVE, PRODUC, PTINIG, PTINIL, Q, QBOR, QS, QSCL, QSCLX, QSCLXC, QSCLXS, QSCLY, QSCLYC, QSCLYS, QSCL_C, QSCL_S, QSX, QSXC, QSXS, QSY, QSYC, QSYS, QS_C, QS_S, QU, QV, RC, RESOL, S, SALFA, SECCURRENT, SEDCO, SFON, SISCAS, SISCLI, SISCOU, SISFON, SISGEO, SISHYD, SISMAF, SISPRE, SISREF, SISRES, SISSEC, SISSEO, SIS_FILES, SLIDE, SLOPEFF, SLVSED, SLVTRA, SORIMP, SORLEO, SORTIS, SPHERI, STDGEO, SUSP, T1, T10, T11, T12, T13, T14, T2, T3, T4, T5, T6, T7, T8, T9, TASS, TB, TE1, TE2, TE3, TETA, TETA_SUSP, TEXTE, TEXTPR, THETAW, TITCA, TMCOD_SISTEL, TOB, TOBW, TOCE_MIXTE, TOCE_VASE, TPREC, TRANS_MASS, TW, TYPELM, U2D, UCONV, UNIT, UNLADM, UNORM, UNSV2D, UW, V2D, V2DPAR, VALID, VARCL, VARCLA, VARHYD, VARIM, VARSOR, VCE, VCONV, VF, VITCD, VITCE, VOLTOT, VOLU2D, VSET, W1, X, XKV, XKX, XKY, XMVE, XMVS, XWC, Y, YASMI, Z, ZERO, ZF, ZFCL, ZFCL_C, ZFCL_S, ZF_C, ZF_S, ZR, ZREF
!>   </td></tr>
!>     </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 13/08/2009
!> </td><td> JMH
!> </td><td> IT5 DELETED
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 18/07/2009
!> </td><td> CV
!> </td><td> VITCE AND VITCD ARE CONSTANT
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 15/03/2009
!> </td><td> CV
!> </td><td> ADDED VARIABLES MU, KS, KSP, KSR
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
      MODULE DECLARATIONS_SISYPHE
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF_DEF
C
C       NOTE: THIS MODULE IS ORGANISED IN 10 PARTS
C
C       1) VECTORS (WILL BE DECLARED AS BIEF_OBJ STRUCTURES)
C       2) MATRICES (WILL BE DECLARED AS BIEF_OBJ STRUCTURES)
C       3) BLOCKS (WILL BE DECLARED AS BIEF_OBJ STRUCTURES)
C       4) INTEGERS
C       5) LOGICAL VALUES
C       6) REALS
C       7) STRINGS
C       8) SLVCFG STRUCTURES
C       9) MESH STRUCTURE
C      10) ALIASES
C
C-----------------------------------------------------------------------
C
C       1) VECTORS
C
C-----------------------------------------------------------------------
C
!> @brief EVOLUTION
C
      TYPE(BIEF_OBJ), TARGET :: E
!> @brief EVOLUTION SAVED FOR CONSTANT FLOW DISCHARGE
C
      TYPE(BIEF_OBJ), TARGET :: ECPL
!> @brief FREE SURFACE ELEVATION
C cote de la surface libre
      TYPE(BIEF_OBJ), TARGET :: Z
!> @brief INCREMENT OF FREE SURFACE ELEVATION WHEN READING AN HYDRO FILE
C
      TYPE(BIEF_OBJ), TARGET :: DEL_Z
!> @brief EVOLUTION DUE TO BEDLOAD
C
      TYPE(BIEF_OBJ), TARGET :: ZF_C
!> @brief EVOLUTION DUE TO SUSPENSION
C
      TYPE(BIEF_OBJ), TARGET :: ZF_S
!> @brief CUMULATED BED EVOLUTION
C evolution totale
      TYPE(BIEF_OBJ), TARGET :: ESOMT
!> @brief MAXIMUM EVOLUTION
C
      TYPE(BIEF_OBJ), TARGET :: EMAX
!> @brief COMPONENTS OF DEPTH-AVERAGED FLOW RATE
C composantes du debit vectoriel
      TYPE(BIEF_OBJ), TARGET :: QU
!> @brief COMPONENTS OF DEPTH-AVERAGED FLOW RATE
C composantes du debit vectoriel
      TYPE(BIEF_OBJ), TARGET :: QV
!> @brief INCREMENTS OF FLOW RATE COMPONENTS WHEN READING AN HYDRO FILE
C
      TYPE(BIEF_OBJ), TARGET :: DEL_QU
!> @brief INCREMENTS OF FLOW RATE COMPONENTS WHEN READING AN HYDRO FILE
C
      TYPE(BIEF_OBJ), TARGET :: DEL_QV
!> @brief FLOW RATE
C debit liquide
      TYPE(BIEF_OBJ), TARGET :: Q
!> @brief SOLID DISCHARGE
C
      TYPE(BIEF_OBJ), TARGET :: QS
!> @brief SOLID DISCHARGE
C
      TYPE(BIEF_OBJ), TARGET :: QSX
!> @brief SOLID DISCHARGE
C
      TYPE(BIEF_OBJ), TARGET :: QSY
!> @brief SOLID DISCHARGE (BEDLOAD)
C
      TYPE(BIEF_OBJ), TARGET :: QS_C
!> @brief SOLID DISCHARGE (BEDLOAD)
C
      TYPE(BIEF_OBJ), TARGET :: QSXC
!> @brief SOLID DISCHARGE (BEDLOAD)
C
      TYPE(BIEF_OBJ), TARGET :: QSYC
!> @brief SOLID DISCHARGE (SUSPENSION)
C
      TYPE(BIEF_OBJ), TARGET :: QS_S
!> @brief SOLID DISCHARGE (SUSPENSION)
C
      TYPE(BIEF_OBJ), TARGET :: QSXS
!> @brief SOLID DISCHARGE (SUSPENSION)
C
      TYPE(BIEF_OBJ), TARGET :: QSYS
!> @brief WATER DEPTH
C hauteur d'eau au temps n
      TYPE(BIEF_OBJ), TARGET :: HN
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: HCLIP
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: U2D,V2D
!> @brief
C intensite du courant
      TYPE(BIEF_OBJ), TARGET :: UNORM
!> @brief WATER DEPTH SAVED FOR CONSTANT FLOW DISCHARGE
C
      TYPE(BIEF_OBJ), TARGET :: HCPL
!> @brief IMPOSED BED EVOLUTION AT THE BOUNDARY
C evolution aux points de bord
      TYPE(BIEF_OBJ), TARGET :: EBOR
!> @brief IMPOSED SOLID TRANSPORT AT THE BOUNDARY
C
      TYPE(BIEF_OBJ), TARGET :: QBOR
!> @brief ZF VALUES ON BOUNDARIES
C
      TYPE(BIEF_OBJ), TARGET :: FLBOR
!> @brief BOTTOM ELEVATION
C cote du fond
      TYPE(BIEF_OBJ), TARGET :: ZF
!> @brief NON ERODABLE (RIGID) BOTTOM ELEVATION
C
      TYPE(BIEF_OBJ), TARGET :: ZR
!> @brief REFERENCE ELEVATION
C
      TYPE(BIEF_OBJ), TARGET :: ZREF
!> @brief INTEGRAL OF BASES
C
      TYPE(BIEF_OBJ), TARGET :: VOLU2D
!> @brief INTEGRAL OF BASES IN PARALLEL
C
      TYPE(BIEF_OBJ), TARGET :: V2DPAR
!> @brief INVERSE OF INTEGRAL OF BASES
C
      TYPE(BIEF_OBJ), TARGET :: UNSV2D
!> @brief BOTTOM FRICTION COEFFICIENT (CHEZY, NIKURADSE OR STICKLER)
C coefficients de frottement sur le  fond (mot cle)
      TYPE(BIEF_OBJ), TARGET :: CHESTR
!> @brief ANGLE BETWEEN QS AND Q
C
      TYPE(BIEF_OBJ), TARGET :: CALFA
!> @brief ANGLE BETWEEN QS AND Q
C
      TYPE(BIEF_OBJ), TARGET :: SALFA
!> @brief VOID STRUCTURE
C
      TYPE(BIEF_OBJ), TARGET :: S
!> @brief MASK
C
      TYPE(BIEF_OBJ), TARGET :: MASKPT
!> @brief MASK
C
      TYPE(BIEF_OBJ), TARGET :: MASKTR
!> @brief MASK
C
      TYPE(BIEF_OBJ), TARGET :: MASKB
!> @brief MASK
C
      TYPE(BIEF_OBJ), TARGET :: MASKEL
!> @brief MASK
C
      TYPE(BIEF_OBJ), TARGET :: MSKTMP
!> @brief WORKING ARRAYS
C
      TYPE(BIEF_OBJ), TARGET :: W1
C
C WAVE DATA
C --------

!> @brief WAVE DIRECTION (DEG WRT OX AXIS)    !!!!!SOME SAY OY AXIS!!!!!
C angle d'attaque de la houle (par rapport a l'axe oy)
      TYPE(BIEF_OBJ), TARGET :: THETAW
!> @brief FRICTION COEFFICIENT (WAVES)
C coefficient de frottement quadratique de la houle
      TYPE(BIEF_OBJ), TARGET :: FW
!> @brief ORBITAL VELOCITY
C courant orbital
      TYPE(BIEF_OBJ), TARGET :: UW
!> @brief SIGNIFICANT WAVE HEIGHT
C hauteur de houle
      TYPE(BIEF_OBJ), TARGET :: HW
!> @brief MEAN WAVE PERIOD
C periode de houle
      TYPE(BIEF_OBJ), TARGET :: TW
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: INDIC,IFAMAS
!> @brief INTEGER WORKING ARRAY
C
      TYPE(BIEF_OBJ), TARGET :: IT1
!> @brief INTEGER WORKING ARRAY
C
      TYPE(BIEF_OBJ), TARGET :: IT2
!> @brief INTEGER WORKING ARRAY
C
      TYPE(BIEF_OBJ), TARGET :: IT3
!> @brief INTEGER WORKING ARRAY
C
      TYPE(BIEF_OBJ), TARGET :: IT4
!> @brief TYPE OF BOUNDARY CONDITIONS ON BED EVOLUTION
C types de conditions aux limites sur l'evolution
      TYPE(BIEF_OBJ), TARGET :: LIEBOR
!> @brief TYPE OF BOUNDARY CONDITIONS ON SAND TRANSPORT RATE
C
      TYPE(BIEF_OBJ), TARGET :: LIQBOR
!> @brief TYPE OF BOUNDARY CONDITIONS
C
      TYPE(BIEF_OBJ), TARGET :: LIMTEC
!> @brief IMPACT OF THE SLOPE EFFECT ON AMPLITUDE
C
      TYPE(BIEF_OBJ), TARGET :: COEFPN
!> @brief LIQUID BOUNDARY NUMBERING
C
      TYPE(BIEF_OBJ), TARGET :: NUMLIQ
!> @brief SHEAR STRESS
C contrainte de frottement en courant seul
      TYPE(BIEF_OBJ), TARGET :: TOB
!> @brief FRICTION COEFFICIENT
C coefficient de frottement quadratique du courant
      TYPE(BIEF_OBJ), TARGET :: CF
!> @brief WAVE INDUCED SHEAR STRESS
C contrainte de frottement en houle seule
      TYPE(BIEF_OBJ), TARGET :: TOBW
!> @brief
C rapport entre la contrainte de frottement de peau et la contrainte totale
      TYPE(BIEF_OBJ), TARGET :: MU
!> @brief
C rugosite totale
      TYPE(BIEF_OBJ), TARGET :: KS
!> @brief
C rugosite de peau
      TYPE(BIEF_OBJ), TARGET :: KSP
!> @brief
C rugosite de ride
      TYPE(BIEF_OBJ), TARGET :: KSR
!> @brief BED LEVEL CHANGE FOR GRAIN-FEEDING
C
      TYPE(BIEF_OBJ), TARGET :: DZF_GF
C
C NON-EQUILIBRIUM BEDLOAD AND NON-UNIFORM BED MATERIA (BMD AND MGDL)
C --------

!> @brief MEAN DIAMETER OF ACTIVE-LAYER
C diametre moyen du sediment
      TYPE(BIEF_OBJ), TARGET :: ACLADM
!> @brief MEAN DIAMETER OF UNDER-LAYER
C
      TYPE(BIEF_OBJ), TARGET :: UNLADM
!> @brief NUMBER OF LAYERS FOR EACH POINT
C
      TYPE(BIEF_OBJ), TARGET :: NLAYER
!> @brief HIDING FACTOR FOR PARTICULAR SIZE CLASS
C
      TYPE(BIEF_OBJ), TARGET :: HIDING
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: ELAY
!> @brief ACTIVE STRATUM THICKNESS
C
      TYPE(BIEF_OBJ), TARGET :: ESTRAT
C
C SUSPENSION  (F. MENARD)
C --------

!> @brief DEPOSITION FLUX
C
      TYPE(BIEF_OBJ), TARGET :: FLUDP
!> @brief DEPOSITION FLUX
C
      TYPE(BIEF_OBJ), TARGET :: FLUDPT
!> @brief EROSION FLUX
C
      TYPE(BIEF_OBJ), TARGET :: FLUER
!> @brief EROSION FLUX
C
      TYPE(BIEF_OBJ), TARGET :: FLUERT
!> @brief CONCENTRATION AT TIME N
C
      TYPE(BIEF_OBJ), TARGET :: CS
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: CST, CTILD, CSTAEQ
!> @brief IMPOSED SUSPENDED SAND CONCENTRATION AT THE BOUNDARY (DIM.NPTFR)
C
      TYPE(BIEF_OBJ), TARGET :: CBOR
!> @brief CONCENTRATION IN G/L
C
      TYPE(BIEF_OBJ), TARGET :: CSGL
!> @brief COORDINATES OF VELOCITY VECTORS
C
      TYPE(BIEF_OBJ), TARGET ::  UCONV
!> @brief COORDINATES OF VELOCITY VECTORS
C
      TYPE(BIEF_OBJ), TARGET ::  VCONV
!> @brief PROPAGATION HEIGHT
C
      TYPE(BIEF_OBJ), TARGET :: HPROP
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: DISP,DISP_C
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: AFBOR  , BFBOR
!> @brief FLUX AT THE BOUNDARIES
C
      TYPE(BIEF_OBJ), TARGET :: FLBOR_SIS
!> @brief FLUX AT THE BOUNDARIES
C
      TYPE(BIEF_OBJ), TARGET :: FLBORTRA
C
C     BOUNDARY CONDITIONS FOR SEDIMENT                     : LICBOR
C     TYPES OF BOUNDARY CONDITIONS FOR H                   : LIHBOR
C     TYPES OF BOUNDARY CONDITIONS FOR PROPAGATION         : LIMPRO
C                    POINTS   :    .1:H  .2:U  .3:V
C                    SEGMENTS :    .4:H  .5:U  .6:V
C
!> @brief TYPE OF BOUNDARY CONDITIONS ON SUSPENDED SAND CONCENTRATION
C
      TYPE(BIEF_OBJ), TARGET :: LICBOR
!> @brief TYPE OF BOUNDARY CONDITIONS FOR H
C
      TYPE(BIEF_OBJ), TARGET :: LIHBOR
!> @brief TYPE OF BOUNDARY CONDITIONS FOR PROPAGATION
C
      TYPE(BIEF_OBJ), TARGET :: LIMPRO
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: LIMDIF
!> @brief LAST LINE OF THE BOUNDARY CONDITION FILE
C
      TYPE(BIEF_OBJ), TARGET :: BOUNDARY_COLOUR
!> @brief BOUNDARY CONDITIONS FOR TRACER (MODIFIED LITBOR)
C
      TYPE(BIEF_OBJ), TARGET :: CLT
!> @brief BOUNDARY CONDITIONS FOR U
C
      TYPE(BIEF_OBJ), TARGET :: CLU
!> @brief BOUNDARY CONDITIONS FOR V
C
      TYPE(BIEF_OBJ), TARGET :: CLV
!> @brief WORKING ARRAY FOR ELEMENTS
C
      TYPE(BIEF_OBJ), TARGET :: TE1
!> @brief WORKING ARRAY FOR ELEMENTS
C
      TYPE(BIEF_OBJ), TARGET :: TE2
!> @brief WORKING ARRAY FOR ELEMENTS
C
      TYPE(BIEF_OBJ), TARGET :: TE3
!> @brief COEFFICIENTS OF THE DISPERSION TENSOR (DIM. NPOIN)
C
      TYPE(BIEF_OBJ), TARGET :: KX
!> @brief COEFFICIENTS OF THE DISPERSION TENSOR (DIM. NPOIN)
C
      TYPE(BIEF_OBJ), TARGET :: KY
!> @brief COEFFICIENTS OF THE DISPERSION TENSOR (DIM. NPOIN)
C
      TYPE(BIEF_OBJ), TARGET :: KZ
!> @brief ARRAY THAT INDICATES WHETHER THE NON-ERODABLE BOTTOM HAS BEEN REACHED (VF)
C
      TYPE(BIEF_OBJ), TARGET :: BREACH
!> @brief FOR MIXED SEDIMENTS
C
      TYPE(BIEF_OBJ), TARGET :: FLUER_VASE
!> @brief FOR MIXED SEDIMENTS
C
      TYPE(BIEF_OBJ), TARGET :: TOCE_MIXTE
!> @brief FOR MIXED SEDIMENTS
C
      TYPE(BIEF_OBJ), TARGET :: MS_SABLE
!> @brief FOR MIXED SEDIMENTS
C
      TYPE(BIEF_OBJ), TARGET :: MS_VASE
C
C-----------------------------------------------------------------------
C
C       2) MATRICES
C
C-----------------------------------------------------------------------
C
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: MBOR
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: AM1_S,AM2_S
C
C-----------------------------------------------------------------------
C
C       3) BLOCKS
C
C-----------------------------------------------------------------------
C
!> @brief BLOCK OF MASKS
C
      TYPE(BIEF_OBJ), TARGET :: MASK
!> @brief BLOCK OF WORKING ARRAYS
C
      TYPE(BIEF_OBJ), TARGET :: TB
!> @brief BLOCK OF PRIVATE VECTORS
C
      TYPE(BIEF_OBJ), TARGET :: PRIVE
!> @brief BLOCK OF CLANDESTINE VARIABLES
C
      TYPE(BIEF_OBJ), TARGET :: VARCL
!> @brief BLOCK OF VARIABLES FOR INPUT
C
      TYPE(BIEF_OBJ), TARGET :: VARHYD
!> @brief BLOCK OF VARIABLES FOR OUTPUT
C
      TYPE(BIEF_OBJ), TARGET :: VARSOR
!> @brief SEDIMENT FRACTION FOR EACH LAYER, CLASS, POINT
C
      DOUBLE PRECISION,DIMENSION(:,:,:),TARGET,ALLOCATABLE::AVAIL
!> @brief SEDIMENT COMPOSITION
C
      TYPE(BIEF_OBJ), TARGET :: AVAI
!> @brief LAYER THICKNESSES
C
      TYPE(BIEF_OBJ), TARGET :: LAYTHI
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: QSCL
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: QSCLX , QSCLY
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: QSCL_C
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: QSCLXC, QSCLYC
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: QSCL_S
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: QSCLXS, QSCLYS
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: ZFCL
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: ZFCL_C
!> @brief
C
      TYPE(BIEF_OBJ), TARGET :: ZFCL_S
C
C-----------------------------------------------------------------------
C
C       4) INTEGERS
C
C-----------------------------------------------------------------------
C
C       KEYWORDS AND PARAMETERS
C
!> @brief MAXIMUM NUMBER OF OUTPUT VARIABLES
C
      INTEGER, PARAMETER :: MAXVAR = 500
!> @brief MAXIMUM NUMBER OF (LIQUID BOUNDARIES, SOLID BOUNDARIES)
C
      INTEGER, PARAMETER :: MAXFRO = 300
!> @brief
C
      INTEGER NFRLIQ,NFRSOL
!> @brief
C
      INTEGER DEBLIQ(MAXFRO),FINLIQ(MAXFRO)
!> @brief
C
      INTEGER DEBSOL(MAXFRO),FINSOL(MAXFRO)
!> @brief OPTION FOR THE DIFFUSION OF TRACER
C option pour la diffusion du traceur
      INTEGER OPDTRA
!> @brief OPTION FOR THE DISPERSION
C option pour la dispersion
      INTEGER OPTDIF
!> @brief 'SUPG OPTION'
C
      INTEGER OPTSUP
!> @brief NUMBER OF ITERATIONS WITH CONSTANT FLOW DISCHARGE
C nombre d'iterations pour telemac
      INTEGER :: NCONDIS
!> @brief LAW OF BOTTOM FRICTION
C loi de frottement sur le fond
      INTEGER KFROT
!> @brief BED-LOAD TRANSPORT FORMULA
C formule de transport solide
      INTEGER ICF
!> @brief
C
      INTEGER NPAS
!> @brief NUMBER OF TIDES OR FLOODS
C nombre de marees ou crues
      INTEGER NMAREE
!> @brief
C
      INTEGER LEOPR
!> @brief
C
      INTEGER LISPR
!> @brief
C
      INTEGER NVARCL
!> @brief
C
      INTEGER IELMT,IELMH_SIS,IELMU_SIS,IELMX
!> @brief
C standard du fichier de geometrie
      INTEGER STDGEO
!> @brief
C
      INTEGER LOGDES ,LOGPRE ,OPTBAN ,LVMAC
!> @brief HYDRODYNAMIC CODE
C code de calcul utilise pour l'hydrodynamique
      INTEGER HYDRO
!> @brief MATRIX STORAGE
C stockage des matrices
      INTEGER OPTASS
!> @brief NUMBER OF SUB-ITERATIONS
C nombre de sous-iterations
      INTEGER NSOUS
!> @brief
C
      INTEGER MARDAT(3),MARTIM(3),PRODUC
!> @brief OPTION FOR THE TREATMENT OF NON ERODABLE BEDS
C option de traitement des fonds non erodables
      INTEGER CHOIX
!> @brief
C
      INTEGER PTINIL, PTINIG
!> @brief NUMBER OF PRIVATE ARRAYS
C nombre de tableaux prives
      INTEGER NPRIV
!> @brief COUPLING PERIOD
C periode de couplage
      INTEGER PERCOU
!> @brief NUMERO DU PAS DE TEMPS
C
      INTEGER LT
!> @brief
C
      INTEGER RESOL
!> @brief
C
      INTEGER DEPER
!> @brief FORMULA FOR DEVIATION
C formule pour la deviation
      INTEGER DEVIA
!> @brief FORMULA FOR SLOPE EFFECT
C formule pour effet de pente
      INTEGER SLOPEFF
C
C NON-EQUILIBRIUM BEDLOAD AND NON-UNIFORM BED MATERIA (BMD AND MGDL)
C --------
C
!> @brief MAXIMUM NUMBER OF SIZE-CLASSES
C
      INTEGER, PARAMETER :: NSICLM = 10
!> @brief NUMBER OF SIZE-CLASSES OF BED MATERIAL (LESS THAN 10)
C nombre de classes granulometriques
      INTEGER :: NSICLA
!> @brief MAXIMUM NUMBER OF LAYERS ON THE MESH
C
      INTEGER,PARAMETER :: NLAYMAX = 10
!> @brief NUMBER OF BED LOAD MODEL LAYERS
C nombre de couches pour granulo etendue
      INTEGER NOMBLAY
!> @brief FORMULATION FOR THE HIDING FACTOR
C
      INTEGER HIDFAC
!> @brief
C
      INTEGER, PARAMETER :: TMCOD_SISTEL = 0
!> @brief FOR NON-EQUILIBRIUM BEDLOAD
C
      INTEGER :: LOADMETH
!> @brief DEBUGGER
C debugger
      INTEGER :: DEBUG
!> @brief REFERENCE CONCENTRATION FORMULA
C formule pour la concentration de reference
      INTEGER :: ICQ
!> @brief NUMBER OF CONTROL SECTIONS POINTS
C
      INTEGER NCP
!> @brief ARRAY CONTAINING THE GLOBAL NUMBER OF THE POINTS IN THE CONTROL SECTIONS
C donnees sur les sections de controle
      INTEGER, ALLOCATABLE :: CTRLSC(:)
!> @brief COORDINATE OF THE ORIGIN
      INTEGER I_ORIG
!> @brief COORDINATE OF THE ORIGIN
      INTEGER J_ORIG
!> @brief NUMBER OF LAYERS FOR CONSOLIDATION
      INTEGER NCOUCH_TASS
!> @brief SKIN FRICTION CORRECTION
      INTEGER ICR
!> @brief BED ROUGHNESS PREDICTOR OPTION
      INTEGER IKS
C
C-----------------------------------------------------------------------
C
C       5) LOGICAL VALUES
C
C-----------------------------------------------------------------------
C
C
!> @brief GRAPHICAL OUTPUT
C
      LOGICAL :: SORLEO(MAXVAR)
!> @brief LISTING OUTPUT
C
      LOGICAL :: SORIMP(MAXVAR)
!> @brief MASKING
C
      LOGICAL :: MSK
!> @brief WRITES OUT (OR NOT)
C
      LOGICAL :: ENTET
!> @brief RESOLUTION FOR SUSPENSION IS IMPLICIT (OR NOT)
C
      LOGICAL :: YASMI
!> @brief SPHERICAL EQUATIONS (HARD-CODED)
C
      LOGICAL :: SPHERI
!> @brief STEADY HYDRODYNAMICS
C
      LOGICAL :: PERMA
!> @brief TIDAL FLATS
C
      LOGICAL :: BANDEC
!> @brief WAVE EFFECT
C si oui, prise en compte de la houle
      LOGICAL :: HOULE
!> @brief FALL VELOCITY (PARTIALLY HARD-CODED)
C
      LOGICAL :: CALWC
!> @brief SHIELDS PARAMETER
C
      LOGICAL :: CALAC
!> @brief BEDLOAD
C
      LOGICAL :: CHARR
!> @brief LOADING LAW USED OR NOT
C
      LOGICAL :: NOEQUBED
!> @brief FINITE VOLUMES
C si oui, volumes finis
      LOGICAL :: VF
!> @brief MASS-LUMPING
C
      LOGICAL :: LUMPI
!> @brief CONSTANT FLOW DISCHARGE
C
      LOGICAL :: LCONDIS
!> @brief GRAIN-FEEDING
C si oui, grain-feeding
      LOGICAL :: LGRAFED
!> @brief CONSTANT ACTIVE LAYER THICKNESS
C si oui, epaisseur de couche active constante
      LOGICAL :: CONST_ALAYER
!> @brief SUSPENSION
C si oui, prise en compte de la suspension
      LOGICAL :: SUSP
!> @brief MASS BALANCE
C
      LOGICAL :: BILMA
!> @brief VALIDATION
C si oui, validation
      LOGICAL :: VALID
!> @brief IMPOSED CONCENTRATION IN INFLOW
C si oui, concentration d'equilibre en entree
      LOGICAL :: IMP_INFLOW_C
!> @brief SECONDARY CURRENTS
C si oui, courants secondaires
      LOGICAL :: SECCURRENT
!> @brief MASS CONCENTRATIONS IN G/L
C si oui, concentration massique
      LOGICAL :: UNIT
!> @brief CORRECTION ON CONVECTION VELOCITY
C si oui, correction du champ convecteur
      LOGICAL :: CORR_CONV
!> @brief COMPUTATION CONTINUED
C si oui, suite de calcul
      LOGICAL :: DEBU
!> @brief DIFFUSION OF SUSPENDED SEDIMENT CONCENTRATION
C si oui, diffusion
      LOGICAL :: DIFT
!> @brief SEDIMENT SLIDE
C si oui, glissement du sediment
      LOGICAL :: SLIDE
!> @brief COHESIVE SEDIMENTS (FOR EACH CLASS)
C si oui, sediments cohesifs
      LOGICAL :: SEDCO(NSICLM)
!> @brief CONSOLIDATION TAKEN INTO ACCOUNT
C si oui, tassement du lit cohesif
      LOGICAL :: TASS
!> @brief MIXED SEDIMENTS
C si oui, sediment mixte
      LOGICAL :: MIXTE
!> @brief COUPLING WITH DREDGESIM
C si oui, couplage avec dredgesim
      LOGICAL :: DREDGESIM
!> @brief BED FRICTION PREDICTION
C 
      LOGICAL :: KSPRED
C
C-----------------------------------------------------------------------
C
C       6) REALS
C
C-----------------------------------------------------------------------
C
!> @brief
C
      DOUBLE PRECISION RC
!> @brief WATER DENSITY
C masse volumique de l'eau
      DOUBLE PRECISION XMVE
!> @brief SAND DENSITY
C masse volumique du sediment
      DOUBLE PRECISION XMVS
!> @brief COEFFICIENT FUNCTION OF THE POROSITY
C coefficient fonction de la porosite
      DOUBLE PRECISION XKV
!> @brief GRAVITY ACCELERATION
C acceleration de la pesanteur
      DOUBLE PRECISION GRAV
!> @brief
C
      DOUBLE PRECISION SFON
!> @brief FLOW VISCOSITY
C viscosite de l'eau
      DOUBLE PRECISION VCE
!> @brief
C
      DOUBLE PRECISION TETA
!> @brief MINIMAL VALUE OF THE WATER HEIGHT
C hauteur d'eau minimale
      DOUBLE PRECISION HMIN
!> @brief
C
      DOUBLE PRECISION BETA ,DELT
!> @brief TIDAL PERIOD
C
      DOUBLE PRECISION PMAREE
!> @brief STARTING TIME OF THE HYDROGRAM
C temps d'origine de l'hydrogramme
      DOUBLE PRECISION TPREC
!> @brief
C
      DOUBLE PRECISION PHI0
!> @brief
C pas de temps
      DOUBLE PRECISION DT
!> @brief CRITERION TO UPDATE THE FLOW (WITH CONSTANT FLOW DISCHARGE)
C critere pour mettre a jour l'hydrodynamique
      DOUBLE PRECISION :: CRIT_CFD
!> @brief
C
      DOUBLE PRECISION :: FRACSED_GF(NSICLM)
!> @brief INITIAL SUSPENSION CONCENTRATIONS
C concentrations initiales en suspension
      DOUBLE PRECISION :: CS0(NSICLM)
!> @brief MASS EXCHANGED BY SOURCE TERM
C
      DOUBLE PRECISION MASSOU
!> @brief VOLUME CONCENTRATION OF THE COHESIVE BED
C concentration volumique du lit cohesif
      DOUBLE PRECISION CSF_VASE
!> @brief
C
      DOUBLE PRECISION CSF_SABLE
!> @brief SETTLING VELOCITIES
C vitesses de chute
      DOUBLE PRECISION XWC(NSICLM)
!> @brief CRITICAL SHIELDS PARAMETER
C
      DOUBLE PRECISION AC(NSICLM)
!> @brief TETA SUSPENSION
C
      DOUBLE PRECISION TETA_SUSP
!> @brief
C
      DOUBLE PRECISION  XKX, XKY
!> @brief FRICTION ANGLE OF THE SEDIMENT
C angle de frottement du sediment
      DOUBLE PRECISION PHISED
!> @brief PARAMETER FOR DEVIATION
C parametre pour la deviation
      DOUBLE PRECISION BETA2
C
C NON-EQUILIBRIUM BEDLOAD AND NON-UNIFORM BED MATERIA (BMD AND MGDL)
C --------
C
!> @brief HIDING FACTOR FOR PARTICULAR SIZE CLASS WHEN THE USER SUBROUTINE INIT_HIDING IS NOT USED
C hiding factor par classe granulo
      DOUBLE PRECISION HIDI(NSICLM)
!> @brief
C
      DOUBLE PRECISION VSET(NSICLM)
!> @brief D90
C d90
      DOUBLE PRECISION FD90(NSICLM)
!> @brief SEDIMENT DIAMETERS
C diametres des grains
      DOUBLE PRECISION FDM(NSICLM)
!> @brief INITIAL SEDIMENT COMPOSITION FOR PARTICULAR SIZE CLASS WHEN INIT_COMPO IS NOT USED
C fraction initiale par classe sedimentologique
      DOUBLE PRECISION AVA0(NSICLM)
!> @brief WANTED ACTIVE LAYER THICKNESS; ELAYO=FIXED VALUE, ELAY=REAL VALUE FOR EACH POINT; WHEN ENOUGH SEDIMENT ELAY = ELAY0
C epaisseur de couche active
      DOUBLE PRECISION ELAY0
!> @brief TOTAL VOLUME OF SEDIMENT IN EACH CLASS
C
      DOUBLE PRECISION VOLTOT(10)
!> @brief CRITICAL SHEAR VELOCITY FOR MUD DEPOSITION
C vitesse critique de depot de la vase
      DOUBLE PRECISION :: VITCD
!> @brief CRITICAL EROSION SHEAR VELOCITY OF THE MUD
C vitesse critique d'erosion de la vase
      DOUBLE PRECISION :: VITCE
!> @brief SUSPENDED MASS BALANCE
C
      DOUBLE PRECISION :: MASED0(NSICLM)
!> @brief SUSPENDED MASS BALANCE
C
      DOUBLE PRECISION :: MASINI(NSICLM)
!> @brief
C
      DOUBLE PRECISION :: MASTEN(NSICLM), MASTOU(NSICLM)
!> @brief
C
      DOUBLE PRECISION :: MASTCP(NSICLM), MASFIN(NSICLM)
!> @brief
C
      DOUBLE PRECISION :: MASDEP(NSICLM), MASDEPT(NSICLM)
!> @brief LAYER THICKNESSES AS DOUBLE PRECISION
C
      DOUBLE PRECISION,DIMENSION(:,:),TARGET,ALLOCATABLE :: ES
!> @brief FOR NON-EQUILIBIRUM BEDLOAD
C
      DOUBLE PRECISION :: LS0
!> @brief RATIO BETWEEN SKIN FRICTION AND MEAN DIAMETER
C ratio entre la rugosite de peau et le diametre moyen
      DOUBLE PRECISION :: KSPRATIO
!> @brief KARIM, HOLLY & YANG CONSTANT
C
      DOUBLE PRECISION :: KARIM_HOLLY_YANG
!> @brief KARMAN CONSTANT
C constante de karman
      DOUBLE PRECISION :: KARMAN
!> @brief PARTHENIADES CONSTANT
C constante de partheniades
      DOUBLE PRECISION :: PARTHENIADES
!> @brief MAXIMUM CONCENTRATION
C
      DOUBLE PRECISION :: CMAX
!> @brief PI
C
      DOUBLE PRECISION :: PI
!> @brief ZERO OF THE CODE
C
      DOUBLE PRECISION :: ZERO
!> @brief B VALUE FOR THE BIJKER FORMULA
C coefficient b de la formule de bijker
      DOUBLE PRECISION :: BIJK
!> @brief MUD CONCENTRATION AT BOUNDARIES FOR EACH CLASS
C concentrations par classe aux frontieres
      DOUBLE PRECISION :: CBOR_CLASSE(10*MAXFRO)
!> @brief MUD CONCENTRATION FOR EACH LAYER
C concentrations de vase par couche
      DOUBLE PRECISION :: CONC_VASE(10)
!> @brief MASS TRANSFER BETWEEN LAYERS
C transfert de masse par couche
      DOUBLE PRECISION :: TRANS_MASS(10)
!> @brief CRITICAL EROSION SHEAR STRESS OF THE MUD PER LAYER
C contrainte critique d'erosion de la vase par couche
      DOUBLE PRECISION :: TOCE_VASE(10)
C
C-----------------------------------------------------------------------
C
C       7) STRINGS
C
C-----------------------------------------------------------------------
C
!> @brief
C
      CHARACTER(LEN=72) TITCA,SORTIS,VARIM
!> @brief
C
      CHARACTER(LEN=3) BINGEOSIS,BINPRESIS,BINHYDSIS
!> @brief
C
      CHARACTER(LEN=3) BINRESSIS,BINREFSIS
!> @brief
C
      CHARACTER(LEN=32) VARCLA(10),TEXTE(MAXVAR),TEXTPR(MAXVAR)
!> @brief
C
      CHARACTER(LEN=20) EQUA
!> @brief
C
      CHARACTER(LEN=8) MNEMO(MAXVAR)
!> @brief
C
      CHARACTER(LEN=144) COUPLINGSIS
C
C-----------------------------------------------------------------------
C
C       8) SLVCFG STRUCTURES
C
C-----------------------------------------------------------------------
C
!> @brief
C
      TYPE(SLVCFG) :: SLVSED
!> @brief
C
      TYPE(SLVCFG) :: SLVTRA
C
C-----------------------------------------------------------------------
C
C       9) MESH STRUCTURE
C
C-----------------------------------------------------------------------
C
!> @brief MESH STRUCTURE
C
      TYPE(BIEF_MESH) :: MESH
C
C-----------------------------------------------------------------------
C
C      10) ALIASES
C
C-----------------------------------------------------------------------
C
C       DECLARATION OF POINTERS FOR ALIASES
C       TARGETS ARE DEFINED IN POINT_TELEMAC2D
C
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T1
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T2
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T3
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T4
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T5
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T6
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T7
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T8
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T9
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T10
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T11
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T12
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T13
!> @brief ALIAS FOR WORKING VECTOR IN TB
C
      TYPE(BIEF_OBJ),POINTER :: T14
C
C USEFUL COMPONENTS IN STRUCTURE MESH
C --------
C
!> @brief CONNECTIVITY TABLE
C tableaux de connectivite local-global
      TYPE(BIEF_OBJ),   POINTER :: IKLE
!> @brief 2D COORDINATES OF THE MESH
C coordonnees des points du maillage
      DOUBLE PRECISION, DIMENSION(:), POINTER :: X
!> @brief 2D COORDINATES OF THE MESH
C coordonnees des points du maillage
      DOUBLE PRECISION, DIMENSION(:), POINTER :: Y
!> @brief NUMBER OF ELEMENTS IN THE MESH
C nombre d'elements du maillage
      INTEGER, POINTER:: NELEM
!> @brief MAXIMUM NUMBER OF ELEMENTS IN THE MESH
C nombre maximum d'elements du maillage
      INTEGER, POINTER:: NELMAX
!> @brief NUMBER OF BOUNDARY POINTS
C nombre de points frontieres
      INTEGER, POINTER:: NPTFR
!> @brief
C
      INTEGER, POINTER:: NPTFRX
!> @brief
C
      INTEGER, POINTER:: DIM
!> @brief
C
      INTEGER, POINTER:: TYPELM
!> @brief NUMBER OF 2D POINTS IN THE MESH
C nombre de points 2d du maillage
      INTEGER, POINTER:: NPOIN
!> @brief
C
      INTEGER, POINTER:: NPMAX
!> @brief
C
      INTEGER, POINTER:: MXPTVS
!> @brief
C
      INTEGER, POINTER:: MXELVS
!> @brief
C
      INTEGER, POINTER:: LV
C
C-----------------------------------------------------------------------
C
C      11) SISYPHE FILES + INTEGER DECLARATION FOR MED APPROACH
C
C-----------------------------------------------------------------------
C
!> @brief MAXIMUM RANK OF LOGICAL UNITS AS DECLARED IN SUBMIT STRINGS IN THE DICTIONARY
C
      INTEGER, PARAMETER :: MAXLU_SIS = 46
!> @brief
C
      TYPE(BIEF_FILE) :: SIS_FILES(MAXLU_SIS)
!> @brief
C
      INTEGER SISRES
!> @brief
C
      INTEGER SISREF
!> @brief
C
      INTEGER SISPRE
!> @brief
C
      INTEGER SISHYD
!> @brief
C
      INTEGER SISCOU
!> @brief
C
      INTEGER SISGEO
!> @brief
C
      INTEGER SISCLI
!> @brief
C
      INTEGER SISCAS
!> @brief
C
      INTEGER SISFON
!> @brief
C
      INTEGER SISMAF
!> @brief
C
      INTEGER SISSEC
!> @brief
C
      INTEGER SISSEO
C
C-----------------------------------------------------------------------
C
C      12) SECTIONS
C
C-----------------------------------------------------------------------
C
!> @brief
C
      TYPE (CHAIN_TYPE), ALLOCATABLE :: CHAIN(:)
C
      SAVE   ! VERY IMPORTANT
C
      END MODULE DECLARATIONS_SISYPHE
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       DETERMINES THE BOUNDARY CONDITIONS ON E
!>                FOR DIRICHLET POINTS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> EBOR, KENT, LIEBOR, NBOR, NPOIN, NPTFR, ZF, ZF1
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> K, N
!>   </td></tr>
!>     </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> **/10/97
!> </td><td> C.LE NORMANT 01-30-87-78-54
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>EBOR
!></td><td><-></td><td>EVOLUTION AUX POINTS DE BORD
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>--></td><td>TYPE DE CONDITION LIMITE
!>    </td></tr>
!>          <tr><td>LIEBOR
!></td><td><-></td><td>TYPES DE CONDITIONS AUX LIMITES SUR E
!>    </td></tr>
!>          <tr><td>NBOR
!></td><td>--></td><td>TABLEAU DES NUMEROS GLOBAUX DES POINTS
!>                  DE BORD
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS DU MAILLAGE
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>--></td><td>NOMBRE DE POINTS FRONTIERES
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>--></td><td>COTE DU FOND
!>    </td></tr>
!>          <tr><td>ZF1
!></td><td><-></td><td>COTE DU FOND
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE DIRICL
     &( ZF1 , ZF , EBOR , LIEBOR , NBOR , NPOIN  , NPTFR  , KENT )
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| EBOR           |<->| EVOLUTION AUX POINTS DE BORD
C| KENT           |-->| TYPE DE CONDITION LIMITE
C| LIEBOR         |<->| TYPES DE CONDITIONS AUX LIMITES SUR E
C| NBOR           |-->| TABLEAU DES NUMEROS GLOBAUX DES POINTS
C|                |   | DE BORD
C| NPOIN          |-->| NOMBRE DE POINTS DU MAILLAGE
C| NPTFR          |-->| NOMBRE DE POINTS FRONTIERES
C| ZF             |-->| COTE DU FOND
C| ZF1            |<->| COTE DU FOND
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN):: KENT,NPOIN,NPTFR
      INTEGER, INTENT(IN):: NBOR(NPTFR)
      INTEGER, INTENT(IN):: LIEBOR(NPTFR)
C
      DOUBLE PRECISION, INTENT(IN)::  ZF(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT):: ZF1(NPOIN)
      DOUBLE PRECISION, INTENT(IN) :: EBOR(NPTFR)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER K, N
C
C-----------------------------------------------------------------------
C
      DO 10 K=1,NPTFR
C
        N = NBOR(K)
C
        IF (LIEBOR(K).EQ.KENT) THEN
          ZF1(N)   = EBOR(K)+ZF(N)
        ENDIF
C
10    CONTINUE
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE DIRICL

C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       THIS IS THE INTERFACE TO DREDGESIM, CONTAINING ALL
!>                DEPENDENCIES TO DREDGESIM LIBRARIES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @warning  FOR REAL INTERFACING WITH DREDGESIM, COMMENTS "CDSIM"
!>            MUST BE REMOVED

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> OPTION
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::IPID IPID@endlink, 
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::AVAIL AVAIL@endlink, 
!> @link DECLARATIONS_SISYPHE::DZF_GF DZF_GF@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::ZFCL_C ZFCL_C@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AVAI_GF, DREDGEINP, I, J, SEDGEO
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> EXTENS(), OS(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_MAIN(), SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 02/02/2009
!> </td><td> J-M HERVOUET (LNHE) 01 30 87 80 18
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>OPTION
!></td><td>--></td><td>1 : INITIALISATION (CALLED IN SISYPHE)
!>                  2 : CALLED EVERY TIME STEP (FROM
!>                  BEDLOAD_POSTTREATMENT)
!>                  3 : END  (CALLED IN SISYPHE)
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE DREDGESIM_INTERFACE
     &(OPTION)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| OPTION         |-->| 1 : INITIALISATION (CALLED IN SISYPHE)
C|                |   | 2 : CALLED EVERY TIME STEP (FROM
C|                |   | BEDLOAD_POSTTREATMENT)
C|                |   | 3 : END  (CALLED IN SISYPHE)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_TELEMAC, ONLY : EXTENS
      USE DECLARATIONS_SISYPHE, ONLY : DREDGESIM,DT,NPOIN,NSICLA,DZF_GF,
     &                                 ZFCL_C,AVAIL,MESH,SIS_FILES
CDSIM     USE P_SISYPHE_UI, ONLY : INIT_AND_SETUP_DS,CLEAR_SISYDREDGE
CDSIM     USE P_DREDGESIM_UI, ONLY : STOP_DREDGESIM,CLEAR_DREDGESIM
C
      IMPLICIT NONE
C
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN) :: OPTION
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      CHARACTER(LEN=250) :: DREDGEINP,SEDGEO
      DOUBLE PRECISION,ALLOCATABLE :: AVAI_GF(:,:)
      INTEGER I,J
C
C-----------------------------------------------------------------------
C
      IF(OPTION.EQ.1) THEN
C
C     INITIALISES
C
        DREDGEINP = ''
        SEDGEO = ''
        IF(NCSIZE.GT.1) THEN
C         INPUT FILE FOR DREDGESIM
          DREDGEINP = TRIM('SISMAF'//EXTENS(NCSIZE-1,IPID))
          SEDGEO = TRIM('SISGEO'//EXTENS(NCSIZE-1,IPID))
        ELSE
          DREDGEINP = 'SISMAF'
          SEDGEO = 'SISGEO'
        ENDIF
CDSIM       CALL INIT_AND_SETUP_DS(SIS_FILES(SISMAF)%LU,DREDGEINP,
CDSIM                              SIS_FILES(SISGEO)%LU,
CDSIM                              SEDGEO,
CDSIM    &                         NCSIZE,IPID,MESH%ILMAX,
CDSIM    &                         MESH%IKP%I,MESH%IKM%I,MESH%NACHB%I,
CDSIM    &                         MESH%INDPU%I,MESH%NHP%I,MESH%NHM%I)
C
      ELSEIF(OPTION.EQ.2) THEN
C
C     CALL FROM WITHIN BEDLOAD_POSTTREATMENT
C
C       ALLOCATES AVAI_GF
        ALLOCATE(AVAI_GF(NPOIN,NSICLA))
C       INITIALISES THE DEPTH TO ADD
        CALL OS('X=0     ',X=DZF_GF)
CDSIM       CALL RUN_DREDGESIM(DT)
CDSIM       AVAI_GF = GET_SM_NODE_SEDIMENT_FRACTION()
        DO J = 1, NPOIN
          IF(DZF_GF%R(J).GT.0.D0) THEN
            DO I = 1, NSICLA
              ZFCL_C%ADR(I)%P%R(J) = ZFCL_C%ADR(I)%P%R(J) +
     &                               DZF_GF%R(J)*AVAI_GF(J,I)
            ENDDO
          ELSE
            DO I = 1, NSICLA
              ZFCL_C%ADR(I)%P%R(J) = ZFCL_C%ADR(I)%P%R(J) +
     &                               DZF_GF%R(J)*AVAIL(J,1,I)
            ENDDO
          ENDIF
        ENDDO
        DEALLOCATE(AVAI_GF)
C
      ELSEIF(OPTION.EQ.3) THEN
C
C     CLOSES
C
CDSIM       CALL STOP_DREDGESIM()
CDSIM       CALL CLEAR_DREDGESIM()
CDSIM       CALL CLEAR_SISYDREDGE()
C
      ELSE
C
C     ERROR
C
        IF(LNG.EQ.1) WRITE(LU,*) 'MAUVAISE OPTION POUR DREDGESIM'
        IF(LNG.EQ.2) WRITE(LU,*) 'BAD OPTION FOR DREDGESIM'
        CALL PLANTE(1)
        STOP
C
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       WRITES HEADINGS TO THE LISTING
!>                AT VARIOUS STAGES OF THE PROGRAM.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AT, IETAPE, LT
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> FR, GB, H, J, M, S
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td> 06/06/2008
!> </td><td> J-M HERVOUET (LNHE) 30 87 80 18
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AT , LT
!></td><td>--></td><td>TEMPS , NUMERO DU PAS DE TEMPS.
!>    </td></tr>
!>          <tr><td>IETAPE
!></td><td>--></td><td>INDICATEUR D'AVANCEMENT DANS LE PROGRAMME.
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE ENTETE_SISYPHE
     &(IETAPE,AT,LT)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AT , LT        |-->| TEMPS , NUMERO DU PAS DE TEMPS.
C| IETAPE         |-->| INDICATEUR D'AVANCEMENT DANS LE PROGRAMME.
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION, INTENT(IN) :: AT
C
      INTEGER, INTENT(IN):: LT,IETAPE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER J,H,M
      DOUBLE PRECISION S
      INTRINSIC INT
      CHARACTER*32 FR(15),GB(15)
C
C-----------------------------------------------------------------------
C
      DATA FR /     '                                ' ,
     &              '                                ' ,
     &              '     ETAPE DE CONVECTION        ' ,
     &              '       MODELE K-EPSILON         ' ,
     &              '  ETAPE DE DIFFUSION DU TRACEUR ' ,
     &              ' ETAPE DE DIFFUSION-PROPAGATION ' ,
     &              '      BILAN DE VOLUME D''EAU     ' ,
     &              ' BILAN FINAL DE VOLUME D''EAU ' ,
     &              '  TEMPS :                       ' ,
     &              ' SECONDES                       ' ,
     &              'ITERATION                       ' ,
     &              '     DERIVE DE FLOTTEUR(S)      ' ,
     &              '   DERIVE(S) LAGRANGIENNE(S)    ' ,
     &              '     GLISSEMENT DU SEDIMENT     ' ,
     &              '      TASSEMENT DU SEDIMENT     ' /
      DATA GB /     '                                ' ,
     &              '                                ' ,
     &              '        ADVECTION STEP          ' ,
     &              '        K-EPSILON MODEL         ' ,
     &              '   DIFFUSION OF TRACER STEP     ' ,
     &              '  DIFFUSION-PROPAGATION STEP    ' ,
     &              '     BALANCE OF WATER VOLUME    ' ,
     &              ' FINAL BALANCE OF WATER VOLUME  ' ,
     &              '    TIME:                       ' ,
     &              ' SECONDS                        ' ,
     &              'ITERATION                       ' ,
     &              '       DRIFT OF DROGUE(S)       ' ,
     &              '      LAGRANGIAN DRIFT(S)       ' ,
     &              '         SEDIMENT SLIDE         ' ,
     &              '          CONSOLIDATION         ' /
C
C-----------------------------------------------------------------------
C
C  DECOMPOSITION OF TIME IN DAYS, HOURS, MINUTES AND SECONDS
C
      S = AT
      J = INT(AT/86400.D0)
      S = S - 86400.D0 * J
      H = INT(S/3600.D0)
      S = S - 3600.D0 * H
      M = INT(S/60.D0)
      S = S - 60.D0 * M
C
C-----------------------------------------------------------------------
C
C   WRITES OUT: TIME AND ITERATIONS
C
      IF (IETAPE.EQ.1.OR.IETAPE.EQ.2) THEN
C
        IF(J.NE.0) THEN
          IF(LNG.EQ.1) WRITE(LU,10) FR(11),LT,FR(9),J,H,M,S,AT
          IF(LNG.EQ.2) WRITE(LU,11) GB(11),LT,GB(9),J,H,M,S,AT
        ELSEIF(H.NE.0) THEN
          IF(LNG.EQ.1) WRITE(LU,20) FR(11),LT,FR(9),H,M,S,AT
          IF(LNG.EQ.2) WRITE(LU,20) GB(11),LT,GB(9),H,M,S,AT
        ELSEIF(M.NE.0) THEN
          IF(LNG.EQ.1) WRITE(LU,30) FR(11),LT,FR(9),M,S,AT
          IF(LNG.EQ.2) WRITE(LU,30) GB(11),LT,GB(9),M,S,AT
        ELSE
          IF(LNG.EQ.1) WRITE(LU,40) FR(11),LT,FR(9),S
          IF(LNG.EQ.2) WRITE(LU,40) GB(11),LT,GB(9),S
        ENDIF
C       AN EMPTY LINE
        WRITE(LU,*)
C
C   WRITES OUT: TITLES OF THE STAGES
C
      ELSE
C
        IF(LNG.EQ.1) WRITE(LU,200) FR(IETAPE)
        IF(LNG.EQ.2) WRITE(LU,200) GB(IETAPE)
C
      ENDIF
C
C-----------------------------------------------------------------------
C
10     FORMAT(/,80('='),/,1X,A10,I8,A10,
     &     1I4,' J ',1I2,' H ',1I2,' MIN ',F8.4,' S',5X,'(',F15.4,' S)')
11     FORMAT(/,80('='),/,1X,A10,I8,A10,
     &     1I4,' D ',1I2,' H ',1I2,' MN ',F8.4,' S',5X,'(',F15.4,' S)')
20     FORMAT(/,80('='),/,1X,A10,I8,A10,1I2,' H ',1I2,' MIN ',F8.4,' S',
     &                                               5X,'(',F12.4,' S)')
30     FORMAT(/,80('='),/,1X,A10,I8,A10,1I2,' MN ',F8.4,' S',
     &                                               5X,'(',F12.4,' S)')
40     FORMAT(/,80('='),/,1X,A10,I8,A10,F8.4,' S')
200    FORMAT(80('-'),/,18X,A32)
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES FLUXES THROUGH CONTROL SECTIONS
!>                AND ADDS THEM UP TO OBTAIN OSCILLATING VOLUMES.
!><br>            MESHES OF DIMENSION 2 AND CONSIDERED WATER DEPTH.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CHARR, CTRLSC, DT, H, IKLE, INFO, KNOGL, NCP, NELEM, NELMAX, QSXC, QSXS, QSYC, QSYS, SUSP, TPS, U, V, X, Y
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::CHAIN CHAIN@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ARR, DEJA, DEP, DIST, DIST1, DIST2, DIST3, ELBEST, ERR, FLX, FLXC, FLXS, H1, H2, I1, I2, I3, IELEM, IGBEST, ILBEST, ILPREC, ISEC, ISEG, LISTE, NSEC, NSEG, NSEMAX, NX, NY, OLD_METHOD, PT, SUR6, UN1, UN2, VOLNEG, VOLNEGC, VOLNEGS, VOLPOS, VOLPOSC, VOLPOSS, X1, X2, Y1, Y2
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_FLUSEC_SISYPHE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> FLUXPR_SISYPHE(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.7                                       </center>
!> </td><td> 27/12/2006
!> </td><td> J-M HERVOUET (LNHE) 01 30 87 80 18
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CHARR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS
!></td><td>--></td><td>BLOC DE TRACEURS EN SUSPENSION
!>    </td></tr>
!>          <tr><td>CTRLSC
!></td><td>--></td><td>DONNEES SUR LES SECTIONS DE CONTROLE.
!>    </td></tr>
!>          <tr><td>DT
!></td><td>--></td><td>PAS DE TEMPS.
!>    </td></tr>
!>          <tr><td>H
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>IKLE
!></td><td>--></td><td>TABLEAUX DE CONNECTIVITE LOCAL-GLOBAL
!>    </td></tr>
!>          <tr><td>INFO
!></td><td>--></td><td>SI OUI : IMPRESSIONS.
!>    </td></tr>
!>          <tr><td>KNOGL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCP
!></td><td>--></td><td>TWO TIMES THE NUMBER OF CONTROL SECTIONS
!>    </td></tr>
!>          <tr><td>NELEM
!></td><td>--></td><td>NOMBRE D'ELEMENTS.
!>    </td></tr>
!>          <tr><td>NELMAX
!></td><td>--></td><td>NOMBRE MAXIMUM D'ELEMENTS.
!>    </td></tr>
!>          <tr><td>QSXC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSXS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSYC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSYS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SUSP
!></td><td>--></td><td>LOGIQUE INDIQUANT DE PRENDRE EN COMPTE
!>                  LE BLOC DE TRACEURS EN SUSPENSION
!>    </td></tr>
!>          <tr><td>TPS
!></td><td>--></td><td>TEMPS
!>    </td></tr>
!>          <tr><td>U,V
!></td><td>--></td><td>CHAMP DE VITESSE
!>    </td></tr>
!>          <tr><td>X,Y
!></td><td>--></td><td>COORDONNEES DES POINTS DU MAILLAGE
!>    </td></tr>
!>          <tr><td>XEL,YEL
!></td><td>--></td><td>COORDONNEES DES POINTS PAR ELEMENT
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE FLUSEC_SISYPHE
     &(U,V,H,QSXC,QSYC,CHARR,QSXS,QSYS,SUSP,
     & IKLE,NELMAX,NELEM,X,Y,DT,NCP,CTRLSC,INFO,TPS,KNOGL)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CHARR          |---| 
C| CS             |-->| BLOC DE TRACEURS EN SUSPENSION
C| CTRLSC         |-->| DONNEES SUR LES SECTIONS DE CONTROLE.
C| DT             |-->| PAS DE TEMPS.
C| H             |-->| HAUTEUR D'EAU
C| IKLE           |-->| TABLEAUX DE CONNECTIVITE LOCAL-GLOBAL
C| INFO           |-->| SI OUI : IMPRESSIONS.
C| KNOGL          |---| 
C| NCP            |-->| TWO TIMES THE NUMBER OF CONTROL SECTIONS
C| NELEM          |-->| NOMBRE D'ELEMENTS.
C| NELMAX         |-->| NOMBRE MAXIMUM D'ELEMENTS.
C| QSXC           |---| 
C| QSXS           |---| 
C| QSYC           |---| 
C| QSYS           |---| 
C| SUSP           |-->| LOGIQUE INDIQUANT DE PRENDRE EN COMPTE
C|                |   | LE BLOC DE TRACEURS EN SUSPENSION
C| TPS            |-->| TEMPS
C| U,V            |-->| CHAMP DE VITESSE
C| X,Y            |-->| COORDONNEES DES POINTS DU MAILLAGE
C| XEL,YEL        |-->| COORDONNEES DES POINTS PAR ELEMENT
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_SISYPHE, ONLY: CHAIN
      USE INTERFACE_SISYPHE, EX_FLUSEC_SISYPHE => FLUSEC_SISYPHE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)          :: NELMAX,NELEM,NCP
      INTEGER, INTENT(IN)          :: IKLE(NELMAX,*)
      INTEGER, INTENT(IN)          :: CTRLSC(NCP),KNOGL(*)
      DOUBLE PRECISION, INTENT(IN) :: X(*),Y(*),TPS,DT
       LOGICAL, INTENT(IN)          :: INFO,SUSP,CHARR
      TYPE(BIEF_OBJ), INTENT(IN)   :: U,V,H,QSXC,QSYC,QSXS,QSYS
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER NSEMAX,ERR
      PARAMETER(NSEMAX=50)
C
      INTEGER IELEM,I1,I2,I3,ELBEST,IGBEST,ILBEST
      INTEGER ILPREC,ISEG,ISEC,NSEC,PT,DEP,ARR
C
      DOUBLE PRECISION DIST,DIST1,DIST2,DIST3
      DOUBLE PRECISION H1,H2,X1,Y1,X2,Y2,UN1,UN2,NX,NY,SUR6
C
      DOUBLE PRECISION, ALLOCATABLE :: FLX(:),VOLNEG(:),VOLPOS(:)
      DOUBLE PRECISION, ALLOCATABLE :: FLXS(:),FLXC(:)
      DOUBLE PRECISION, ALLOCATABLE :: VOLNEGS(:),VOLPOSS(:)
      DOUBLE PRECISION, ALLOCATABLE :: VOLNEGC(:),VOLPOSC(:)
      INTEGER, ALLOCATABLE :: NSEG(:),LISTE(:,:,:)
C
      LOGICAL DEJA
      DATA DEJA/.FALSE./
      LOGICAL :: OLD_METHOD=.FALSE.
C
      SAVE LISTE,DEJA,NSEG,VOLNEG,VOLPOS,FLX,FLXS,VOLNEGS,VOLPOSS
      SAVE FLXC,VOLNEGC,VOLPOSC,OLD_METHOD
C
C-----------------------------------------------------------------------
C
      WRITE(LU,*) '-> ENTERING FLUSEC_SISYPHE'
      WRITE(LU,*) 'NCP: ',NCP
      WRITE(LU,*) 'CTRLSC: ',CTRLSC(:)

      SUR6 = 1.D0/6.D0
      NSEC = NCP/2
C
C  LOOKS FOR WAYS THAT JOIN THE POINT COUPLES:
C
      IF(.NOT.DEJA) THEN
C
C     DYNAMICALLY ALLOCATES FLX, VOLNEG, VOLPOS, ETC.
C
      ALLOCATE(FLX(NSEC)           ,STAT=ERR)
      ALLOCATE(VOLNEG(NSEC)        ,STAT=ERR)
      ALLOCATE(VOLPOS(NSEC)        ,STAT=ERR)
      ALLOCATE(NSEG(NCP)           ,STAT=ERR)
      ALLOCATE(LISTE(NCP,NSEMAX,2) ,STAT=ERR)
C     S FOR SUSPENSION, C FOR BEDLOAD
      ALLOCATE(FLXS(NSEC)          ,STAT=ERR)
      ALLOCATE(VOLNEGS(NSEC)       ,STAT=ERR)
      ALLOCATE(VOLPOSS(NSEC)       ,STAT=ERR)
      ALLOCATE(FLXC(NSEC)          ,STAT=ERR)
      ALLOCATE(VOLNEGC(NSEC)       ,STAT=ERR)
      ALLOCATE(VOLPOSC(NSEC)       ,STAT=ERR)
C
      IF(ERR.NE.0) THEN
        IF(LNG.EQ.1) WRITE(LU,100) ERR
        IF(LNG.EQ.2) WRITE(LU,200) ERR
100     FORMAT(1X,'FLUSEC : ERREUR A L''ALLOCATION DE MEMOIRE : ',/,1X,
     &            'CODE D''ERREUR : ',1I6)
200     FORMAT(1X,'FLUSEC: ERROR DURING ALLOCATION OF MEMORY: ',/,1X,
     &            'ERROR CODE: ',1I6)
      ENDIF
C
      IF (.NOT.ALLOCATED(CHAIN)) OLD_METHOD=.TRUE.
C
      DO ISEC=1,NSEC
        FLX(ISEC)=0.0D0
        VOLNEG(ISEC) =0.D0
        VOLPOS(ISEC) =0.D0
        VOLNEGS(ISEC)=0.D0
        VOLPOSS(ISEC)=0.D0
        VOLNEGC(ISEC)=0.D0
        VOLPOSC(ISEC)=0.D0
      ENDDO
C
      DO 60 ISEC =1,NSEC
C
C!JAJ #### IN THE SERIAL CASE, OR "CLASSICAL" IN PARALLEL,
C     FOLLOW THE ALGORITHM OF FINDING SEGMENT CHAINS
C
C NOTE: IF YOU CHANGE THE ALGORITHM, CHANGE IT IN PARTEL AS WELL
C
        IF (NCSIZE.LE.1 .OR. OLD_METHOD) THEN
C
        DEP = CTRLSC(1+2*(ISEC-1))
        ARR = CTRLSC(2+2*(ISEC-1))
        IF(NCSIZE.GT.1) THEN
          DEP=KNOGL(DEP)
          ARR=KNOGL(ARR)
          IF(DEP.EQ.0.AND.ARR.EQ.0) THEN
            NSEG(ISEC)=0
            GO TO 60
          ENDIF
          IF((DEP.EQ.0.AND.ARR.NE.0).OR.(DEP.NE.0.AND.ARR.EQ.0)) THEN
            NSEG(ISEC)=-1
            GO TO 60
          ENDIF
        ENDIF
        PT = DEP
        ISEG = 0
        DIST=(X(DEP)-X(ARR))**2+(Y(DEP)-Y(ARR))**2
10      CONTINUE
C
        DO 20 IELEM =1,NELEM
C
          I1 = IKLE(IELEM,1)
          I2 = IKLE(IELEM,2)
          I3 = IKLE(IELEM,3)
C         IF THE ELEMENT CONTAINS THE CURRENT POINT:
          IF(PT.EQ.I1.OR.PT.EQ.I2.OR.PT.EQ.I3) THEN
            DIST1 = (X(I1)-X(ARR))**2 + (Y(I1)-Y(ARR))**2
            DIST2 = (X(I2)-X(ARR))**2 + (Y(I2)-Y(ARR))**2
            DIST3 = (X(I3)-X(ARR))**2 + (Y(I3)-Y(ARR))**2
            IF(DIST1.LT.DIST) THEN
              DIST = DIST1
              ELBEST = IELEM
              IGBEST = I1
              ILBEST = 1
              IF(I1.EQ.PT) ILPREC = 1
              IF(I2.EQ.PT) ILPREC = 2
              IF(I3.EQ.PT) ILPREC = 3
            ENDIF
            IF(DIST2.LT.DIST) THEN
              DIST = DIST2
              ELBEST = IELEM
              IGBEST = I2
              ILBEST = 2
              IF(I1.EQ.PT) ILPREC = 1
              IF(I2.EQ.PT) ILPREC = 2
              IF(I3.EQ.PT) ILPREC = 3
            ENDIF
            IF(DIST3.LT.DIST) THEN
              DIST = DIST3
              ELBEST = IELEM
              IGBEST = I3
              ILBEST = 3
              IF(I1.EQ.PT) ILPREC = 1
              IF(I2.EQ.PT) ILPREC = 2
              IF(I3.EQ.PT) ILPREC = 3
            ENDIF
          ENDIF
C
20      CONTINUE
C
        IF(IGBEST.EQ.PT) THEN
          IF(LNG.EQ.1) WRITE(LU,32)
          IF(LNG.EQ.2) WRITE(LU,33)
32        FORMAT(1X,'FLUSEC : BLOCAGE DE L''ALGORITHME')
33        FORMAT(1X,'FLUSEC : ALGORITHM FAILED')
          CALL PLANTE(1)
          STOP
        ELSE
          PT = IGBEST
          ISEG = ISEG + 1
          IF(ISEG.GT.NSEMAX) THEN
            IF(LNG.EQ.1) THEN
              WRITE(LU,*) 'FLUSEC : TROP DE SEGMENTS DANS UNE'
              WRITE(LU,*) '         SECTION. AUGMENTER NSEMAX'
            ENDIF
            IF(LNG.EQ.2) THEN
              WRITE(LU,*) 'FLUSEC: TOO MANY SEGMENTS IN A   '
              WRITE(LU,*) '        SECTION. INCREASE  NSEMAX'
            ENDIF
            STOP
          ENDIF
          LISTE(ISEC,ISEG,1) = IKLE(ELBEST,ILPREC)
          LISTE(ISEC,ISEG,2) = IKLE(ELBEST,ILBEST)
          IF(IGBEST.NE.ARR) GO TO 10
        ENDIF
C
        NSEG(ISEC) = ISEG
!
CJAJ #### THIS PART TO BE DONE IN THE PARALLEL CASE; FILL LISTE
C WITH READY SEGMENT CHAINS PROVIDED BY PARTEL: SEE READ_SECTIONS
C NOTE: FUTURE OPTIMISATION - USE CHAIN STRUCTURE IN THE WHOLE ROUTINE
!
        ELSE
C
          NSEG(ISEC) = CHAIN(ISEC)%NSEG
          LISTE(ISEC,:,:)=0

          DO ISEG=1,NSEG(ISEC)
            LISTE(ISEC,ISEG,1) = CHAIN(ISEC)%LISTE(ISEG,1)
            LISTE(ISEC,ISEG,2) = CHAIN(ISEC)%LISTE(ISEG,2)
          END DO

          WRITE(LU,*) 'CHAIN@SISYPHE -> LISTE@SISYPHE:'
          WRITE(LU,*) 'ISEC,NSEG(ISEC): ',ISEC,NSEG(ISEC)
          DO ISEG=1,NSEG(ISEC)
            WRITE(LU,*) LISTE(ISEC,ISEG,:)
          END DO

        ENDIF
C
60    CONTINUE
C
C     IF(.NOT.DEJA) THEN
      ENDIF
C
C-----------------------------------------------------------------------
C
      DEJA = .TRUE.
C
C-----------------------------------------------------------------------
C
      DO ISEC = 1 , NSEC
C
      FLX(ISEC)  = 0.D0
      FLXS(ISEC) = 0.D0
      FLXC(ISEC) = 0.D0
C
      IF(NSEG(ISEC).GE.1) THEN
C
C     COMPUTES THE FLUX DIRECTLY, REGARDLESS OF THE WEAK FORM
C     OF THE IMPERMEABILITY CONDITION
C
      DO ISEG = 1 , NSEG(ISEC)
        I1 = LISTE(ISEC,ISEG,1)
        I2 = LISTE(ISEC,ISEG,2)
        X1 = X(I1)
        X2 = X(I2)
        Y1 = Y(I1)
        Y2 = Y(I2)
        H1 = H%R(I1)
        H2 = H%R(I2)
        NX = Y1-Y2
        NY = X2-X1
        UN1= U%R(I1)*NX + V%R(I1)*NY
        UN2= U%R(I2)*NX + V%R(I2)*NY
        FLX(ISEC) = FLX(ISEC) + ((H1+H2)*(UN1+UN2)+H2*UN2+H1*UN1)*SUR6
        IF(SUSP) THEN
          UN1= QSXS%R(I1)*NX + QSYS%R(I1)*NY
          UN2= QSXS%R(I2)*NX + QSYS%R(I2)*NY
          FLXS(ISEC) = FLXS(ISEC) + 0.5D0*(UN1+UN2)
        ENDIF
        IF(CHARR) THEN
          UN1= QSXC%R(I1)*NX + QSYC%R(I1)*NY
          UN2= QSXC%R(I2)*NX + QSYC%R(I2)*NY
          FLXC(ISEC) = FLXC(ISEC) + 0.5D0*(UN1+UN2)
        ENDIF
      ENDDO
C
      IF(FLX(ISEC).GT.0.D0) THEN
        VOLPOS(ISEC) = VOLPOS(ISEC) + FLX(ISEC)*DT
      ELSE
        VOLNEG(ISEC) = VOLNEG(ISEC) + FLX(ISEC)*DT
      ENDIF
C
      IF(SUSP) THEN
        IF(FLXS(ISEC).GT.0.D0) THEN
          VOLPOSS(ISEC) = VOLPOSS(ISEC) + FLXS(ISEC)*DT
        ELSE
          VOLNEGS(ISEC) = VOLNEGS(ISEC) + FLXS(ISEC)*DT
        ENDIF
      ENDIF
C
      IF(CHARR) THEN
        IF(FLXC(ISEC).GT.0.D0) THEN
          VOLPOSC(ISEC) = VOLPOSC(ISEC) + FLXC(ISEC)*DT
        ELSE
          VOLNEGC(ISEC) = VOLNEGC(ISEC) + FLXC(ISEC)*DT
        ENDIF
      ENDIF
C
C     IF(NSEG(ISEC).GT.1)...
      ENDIF
C
      ENDDO
C
C-----------------------------------------------------------------------
C
C     PRINTS THE RESULTS / !JAJ HERE ALLREDUCES FOR VALUES
C
      CALL FLUXPR_SISYPHE(NSEC,CTRLSC,FLX,VOLNEG,VOLPOS,INFO,TPS,
     &                    NSEG,NCSIZE,
     &                    FLXS,VOLNEGS,VOLPOSS,SUSP,
     &                    FLXC,VOLNEGC,VOLPOSC,CHARR)
C
C-----------------------------------------------------------------------
C
      WRITE(LU,*) '-> LEAVING FLUSEC_SISYPHE'
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES FLUXES THROUGH CONTROL SECTIONS
!>                AND ADDS THEM UP TO OBTAIN OSCILLATING VOLUMES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note    THIS SUBROUTINE PRINTS OUT DISCHARGES THROUGH CONTROL
!>           SECTIONS. YOU CAN REWRITE IT TO DIVERT THESE PRINTOUTS
!>           TO A FILE OR TO CHANGE THE FORMAT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF_DEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CHARR, CTRLSC, FLX, FLXC, FLXS, INFO, NCSIZE, NSEC, NSEG, SUSP, TPS, VOLNEG, VOLNEGC, VOLNEGS, VOLPOS, VOLPOSC, VOLPOSS
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::IPID IPID@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::CHAIN CHAIN@endlink, 
!> @link DECLARATIONS_SISYPHE::SISSEO SISSEO@endlink, 
!> @link DECLARATIONS_SISYPHE::SIS_FILES SIS_FILES@endlink, 
!> @link DECLARATIONS_SISYPHE::TITCA TITCA@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ERR, FMTZON, II, INIT, ISEC, NSEO, OLD_METHOD, WORK
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE(), P_DMAX(), P_DMIN(), P_DSUM(), P_IMIN()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>FLUSEC_SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.7                                       </center>
!> </td><td> 27/12/2006
!> </td><td> J-M HERVOUET (LNHE) 01 30 87 80 18
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CHARR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CTRLSC
!></td><td>--></td><td>NUMBERS OF POINTS IN THE CONTROL SECTIONS
!>    </td></tr>
!>          <tr><td>FLX
!></td><td>--></td><td>FLUXES THROUGH CONTROL SECTIONS
!>    </td></tr>
!>          <tr><td>FLXC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLXS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>INFO
!></td><td>--></td><td>IF YES : INFORMATION IS PRINTED
!>    </td></tr>
!>          <tr><td>NCSIZE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSEC
!></td><td>--></td><td>NUMBER OF CONTROL SECTIONS
!>    </td></tr>
!>          <tr><td>NSEG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SUSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TPS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLNEG
!></td><td>--></td><td>CUMULATED NEGATIVE VOLUME THROUGH SECTIONS
!>    </td></tr>
!>          <tr><td>VOLNEGC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLNEGS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLPOS
!></td><td>--></td><td>CUMULATED POSITIVE VOLUME THROUGH SECTIONS
!>    </td></tr>
!>          <tr><td>VOLPOSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLPOSS
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE FLUXPR_SISYPHE
     &(NSEC,CTRLSC,FLX,VOLNEG,VOLPOS,INFO,TPS,NSEG,NCSIZE,
     & FLXS,VOLNEGS,VOLPOSS,SUSP,FLXC,VOLNEGC,VOLPOSC,CHARR)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CHARR          |---| 
C| CTRLSC         |-->| NUMBERS OF POINTS IN THE CONTROL SECTIONS
C| FLX            |-->| FLUXES THROUGH CONTROL SECTIONS
C| FLXC           |---| 
C| FLXS           |---| 
C| INFO           |-->| IF YES : INFORMATION IS PRINTED
C| NCSIZE         |---| 
C| NSEC           |-->| NUMBER OF CONTROL SECTIONS
C| NSEG           |---| 
C| SUSP           |---| 
C| TPS            |---| 
C| VOLNEG         |-->| CUMULATED NEGATIVE VOLUME THROUGH SECTIONS
C| VOLNEGC        |---| 
C| VOLNEGS        |---| 
C| VOLPOS         |-->| CUMULATED POSITIVE VOLUME THROUGH SECTIONS
C| VOLPOSC        |---| 
C| VOLPOSS        |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF_DEF, ONLY: IPID
      USE DECLARATIONS_SISYPHE, ONLY:
     &          SIS_FILES,SISSEO,CHAIN,TITCA
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)          :: NSEC,NCSIZE
      INTEGER, INTENT(IN)          :: CTRLSC(*)
      INTEGER, INTENT(IN)          :: NSEG(NSEC)
      LOGICAL, INTENT(IN)          :: INFO,SUSP,CHARR
      DOUBLE PRECISION, INTENT(IN) :: FLX(NSEC),TPS
      DOUBLE PRECISION, INTENT(IN) :: VOLNEG(NSEC),VOLPOS(NSEC)
      DOUBLE PRECISION, INTENT(IN) :: FLXS(NSEC),FLXC(NSEC)
      DOUBLE PRECISION, INTENT(IN) :: VOLNEGS(NSEC),VOLPOSS(NSEC)
      DOUBLE PRECISION, INTENT(IN) :: VOLNEGC(NSEC),VOLPOSC(NSEC)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION, ALLOCATABLE, SAVE :: WORK(:)
      DOUBLE PRECISION P_DMAX,P_DMIN,P_DSUM
      INTEGER                        P_IMIN
      EXTERNAL         P_DMAX,P_DMIN,P_DSUM,P_IMIN
C
      INTEGER ISEC,II,ERR
      CHARACTER(LEN=16) :: FMTZON='(4(1X,1PG21.14))'
      LOGICAL :: OLD_METHOD=.FALSE.
      LOGICAL, SAVE :: INIT=.TRUE.
      INTEGER, SAVE :: NSEO
C
C-----------------------------------------------------------------------
C
      IF (.NOT.ALLOCATED(CHAIN)) OLD_METHOD=.TRUE.
C
      IF(INFO) THEN
C
      IF (OLD_METHOD) THEN !JAJ #### FOLLOW FLUXPR.F OF BIEF BLINDLY
C
      IF(NCSIZE.LE.1) THEN
C
      DO ISEC = 1,NSEC
C
      IF(LNG.EQ.1) WRITE(LU,130) ISEC,CTRLSC(1+2*(ISEC-1)),
     &                                CTRLSC(2+2*(ISEC-1)),
     &                                FLX(ISEC),
     &                                VOLNEG(ISEC),
     &                                VOLPOS(ISEC)
      IF(LNG.EQ.2) WRITE(LU,131) ISEC,CTRLSC(1+2*(ISEC-1)),
     &                                CTRLSC(2+2*(ISEC-1)),
     &                                FLX(ISEC),
     &                                VOLNEG(ISEC),
     &                                VOLPOS(ISEC)
130   FORMAT(1X,/,1X,'SECTION DE CONTROLE ',1I2,
     &               ' (ENTRE LES POINTS ',1I5,' ET ',1I5,')',//,5X,
     &               'DEBIT :                     ',G16.7,/,5X,
     &               'CUMUL DES DEBITS NEGATIFS : ',G16.7,/,5X,
     &               'CUMUL DES DEBITS POSITIFS : ',G16.7)
131   FORMAT(1X,/,1X,'CONTROL SECTION NUMBER ',1I2,
     &               ' (BETWEEN POINTS ',1I5,' AND ',1I5,')',//,5X,
     &               'DISCHARGE:                 ',G16.7,/,5X,
     &               'CUMULATED NEGATIVE VOLUME: ',G16.7,/,5X,
     &               'CUMULATED POSITIVE VOLUME: ',G16.7)
      IF(SUSP) THEN
        IF(LNG.EQ.1) WRITE(LU,1301) FLXS(ISEC),
     &                              VOLNEGS(ISEC),
     &                              VOLPOSS(ISEC)
        IF(LNG.EQ.2) WRITE(LU,1302) FLXS(ISEC),
     &                              VOLNEGS(ISEC),
     &                              VOLPOSS(ISEC)
1301    FORMAT(5X,'DEBIT EN SUSPENSION :       ',G16.7,/,5X,
     &            'CUMUL DES DEBITS NEGATIFS : ',G16.7,/,5X,
     &            'CUMUL DES DEBITS POSITIFS : ',G16.7)
1302    FORMAT(5X,'DISCHARGE IN SUSPENSION:   ',G16.7,/,5X,
     &            'CUMULATED NEGATIVE VOLUME: ',G16.7,/,5X,
     &            'CUMULATED POSITIVE VOLUME: ',G16.7)
      ENDIF
      IF(CHARR) THEN
        IF(LNG.EQ.1) WRITE(LU,1303) FLXC(ISEC),
     &                              VOLNEGC(ISEC),
     &                              VOLPOSC(ISEC)
        IF(LNG.EQ.2) WRITE(LU,1304) FLXC(ISEC),
     &                              VOLNEGC(ISEC),
     &                              VOLPOSC(ISEC)
1303    FORMAT(5X,'DEBIT EN CHARRIAGE :        ',G16.7,/,5X,
     &            'CUMUL DES DEBITS NEGATIFS : ',G16.7,/,5X,
     &            'CUMUL DES DEBITS POSITIFS : ',G16.7)
1304    FORMAT(5X,'BEDLOAD DISCHARGE:         ',G16.7,/,5X,
     &            'CUMULATED NEGATIVE VOLUME: ',G16.7,/,5X,
     &            'CUMULATED POSITIVE VOLUME: ',G16.7)
      ENDIF
C
      ENDDO
C
      ELSE
C
      DO ISEC = 1,NSEC
C     SECTIONS ACROSS 2 SUB-DOMAINS WILL HAVE NSEG=0 OR -1
C     AND -1 WANTED HERE FOR RELEVANT MESSAGE
      II=P_IMIN(NSEG(ISEC))
C
      IF(II.GE.0) THEN
C
      IF(LNG.EQ.1) WRITE(LU,130) ISEC,CTRLSC(1+2*(ISEC-1)),
     &                                CTRLSC(2+2*(ISEC-1)),
     &                 P_DMIN(FLX(ISEC))+P_DMAX(FLX(ISEC)),
     &                                P_DMIN(VOLNEG(ISEC)),
     &                                P_DMAX(VOLPOS(ISEC))
      IF(LNG.EQ.2) WRITE(LU,131) ISEC,CTRLSC(1+2*(ISEC-1)),
     &                                CTRLSC(2+2*(ISEC-1)),
     &                 P_DMIN(FLX(ISEC))+P_DMAX(FLX(ISEC)),
     &                                P_DMIN(VOLNEG(ISEC)),
     &                                P_DMAX(VOLPOS(ISEC))
      IF(SUSP) THEN
        IF(LNG.EQ.1) WRITE(LU,1301)
     &              P_DMIN(FLXS(ISEC))+P_DMAX(FLXS(ISEC)),
     &                              P_DMIN(VOLNEGS(ISEC)),
     &                              P_DMAX(VOLPOSS(ISEC))
        IF(LNG.EQ.2) WRITE(LU,1302)
     &              P_DMIN(FLXS(ISEC))+P_DMAX(FLXS(ISEC)),
     &                              P_DMIN(VOLNEGS(ISEC)),
     &                              P_DMAX(VOLPOSS(ISEC))
      ENDIF
      IF(CHARR) THEN
        IF(LNG.EQ.1) WRITE(LU,1303)
     &              P_DMIN(FLXC(ISEC))+P_DMAX(FLXC(ISEC)),
     &                              P_DMIN(VOLNEGC(ISEC)),
     &                              P_DMAX(VOLPOSC(ISEC))
        IF(LNG.EQ.2) WRITE(LU,1304)
     &              P_DMIN(FLXC(ISEC))+P_DMAX(FLXC(ISEC)),
     &                              P_DMIN(VOLNEGC(ISEC)),
     &                              P_DMAX(VOLPOSC(ISEC))
      ENDIF
C
      ELSE
C
      IF(LNG.EQ.1) WRITE(LU,134) ISEC,CTRLSC(1+2*(ISEC-1)),
     &                                CTRLSC(2+2*(ISEC-1))
      IF(LNG.EQ.2) WRITE(LU,135) ISEC,CTRLSC(1+2*(ISEC-1)),
     &                                CTRLSC(2+2*(ISEC-1))
134   FORMAT(1X,/,1X,'SECTION DE CONTROLE ',1I2,
     &               ' (ENTRE LES POINTS ',1I5,' ET ',1I5,')',//,5X,
     &               'A CHEVAL SUR DEUX SOUS-DOMAINES, PAS DE CALCUL')
135   FORMAT(1X,/,1X,'CONTROL SECTION NUMBER ',1I2,
     &               ' (BETWEEN POINTS ',1I5,' AND ',1I5,')',//,5X,
     &               'ACROSS TWO SUB-DOMAINS, NO COMPUTATION')
      ENDIF
C
      ENDDO
C
      ENDIF ! NCSIZE
C
C-----------------------------------------------------------------------
C CHAIN ALLOCATED, I.E. SERIAL OR PARALLEL CASE FROM SECTIONS INPUT FILE
C       WE CAN APPLY CO-ORDINATES INSTEAD AND/OR NAMES OF SECTIONS

      ELSE ! .NOT.OLD_METHOD
C
        DO ISEC = 1,NSEC
C
          IF(LNG.EQ.1) WRITE(LU,230) ISEC,TRIM(CHAIN(ISEC)%DESCR),
     &                 P_DSUM(FLX(ISEC)),P_DSUM(VOLNEG(ISEC)),
     &                                   P_DSUM(VOLPOS(ISEC))
          IF(LNG.EQ.2) WRITE(LU,231) ISEC,TRIM(CHAIN(ISEC)%DESCR),
     &                 P_DSUM(FLX(ISEC)),P_DSUM(VOLNEG(ISEC)),
     &                                   P_DSUM(VOLPOS(ISEC))
230       FORMAT(1X,/,1X,'SECTION DE CONTROLE ',1I2,
     &               ' (NOM ',A,')',//,5X,
     &               'DEBIT :                     ',G16.7,/,5X,
     &               'CUMUL DES DEBITS NEGATIFS : ',G16.7,/,5X,
     &               'CUMUL DES DEBITS POSITIFS : ',G16.7)
231       FORMAT(1X,/,1X,'CONTROL SECTION NUMBER ',1I2,
     &               ' (NAME ',A,')',//,5X,
     &               'DISCHARGE:                 ',G16.7,/,5X,
     &               'CUMULATED NEGATIVE VOLUME: ',G16.7,/,5X,
     &               'CUMULATED POSITIVE VOLUME: ',G16.7)
          IF(SUSP) THEN
            IF(LNG.EQ.1) WRITE(LU,2301)
     &              P_DSUM(FLXS(ISEC)),P_DSUM(VOLNEGS(ISEC)),
     &                                 P_DSUM(VOLPOSS(ISEC))
            IF(LNG.EQ.2) WRITE(LU,2302)
     &              P_DSUM(FLXS(ISEC)),P_DSUM(VOLNEGS(ISEC)),
     &                                 P_DSUM(VOLPOSS(ISEC))
2301        FORMAT(5X,'DEBIT EN SUSPENSION :       ',G16.7,/,5X,
     &            'CUMUL DES DEBITS NEGATIFS : ',G16.7,/,5X,
     &            'CUMUL DES DEBITS POSITIFS : ',G16.7)
2302        FORMAT(5X,'DISCHARGE IN SUSPENSION:   ',G16.7,/,5X,
     &            'CUMULATED NEGATIVE VOLUME: ',G16.7,/,5X,
     &            'CUMULATED POSITIVE VOLUME: ',G16.7)
          ENDIF
          IF(CHARR) THEN
            IF(LNG.EQ.1) WRITE(LU,2303)
     &              P_DSUM(FLXC(ISEC)),P_DSUM(VOLNEGC(ISEC)),
     &                                 P_DSUM(VOLPOSC(ISEC))
            IF(LNG.EQ.2) WRITE(LU,2304)
     &              P_DSUM(FLXC(ISEC)),P_DSUM(VOLNEGC(ISEC)),
     &                                 P_DSUM(VOLPOSC(ISEC))
2303        FORMAT(5X,'DEBIT EN CHARRIAGE :        ',G16.7,/,5X,
     &            'CUMUL DES DEBITS NEGATIFS : ',G16.7,/,5X,
     &            'CUMUL DES DEBITS POSITIFS : ',G16.7)
2304        FORMAT(5X,'BEDLOAD DISCHARGE:         ',G16.7,/,5X,
     &            'CUMULATED NEGATIVE VOLUME: ',G16.7,/,5X,
     &            'CUMULATED POSITIVE VOLUME: ',G16.7)
          ENDIF
C
        ENDDO
C
      ENDIF ! IF OLD_METHOD
C
      ENDIF ! IF INFO
C !JAJ ####
C-----------------------------------------------------------------------
C MASTER WRITES A NICE SECTIONS OUTPUT FILE, THE HEADER ONLY ONCE
C NOTE: PROGRAMMED FOR THE BEDL LOAD DISCHARGE ONLY (IF CHARR IMPLIED)
C
      IF ( (.NOT.OLD_METHOD) .AND. CHARR .AND.
     &     (TRIM(SIS_FILES(SISSEO)%NAME).NE.'') ) THEN
        IF (INIT) THEN
          INIT=.FALSE.
          IF ((NCSIZE.GT.1 .AND. IPID.EQ.0).OR.(NCSIZE.LE.1)) THEN
            NSEO=SIS_FILES(SISSEO)%LU
            WRITE(NSEO,*) 'TITLE = "BEDLOAD DISCHARGES FOR ',
     &                     TRIM(TITCA),'"'
            WRITE(NSEO,*) 'VARIABLES = T',
     &           (' '//TRIM(CHAIN(ISEC)%DESCR), ISEC=1,NSEC)
          ENDIF
          IF (NCSIZE.GT.1) THEN
            ALLOCATE (WORK(NSEC), STAT=ERR)
            IF (ERR.NE.0) THEN
              WRITE(LU,*) 'FLUXPR_SISYPHE: ERROR ALLOCATING WORK:',ERR
              CALL PLANTE(1)
              STOP
            ENDIF
          ENDIF
        ENDIF
        ! DEADLOCK WITH WRITE AND P_DSUM IN AN IMPLIED WRITE LOOP
        ! BECAUSE IT IS ONLY MASTER TO WRITE THE MESSAGE...
        IF (NCSIZE.GT.1) THEN
          DO ISEC=1,NSEC
            WORK(ISEC)=P_DSUM(FLXC(ISEC))
          END DO
          IF (IPID.EQ.0)
     &      WRITE (NSEO, FMT=FMTZON) TPS, (WORK(ISEC), ISEC=1,NSEC)
        ELSE
          WRITE (NSEO, FMT=FMTZON) TPS, (FLXC(ISEC), ISEC=1,NSEC)
        ENDIF
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE FLUXPR_SISYPHE
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       1) ACQUIRES THE DATA REQUIRED TO DEFINE THE POINTERS:
!>                   STEERING FILE + GEOMETRY FILE (PARTIALLY ONLY).
!><br>            2) CALLS THE SUBROUTINE SISYPHE.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::MAXLU_SIS MAXLU_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::SIS_FILES SIS_FILES@endlink, 
!> @link DECLARATIONS_SISYPHE::T1 T1@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CODE, DUMINT, DUMLOG, FILE_DESC, IFLOT, MOTCAR, NCAR, PATH, TDEB, TFIN
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BIEF_CLOSE_FILES(), BIEF_INIT(), BIEF_OPEN_FILES(), LECDON_SISYPHE(), POINT_SISYPHE(), SISYPHE(), TIME_IN_SECONDS()
!>   </td></tr>
!>     </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 09/04/2009
!> </td><td> C LE NORMANT (LNH) 30 87 78 54
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
                        PROGRAM HOMERE_SISYPHE
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_SISYPHE
      USE INTERFACE_SISYPHE
C
      IMPLICIT NONE
      INTEGER     LNG,LU
      COMMON/INFO/LNG,LU
C
      INTEGER TDEB,TFIN,IFLOT,NCAR,DUMINT
      LOGICAL DUMLOG
C
      CHARACTER(LEN=24), PARAMETER :: CODE='SISYPHE                 '
C
      CHARACTER(LEN=250) PATH
      CHARACTER(LEN=144) MOTCAR(300),FILE_DESC(4,300)
C
      INTEGER  TIME_IN_SECONDS
      EXTERNAL TIME_IN_SECONDS
C
C======================================================================
C
      CALL BIEF_INIT(CODE,PATH,NCAR,.TRUE.)
C
      TDEB = TIME_IN_SECONDS()
C
C  HEADING TO THE LISTING
C
      IF(LNG.EQ.1) WRITE(LU,100)
      IF(LNG.EQ.2) WRITE(LU,101)
      WRITE(LU,102)
100   FORMAT(/////,1X,'LISTING DE SISYPHE ',78('-'))
101   FORMAT(/////,1X,'LISTING OF SISYPHE ',78('-'))
102   FORMAT(/////,
     &14X,'    SSSS I   SSSS Y   Y PPPP  H   H EEEEE',/,
     &14X,'   S     I  S      Y Y  P   P H   H E    ',/,
     &14X,'    SSS  I   SSS    Y   PPPP  HHHHH EEEE  ',/,
     &14X,'       S I      S   Y   P     H   H E     ',/,
     &14X,'   SSSS  I  SSSS    Y   P     H   H EEEEE',/,
     &14X,'                                          ',/,
     &14X,'                 VERSION 6.0              ',/,
     &14X,/////)
C
C-----------------------------------------------------------------------
C
C READS THE STEERING FILE
C
      CALL LECDON_SISYPHE(MOTCAR,FILE_DESC,PATH,NCAR,CODE)
C
C-----------------------------------------------------------------------
C
      IFLOT = 0
      CALL BIEF_OPEN_FILES(CODE,SIS_FILES,MAXLU_SIS,
     &                     PATH,NCAR,.FALSE.,IFLOT,2)
C
C-----------------------------------------------------------------------
C
C ALLOCATES VECTORS, MATRICES AND BLOCKS
C
      CALL POINT_SISYPHE
C
C-----------------------------------------------------------------------
C
C  CALLS THE SUBROUTINE SISYPHE
C  -1 GOES THROUGH THE WHOLE SUBROUTINE BECAUSE THERE IS NO COUPLING
C  THE OTHER VARIABLES ARE ONLY USED WHEN COUPLING
C
C     INOUT VARIABLES IN SISYPHE CANNOT BE HARD-CODED
      DUMINT=1
      DUMLOG=.FALSE.
C
      CALL SISYPHE(-1,0,0,0,0,T1,T1,T1,T1,T1,T1,T1,T1,
     &             DUMLOG,DUMINT,DUMLOG,CODE,1,
     &             T1,T1,0.D0,T1,0.D0,DUMLOG,DUMLOG,
     &             T1,1,T1,T1,T1,T1)
C
C-----------------------------------------------------------------------
C
      CALL BIEF_CLOSE_FILES(CODE,SIS_FILES,MAXLU_SIS,.TRUE.)
C
C-----------------------------------------------------------------------
C
      IF(LNG.EQ.1) WRITE(LU,10)
      IF(LNG.EQ.2) WRITE(LU,11)
10    FORMAT(1X,///,1X,'FIN NORMALE DU PROGRAMME',///)
11    FORMAT(1X,///,1X,'CORRECT END OF RUN',///)
C
C-----------------------------------------------------------------------
C
      TFIN = TIME_IN_SECONDS()
      IF(LNG.EQ.1) THEN
        WRITE(LU,*) 'DUREE DU CALCUL : ',TFIN-TDEB,' SECONDES'
      ENDIF
      IF(LNG.EQ.2) THEN
        WRITE(LU,*) 'COMPUTER TIME: ',TFIN-TDEB,' SECONDS'
      ENDIF
C
C-----------------------------------------------------------------------
C
      STOP
      END PROGRAM HOMERE_SISYPHE
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       INITIAL FRACTION DISTRIBUTION AND LAYER THICKNESS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note   PHILOSOPHY: INIT_COMPO DEFINES THE STRATIFICATION CORRESPONDING
!>                TO THE BOTTOM INITIAL COMPOSITION; NCOUCHES CORRESPONDS
!>                TO THE NUMBER OF REAL INITIAL LAYERS.
!>  @note         INIT_AVAI CORRECTS AND SUPPLEMENTS THIS STRATIFICATION
!>                IF PROBLEMS, AND ADDS THE ACTIVE LAYER; NLAYER CORRESPONDS
!>                TO THE NUMBER OF LAYERS USED IN THE COMPUTATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::AVAIL AVAIL@endlink, 
!> @link DECLARATIONS_SISYPHE::DEBU DEBU@endlink, 
!> @link DECLARATIONS_SISYPHE::ELAY ELAY@endlink, 
!> @link DECLARATIONS_SISYPHE::ELAY0 ELAY0@endlink, 
!> @link DECLARATIONS_SISYPHE::ES ES@endlink, 
!> @link DECLARATIONS_SISYPHE::ESTRAT ESTRAT@endlink, 
!> @link DECLARATIONS_SISYPHE::IT1 IT1@endlink, 
!> @link DECLARATIONS_SISYPHE::NLAYER NLAYER@endlink, 
!> @link DECLARATIONS_SISYPHE::NOMBLAY NOMBLAY@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::VOLTOT VOLTOT@endlink, 
!> @link DECLARATIONS_SISYPHE::VOLU2D VOLU2D@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF ZF@endlink, 
!> @link DECLARATIONS_SISYPHE::ZR ZR@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> HAUTSED, I, J, K, NMAXI, TEST1
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_INIT_AVAI
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> INIT_COMPO(), PLANTE(), P_DSUM()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_SEDIMENT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 2002/2003
!> </td><td> MATTHIEU GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 2002
!> </td><td> BUI MINH DUC
!> </td><td> INITIAL FRACTION DISTRIBUTION FOR NON-UNIFORM BED MATERIALS
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AVAIL
!></td><td><--</td><td>SEDIMENT FRACTION FOR EACH LAYER, CLASS, NODE
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td><--</td><td>ACTIVE LAYER THICKNESS FOR EACH POINT
!>    </td></tr>
!>          <tr><td>ELAY0
!></td><td>--></td><td>WANTED ACTIVE LAYER THICKNESS
!>    </td></tr>
!>          <tr><td>ES
!></td><td><--</td><td>THICKNESS FOR EACH LAYER AND NODE
!>    </td></tr>
!>          <tr><td>ESTRAT
!></td><td><--</td><td>ACTIVE STRATUM THICKNESS FOR EACH POINT
!>    </td></tr>
!>          <tr><td>NLAYER
!></td><td><--</td><td>NUMBER OF LAYER FOR EACH POINT
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>--></td><td>BOTTOM
!>    </td></tr>
!>          <tr><td>ZR
!></td><td>--></td><td>RIGID BOTTOM
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                          SUBROUTINE INIT_AVAI
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AVAIL          |<--| SEDIMENT FRACTION FOR EACH LAYER, CLASS, NODE
C| ELAY           |<--| ACTIVE LAYER THICKNESS FOR EACH POINT
C| ELAY0          |-->| WANTED ACTIVE LAYER THICKNESS
C| ES             |<--| THICKNESS FOR EACH LAYER AND NODE
C| ESTRAT         |<--| ACTIVE STRATUM THICKNESS FOR EACH POINT
C| NLAYER         |<--| NUMBER OF LAYER FOR EACH POINT
C| ZF             |-->| BOTTOM
C| ZR             |-->| RIGID BOTTOM
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_SISYPHE
      USE INTERFACE_SISYPHE,EX_INIT_AVAI=> INIT_AVAI
C
      IMPLICIT NONE
C
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C-----------------------------------------------------------------------
C
      DOUBLE PRECISION P_DSUM
      EXTERNAL         P_DSUM
C
      INTEGER I,J,K,NMAXI
C
      DOUBLE PRECISION HAUTSED,TEST1
C
C-----------------------------------------------------------------------
C
      NMAXI = 0
C
C     THE INITIAL NUMBER OF LAYERS, THEIR THICKNESS AND THEIR COMPOSITION
C     ARE SET BY THE USER
C
C     NOTE: WHEN COMPUTATION CONTINUED INIT_COMPO MUST NOT
C           CHANGE ES AND AVAIL
C
      IF(DEBU) THEN
C       TENTATIVE VALUE, THIS IS TO CHECK
!       ADDED BY JMH 30/06/2010
        DO J=1,NPOIN
          I=1
          DO K=2,NOMBLAY
            IF(ES(J,K).GT.0.D0) I = I + 1
          ENDDO
          NLAYER%I(J)=I
!         CHECKING ALL LAYERS AND CORRECTING AVAIL
!         DUE TO POSSIBLE SHIFT OF SINGLE PRECISION STORAGE
          DO K=1,NLAYER%I(J)
            TEST1=0.D0
            DO I=1,NSICLA
              TEST1=TEST1+AVAIL(J,K,I)
            ENDDO
            IF(TEST1.GT.1.D-10.AND.(TEST1-1.D0)**2.GT.1.D-10) THEN
              DO I=1,NSICLA
                AVAIL(J,K,I)=AVAIL(J,K,I)/TEST1
              ENDDO
            ENDIF
          ENDDO
        ENDDO
      ELSE
        CALL INIT_COMPO(IT1%I)
C
        DO 45 J=1,NPOIN
C
C       10 IS THE MAXIMUM NUMBER OF LAYERS ALLOWED
        NLAYER%I(J) = IT1%I(J)
        IF(NLAYER%I(J).GT.10) THEN
          IF(LNG.EQ.1) WRITE(LU,1800)
          IF(LNG.EQ.2) WRITE(LU,1815)
          CALL PLANTE(1)
          STOP
        ENDIF
C
C       THE HEIGHT OF SEDIMENT (SUM OF ES) MUST NOT BE MORE THAN ZF-ZR
C       IF SO, THE HEIGHT OF THE LAST LAYER IS REDUCED
C       IF THERE ARE LAYERS UNDER ZR, THEY ARE NOT TAKEN INTO ACCOUNT
        HAUTSED = 0.D0
        DO K=1,IT1%I(J)
        IF(HAUTSED + ES(J,K) .GE. ZF%R(J) - ZR%R(J)) THEN
          ES(J,K) = ZF%R(J) - ZR%R(J) -  HAUTSED
          NLAYER%I(J) = K
          HAUTSED = HAUTSED + ES(J,K)
          GOTO 144
        ENDIF
        HAUTSED = HAUTSED + ES(J,K)
        ENDDO
C
144     CONTINUE
C
C       THE THICKNESS OF THE LAST LAYER IS ENLARGED SO THAT
C       THE HEIGHT OF SEDIMENT (SUM OF ES) IS EQUAL TO ZF-ZR
        IF(HAUTSED.LT.ZF%R(J)-ZR%R(J)) THEN
          ES(J,NLAYER%I(J))=ES(J,NLAYER%I(J))+ZF%R(J)-ZR%R(J)-HAUTSED
        ENDIF
C
        IF(NLAYER%I(J).GT.1) THEN
C         IT IS ASSUMED THAT ELAY0 IS SMALLER THAN THE FIRST STRATUM
C         NEED TO ADD THE CASE WHERE ELAY0 IS LARGER
          IF(ELAY0.GT.ES(J,1)) THEN
            IF(LNG.EQ.1) THEN
              WRITE(LU,*) 'COUCHE ACTIVE TROP GROSSE/STRATIFICATION'
            ENDIF
            IF(LNG.EQ.2) THEN
              WRITE(LU,*) ' ACTIVE LAYER TOO BIG/STRATIFICATION'
            ENDIF
            CALL PLANTE(1)
            STOP
          ENDIF
        ENDIF
C       THE FIRST STRATUM IS SEPARATED BETWEEN ACTIVE LAYER + ACTIVE STRATUM
        IF(ELAY0.LT.ES(J,1)) THEN
          NLAYER%I(J) = NLAYER%I(J) + 1
          IF(NLAYER%I(J).GT.10) THEN
            IF(LNG.EQ.1) WRITE(LU,1800)
            IF(LNG.EQ.2) WRITE(LU,1815)
            CALL PLANTE(1)
            STOP
          ENDIF
C         INDICES FOR ES AND AVAIL NEED TO BE OFFSET
          IF(NLAYER%I(J).GT.2) THEN
            DO K=NLAYER%I(J),3,-1
              ES(J,K) = ES(J,K-1)
            ENDDO
          ENDIF
          ES(J,2) = ES(J,1) - ELAY0
          ES(J,1) = ELAY0
          DO I=1,NSICLA
            DO K=NLAYER%I(J),2,-1
              AVAIL(J,K,I) = AVAIL(J,K-1,I)
            ENDDO
          ENDDO
        ENDIF
C
45      CONTINUE
C
      ENDIF
C
      NMAXI=0
      DO J=1,NPOIN
        ELAY%R(J) = ES(J,1)
        IF(NLAYER%I(J).GT.1) THEN
          ESTRAT%R(J) = ES(J,2)
        ENDIF
C       TO RE-EXAMINE :
C       UNUSED AVAIL ARE FILLED WITH ZEROS, IS IT BETTER !!!???
        IF(NLAYER%I(J).LT.10) THEN
          DO I = 1, NSICLA
            DO K = NLAYER%I(J)+1,10
              AVAIL(J,K,I) = 0.D0
            ENDDO
          ENDDO
        ENDIF
        IF(NLAYER%I(J).GT.NMAXI) NMAXI = NLAYER%I(J)
      ENDDO
C
C     COMPUTES THE TOTAL VOLUME OF SEDIMENTS IN EACH CLASS
C
      DO I=1,NSICLA
        VOLTOT(I)=0.D0
        DO J=1,NPOIN
          DO K=1,NLAYER%I(J)
            VOLTOT(I) = VOLTOT(I) + ES(J,K)*AVAIL(J,K,I)*VOLU2D%R(J)
          ENDDO
        ENDDO
      ENDDO
C
      IF(NCSIZE.GT.1) THEN
        DO I=1,NSICLA
          VOLTOT(I) = P_DSUM(VOLTOT(I))
        ENDDO
      ENDIF
C
      WRITE(LU,*) 'MAXIMUM INITIAL NUMBER OF LAYERS :',NMAXI
      DO I=1,NSICLA
        IF(LNG.EQ.1) THEN
          WRITE(LU,*)'VOLUME TOTAL DE LA CLASSE ',I ,' :',VOLTOT(I)
        ENDIF
        IF(LNG.EQ.1) THEN
          WRITE(LU,*)'TOTAL VOLUME OF CLASS ',I ,' :',VOLTOT(I)
        ENDIF
      ENDDO
C
C-----------------------------------------------------------------------
C
1800  FORMAT(1X,'IL Y A PLUS DE 10 COUCHES DANS LA STRATIFICATION')
1815  FORMAT(1X,'THERE ARE MORE THAN 10 LAYERS IN THE STRATIFICATION')
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       INITIAL FRACTION DISTRIBUTION, STRATIFICATION,
!>                VARIATION IN SPACE.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @warning  USER SUBROUTINE; MUST BE CODED BY THE USER
!>  @code
!>  EXAMPLE:
!>      NCOUCHES(J) = 10
!>      ES(J,1) = 1.D0
!>      ES(J,2) = 1.D0
!>      ES(J,3) = 1.D0
!>      ES(J,4) = 1.D0
!>      ES(J,5) = 1.D0
!>      ES(J,6) = 1.D0
!>      ES(J,7) = 1.D0
!>      ES(J,8) = 1.D0
!>      ES(J,9) = 1.D0
!>        DO I = 1, NSICLA
!>          DO K = 1, NCOUCHES(J)
!>          AVAIL(J,K,I) = AVA0(I)
!>          ENDDO
!>        ENDDO
!>  @endcode

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> NCOUCHES
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::AVA0 AVA0@endlink, 
!> @link DECLARATIONS_SISYPHE::AVAIL AVAIL@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I, J
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_AVAI()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 2002
!> </td><td> MATTHIEU GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AVAIL
!></td><td><--</td><td>SEDIMENT FRACTION FOR EACH LAYER, CLASS AND NODE
!>                  AVAIL(NPOIN,10,NSICLA)
!>    </td></tr>
!>          <tr><td>ES
!></td><td><--</td><td>THICKNESS FOR EACH LAYER AND NODE ES(NPOIN,10)
!>    </td></tr>
!>          <tr><td>NCOUCHES
!></td><td>--></td><td>NUMBER OF LAYER FOR EACH POINT
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF NODES
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>--></td><td>NUMBER OF SIZE-CLASSES OF BED MATERIAL
!>                  (LESS THAN 10)
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                          SUBROUTINE INIT_COMPO
     &(NCOUCHES)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AVAIL          |<--| SEDIMENT FRACTION FOR EACH LAYER, CLASS AND NODE
C|                |   | AVAIL(NPOIN,10,NSICLA)
C| ES             |<--| THICKNESS FOR EACH LAYER AND NODE ES(NPOIN,10)
C| NCOUCHES       |-->| NUMBER OF LAYER FOR EACH POINT
C| NPOIN          |-->| NUMBER OF NODES
C| NSICLA         |-->| NUMBER OF SIZE-CLASSES OF BED MATERIAL
C|                |   | (LESS THAN 10)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_SISYPHE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
C                                       NPOIN
      INTEGER, INTENT (INOUT)::NCOUCHES(*)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I , J
C
C-----------------------------------------------------------------------
C
      DO J=1,NPOIN
C
C       BY DEFAULT : UNIFORM BED COMPOSITION
C
          NCOUCHES(J) = 1
          DO I = 1, NSICLA
            AVAIL(J,1,I) = AVA0(I)
            AVAIL(J,2,I) = AVA0(I)
          ENDDO
C
C  TO BE FILLED BY THE USER
C      NCOUCHES(J) = 10
C      ES(J,1) = 1.D0
C      ES(J,2) = 1.D0
C      ES(J,3) = 1.D0
C      ES(J,4) = 1.D0
C      ES(J,5) = 1.D0
C      ES(J,6) = 1.D0
C      ES(J,7) = 1.D0
C      ES(J,8) = 1.D0
C      ES(J,9) = 1.D0
C        DO I = 1, NSICLA
C          DO K = 1, NCOUCHES(J)
C          AVAIL(J,K,I) = AVA0(I)
C          ENDDO
C        ENDDO
C
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       SETS THE CONSTANTS USED BY SISYPHE.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> KARIM_HOLLY_YANG, KARMAN, PI
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.7                                       </center>
!> </td><td> 11/01/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>KARIM_HOLLY_YANG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                      SUBROUTINE INIT_CONSTANT
     &(KARIM_HOLLY_YANG,KARMAN,PI)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| KARIM_HOLLY_YAN|---| 
C| KARMAN         |---| 
C| PI             |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION, INTENT(INOUT) :: KARIM_HOLLY_YANG
      DOUBLE PRECISION, INTENT(INOUT) :: KARMAN
      DOUBLE PRECISION, INTENT(INOUT) :: PI
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
!
C KARIM, HOLLY & YANG CONSTANT
! ----------------------------
!
      KARIM_HOLLY_YANG = 0.85D0
!
C VON KARMAN CONSTANT
! -------------------
!
      KARMAN = 0.4D0
!
C PARTHENIADES CONSTANT : EXPRESSED IN M/S
! ---------------------
C THIS VALUE IS NOW GIVEN IN USER_KRONE_PART
C      PARTHENIADES = 2.D-5/XMVS
!
C PI
! --
!
      PI =ACOS(-1.D0)
!
!======================================================================!
!
      RETURN
      END SUBROUTINE
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief  

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AVA0, AVAIL, CONC_VASE, ELAY, ES, MS_SABLE, MS_VASE, NCOUCH_TASS, NPOIN, NSICLA, XMVS, ZF, ZR
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> DIFF, EPAI_SABLE, EPAI_VASE, I, J
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_SEDIMENT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td>
!> </td><td>
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AVA0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CONC_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZR
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE INIT_MIXTE
     &(XMVS,NPOIN,AVAIL,NSICLA,ES,ELAY,NCOUCH_TASS,CONC_VASE,
     & MS_SABLE,MS_VASE,ZF,ZR,AVA0)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AVA0           |---| 
C| AVAIL          |---| 
C| CONC_VASE      |---| 
C| ELAY           |---| 
C| ES             |---| 
C| MS_SABLE       |---| 
C| MS_VASE        |---| 
C| NCOUCH_TASS    |---| 
C| NPOIN          |---| 
C| NSICLA         |---| 
C| XMVS           |---| 
C| ZF             |---| 
C| ZR             |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)             :: NPOIN,NSICLA,NCOUCH_TASS
      DOUBLE PRECISION, INTENT(IN)    :: XMVS
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10),ELAY(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: ZR(NPOIN),ZF(NPOIN)
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_SABLE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_VASE(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)    :: CONC_VASE(10)
      DOUBLE PRECISION, INTENT(IN)   :: AVA0(NSICLA)
C
C-----------------------------------------------------------------------
C     LOCAL VARIABLES
C
      INTEGER I,J
C
      DOUBLE PRECISION EPAI_VASE(10),EPAI_SABLE(10)
      DOUBLE PRECISION DIFF
C
C ------------------------------------------------------------------------
C
C*******INITIAL SEDIMENT COMPOSITION IS IDENTICAL AT EACH NODE
C DEFAULT INITIALISATION: ALL LAYERS ARE EMPTY EXCEPT BED LAYER
C OTHERWISE SET THICKNESS OF THE MUD LAYERS IN EPAI_VASE(I= 1, NCOUCH_TASS-1)

      IF(NCOUCH_TASS.GT.1) THEN

        DO J= 1,NCOUCH_TASS-1
          EPAI_VASE(J) = 0.D0
        ENDDO
C
C       EXAMPLE FOR NCOUCH_TASS= 10
C
C       EPAI_VASE(1)=0.0525D0
C       EPAI_VASE(2)=0.0385D0
C       EPAI_VASE(3)=0.03995D0
C       EPAI_VASE(4)=0.0437D0
C       EPAI_VASE(5)=0.0517D0
C       EPAI_VASE(6)=0.1259D0
C       EPAI_VASE(7)=0.4889D0
C       EPAI_VASE(8)=1.5071D0
C       EPAI_VASE(9)=0.86410D0
C
        DO J=1,NCOUCH_TASS-1
          IF(NSICLA.GT.1) THEN
            EPAI_SABLE(J) = AVA0(1)/AVA0(2)*EPAI_VASE(J)
          ENDIF
        ENDDO
C
      ENDIF
C
C     COMPLETING THE LAST LAYER SO THAT SUM OF LAYERS = ZF-ZR
C
      DO I=1,NPOIN
        ELAY(I)=0.D0
        IF(NCOUCH_TASS.GT.1) THEN
          DO J=1,NCOUCH_TASS-1
            ES(I,J)= EPAI_VASE(J)
            IF(NSICLA.GT.1) THEN
              ES(I,J)= ES(I,J)  + EPAI_SABLE(J)
            ENDIF
            ELAY(I)=ELAY(I)+ES(I,J)
          ENDDO
        ENDIF
        DIFF= (ZF(I)-ZR(I)) - ELAY(I)
        IF(DIFF.GE.0.D0) THEN
          ES(I,NCOUCH_TASS) = DIFF
          ELAY(I) = ZF(I)-ZR(I)
        ELSE
          ES(I,NCOUCH_TASS) = 0.D0
          WRITE(LU,*) 'ERROR IN INIT-MIXTE: THE SUM OF THICKNESS'
          WRITE(LU,*) 'OF BED LAYERS > ERODIBLE BED MATERIAL'
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDDO
C
C     COMPUTING THE INITIAL MASSES OF MUD AND SAND
C
      DO I=1,NPOIN
C
        DO J=1,NCOUCH_TASS
C
C         FILLING VOIDS BETWEEN SAND GRAINS
C
          IF(NSICLA.EQ.1) THEN
C
C           PURE MUD
            MS_VASE(I,J) = ES(I,J)*CONC_VASE(J)
            AVAIL(I,J,1) = 1.D0
C
          ELSE
C
C           IF MIXED
            MS_VASE(I,J) = ES(I,J)*CONC_VASE(J)*AVA0(2)
            MS_SABLE(I,J)= ES(I,J)*XMVS*AVA0(1)
            IF(ES(I,J).GE.1.D-6) THEN
              AVAIL(I,J,1)= AVA0(1)
              AVAIL(I,J,2)= AVA0(2)
            ELSE
              AVAIL(I,J,1)= 0.D0
              AVAIL(I,J,2)= 0.D0
            ENDIF
C
          ENDIF
        ENDDO
C
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief  

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AVA0, AVAIL, CALAC, CALWC, CONC_VASE, ELAY, ES, FDM, FRACSED_GF, GRAV, LGRAFED, MS_SABLE, MS_VASE, NCOUCH_TASS, NPOIN, NSICLA, SEDCO, UNLADM, VCE, XMVE, XMVS, XWC, ZF, ZR
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> DENS, DSTAR, I, J
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_INIT_SEDIMENT
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> INIT_AVAI(), INIT_MIXTE(), OS(), VITCHU_SISYPHE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 16/09/2009
!> </td><td> JMH
!> </td><td> AVAIL(NPOIN,10,NSICLA)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 30/12/2008
!> </td><td> C. VILLARET (LNHE) 01 30 87 83 28
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVA0
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>AVAI
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CALAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CALWC
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CHOIX
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CONC_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FDM
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>FRACSED_GF
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>GRAVITY ACCELERATION
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>WATER DEPTH
!>    </td></tr>
!>          <tr><td>LGRAFED
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>MS_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF POINTS
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>--></td><td>NUMBER OF SEDIMENT CLASSES
!>    </td></tr>
!>          <tr><td>SEDCO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>Z
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>--></td><td>BOTTOM
!>    </td></tr>
!>          <tr><td>ZR
!></td><td>--></td><td>NON ERODABLE BED
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE INIT_SEDIMENT
     &(NSICLA,ELAY,ZF,ZR,NPOIN,AVAIL,FRACSED_GF,AVA0,
     & LGRAFED,CALWC,XMVS,XMVE,GRAV,VCE,XWC,FDM,
     & CALAC,AC,SEDCO,ES,NCOUCH_TASS,CONC_VASE,
     & MS_SABLE,MS_VASE,ACLADM,UNLADM)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AVA0           |-->| 
C| AVAI           |-->| 
C| AVAIL          |-->| 
C| CALAC          |---| 
C| CALWC          |-->| 
C| CHOIX          |-->| 
C| CONC_VASE      |---| 
C| ELAY           |-->| 
C| ES             |---| 
C| FDM            |-->| 
C| FRACSED_GF     |-->| 
C| GRAV           |-->| GRAVITY ACCELERATION
C| HN             |-->| WATER DEPTH
C| LGRAFED        |-->| 
C| MESH           |-->| 
C| MS_SABLE       |---| 
C| MS_VASE        |---| 
C| NCOUCH_TASS    |---| 
C| NPOIN          |-->| NUMBER OF POINTS
C| NSICLA         |-->| NUMBER OF SEDIMENT CLASSES
C| SEDCO          |---| 
C| UNLADM         |---| 
C| VCE            |-->| 
C| XMVE           |-->| 
C| XMVS           |-->| 
C| XWC            |-->| 
C| Z             |-->| 
C| ZF             |-->| BOTTOM
C| ZR             |-->| NON ERODABLE BED
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE INTERFACE_SISYPHE, EX_INIT_SEDIMENT => INIT_SEDIMENT
!
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER,           INTENT(IN)     :: NSICLA,NPOIN,NCOUCH_TASS
      TYPE(BIEF_OBJ),    INTENT(INOUT)  :: ELAY,ZF,ZR
      TYPE(BIEF_OBJ), INTENT(INOUT)     :: MS_SABLE, MS_VASE
      TYPE(BIEF_OBJ),    INTENT(INOUT)  :: ACLADM, UNLADM
      LOGICAL,           INTENT(IN)     :: LGRAFED,CALWC
      LOGICAL,           INTENT(IN)     :: CALAC
      DOUBLE PRECISION,  INTENT(IN)     :: XMVS,XMVE,GRAV,VCE
      DOUBLE PRECISION,  INTENT(INOUT)  :: AVA0(NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: FRACSED_GF(NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: FDM(NSICLA),XWC(NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: AC(NSICLA)
C
      LOGICAL,           INTENT(IN)     :: SEDCO(NSICLA)
C
C IF SEDCO(1) OR SEDCO(2) = YES --> CONSOLIDATION MODEL
C
C
      DOUBLE PRECISION, INTENT(IN)    :: CONC_VASE(10)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER            :: I,J
      DOUBLE PRECISION   :: DENS,DSTAR
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C  ------ BED COMPOSITION
!
        CALL OS('X=Y-Z   ',X=ELAY,Y=ZF,Z=ZR)
!
C     ONLY ONE CLASS
C
      IF(NSICLA.EQ.1) THEN
         DO I=1,NPOIN
          AVAIL(I,1,1) = 1.D0
          ACLADM%R(I) = FDM(1)
        ENDDO
C     PURE MUD ONLY
        IF(SEDCO(1)) CALL INIT_MIXTE(XMVS,NPOIN,AVAIL,NSICLA,ES,
     &                               ELAY%R,NCOUCH_TASS,CONC_VASE,
     &                                  MS_SABLE%R,MS_VASE%R,ZF%R,
     &                                               ZR%R,AVA0)
C
      ELSE
C
C     NON-COHESIVE, MULTI-CLASSES
C
        IF(.NOT.SEDCO(2)) THEN
          CALL INIT_AVAI
C         CALL MEAN_GRAIN_SIZE
C THIS PART CAN BE INTEGRATED INTO INIT_AVAI
          DO J=1,NPOIN
            ACLADM%R(J) = 0.D0
            UNLADM%R(J) = 0.D0
            DO I=1,NSICLA
              IF(AVAIL(J,1,I).GT.0.D0) THEN
                ACLADM%R(J) = ACLADM%R(J) + FDM(I)*AVAIL(J,1,I)
                UNLADM%R(J) = UNLADM%R(J) + FDM(I)*AVAIL(J,2,I)
              ENDIF
            ENDDO
            ACLADM%R(J)=MAX(ACLADM%R(J),0.D0)
            UNLADM%R(J)=MAX(UNLADM%R(J),0.D0)
          ENDDO
        ELSE
C        MIXED (NON COHESIVE /COHESIVE)
          CALL INIT_MIXTE(XMVS,NPOIN,AVAIL,NSICLA,ES,ELAY%R,
     &                     NCOUCH_TASS,CONC_VASE,MS_SABLE%R,
     &                     MS_VASE%R,ZF%R,ZR%R,AVA0)
          DO I=1,NPOIN
            ACLADM%R(I) = FDM(1)
          ENDDO
        ENDIF
C
      ENDIF
C
      IF(LGRAFED) THEN
        DO I=1, NSICLA
          FRACSED_GF(I)=AVA0(I)
        ENDDO
      ENDIF
C
C
C ------ SETTLING VELOCITY
C
      IF(.NOT.CALWC) THEN
        DENS = (XMVS - XMVE) / XMVE
        DO I = 1, NSICLA
          CALL VITCHU_SISYPHE(XWC(I),DENS,FDM(I),GRAV,VCE)
        ENDDO
      ENDIF
C
C------ SHIELDS PARAMETER
C
      IF(.NOT.CALAC) THEN
        DENS  = (XMVS - XMVE )/ XMVE
        DO I = 1, NSICLA
          DSTAR = FDM(I)*(GRAV*DENS/VCE**2)**(1.D0/3.D0)
          IF (DSTAR <= 4.D0) THEN
            AC(I) = 0.24*DSTAR**(-1.0D0)
          ELSEIF (DSTAR <= 10.D0) THEN
            AC(I) = 0.14D0*DSTAR**(-0.64D0)
          ELSEIF (DSTAR <= 20.D0) THEN
            AC(I) = 0.04D0*DSTAR**(-0.1D0)
          ELSEIF (DSTAR <= 150.D0) THEN
            AC(I) = 0.013D0*DSTAR**(0.29D0)
          ELSE
            AC(I) = 0.055D0
          ENDIF
        ENDDO
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief  

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AVAIL, BIJK, CALFA, CF, CHARR, CMAX, COEFPN, CORR_CONV, CS, CS0, CSTAEQ, DEBU, FD90, FDM, FW, GRAV, HIDFAC, HIDING, HMIN, HN, HOULE, ICF, ICQ, IELMT, IMP_INFLOW_C, KARMAN, KSP, KSR, MESH, MU, NPOIN, NSICLA, PARTHENIADES, PI, QS, QSCL, QSCLXS, QSCLYS, QSCL_C, QSCL_S, QSXC, QSYC, QS_C, QS_S, SALFA, SECCURRENT, SEDCO, SLOPEFF, SUSP, T1, T10, T11, T12, T14, T2, T3, T4, T5, T6, T7, T8, T9, THETAW, TOB, TOBW, TROUVE, TW, U2D, UCONV, UNLADM, UNORM, UW, V2D, VCE, VCONV, VITCD, VITCE, XKV, XMVE, XMVS, XWC, ZERO, ZREF
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::NOMBLAY NOMBLAY@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AAA, AT0, I, J, USTARP
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_INIT_TRANSPORT
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_FORMULA(), CONDIM_SUSP(), OS(), SUSPENSION_BIJKER(), SUSPENSION_CONV(), SUSPENSION_FREDSOE(), SUSPENSION_ROUSE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td>
!> </td><td> C. VILLARET (LNHE) 01 30 87 83 28
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                        </center>
!> </td><td> 07/12/2009
!> </td><td> JMH
!> </td><td> MODIFICATIONS FOR RESTART WITH WARNINGS WHEN A VARIABLE
!>           THAT SHOULD HAVE BEEN IN THE PREVIOUS COMPUTATION FILE
!>           IS REINITIALISED HERE
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 16/09/2009
!> </td><td> JMH
!> </td><td> AVAIL(NPOIN,10,NSICLA)
!> </td></tr>
!>      <tr>
!>      <td><center>                                        </center>
!> </td><td> 24/01/2008
!> </td><td> JMH
!> </td><td> TEST 'IF(CHARR.OR.SUSP)' ADDED AT THE END
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BIJK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CHARR
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CMAX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>COEFPN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CORR_CONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSTAEQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBU
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>FD90
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FDM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDFAC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIDING
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>WATER DEPTH
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IMP_INFLOW_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>--></td><td>NUMBER OF SEDIMENT CLASSES
!>    </td></tr>
!>          <tr><td>PARTHENIADES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLXS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLYS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCL_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSXC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSYC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SALFA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SECCURRENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SEDCO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLOPEFF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SUSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T11
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T12
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T14
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T5
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T6
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TROUVE
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNORM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE INIT_TRANSPORT
     &(TROUVE,DEBU,HIDING,NSICLA,NPOIN,
     & T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T14,
     & CHARR,QS_C,QSXC,QSYC,CALFA,SALFA,COEFPN,SLOPEFF,
     & SUSP,QS_S,QS,QSCL,QSCL_C,QSCL_S,QSCLXS,QSCLYS,
     & UNORM,U2D,V2D,HN,CF,MU,TOB,TOBW,UW,TW,THETAW,FW,HOULE,
     & AVAIL,ACLADM,UNLADM,KSP,KSR,KS,
     & ICF,HIDFAC,XMVS,XMVE,GRAV,VCE,XKV,HMIN,KARMAN,
     & ZERO,PI,AC,IMP_INFLOW_C,ZREF,ICQ,CSTAEQ,
     & CMAX,CS,CS0,UCONV,VCONV,CORR_CONV,SECCURRENT,BIJK,
     & IELMT,MESH,FDM,XWC,FD90,SEDCO,VITCE,PARTHENIADES,VITCD,
!RK
     * U3D,V3D,CODE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AVAIL          |---| 
C| BIJK           |---| 
C| CALFA          |---| 
C| CF             |---| 
C| CHARR          |-->| 
C| CMAX           |---| 
C| COEFPN         |---| 
C| CORR_CONV      |---| 
C| CS             |---| 
C| CS0            |---| 
C| CSTAEQ         |---| 
C| DEBU           |-->| 
C| FD90           |---| 
C| FDM            |---| 
C| FW             |---| 
C| GRAV           |---| 
C| HIDFAC         |---| 
C| HIDING         |-->| 
C| HMIN           |---| 
C| HN             |-->| WATER DEPTH
C| HOULE          |---| 
C| ICF            |---| 
C| ICQ            |---| 
C| IELMT          |---| 
C| IMP_INFLOW_C   |---| 
C| KARMAN         |---| 
C| KSP            |---| 
C| KSR            |---|
C| KS             |---| 
C| MESH           |---| 
C| MU             |---| 
C| NPOIN          |---| 
C| NSICLA         |-->| NUMBER OF SEDIMENT CLASSES
C| PARTHENIADES   |---| 
C| PI             |---| 
C| QS             |---| 
C| QSCL           |---| 
C| QSCLXS         |---| 
C| QSCLYS         |---| 
C| QSCL_C         |---| 
C| QSCL_S         |---| 
C| QSXC           |---| 
C| QSYC           |---| 
C| QS_C           |---| 
C| QS_S           |---| 
C| SALFA          |---| 
C| SECCURRENT     |---| 
C| SEDCO          |---| 
C| SLOPEFF        |---| 
C| SUSP           |---| 
C| T1             |---| 
C| T10            |---| 
C| T11            |---| 
C| T12            |---| 
C| T14            |---| 
C| T2             |---| 
C| T3             |---| 
C| T4             |---| 
C| T5             |---| 
C| T6             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| THETAW         |---| 
C| TOB            |---| 
C| TOBW           |---| 
C| TROUVE         |-->| 
C| TW             |---| 
C| U2D            |---| 
C| UCONV          |---| 
C| UNLADM         |---| 
C| UNORM          |---| 
C| UW             |---| 
C| V2D            |---| 
C| VCE            |---| 
C| VCONV          |---| 
C| VITCD          |---| 
C| VITCE          |---| 
C| XKV            |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE INTERFACE_SISYPHE, EX_INIT_TRANSPORT => INIT_TRANSPORT
C
      USE DECLARATIONS_SISYPHE, ONLY : NOMBLAY
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)              :: NSICLA,NPOIN,TROUVE(*),ICQ
      INTEGER, INTENT(IN)              :: ICF,HIDFAC,IELMT,SLOPEFF
      LOGICAL, INTENT(IN)              :: CHARR,DEBU,SUSP,IMP_INFLOW_C
      LOGICAL, INTENT(IN)              :: CORR_CONV,SECCURRENT,SEDCO(*)
      LOGICAL, INTENT(IN)              :: HOULE
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U2D,V2D,UNORM,HN,CF
      TYPE(BIEF_OBJ),    INTENT(IN)    :: MU,TOB,TOBW,UW,TW,THETAW,FW
      TYPE(BIEF_OBJ),    INTENT(IN)    :: ACLADM,UNLADM,KSP,KSR,KS
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: HIDING
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: QS_C, QSXC, QSYC, CALFA,SALFA
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: T1,T2,T3,T4,T5,T6,T7,T8
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: T9,T10,T11,T12,T14
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: ZREF,CSTAEQ,CS,UCONV,VCONV
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: QS_S,QS,QSCL_C,QSCL_S
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: COEFPN
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: QSCLXS,QSCLYS,QSCL
      TYPE(BIEF_MESH),   INTENT(INOUT) :: MESH
      DOUBLE PRECISION,  INTENT(IN)    :: XMVS,XMVE,GRAV,VCE
      DOUBLE PRECISION,  INTENT(IN)    :: XKV,HMIN,KARMAN,ZERO,PI
      DOUBLE PRECISION,  INTENT(IN)    :: PARTHENIADES,BIJK,XWC(NSICLA)
      DOUBLE PRECISION,  INTENT(IN)    :: FD90(NSICLA),CS0(NSICLA)
      DOUBLE PRECISION,  INTENT(IN)    :: VITCE,VITCD
      DOUBLE PRECISION,  INTENT(INOUT) :: AC(NSICLA),CMAX,FDM(NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
C
!RK
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
      CHARACTER(LEN=24), INTENT(IN)    :: CODE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I,J
      DOUBLE PRECISION AT0,AAA,USTARP
C
      DOUBLE PRECISION U3DNORM     
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C --- START : INITIALISES RATE OF TRANSPORT AND SUSPENSION
!
C     FOR INITIALISATION : SLOPE EFFECT AND DEVIATION ARE CANCELLED
!RK in case of coupling with T3D, the direction should come from the
! bottom velocity
      IF(CODE(1:9).EQ.'TELEMAC3D') THEN
        DO I=1,NPOIN
          u3dnorm=SQRT(U3D%R(I)*U3D%R(I)+V3D%R(I)*V3D%R(I))
          IF(U3DNORM.GE.1.D-12) THEN
            CALFA%R(I)=U3D%R(I)/u3dnorm
            SALFA%R(I)=V3D%R(I)/u3dnorm
          ELSE
            CALFA%R(I)=1.D0
            SALFA%R(I)=0.D0
          ENDIF
        ENDDO
      ELSE
        CALL OS('X=Y/Z   ',CALFA, U2D, UNORM, 0.D0, 2, 1.D0, 1.D-12)
        CALL OS('X=Y/Z   ',SALFA, V2D, UNORM, 0.D0, 2, 0.D0, 1.D-12)
      ENDIF
C
C  appel a effpnt ?
C
      CALL OS('X=C     ',X=COEFPN,C=1.D0)
C
      IF(CHARR) THEN
C
          CALL OS('X=C     ',X=HIDING,C=1.D0)
C
          DO I = 1, NSICLA
C
            IF(SEDCO(I)) THEN
C             IF COHESIVE: NO BEDLOAD TRANSPORT
              CALL OS('X=0     ', QSCL_C%ADR(I)%P)
            ELSE
C             IF NON COHESIVE
              CALL BEDLOAD_FORMULA
     &        (U2D,V2D,UNORM,HN,CF,MU,TOB,TOBW,UW,TW,THETAW,FW,
     &        ACLADM, UNLADM,KSP,KSR,AVAIL(1:NPOIN,1,I),
     &        NPOIN,ICF,HIDFAC,XMVS,XMVE,
     &        FDM(I),GRAV,VCE,XKV,HMIN,XWC(I),FD90(I),KARMAN,ZERO,
     &        PI,SUSP,AC(I),HIDING,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,
     &        T11,T12,QSCL_C%ADR(I)%P,QSCL_S%ADR(I)%P,
     &        IELMT,SECCURRENT,SLOPEFF,COEFPN,BIJK,HOULE)
              CALL OS('X=CX    ', X=QSCL_C%ADR(I)%P,C=1.D0/XKV)
            ENDIF
C           SUM ON ALL CLASSES
            DO J=1,NPOIN
              QS_C%R(J) = QS_C%R(J) + QSCL_C%ADR(I)%P%R(J)
            ENDDO
C
          ENDDO
C
C         COMPUTES THE X AND Y COMPONENTS OF TRANSPORT
C
          CALL OS('X=YZ    ', X=QSXC, Y=QS_C, Z=CALFA)
          CALL OS('X=YZ    ', X=QSYC, Y=QS_C, Z=SALFA)
C
      ENDIF
C
C ... START : COMPUTES THE SUSPENDED TRANSPORT
C
      IF(SUSP) THEN
C
C       COMPUTES THE INITIAL CONCENTRATIONS
C
C       FOR RANK IN TROUVE SEE POINT_SISYPHE, NOMVAR_SISYPHE
C       AND ALIRE IN SISYPHE.F (IT IS THE ADDRESS OF CONCENTRATIONS)
        IF(.NOT.DEBU.OR.(TROUVE(20+(NOMBLAY+1)*NSICLA).EQ.0)) THEN
C
          CALL CONDIM_SUSP(CS,CS0,NSICLA,MESH%X%R,MESH%Y%R,AT0,NPOIN)
C
C INITIALISES ZREF
C START MODIFICATIONS (CV) ...
          IF(ICQ.EQ.1) THEN
                  CALL OS('X=Y     ', X=ZREF, Y=KSP)
            ELSEIF(ICQ.EQ.2) THEN
                  CALL OS('X=Y     ', X=ZREF, Y=KSR)
            ELSEIF(ICQ.EQ.3) THEN
                  CALL OS('X=Y     ', X=ZREF, Y=KS)
          ENDIF
C ...END MODIFICATIONS (CV)
C
C         OPTION: IMPOSED INFLOW CONCENTRATIONS ...
C
          IF(IMP_INFLOW_C) THEN
!
C           TAUP IN T8
            CALL OS('X=CYZ   ', X=T8, Y=TOB, Z=MU, C=1.D0)
C           USTAR (TOTAL) IN T9
            CALL OS('X=CY    ', X=T9, Y=TOB, C=1.D0/XMVE)
            CALL OS('X=SQR(Y)', X=T9, Y=T9)
!
C           START: LOOP ON THE CLASSES
!
            DO I=1,NSICLA
!
              IF(.NOT.SEDCO(I)) THEN
!
C             NON COHESIVE SED: INITIALISES CSTAEQ
!
                IF(ICQ.EQ.1) THEN
CV                  CALL OS('X=Y     ', X=ZREF, Y=KS)
                  CALL SUSPENSION_FREDSOE(ACLADM,T8,NPOIN,
     &                GRAV, XMVE, XMVS, ZERO, AC(I),  CSTAEQ )
                ELSEIF(ICQ.EQ.2) THEN
CV                  CALL OS('X=Y     ', X=ZREF, Y=KSR)
                  CALL SUSPENSION_BIJKER(T8,HN,NPOIN,CHARR,QS_C,ZREF,
     &                                   ZERO,HMIN,CSTAEQ,XMVE)
              ELSEIF(ICQ.EQ.3) THEN
                  CALL OS('X=Y     ', X=ZREF, Y=KS)
                CALL SUSPENSION_VANRIJN(ACLADM,T8,NPOIN,
     &                         GRAV,XMVE,XMVS,ZERO,AC(I),CSTAEQ,ZREF)
                ENDIF
!
C            ROUSE CONCENTRATION PROFILE IS ASSUMED BASED ON TOTAL FRICTION
C            VELOCITY
!
             CALL SUSPENSION_ROUSE(T9,HN,NPOIN,
     &                             KARMAN,HMIN,ZERO,XWC(I),ZREF,T12)
!
             DO J=1,NPOIN
               CSTAEQ%R(J)=CSTAEQ%R(J)*AVAIL(J,1,I)
             ENDDO
C            CALL OS( 'X=XY    ',X=CSTAEQ,Y=AVAI%ADR(I)%P)
             CALL OS( 'X=Y/Z   ',X=CS%ADR(I)%P,Y=CSTAEQ,Z=T12)
!
C END NON-COHESIVE
!
              ELSE
!
C               FOR COHESIVE SEDIMENT
!
C               THIS VALUE CAN BE ALSO CHANGED BY THE USER
C               IN SUBROUTINE USER_KRONE_PARTHENIADES
!
                CALL OS('X=Y     ', X=ZREF, Y=KSP)
!
                CMAX = MAX(CMAX,PARTHENIADES/XWC(I))
!
                IF(VITCE.GT.1.D-8.AND.VITCD.GT.1.D-8) THEN
                  DO J = 1, NPOIN
C FLUER
                  USTARP= SQRT(T8%R(J)/XMVE)
                  AAA= PARTHENIADES*
     &                MAX(((USTARP/VITCE)**2-1.D0),ZERO)
C FLUDPT
C                 BBB=XWC(I)*MAX((1.D0-(USTARP/VITCD)**2),ZERO)
C                 IF NO DEPOSITION, THE EQUILIBRIUM CONCENTRATION IS INFINITE!
                  CS%ADR(I)%P%R(J) = AAA/XWC(I)
!
                  ENDDO
                ELSE
                  CALL OS('X=0     ',X=CS%ADR(I)%P)
                ENDIF
!
C CV : 13/11/09
                DO J=1,NPOIN
                  CS%ADR(I)%P%R(J)=CS%ADR(I)%P%R(J)*AVAIL(J,1,I)
                ENDDO
C               CALL OS('X=XY    ',X=CS%ADR(I)%P,Y=AVAI%ADR(I)%P)
!
C END COHESIVE
!
              ENDIF
!
C END OF LOOP ON THE CLASSES
!
            ENDDO
!
C END OF OPTION: IMPOSED INFLOW CONCENTRATION
!
          ENDIF
!
C END OF ?
!
        ENDIF
C
C COMPUTES SUSPENDED TRANSPORT
C
        DO I=1,NPOIN
          UCONV%R(I) = U2D%R(I)
          VCONV%R(I) = V2D%R(I)
        ENDDO
!
        DO I=1,NSICLA
          IF(CORR_CONV.AND.(.NOT.SEDCO(I))) THEN
            CALL SUSPENSION_CONV( TOB, XMVE, CF,NPOIN,ZREF,U2D,V2D,HN,
     &                    HMIN,UCONV,VCONV,KARMAN,ZERO,XWC(I),T12,T14)
          ENDIF
C
          CALL OS('X=YZ    ',X=T11,Y=UCONV, Z=HN)
          CALL OS('X=YZ    ',X=T12,Y=VCONV, Z=HN)
C
          CALL OS('X=YZ    ',X=QSCLXS%ADR(I)%P,Y=CS%ADR(I)%P,Z=T11)
          CALL OS('X=YZ    ',X=QSCLYS%ADR(I)%P,Y=CS%ADR(I)%P,Z=T12)
C
          CALL OS('X=N(Y,Z) ',X=QSCL_S%ADR(I)%P,
     &            Y=QSCLXS%ADR(I)%P, Z=QSCLYS%ADR(I)%P)
C
          DO J=1,NPOIN
            QS_S%R(J) = QS_S%R(J) + QSCL_S%ADR(I)%P%R(J)
          ENDDO
        ENDDO
C
C     IF(SUSP) THEN
      ENDIF
C
C     COMPUTES THE TRANSPORT FOR EACH CLASS (IF NOT RESTART OR IF
C                                              DATA NOT FOUND)
C
      DO I=1, NSICLA
        IF(.NOT.DEBU.OR.TROUVE(I+20+NOMBLAY*NSICLA).EQ.0) THEN
          IF(DEBU.AND.  TROUVE(I+20+NOMBLAY*NSICLA).EQ.0) THEN
            IF(LNG.EQ.1) THEN
              WRITE(LU,*) 'QSCL REINITIALISE DANS INIT_TRANSPORT'
              WRITE(LU,*) 'POUR LA CLASSE ',I
            ENDIF
            IF(LNG.EQ.2) THEN
              WRITE(LU,*) 'QSCL REINITIALISED IN INIT_TRANSPORT'
              WRITE(LU,*) 'FOR CLASS ',I
            ENDIF
          ENDIF
          IF(CHARR.AND.SUSP) THEN
            CALL OS('X=Y+Z   ', X=QSCL%ADR(I)%P,
     &              Y=QSCL_S%ADR(I)%P, Z=QSCL_C%ADR(I)%P)
          ELSEIF(CHARR) THEN
            CALL OS('X=Y     ',X=QSCL%ADR(I)%P,Y=QSCL_C%ADR(I)%P)
          ELSEIF(SUSP) THEN
            CALL OS('X=Y     ',X=QSCL%ADR(I)%P,Y=QSCL_S%ADR(I)%P)
          ENDIF
        ENDIF
      ENDDO
C
C     COMPUTES TOTAL TRANSPORT QS (IF NOT RESTART OR IF QS NOT FOUND)
C
      IF(.NOT.DEBU.OR.TROUVE(15).EQ.0) THEN
        IF(DEBU.AND.  TROUVE(15).EQ.0) THEN
          IF(LNG.EQ.1) THEN
            WRITE(LU,*) 'QS REINITIALISE DANS INIT_TRANSPORT'
          ENDIF
          IF(LNG.EQ.2) THEN
            WRITE(LU,*) 'QS REINITIALISED IN INIT_TRANSPORT'
          ENDIF
        ENDIF
        IF(CHARR.AND.SUSP) THEN
          CALL OS('X=Y+Z   ',X=QS,Y=QS_C,Z=QS_S)
        ELSEIF(CHARR) THEN
          CALL OS('X=Y     ',X=QS,Y=QS_C)
        ELSEIF(SUSP) THEN
          CALL OS('X=Y     ',X=QS,Y=QS_S)
        ENDIF
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       INITIALISES VARIABLES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::COEFPN COEFPN@endlink, 
!> @link DECLARATIONS_SISYPHE::CS CS@endlink, 
!> @link DECLARATIONS_SISYPHE::E E@endlink, 
!> @link DECLARATIONS_SISYPHE::ESOMT ESOMT@endlink, 
!> @link DECLARATIONS_SISYPHE::FW FW@endlink, 
!> @link DECLARATIONS_SISYPHE::HN HN@endlink, 
!> @link DECLARATIONS_SISYPHE::HW HW@endlink, 
!> @link DECLARATIONS_SISYPHE::MASDEP MASDEP@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::PRIVE PRIVE@endlink, 
!> @link DECLARATIONS_SISYPHE::QS QS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCL QSCL@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLXC QSCLXC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLXS QSCLXS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLYC QSCLYC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLYS QSCLYS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSX QSX@endlink, 
!> @link DECLARATIONS_SISYPHE::QSXC QSXC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSXS QSXS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSY QSY@endlink, 
!> @link DECLARATIONS_SISYPHE::QSYC QSYC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSYS QSYS@endlink, 
!> @link DECLARATIONS_SISYPHE::QS_C QS_C@endlink, 
!> @link DECLARATIONS_SISYPHE::QS_S QS_S@endlink, 
!> @link DECLARATIONS_SISYPHE::QU QU@endlink, 
!> @link DECLARATIONS_SISYPHE::QV QV@endlink, 
!> @link DECLARATIONS_SISYPHE::T12 T12@endlink, 
!> @link DECLARATIONS_SISYPHE::THETAW THETAW@endlink, 
!> @link DECLARATIONS_SISYPHE::TOB TOB@endlink, 
!> @link DECLARATIONS_SISYPHE::TOBW TOBW@endlink, 
!> @link DECLARATIONS_SISYPHE::TW TW@endlink, 
!> @link DECLARATIONS_SISYPHE::U2D U2D@endlink, 
!> @link DECLARATIONS_SISYPHE::UW UW@endlink, 
!> @link DECLARATIONS_SISYPHE::V2D V2D@endlink, 
!> @link DECLARATIONS_SISYPHE::ZFCL_C ZFCL_C@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), Q()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td>
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 04/06/2008
!> </td><td> JMH
!> </td><td> INITIALISATION OF MASDEP
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
                         SUBROUTINE INIT_ZERO
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE DECLARATIONS_SISYPHE
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C-----------------------------------------------------------------------
C
      INTEGER I
C
C-----------------------------------------------------------------------
C
C========================================================================
C                         INITIALISES
C =======================================================================
C
C---- THE WORKING ARRAYS
C
      IF(NPRIV > 0) CALL OS ('X=0     ', X=PRIVE)
      CALL OS('X=0     ', X=T12   )
      CALL OS('X=0     ', X=COEFPN)
C
C---- THE SEDIMENT VARIABLES :
C
      CALL OS('X=0     ', X=QS)
      CALL OS('X=0     ', X=QSX)
      CALL OS('X=0     ', X=QSY)
      CALL OS('X=0     ', X=QSCLXC )
      CALL OS('X=0     ', X=QSCLYC )
      CALL OS('X=0     ', X=QSCLXS )
      CALL OS('X=0     ', X=QSCLYS )
C
C 7 FOLLOWING LINES ADDED BY JMH 22/04/2005
C PROVISIONAL INITIALISATION FOR FIRST OUTPUT IN RESULTS FILE
C
      CALL OS('X=0     ', X=QSCL )  ! BLOCK OF SIZE NSICLA
      CALL OS('X=0     ', X=QS_S )
      CALL OS('X=0     ', X=QSXS )
      CALL OS('X=0     ', X=QSYS )
      CALL OS('X=0     ', X=QS_C )
      CALL OS('X=0     ', X=QSXC )
      CALL OS('X=0     ', X=QSYC )
C
C FOLLOWING LINE ADDED BY JMH 04/05/2005
C PROBABLY USEFUL ONLY IF(CHARR) AND WITH FINITE ELEMENTS
C
      CALL OS('X=0     ', X=ZFCL_C )
C
C---- THE DEPOSITION MASSES FOR EVERY CLASS IN SUSPENSION
C
      DO I=1,NSICLA
        MASDEP(I)=0.D0
      ENDDO
C
      CALL OS('X=0     ', X=E    )
      CALL OS('X=0     ', X=ESOMT)
      CALL OS('X=0     ', X=CS   )
C
C---- THE HYDRODYNAMIC VARIABLES :
C
      CALL OS('X=0     ', X=QU )
      CALL OS('X=0     ', X=QV )
      CALL OS('X=0     ', X=U2D )
      CALL OS('X=0     ', X=V2D )
      CALL OS('X=0     ', X=HN )
      CALL OS('X=0     ', X=Q  )
      CALL OS('X=0     ', X=TOB)
C
C---- THE WAVE PARAMETERS IF NEED BE
C
C     ALL INITIALISATIONS OF THE WAVES ARE TO BE REMOVED
C     WHEN ALL CHECKS WILL BE DONE
C     SEE BEDLOAD_BAILARD, DIBWAT, BIJKER AND SOULSBY
C
C
C     FW=0.3 CORRESPONDS TO NO WAVES, 0 WOULD DO A LOG(0)
      CALL OS('X=C     ', X=FW ,C=0.3D0   )   !
      CALL OS('X=0     ', X=HW    )   !
      CALL OS('X=0     ', X=TW    )   !
      CALL OS('X=C     ', X=THETAW, C=90.D0)  !
      CALL OS('X=0     ', X=UW    )   !
      CALL OS('X=0     ', X=TOBW)     !
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE EINSTEIN INTEGRAL
!>                FOR SUSPENDED TRANSPORT.
!>  @code
!>                              A-1     /1       A
!>                             B       |  / 1-Y  \     33Y
!>           I = 0.216*1.83 * ------ * | | ----- | LN --- DY
!>                                 A   |  \  Y   /      B
!>                            (1-B)    /B
!>
!>                          WS                    KR
!>      WITH    A = -------------------  AND  B = --
!>                  KAPPA * BETA * U*CW           H
!>  @endcode

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  VALUES - CALCULATED BY SIMPSON - ARE TABULATED
!>         AND LINEARLY INTERPOLATED.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> A, B, IEIN, NPOIN
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> A1, A2, AEIN, B1, B2, BEIN, EINJ3, I, INF, INT1, INT2, IT, JT, LNA, LNB, MIL, SUP
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_BIJKER()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 2000
!> </td><td>
!> </td><td> MODIFICATIONS EBS/TB
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>A
!></td><td>--></td><td>NOMBRE DE ROUSE
!>    </td></tr>
!>          <tr><td>B
!></td><td>--></td><td>RAPPORT ENTRE L'EPAISSEUR DE LA COUCHE DE
!>                  CHARRIAGE ET DE LA HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>IEIN
!></td><td><--</td><td>VALEUR DE L'INTEGRALE I
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE INTEG
     &( A , B , IEIN , NPOIN)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| A             |-->| NOMBRE DE ROUSE
C| B             |-->| RAPPORT ENTRE L'EPAISSEUR DE LA COUCHE DE
C|                |   | CHARRIAGE ET DE LA HAUTEUR D'EAU
C| IEIN           |<--| VALEUR DE L'INTEGRALE I
C| NPOIN          |-->| NOMBRE DE POINTS
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)             :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: A(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: IEIN(NPOIN), B(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER LNA,LNB
      PARAMETER( LNA = 15 , LNB = 42)
      SAVE EINJ3,AEIN,BEIN
C
      DOUBLE PRECISION EINJ3(LNB,LNA)
      DOUBLE PRECISION AEIN(LNA),BEIN(LNB)
C
      DOUBLE PRECISION A1, A2, B1, B2, INT1, INT2
C
      INTEGER I, IT, JT, INF, SUP, MIL
C
C **********************************************************************
C        TABLES
C **********************************************************************
C
C RATIO QSS/QSC
C COMPUTED USING EINSTEIN INTEGRALS
C AND GENERATED BY MAPLE V
C
C DATA FOR A=  .0
C
      DATA (EINJ3(I,1),I=1,42) /
     & .0000D+00, .4806D+00, .9944D+00, .1535D+01, .2386D+01, .3889D+01,
     & .7128D+01, .9708D+01, .1422D+02, .1798D+02, .2055D+02, .2383D+02,
     & .2813D+02, .3399D+02, .4243D+02, .5549D+02, .7811D+02, .1257D+03,
     & .1628D+03, .2269D+03, .2797D+03, .3155D+03, .3609D+03, .4202D+03,
     & .5005D+03, .6152D+03, .7913D+03, .1093D+04, .1721D+04, .2206D+04,
     & .3037D+04, .3716D+04, .4176D+04, .4756D+04, .5511D+04, .6531D+04,
     & .7982D+04, .1020D+05, .1398D+05, .4627D+05, .9803D+05, .5538D+06/

C
C DATA FOR A=  .1
C
      DATA (EINJ3(I,2),I=1,42) /
     & .0000D+00, .4298D+00, .8772D+00, .1338D+01, .2048D+01, .3271D+01,
     & .5813D+01, .7778D+01, .1113D+02, .1386D+02, .1569D+02, .1801D+02,
     & .2101D+02, .2505D+02, .3077D+02, .3944D+02, .5407D+02, .8379D+02,
     & .1063D+03, .1442D+03, .1747D+03, .1951D+03, .2207D+03, .2536D+03,
     & .2977D+03, .3595D+03, .4526D+03, .6082D+03, .9202D+03, .1154D+04,
     & .1545D+04, .1857D+04, .2066D+04, .2326D+04, .2660D+04, .3105D+04,
     & .3727D+04, .4659D+04, .6207D+04, .1844D+05, .3649D+05, .1758D+06/
C
C DATA FOR A=  .2
C
      DATA (EINJ3(I,3),I=1,42) /
     & .0000D+00, .3881D+00, .7823D+00, .1180D+01, .1782D+01, .2792D+01,
     & .4821D+01, .6344D+01, .8874D+01, .1089D+02, .1223D+02, .1390D+02,
     & .1604D+02, .1888D+02, .2282D+02, .2869D+02, .3835D+02, .5729D+02,
     & .7124D+02, .9408D+02, .1121D+03, .1239D+03, .1386D+03, .1573D+03,
     & .1820D+03, .2160D+03, .2663D+03, .3481D+03, .5065D+03, .6219D+03,
     & .8095D+03, .9561D+03, .1052D+04, .1171D+04, .1322D+04, .1521D+04,
     & .1793D+04, .2193D+04, .2841D+04, .7579D+04, .1400D+05, .5756D+05/
C
C DATA FOR A=  .4
C
      DATA (EINJ3(I,4),I=1,42) /
     & .0000D+00, .3241D+00, .6390D+00, .9459D+00, .1393D+01, .2110D+01,
     & .3460D+01, .4418D+01, .5934D+01, .7092D+01, .7840D+01, .8753D+01,
     & .9895D+01, .1137D+02, .1335D+02, .1619D+02, .2063D+02, .2877D+02,
     & .3441D+02, .4320D+02, .4981D+02, .5405D+02, .5919D+02, .6557D+02,
     & .7375D+02, .8468D+02, .1001D+03, .1241D+03, .1674D+03, .1970D+03,
     & .2429D+03, .2771D+03, .2989D+03, .3253D+03, .3580D+03, .3997D+03,
     & .4551D+03, .5332D+03, .6534D+03, .1408D+04, .2273D+04, .6813D+04/
C
C DATA FOR A=  .6
C
      DATA (EINJ3(I,5),I=1,42) /
     & .0000D+00, .2773D+00, .5367D+00, .7818D+00, .1128D+01, .1659D+01,
     & .2603D+01, .3238D+01, .4199D+01, .4903D+01, .5346D+01, .5877D+01,
     & .6525D+01, .7340D+01, .8403D+01, .9866D+01, .1205D+02, .1579D+02,
     & .1823D+02, .2186D+02, .2446D+02, .2609D+02, .2802D+02, .3036D+02,
     & .3327D+02, .3703D+02, .4215D+02, .4969D+02, .6239D+02, .7059D+02,
     & .8262D+02, .9120D+02, .9653D+02, .1028D+03, .1104D+03, .1199D+03,
     & .1320D+03, .1484D+03, .1724D+03, .3023D+03, .4277D+03, .9411D+03/
C
C DATA FOR A=  .8
C
      DATA (EINJ3(I,6),I=1,42) /
     & .0000D+00, .2419D+00, .4607D+00, .6618D+00, .9376D+00, .1346D+01,
     & .2033D+01, .2474D+01, .3114D+01, .3564D+01, .3841D+01, .4166D+01,
     & .4555D+01, .5031D+01, .5635D+01, .6435D+01, .7576D+01, .9407D+01,
     & .1054D+02, .1213D+02, .1323D+02, .1390D+02, .1467D+02, .1559D+02,
     & .1670D+02, .1808D+02, .1990D+02, .2244D+02, .2644D+02, .2887D+02,
     & .3226D+02, .3457D+02, .3597D+02, .3758D+02, .3948D+02, .4177D+02,
     & .4462D+02, .4832D+02, .5346D+02, .7757D+02, .9715D+02, .1601D+03/
C
C DATA FOR A= 1.0
C
      DATA (EINJ3(I,7),I=1,42) /
     & .0000D+00, .2142D+00, .4023D+00, .5711D+00, .7968D+00, .1120D+01,
     & .1638D+01, .1956D+01, .2400D+01, .2702D+01, .2884D+01, .3093D+01,
     & .3338D+01, .3631D+01, .3992D+01, .4455D+01, .5086D+01, .6039D+01,
     & .6595D+01, .7344D+01, .7837D+01, .8129D+01, .8461D+01, .8844D+01,
     & .9296D+01, .9844D+01, .1053D+02, .1145D+02, .1281D+02, .1358D+02,
     & .1461D+02, .1528D+02, .1567D+02, .1611D+02, .1662D+02, .1722D+02,
     & .1794D+02, .1884D+02, .2003D+02, .2487D+02, .2817D+02, .3657D+02/
C
C DATA FOR A= 1.2
C
      DATA (EINJ3(I,8),I=1,42) /
     & .0000D+00, .1919D+00, .3563D+00, .5006D+00, .6892D+00, .9512D+00,
     & .1354D+01, .1592D+01, .1912D+01, .2122D+01, .2246D+01, .2387D+01,
     & .2549D+01, .2738D+01, .2965D+01, .3247D+01, .3615D+01, .4141D+01,
     & .4432D+01, .4807D+01, .5044D+01, .5180D+01, .5332D+01, .5504D+01,
     & .5701D+01, .5933D+01, .6215D+01, .6572D+01, .7066D+01, .7332D+01,
     & .7668D+01, .7877D+01, .7997D+01, .8129D+01, .8277D+01, .8447D+01,
     & .8644D+01, .8880D+01, .9178D+01, .1024D+02, .1084D+02, .1207D+02/
C
C DATA FOR A= 1.5
C
      DATA (EINJ3(I,9),I=1,42) /
     & .0000D+00, .1658D+00, .3032D+00, .4205D+00, .5694D+00, .7685D+00,
     & .1058D+01, .1220D+01, .1428D+01, .1560D+01, .1635D+01, .1718D+01,
     & .1812D+01, .1918D+01, .2041D+01, .2188D+01, .2369D+01, .2609D+01,
     & .2732D+01, .2881D+01, .2970D+01, .3020D+01, .3074D+01, .3133D+01,
     & .3198D+01, .3271D+01, .3356D+01, .3456D+01, .3583D+01, .3645D+01,
     & .3719D+01, .3763D+01, .3786D+01, .3812D+01, .3839D+01, .3869D+01,
     & .3903D+01, .3941D+01, .3986D+01, .4117D+01, .4174D+01, .4259D+01/
C
C DATA FOR A= 2.0
C
      DATA (EINJ3(I,10),I=1,42) /
     & .0000D+00, .1349D+00, .2418D+00, .3298D+00, .4372D+00, .5737D+00,
     & .7582D+00, .8542D+00, .9708D+00, .1040D+01, .1078D+01, .1120D+01,
     & .1164D+01, .1213D+01, .1268D+01, .1329D+01, .1399D+01, .1483D+01,
     & .1522D+01, .1566D+01, .1590D+01, .1603D+01, .1616D+01, .1630D+01,
     & .1645D+01, .1661D+01, .1678D+01, .1697D+01, .1718D+01, .1727D+01,
     & .1737D+01, .1742D+01, .1745D+01, .1748D+01, .1751D+01, .1754D+01,
     & .1757D+01, .1760D+01, .1764D+01, .1772D+01, .1774D+01, .1777D+01/
C
C DATA FOR A= 2.5
C
      DATA (EINJ3(I,11),I=1,42) /
     & .0000D+00, .1135D+00, .2004D+00, .2699D+00, .3524D+00, .4531D+00,
     & .5821D+00, .6459D+00, .7199D+00, .7621D+00, .7849D+00, .8089D+00,
     & .8344D+00, .8615D+00, .8907D+00, .9222D+00, .9568D+00, .9955D+00,
     & .1012D+01, .1031D+01, .1040D+01, .1045D+01, .1050D+01, .1055D+01,
     & .1060D+01, .1066D+01, .1072D+01, .1077D+01, .1084D+01, .1086D+01,
     & .1089D+01, .1090D+01, .1091D+01, .1091D+01, .1092D+01, .1093D+01,
     & .1093D+01, .1094D+01, .1095D+01, .1096D+01, .1097D+01, .1097D+01/
C
C DATA FOR A= 3.0
C
      DATA (EINJ3(I,12),I=1,42) /
     & .0000D+00, .9783D-01, .1708D+00, .2278D+00, .2939D+00, .3724D+00,
     & .4689D+00, .5148D+00, .5664D+00, .5950D+00, .6101D+00, .6259D+00,
     & .6424D+00, .6596D+00, .6777D+00, .6969D+00, .7173D+00, .7392D+00,
     & .7484D+00, .7580D+00, .7630D+00, .7655D+00, .7681D+00, .7707D+00,
     & .7733D+00, .7759D+00, .7786D+00, .7813D+00, .7841D+00, .7853D+00,
     & .7864D+00, .7870D+00, .7872D+00, .7875D+00, .7878D+00, .7881D+00,
     & .7884D+00, .7887D+00, .7890D+00, .7896D+00, .7897D+00, .7898D+00/
C
C DATA FOR A= 4.0
C
      DATA (EINJ3(I,13),I=1,42) /
     & .0000D+00, .7657D-01, .1314D+00, .1730D+00, .2196D+00, .2727D+00,
     & .3345D+00, .3624D+00, .3927D+00, .4088D+00, .4172D+00, .4258D+00,
     & .4346D+00, .4437D+00, .4530D+00, .4626D+00, .4725D+00, .4828D+00,
     & .4870D+00, .4913D+00, .4935D+00, .4946D+00, .4957D+00, .4968D+00,
     & .4979D+00, .4990D+00, .5001D+00, .5012D+00, .5023D+00, .5028D+00,
     & .5033D+00, .5035D+00, .5036D+00, .5037D+00, .5038D+00, .5039D+00,
     & .5041D+00, .5042D+00, .5043D+00, .5045D+00, .5046D+00, .5046D+00/
C
C DATA FOR A= 7.0
C
      DATA (EINJ3(I,14),I=1,42) /
     & .0000D+00, .4618D-01, .7721D-01, .9958D-01, .1235D+00, .1493D+00,
     & .1771D+00, .1890D+00, .2013D+00, .2076D+00, .2108D+00, .2141D+00,
     & .2174D+00, .2207D+00, .2240D+00, .2274D+00, .2308D+00, .2343D+00,
     & .2357D+00, .2371D+00, .2378D+00, .2381D+00, .2385D+00, .2388D+00,
     & .2392D+00, .2396D+00, .2399D+00, .2403D+00, .2406D+00, .2408D+00,
     & .2409D+00, .2410D+00, .2410D+00, .2410D+00, .2411D+00, .2411D+00,
     & .2412D+00, .2412D+00, .2412D+00, .2413D+00, .2413D+00, .2413D+00/
C
C DATA FOR A=15.0
C
      DATA (EINJ3(I,15),I=1,42) /
     & .0000D+00, .2236D-01, .3656D-01, .4639D-01, .5654D-01, .6702D-01,
     & .7786D-01, .8230D-01, .8681D-01, .8909D-01, .9023D-01, .9138D-01,
     & .9254D-01, .9369D-01, .9486D-01, .9602D-01, .9720D-01, .9837D-01,
     & .9884D-01, .9932D-01, .9955D-01, .9967D-01, .9979D-01, .9991D-01,
     & .1000D+00, .1001D+00, .1003D+00, .1004D+00, .1005D+00, .1005D+00,
     & .1006D+00, .1006D+00, .1006D+00, .1006D+00, .1007D+00, .1007D+00,
     & .1007D+00, .1007D+00, .1007D+00, .1007D+00, .1007D+00, .1007D+00/
C
C VALUES OF TABLE BEIN
C
      DATA  BEIN /
     &      1.D0  ,.75D0  ,.6D0   ,.5D0   ,.4D0    ,.3D0    ,
     &     .2D0   ,.16D0  ,.12D0  ,.1D0   ,.09D0   ,.08D0   ,
     &     .07D0  ,.06D0  ,.05D0  ,.04D0  ,.03D0   ,.02D0   ,
     &     .016D0 ,.012D0 ,.01D0  ,.009D0 ,.008D0  ,.007D0  ,
     &     .006D0 ,.005D0 ,.004D0 ,.003D0 ,.002D0  ,.0016D0 ,
     &     .0012D0,.001D0 ,.0009D0,.0008D0,.0007D0 ,.0006D0 ,
     &     .0005D0,.0004D0,.0003D0,.0001D0,.00005D0,.00001D0 /
C
C VALUES OF TABLE AEIN
C
      DATA  AEIN / 0.D0,.1D0,.2D0,.4D0,.6D0,.8D0,1.D0,1.2D0,1.5D0,
     &            2.D0 ,2.5D0,3.D0,4.D0,7.D0,15.D0 /
C
      DO 20 I=1,NPOIN
C
C
              IF (B(I).LT.BEIN(LNB)) B(I)=BEIN(LNB)

C TREATS B AND A
C =======================
C
C CASE WHERE SUSPENSION IS NEGLIGIBLE
C
C
            IF (A(I).GT.AEIN(LNA).OR.(B(I).GE.1.D0)) THEN
               IEIN(I) = 0.D0
C
C VALUES OUTSIDE OF THE TABLE
C

            ELSEIF ((B(I).GT.1.D0).OR.(B(I).LT.BEIN(LNB)).OR.
     &              (A(I).LT.AEIN(1))) THEN
C
 100  FORMAT(/,1X,'TBIJFR : B EST SUPERIEUR A 1',/,
     &         3X,'B     = ',G10.4,/,
     &         3X,'NOEUD = ',I5,/,
     &         3X,'VERIFIER LA PERTINENCE DE LA FORMULE DE BIJKER'
     &           ,' DANS VOTRE CAS',/)
 101  FORMAT(/,1X,'TBIJFR : B EST INFERIEUR A ',G10.4,
     &            ' LIMITE DE LA ZONE TABULEE',/,
     &         3X,'B     = ',G10.4,/,
     &         3X,'NOEUD = ',I5,/,
     &         3X,'VERIFIER LA PERTINENCE DE LA FORMULE DE BIJKER'
     &           ,' DANS VOTRE CAS',/)
 102  FORMAT(/,1X,'TBIJFR : A EST INFERIEUR A ',G10.4,
     &            ' LIMITE DE LA ZONE TABULEE',/,
     &         3X,'A     = ',G10.4,/,
     &         3X,'NOEUD = ',I5,/,
     &         3X,'VERIFIER LA PERTINENCE DE LA FORMULE DE BIJKER'
     &           ,' DANS VOTRE CAS',/)
C
               IF (B(I).GT.1.D0) THEN
                  WRITE(6,100) B(I),I
               ELSEIF (B(I).LT.BEIN(LNB)) THEN
                  WRITE(6,101) BEIN(LNB),B(I),I
               ELSEIF (A(I).LT.AEIN(1)) THEN
                  WRITE(6,102) AEIN(1),A(I),I
               ENDIF
               CALL PLANTE(0)
               STOP
C
C VALUES IN THE TABLE
C
            ELSE
C
C LOOKS FOR THE BOUNDS FOR B
C ===============================
C
               INF = 1
               SUP = LNB
C----START OF THE DO WHILE LOOP----
 51            MIL = (INF + SUP ) / 2
                 IF (BEIN(MIL).GT.B(I)) THEN
                   INF = MIL
                 ELSE
                   SUP = MIL
                 ENDIF
               IF ((SUP - INF).NE.1)  GOTO 51
C----END OF THE DO WHILE LOOP----
               JT=SUP
               B1 = BEIN(INF)
               B2 = BEIN(SUP)
C
C LOOKS FOR THE BOUNDS FOR A
C ===============================
C
               INF = 1
               SUP = LNA
C----START OF THE DO WHILE LOOP----
 52            MIL = (INF + SUP ) / 2
                 IF (AEIN(MIL).LT.A(I)) THEN
                   INF = MIL
                 ELSE
                   SUP = MIL
                 ENDIF
               IF ((SUP - INF).NE.1) GOTO 52
C----END OF THE DO WHILE LOOP----
               IT=SUP
               A1 = AEIN(INF)
               A2 = AEIN(SUP)
C
C COMPUTES THE IEIN INTEGRAL
C ==========================
C
C INTERPOLATION WITH CONSTANT A1
               INT1 = (EINJ3(JT-1,IT-1)-EINJ3(JT,IT-1))/(B1-B2)*
     &                (B(I)-B1) + EINJ3(JT-1,IT-1)
C INTERPOLATION WITH CONSTANT A2
               INT2 = (EINJ3(JT-1,IT)  -EINJ3(JT,IT)  )/(B1-B2)*
     &                (B(I)-B1) + EINJ3(JT-1,IT)
C RE-INTERPOLATION BETWEEN THE TWO PRECEDING VALUES
               IEIN(I) = (INT1-INT2)/(A1-A2)*(A(I)-A1) + INT1
C
            ENDIF
C
 20      CONTINUE
C
      RETURN
      END SUBROUTINE INTEG
C
C#######################################################################
C!>  @par Use(s)
!><br>BIEF, BIEF_DEF, INTERFACE_SISYPHE_BEDLOAD, INTERFACE_SISYPHE_SUSPENSION
!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
        MODULE INTERFACE_SISYPHE
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE_BEDLOAD
      USE INTERFACE_SISYPHE_SUSPENSION
C
      INTERFACE
        SUBROUTINE AFFECT_MAT(IELMU)
          USE BIEF_DEF
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: IELMU
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE SIS_ARRET
     &(ESM,EMAX,HN,VARSOR,NPOIN,MN,NRES,FMTRES,MAXVAR,AT0,RC,HIST,
     & BINRESSIS,TEXTE,SORLEO,SORIMP,T1,T2)
        USE BIEF_DEF
        IMPLICIT NONE
      TYPE(BIEF_OBJ),    INTENT(IN)    :: ESM, EMAX, HN, VARSOR
      INTEGER,           INTENT(IN)    :: NPOIN, MN, NRES, MAXVAR
      DOUBLE PRECISION,  INTENT(IN)    :: AT0, RC, HIST(1)
      CHARACTER(LEN=3),  INTENT(IN)    :: BINRESSIS
      CHARACTER(LEN=32), INTENT(IN)    :: TEXTE(MAXVAR)
      CHARACTER(LEN=8),  INTENT(IN)    :: FMTRES
      LOGICAL,           INTENT(IN)    :: SORLEO(*), SORIMP(*)
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: T1, T2
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE BILAN_SISYPHE
     &( E      , ESOMT  , QSX    , QSY    , MESH   , MSK    , MASKEL ,
     &  T1     , T2     , S      , IELMU  , VCUMU  , DT     , NPTFR  ,
     &  INFO   , ZFCL_C , QSCLXC , QSCLYC , NSICLA ,
     &  VOLTOT , DZF_GF , MASS_GF, LGRAFED, NUMLIQ , NFRLIQ)
      USE BIEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)          :: NPTFR,NFRLIQ,IELMU,NSICLA
      INTEGER, INTENT(IN)          :: NUMLIQ(NPTFR)
      DOUBLE PRECISION, INTENT(IN) :: DT
      LOGICAL, INTENT(IN)          :: MSK, INFO
      LOGICAL,          INTENT(IN)    :: LGRAFED
      DOUBLE PRECISION, INTENT(INOUT) :: MASS_GF,VCUMU
      DOUBLE PRECISION, INTENT(IN)    :: VOLTOT(10)
      TYPE(BIEF_OBJ), INTENT(IN)    :: MASKEL,S,ZFCL_C,QSCLXC,QSCLYC
      TYPE(BIEF_OBJ), INTENT(IN)    :: E,ESOMT,QSX,QSY,DZF_GF
      TYPE(BIEF_OBJ), INTENT(INOUT) :: T1,T2
      TYPE(BIEF_MESH) :: MESH
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE CALCUW( UW, H, HW, TW, GRAV ,NPOIN)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: NPOIN
        DOUBLE PRECISION, INTENT(INOUT) :: UW(NPOIN)
        DOUBLE PRECISION, INTENT(IN) :: H(NPOIN)
        DOUBLE PRECISION, INTENT(IN) :: TW(NPOIN),HW(NPOIN)
        DOUBLE PRECISION, INTENT(IN) :: GRAV
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE CHECK2
     &  ( NVAR1 , NVAR   , KNO    , NUMEN  , DT  , ATDEB,
     &  NHIST , LOGPRE , NPOIN  , NPRE   , PERMA  , TEXTLU ,
     &  STD , CODE )
        USE BIEF_DEF
        IMPLICIT NONE
        INTEGER, INTENT (INOUT) :: NVAR,NVAR1
        INTEGER, INTENT (INOUT) ::  KNO,NUMEN
        INTEGER, INTENT (IN)    :: LOGPRE,NHIST,NPOIN,NPRE
        DOUBLE PRECISION, INTENT (INOUT):: ATDEB, DT
        LOGICAL, INTENT(IN):: PERMA
        CHARACTER(LEN=24) :: CODE
        CHARACTER*3  STD
        CHARACTER*32 TEXTLU(26)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE COEFRO_SISYPHE
     &  (CF,H,KFROT,CHESTR,GRAV,NPOIN,HMIN,KARMAN)
        USE BIEF_DEF
        IMPLICIT NONE
        INTEGER, INTENT(IN):: NPOIN,KFROT
        DOUBLE PRECISION,INTENT(IN):: GRAV,KARMAN,HMIN
        TYPE(BIEF_OBJ), INTENT(INOUT) :: CF
        TYPE(BIEF_OBJ),INTENT(IN) :: CHESTR,H
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE CONDIM_SISYPHE
     & (U      , V   , QU    , QV  , H   , ZF , Z ,
     &  ESOMT   , THETAW ,  Q     , HW  , TW  ,
     &  X      , Y   , NPOIN , AT  , PMAREE)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: NPOIN
        DOUBLE PRECISION, INTENT(IN) :: X(NPOIN) , Y(NPOIN)
        DOUBLE PRECISION, INTENT(IN) :: AT , PMAREE
        DOUBLE PRECISION, INTENT(INOUT) ::  ZF(NPOIN)
        DOUBLE PRECISION, INTENT (INOUT)::  ESOMT(NPOIN)
        DOUBLE PRECISION, INTENT(INOUT) ::  Z(NPOIN) , H(NPOIN)
        DOUBLE PRECISION, INTENT(INOUT) ::  U(NPOIN) , V(NPOIN)
        DOUBLE PRECISION, INTENT (INOUT)::  QU(NPOIN), QV(NPOIN)
        DOUBLE PRECISION, INTENT (INOUT):: Q(NPOIN)
        DOUBLE PRECISION, INTENT (INOUT)::  HW(NPOIN) , TW(NPOIN)
        DOUBLE PRECISION, INTENT (INOUT):: THETAW (NPOIN)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE CONDIM_SUSP(CS,CS0,NSICLA,X,Y,AT,NPOIN)
        USE BIEF_DEF
        IMPLICIT NONE
        INTEGER, INTENT(IN)           :: NPOIN,NSICLA
        DOUBLE PRECISION,INTENT(IN)   :: AT,CS0(NSICLA)
        DOUBLE PRECISION,INTENT(IN)   :: X(NPOIN),Y(NPOIN)
        TYPE(BIEF_OBJ), INTENT(INOUT) :: CS
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE CONDIS_SISYPHE (CONSTFLOW)
        USE BIEF_DEF
        IMPLICIT NONE
        LOGICAL, INTENT(INOUT) :: CONSTFLOW
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE CONLIT(NBOR)
        USE BIEF_DEF
        IMPLICIT NONE
        INTEGER, INTENT(IN):: NBOR(*)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE CORSTR_SISYPHE
        IMPLICIT NONE
        END SUBROUTINE
      END INTERFACE

      INTERFACE
        SUBROUTINE DEBUG_SISYPHE (NAME, ILOOP, NLOOP)
        USE BIEF_DEF
        IMPLICIT NONE
        INTEGER, PARAMETER :: SIZE =100
        CHARACTER(LEN=SIZE)  , INTENT(IN) :: NAME
        INTEGER,   INTENT(IN), OPTIONAL :: ILOOP, NLOOP
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE ENTETE_SISYPHE(IETAPE,AT,LT)
       IMPLICIT NONE
       DOUBLE PRECISION, INTENT(IN) :: AT
       INTEGER, INTENT(IN):: LT,IETAPE
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE FLUSEC_SISYPHE
     &(U,V,H,QSXC,QSYC,CHARR,QSXS,QSYS,SUSP,
     & IKLE,NELMAX,NELEM,X,Y,DT,NCP,CTRLSC,INFO,TPS,KNOGL)
         USE BIEF_DEF
         IMPLICIT NONE
         INTEGER, INTENT(IN)          :: NELMAX,NELEM,NCP
         INTEGER, INTENT(IN)          :: IKLE(NELMAX,*)
         INTEGER, INTENT(IN)          :: CTRLSC(NCP),KNOGL(*)
         DOUBLE PRECISION, INTENT(IN) :: X(*),Y(*),TPS,DT
         LOGICAL, INTENT(IN)          :: INFO,SUSP,CHARR
         TYPE(BIEF_OBJ), INTENT(IN)   :: U,V,H,QSXC,QSYC,QSXS,QSYS
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE FLUXPR_SISYPHE
     &(NSEC, CTRLSC, FLX, VOLNEG, VOLPOS, INFO, TPS, NSEG, NCSIZE,  !JAJ #### TPS
     & FLXS,VOLNEGS,VOLPOSS,SUSP,FLXC,VOLNEGC,VOLPOSC,CHARR)
      IMPLICIT NONE
      INTEGER, INTENT(IN)          :: NSEC,NCSIZE
      INTEGER, INTENT(IN)          :: CTRLSC(*)
      INTEGER, INTENT(IN)          :: NSEG(NSEC)
      LOGICAL, INTENT(IN)          :: INFO,SUSP,CHARR
      DOUBLE PRECISION, INTENT(IN) :: FLX(NSEC), TPS                !JAJ #### TPS
      DOUBLE PRECISION, INTENT(IN) :: VOLNEG(NSEC),VOLPOS(NSEC)
      DOUBLE PRECISION, INTENT(IN) :: FLXS(NSEC),FLXC(NSEC)
      DOUBLE PRECISION, INTENT(IN) :: VOLNEGS(NSEC),VOLPOSS(NSEC)
      DOUBLE PRECISION, INTENT(IN) :: VOLNEGC(NSEC),VOLPOSC(NSEC)
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE GF_USER(TBEG_GF,TEND_GF,AT0)
       IMPLICIT NONE
       DOUBLE PRECISION, INTENT(INOUT) :: TBEG_GF, TEND_GF
       DOUBLE PRECISION, INTENT(IN)    :: AT0
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE INIT_AVAI
       USE BIEF_DEF
       IMPLICIT NONE
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE INIT_COMPO(NCOUCHES)
          USE BIEF_DEF
          IMPLICIT NONE
          INTEGER, INTENT(INOUT):: NCOUCHES(*)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE INIT_CONSTANT
     &  (KARIM_HOLLY_YANG, KARMAN,  PI)
        IMPLICIT NONE
        DOUBLE PRECISION, INTENT(INOUT) :: KARIM_HOLLY_YANG
        DOUBLE PRECISION, INTENT(INOUT) :: KARMAN
         DOUBLE PRECISION, INTENT(INOUT) :: PI
C
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE INIT_MIXTE
     &(XMVS,NPOIN,AVAIL,NSICLA,ES,ELAY,NCOUCH_TASS,CONC_VASE,
     &  MS_SABLE,MS_VASE,ZF,ZR,AVA0)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NPOIN,NSICLA,NCOUCH_TASS
      DOUBLE PRECISION, INTENT(IN)    :: XMVS
      DOUBLE PRECISION, INTENT(IN)    :: ZF(NPOIN), ZR(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10),ELAY(NPOIN)
      DOUBLE PRECISION,  INTENT(INOUT):: MS_SABLE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT):: MS_VASE(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)    :: CONC_VASE(10)
      DOUBLE PRECISION, INTENT(IN)    :: AVA0(NSICLA)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE INIT_SEDIMENT
     &(NSICLA,ELAY,ZF,ZR,NPOIN,AVAIL,FRACSED_GF,AVA0,
     & LGRAFED,CALWC,XMVS,XMVE,GRAV,VCE,XWC,FDM,
     & CALAC,AC, SEDCO, ES, NCOUCH_TASS,CONC_VASE,
     & MS_SABLE, MS_VASE,ACLADM, UNLADM)
      USE BIEF
      IMPLICIT NONE
      INTEGER,           INTENT(IN)     :: NSICLA,NPOIN
      INTEGER,           INTENT(IN)     :: NCOUCH_TASS
      TYPE(BIEF_OBJ),    INTENT(INOUT)  :: ELAY,ZF,ZR
      TYPE(BIEF_OBJ), INTENT(INOUT)     :: MS_SABLE, MS_VASE
      TYPE(BIEF_OBJ), INTENT(INOUT)      :: ACLADM,UNLADM
      LOGICAL,           INTENT(IN)     :: LGRAFED,CALWC,CALAC
      LOGICAL,           INTENT(IN)     :: SEDCO(NSICLA)
      DOUBLE PRECISION,  INTENT(IN)     :: XMVS,XMVE,GRAV,VCE
      DOUBLE PRECISION,  INTENT(INOUT)  :: AVA0(NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: FRACSED_GF(NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: FDM(NSICLA),XWC(NSICLA)
      DOUBLE PRECISION,  INTENT(INOUT)  :: AC(NSICLA)
      DOUBLE PRECISION, INTENT(IN)    :: CONC_VASE(10)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)

       END SUBROUTINE
      END INTERFACE
C
C
      INTERFACE
        SUBROUTINE INIT_TRANSPORT
     &  (TROUVE,DEBU,HIDING,NSICLA,NPOIN,
     &   T1,T2,T3,T4,T5,T6,T7,T8,T9, T10,T11,T12,T14,
     &   CHARR,QS_C,QSXC, QSYC,CALFA,SALFA,COEFPN,SLOPEFF,
     &   SUSP, QS_S,QS,QSCL, QSCL_C,QSCL_S,QSCLXS,QSCLYS,
     &   UNORM, U2D,V2D,HN,CF,MU,TOB,TOBW,UW,TW,THETAW, FW,HOULE,
     &   AVAIL, ACLADM,UNLADM,KSP, KSR,KS,
     &   ICF,HIDFAC,XMVS,XMVE,GRAV,VCE,XKV,HMIN, KARMAN,
     &   ZERO,PI,AC,IMP_INFLOW_C,ZREF,ICQ,CSTAEQ,
     &   CMAX,CS,CS0,UCONV,VCONV,CORR_CONV,SECCURRENT,BIJK,
     &   IELMT, MESH, FDM,XWC,FD90,SEDCO,VITCE,PARTHENIADES,VITCD,
     &    U3D,V3D,CODE)
        USE BIEF
       IMPLICIT NONE
       INTEGER, INTENT(IN)              :: NSICLA,NPOIN,TROUVE(*),ICQ
       INTEGER, INTENT(IN)              :: ICF,HIDFAC,IELMT,SLOPEFF
       LOGICAL, INTENT(IN)              :: CHARR,DEBU,SUSP,IMP_INFLOW_C
       LOGICAL, INTENT(IN)              :: CORR_CONV,SECCURRENT,SEDCO(*)
       LOGICAL, INTENT(IN)              :: HOULE
       TYPE(BIEF_OBJ), INTENT(IN)    :: U2D,V2D,UNORM, HN,CF
       TYPE(BIEF_OBJ), INTENT(IN)    :: MU,TOB,TOBW,UW,TW,THETAW,FW
       TYPE(BIEF_OBJ), INTENT(IN)    :: ACLADM,UNLADM,KSP, KSR,KS
       TYPE(BIEF_OBJ), INTENT(INOUT) :: HIDING
       TYPE(BIEF_OBJ), INTENT(INOUT) :: QS_C, QSXC, QSYC, CALFA,SALFA
       TYPE(BIEF_OBJ), INTENT(INOUT) :: T1,T2,T3,T4,T5,T6,T7,T8
       TYPE(BIEF_OBJ), INTENT(INOUT) :: T9,T10,T11,T12,T14
       TYPE(BIEF_OBJ), INTENT(INOUT) :: ZREF,CSTAEQ,CS,UCONV,VCONV
       TYPE(BIEF_OBJ), INTENT(INOUT) :: QS_S,QS,QSCL_C,QSCL_S
       TYPE(BIEF_OBJ),  INTENT(INOUT) :: COEFPN
       TYPE(BIEF_OBJ),  INTENT(INOUT) :: QSCLXS,QSCLYS,QSCL
       TYPE(BIEF_MESH), INTENT(INOUT) :: MESH
       DOUBLE PRECISION, INTENT(IN)    :: XMVS,XMVE,GRAV,VCE
       DOUBLE PRECISION, INTENT(IN)    :: XKV,HMIN,KARMAN,ZERO,PI
       DOUBLE PRECISION,  INTENT(IN)    :: PARTHENIADES,BIJK,XWC(NSICLA)
       DOUBLE PRECISION,  INTENT(IN)    :: FD90(NSICLA),CS0(NSICLA)
       DOUBLE PRECISION,  INTENT(IN)    :: VITCE,VITCD
       DOUBLE PRECISION,  INTENT(INOUT) :: AC(NSICLA),CMAX,FDM(NSICLA)
       DOUBLE PRECISION,  INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
!RK
      CHARACTER(LEN=24), INTENT(IN)    :: CODE
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE INTEG ( A , B , IEIN , NPOIN)
       IMPLICIT NONE
       INTEGER, INTENT(IN):: NPOIN
       DOUBLE PRECISION, INTENT(IN)::A(NPOIN), B(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT)::IEIN(NPOIN)
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE LAYER
     &(ZFCL_W,NLAYER,ZR,ZF,ESTRAT,ELAY,MASBAS,
     & ACLADM,NSICLA,NPOIN,ELAY0,VOLTOT,
     & ES,AVAIL,CONST_ALAYER,DTS,ESTRATNEW,NLAYNEW)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZFCL_W,ZR,ZF,MASBAS,ACLADM
      INTEGER,          INTENT(IN)    :: NSICLA, NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DTS
      LOGICAL,          INTENT(IN)    :: CONST_ALAYER
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: NLAYER,ESTRAT,ELAY
      DOUBLE PRECISION, INTENT(INOUT) :: ELAY0
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: VOLTOT(10),ESTRATNEW(NPOIN)
      INTEGER         , INTENT(INOUT) :: NLAYNEW(NPOIN)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE LECDON_SISYPHE(MOTCAR,FILE_DESC,PATH,NCAR,CODE)
          IMPLICIT NONE
          INTEGER, INTENT(IN)               :: NCAR
          CHARACTER(LEN=24), INTENT(IN)     :: CODE
          CHARACTER(LEN=250), INTENT(IN)    :: PATH
          CHARACTER*144, INTENT(INOUT)      :: MOTCAR(*)
          CHARACTER(LEN=144), INTENT(INOUT) :: FILE_DESC(4,300)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE LECLIS
     &  (LIEBOR,EBOR,NPTFR,NBOR,STDGEO,NLIM,KENT,ISEG,XSEG,YSEG ,
     &   NACHB,NUMLIQ,NSICLA,AFBOR,BFBOR,BOUNDARY_COLOUR,MESH)
        USE BIEF_DEF
        IMPLICIT NONE
        INTEGER, INTENT(IN)           :: NPTFR
        INTEGER, INTENT(INOUT)        :: LIEBOR(NPTFR)
        INTEGER, INTENT(INOUT)        :: BOUNDARY_COLOUR(NPTFR)
        TYPE(BIEF_OBJ),INTENT(INOUT)  :: EBOR
        INTEGER, INTENT(INOUT)        :: NBOR(NPTFR)
        INTEGER, INTENT(IN) ::       STDGEO,NLIM,KENT
        INTEGER, INTENT(IN) :: NSICLA
        DOUBLE PRECISION, INTENT(INOUT):: XSEG(NPTFR),YSEG(NPTFR)
        INTEGER, INTENT(INOUT):: ISEG(NPTFR),NACHB(5,*),NUMLIQ(*)
        DOUBLE PRECISION, INTENT(INOUT):: AFBOR(NPTFR),BFBOR(NPTFR)
        TYPE(BIEF_MESH), INTENT(INOUT) :: MESH
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE MASKAB(HN , Q , QU , QV , NPOIN)
       IMPLICIT NONE
       INTEGER, INTENT(IN):: NPOIN
       DOUBLE PRECISION , INTENT(IN)::HN(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT):: Q(NPOIN),QU(NPOIN),QV(NPOIN)
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE MAXSLOPE
     &(SLOPE,ZF,ZR,XEL,YEL,NELEM,NELMAX,NPOIN,IKLE,EVOL,UNSV2D,MESH)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN)             :: NELEM,NELMAX,NPOIN
      INTEGER, INTENT(IN)             :: IKLE(NELMAX,3)
      DOUBLE PRECISION, INTENT(IN   ) :: SLOPE
      DOUBLE PRECISION, INTENT(INOUT) :: ZF(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: ZR(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: XEL(NELMAX,3),YEL(NELMAX,3)
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: EVOL
      TYPE(BIEF_OBJ), INTENT(IN)      :: UNSV2D
      TYPE(BIEF_MESH)                 :: MESH
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE MEAN_GRAIN_SIZE
          USE BIEF
          IMPLICIT NONE
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE NOMVAR_SISYPHE(TEXTE,TEXTPR,MNEMO,NSICLA,UNIT)
          USE DECLARATIONS_SISYPHE, ONLY : MAXVAR
          IMPLICIT NONE
          INTEGER, INTENT(IN)         :: NSICLA
          CHARACTER*8, INTENT(INOUT)  :: MNEMO(MAXVAR)
          CHARACTER*32, INTENT(INOUT) :: TEXTE(MAXVAR),TEXTPR(MAXVAR)
          LOGICAL,INTENT(IN)          :: UNIT
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE NOEROD
     & (H , ZF , ZR , Z , X , Y , NPOIN , CHOIX , NLISS )
       IMPLICIT NONE
       INTEGER, INTENT(IN):: NPOIN , CHOIX
        INTEGER, INTENT(INOUT):: NLISS
       DOUBLE PRECISION, INTENT(IN)::  Z(NPOIN) , ZF(NPOIN)
       DOUBLE PRECISION , INTENT(IN)::  X(NPOIN) , Y(NPOIN), H(NPOIN)
       DOUBLE PRECISION , INTENT(INOUT)::  ZR(NPOIN)
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE PREDES(LLT,AAT)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: LLT
          DOUBLE PRECISION, INTENT(IN) :: AAT
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE QSFORM
          IMPLICIT NONE
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE RESCUE_SISYPHE
     &(QU,QV,Q,U,V,H,S,ZF,HW,TW,THETAW,NPOIN,TROUVE,ALIRE,PASS,
     & ICF,LISTI,MAXVAR)
       IMPLICIT NONE
       INTEGER, INTENT(IN) :: MAXVAR
       INTEGER, INTENT(IN) :: TROUVE(MAXVAR),ALIRE(MAXVAR),NPOIN,ICF
       LOGICAL, INTENT(IN) :: PASS,LISTI
       DOUBLE PRECISION, INTENT(INOUT) :: QU(NPOIN), QV(NPOIN), Q(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: U(NPOIN) , V(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: S(NPOIN) , ZF(NPOIN), H(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: HW(NPOIN), TW(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: THETAW(NPOIN)
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
       SUBROUTINE RESCUE_SISYPHE_NOTPERMA
     & (QU,QV,Q,U,V,H,S,ZF,HW,TW,THETAW,NPOIN,TROUVE,ALIRE,ICF,
     &  ENTET,MAXVAR)
C
       IMPLICIT NONE
C
       INTEGER, INTENT(IN) :: MAXVAR
       INTEGER, INTENT(IN) :: TROUVE(MAXVAR),ALIRE(MAXVAR),NPOIN,ICF
       LOGICAL, INTENT(IN) :: ENTET
C
       DOUBLE PRECISION, INTENT(INOUT) :: QU(NPOIN), QV(NPOIN), Q(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: U(NPOIN) , V(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: S(NPOIN) , ZF(NPOIN), H(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: HW(NPOIN), TW(NPOIN)
       DOUBLE PRECISION, INTENT(INOUT) :: THETAW(NPOIN)
C
       END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE RIDE
     & (KS,TW,UW,UNORM,GRAV,XMVE,XMVS,VCE,NPOIN,KSPRATIO,ACLADM)
        IMPLICIT NONE
        INTEGER, INTENT(IN) ::NPOIN
        DOUBLE PRECISION, INTENT(INOUT) :: KS(NPOIN)
        DOUBLE PRECISION, INTENT(IN) :: GRAV,XMVE,XMVS, VCE
        DOUBLE PRECISION, INTENT(IN) :: UNORM(NPOIN)
        DOUBLE PRECISION, INTENT(IN) :: UW(NPOIN), TW(NPOIN)
        DOUBLE PRECISION, INTENT(IN) :: KSPRATIO
        DOUBLE PRECISION, INTENT(IN) :: ACLADM(NPOIN)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE RIDE_VR
     & (KSR,KS,UNORM,HN,GRAV,XMVE,XMVS,NPOIN,ACLADM)
      IMPLICIT NONE
      INTEGER, INTENT(IN)            :: NPOIN
      DOUBLE PRECISION, INTENT(IN)   :: GRAV,XMVE,XMVS
      DOUBLE PRECISION, INTENT(INOUT):: KSR(NPOIN),KS(NPOIN)
      DOUBLE PRECISION, INTENT(IN)   :: HN(NPOIN), UNORM(NPOIN)
      DOUBLE PRECISION, INTENT(IN)   :: ACLADM(NPOIN)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE SIS_ERODE
     &  (ZFCL_S,FLUDP,FLUER,DT,NPOIN,XMVS,XKV,QFLUX,SEDCO,CONC_VASE,
     &   NCOUCH_TASS,MS_SABLE, MS_VASE)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZFCL_S,FLUDP,FLUER,QFLUX
      DOUBLE PRECISION, INTENT(IN)    :: DT, XMVS,XKV
      INTEGER, INTENT(IN) :: NPOIN,NCOUCH_TASS
      LOGICAL, INTENT(IN) :: SEDCO
      DOUBLE PRECISION, INTENT(IN) :: CONC_VASE(10)
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_SABLE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_VASE(NPOIN,10)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE SISYPHE(PART,LOOPCOUNT,GRAFCOUNT,LISTCOUNT,TELNIT,
     &                     U_TEL,V_TEL,H_TEL,HN_TEL,
     &                     ZF_SIS,UETCAR,CF_TEL,KS_TEL,
     &                     CONSTFLOW,NSIS_CFD,SISYPHE_CFD,CODE,PERICOU,
     &                     U3D,V3D,T_TEL,VISC_TEL,
     &                     DT_TEL,CHARR_TEL,SUSP_TEL,FLBOR_TEL,
     &                     SOLSYS,DM1,UCONV_TEL,VCONV_TEL,ZCONV)
          USE BIEF_DEF
          IMPLICIT NONE
          INTEGER,          INTENT(IN)   :: PART,LOOPCOUNT,GRAFCOUNT
          INTEGER,          INTENT(IN)   :: LISTCOUNT,TELNIT,PERICOU
          CHARACTER(LEN=24),INTENT(IN)   :: CODE
          TYPE(BIEF_OBJ),   INTENT(IN)   :: U_TEL,V_TEL,H_TEL,HN_TEL
          TYPE(BIEF_OBJ),   INTENT(INOUT):: ZF_SIS, UETCAR
          INTEGER,          INTENT(INOUT):: NSIS_CFD
          LOGICAL,          INTENT(INOUT):: CONSTFLOW,SISYPHE_CFD
          TYPE(BIEF_OBJ),   INTENT(IN)   :: U3D,V3D,VISC_TEL
          TYPE(BIEF_OBJ),   INTENT(INOUT):: CF_TEL,KS_TEL
          DOUBLE PRECISION, INTENT(IN)   :: T_TEL
          LOGICAL, INTENT(INOUT)         :: CHARR_TEL,SUSP_TEL
          DOUBLE PRECISION,  INTENT(IN)  :: DT_TEL
          INTEGER,           INTENT(IN)  :: SOLSYS
          TYPE(BIEF_OBJ), INTENT(IN)     :: FLBOR_TEL,DM1,ZCONV
          TYPE(BIEF_OBJ), INTENT(IN)     :: UCONV_TEL,VCONV_TEL
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE TASSEMENT
     &(ZF,NPOIN,DTS,ELAY,DZF_TASS,T2,LT,AVAIL,NSICLA,ES,XMVS,
     & XKV,TRANS_MASS,CONC_VASE,NCOUCH_TASS,MS_SABLE, MS_VASE)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER, INTENT(IN) :: NPOIN,NSICLA
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DZF_TASS,ZF,ELAY,T2
      DOUBLE PRECISION,  INTENT(INOUT):: MS_SABLE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT):: MS_VASE(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)    :: DTS
      INTEGER, INTENT(IN)             :: LT,NCOUCH_TASS
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN) :: TRANS_MASS(10), CONC_VASE(10)
      DOUBLE PRECISION, INTENT(IN) :: XMVS, XKV
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE TOBW_SISYPHE(TOBW ,CF, FW, UW,TW,HN,NPOIN,XMVE)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: NPOIN
          DOUBLE PRECISION, INTENT(IN) :: CF(NPOIN)
          DOUBLE PRECISION, INTENT(IN) :: UW(NPOIN),TW(NPOIN),HN(NPOIN)
          DOUBLE PRECISION, INTENT(IN)    :: XMVE
          DOUBLE PRECISION, INTENT(INOUT) :: TOBW(NPOIN),FW(NPOIN)
        END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE TOB_SISYPHE
     & (TOB, TOBW, MU, KS,KSP, KSR,CF,FW,CHESTR,UETCAR,
     &  CF_TEL,KS_TEL,CODE,
     &  KFROT,ICR, KSPRATIO, HOULE,GRAV,XMVE,XMVS, VCE, KARMAN,
     &  ZERO,HMIN,HN, ACLADM, UNORM,UW, TW, NPOIN,KSPRED,IKS)
      USE BIEF
      IMPLICIT NONE
      INTEGER, INTENT(IN) :: NPOIN,KFROT,ICR,IKS
      LOGICAL, INTENT(IN) :: HOULE,KSPRED
      CHARACTER(LEN=24),  INTENT(IN) :: CODE
      DOUBLE PRECISION,   INTENT(IN) :: XMVE,XMVS, VCE,GRAV,KARMAN
      DOUBLE PRECISION,   INTENT(IN) :: ZERO,HMIN,KSPRATIO
      TYPE(BIEF_OBJ), INTENT(IN)   :: UETCAR
      TYPE(BIEF_OBJ), INTENT(IN)   :: HN,UNORM
      TYPE(BIEF_OBJ), INTENT(IN)   :: TW,UW
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: KS,KSP,KSR
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: CHESTR,MU
      TYPE(BIEF_OBJ), INTENT(IN)   :: ACLADM
      TYPE(BIEF_OBJ), INTENT(INOUT) :: CF,TOB
      TYPE(BIEF_OBJ), INTENT(INOUT) :: FW,TOBW
      TYPE(BIEF_OBJ), INTENT(IN)    :: CF_TEL
      TYPE(BIEF_OBJ), INTENT(INOUT) :: KS_TEL
      END SUBROUTINE
      END INTERFACE
C
      INTERFACE
        SUBROUTINE VITCHU_SISYPHE( WS , DENS , DM , GRAV , VCE )
          IMPLICIT NONE
          DOUBLE PRECISION, INTENT(IN)    :: DENS,  DM,  GRAV, VCE
          DOUBLE PRECISION, INTENT(INOUT) :: WS
        END SUBROUTINE
      END INTERFACE
!
!======================================================================!
!======================================================================!
!
      END MODULE INTERFACE_SISYPHE

C
C#######################################################################
C
!>  @par Use(s)
!><br>BIEF, BIEF_DEF
!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
        MODULE INTERFACE_SISYPHE_BEDLOAD !
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
        INTERFACE                        !
      ! ******************************** !

C**********************************************************************C
C SISYPHE RELEASE 5.6  12/01/05  F. HUVELIN                            C
C**********************************************************************C

             ! ======================================= !
             !  INTERFACE FOR THE SISYPHE SUBROUTINE   !
             !         FOR BEDLOAD TRANSPORT           !
             ! ======================================= !


C COPYRIGHT EDF-DTMPL-SOGREAH-LHF-GRADIENT
C**********************************************************************C
C                                                                      C
C                 SSSS I   SSSS Y   Y PPPP  H   H EEEEE                C
C                S     I  S      Y Y  P   P H   H E                    C
C                 SSS  I   SSS    Y   PPPP  HHHHH EEEE                 C
C                    S I      S   Y   P     H   H E                    C
C                SSSS  I  SSSS    Y   P     H   H EEEEE                C
C                                                                      C
C----------------------------------------------------------------------C

!======================================================================!
!======================================================================!

      !================================================================!
      SUBROUTINE BEDLOAD_BAILARD !
      !----------------------------------------------------------------!

     &(U2D,V2D,UCMOY,TOB,TOBW,THETAW,UW,FW,CF,NPOIN,PI,
     & XMVE,GRAV,DENS,XWC,ALPHAW,QSCX,QSCY,QSSX,QSSY,
     & UC3X,UC3Y,US4X,US4Y,THETAC,FCW,QSC,QSS,HOULE)

      USE BIEF_DEF
      IMPLICIT NONE

      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D,V2D,UCMOY, TOB
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOBW, THETAW, UW, FW, CF
      INTEGER,          INTENT(IN)    :: NPOIN
      LOGICAL,          INTENT(IN)    :: HOULE
      DOUBLE PRECISION, INTENT(IN)    :: PI, XMVE, GRAV, DENS, XWC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ALPHAW  ! WORK ARRAY BEDLOAD_EB
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSCX, QSCY    ! WORK ARRAY T3 AND T4
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSSX, QSSY    ! WORK ARRAY T5 AND T6
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: UC3X, UC3Y    ! WORK ARRAY T7 AND T8
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: US4X, US4Y    ! WORK ARRAY T9 AND T10
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: THETAC, FCW   ! WORK ARRAY T11 AND T12
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: QSC, QSS
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_BAILARD
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_BIJKER
      !----------------------------------------------------------------!
     &  (TOBW,TOB,MU,KSP,KSR,HN,NPOIN,DM,DENS,XMVE,GRAV,XWC,
     &     KARMAN,ZERO,T4,T7,T8,T9,QSC,QSS,BIJK,HOULE)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOBW, TOB, MU,KSP,KSR,HN
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DM, DENS, XMVE, GRAV, XWC
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, ZERO
      LOGICAL,          INTENT(IN)    :: HOULE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T4
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T7, T8, T9
      TYPE(BIEF_OBJ),   INTENT(INOUT)  :: QSC, QSS
      DOUBLE PRECISION, INTENT(IN)     :: BIJK
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_BIJKER
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_CALCDW
      !----------------------------------------------------------------!
     &  (UCW, UW, TW, NPOIN, PI, UW1, UW2, TW1, TW2)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)  :: UCW, UW, TW
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: PI
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: UW1, UW2, TW1, TW2
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_CALCDW
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_DIBWAT !
      !----------------------------------------------------------------!

     &  (U2D,V2D,UCMOY, CF, TOB, TOBW, UW, TW, FW, THETAW, NPOIN,
     &   XMVE, DENS, GRAV, DM, XWC, PI, ALPHAW, T2, T3, UCW, UCN,
     &   UW1, UW2, TW1, TW2, THETAC, FCW, QSC,HOULE)

      USE BIEF_DEF
      IMPLICIT NONE

      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D,V2D,UCMOY, CF, TOB, TOBW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UW, TW, FW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: THETAW
      INTEGER,          INTENT(IN)    :: NPOIN
      LOGICAL,          INTENT(IN)    :: HOULE
      DOUBLE PRECISION, INTENT(IN)    :: XMVE, DENS, GRAV, DM, XWC, PI
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ALPHAW          ! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T2, T3          !
      TYPE(BIEF_OBJ),   INTENT(INOUT) ::  UCW, UCN ! WORK ARRAY T4, T5, T6
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: UW1, UW2, TW1   ! WORK ARRAY T7, T8, T9
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TW2, THETAC     ! WORK ARRAY T10, T11
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: FCW, QSC        ! WORK ARRAY T12
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_DIBWAT
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_DIFFIN
      !----------------------------------------------------------------!
     &  (U, V, NBOR, XNEBOR, YNEBOR, KP1BOR, MASKEL, NELBOR, NPTFR,
     &   KENT, KSORT, KLOG, KINC, KDIR, KDDL, KNEU, MSK, CLT, LITBOR,
     &   MASKTR, LIMTRA)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ), INTENT(IN)    :: U, V, NBOR, XNEBOR, YNEBOR
      TYPE(BIEF_OBJ), INTENT(IN)    :: KP1BOR, MASKEL, NELBOR
      INTEGER,        INTENT(IN)    :: NPTFR, KENT, KSORT, KLOG
      INTEGER,        INTENT(IN)    :: KINC, KDIR, KDDL, KNEU
      LOGICAL,        INTENT(IN)    :: MSK
      TYPE(BIEF_OBJ), INTENT(INOUT) :: CLT
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: LITBOR, MASKTR, LIMTRA
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_DIFFIN
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_DIRECTION
      !----------------------------------------------------------------!
     &  (QU, QV, NPOIN, PI, THETAC)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)  :: QU, QV
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: PI
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: THETAC
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_DIRECTION
      !================================================================!



      !================================================================!
        SUBROUTINE BEDLOAD_EFFPNT !
      !----------------------------------------------------------------!

     &(MASKEL,LIQBOR,S,ZF,U2D,V2D,UCMOY,NPOIN,NPTFR,IELMT,
     & KENT,BETA,PI,MSK,MESH,DZFDX,DZFDY,EPSIX,EPSIY,
     & COEF,CALFA,SALFA,SLOPEFF,PHISED,DEVIA,BETA2,
     & TOB,XMVS,XMVE,DM,GRAV,UNSV2D,
     & U3D,V3D,CODE)

      USE BIEF_DEF
      IMPLICIT NONE

      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASKEL,LIQBOR,S,UNSV2D
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZF,U2D,V2D,UCMOY,TOB
      INTEGER,          INTENT(IN)    :: NPOIN,NPTFR,IELMT,KENT
      INTEGER,          INTENT(IN)    :: SLOPEFF,DEVIA
      DOUBLE PRECISION, INTENT(IN)    :: BETA,PI,PHISED,BETA2
      DOUBLE PRECISION, INTENT(IN)    :: XMVS,XMVE,GRAV,DM
      LOGICAL,          INTENT(IN)    :: MSK
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: DZFDX,DZFDY
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: EPSIX,EPSIY
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: COEF,CALFA,SALFA
!RK
      CHARACTER(LEN=24), INTENT(IN)    :: CODE
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
!      
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_EFFPNT
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_EINST
      !----------------------------------------------------------------!
     &  (TETAP, NPOIN, DENS, GRAV, DM, DSTAR, QSC)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TETAP
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DENS, GRAV, DM, DSTAR
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: QSC
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_EINST
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_ENGEL
      !----------------------------------------------------------------!
     &        (TOB, CF, DENS, GRAV, DM, XMVE, T1, QSC)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOB, CF
      DOUBLE PRECISION, INTENT(IN)    :: DENS, GRAV, DM, XMVE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_ENGEL
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_ENGEL_OLD
      !----------------------------------------------------------------!
     &   (TETAP,CF,NPOIN,GRAV,DM,DENS,TETA,QSC)
      !----------------------------------------------------------------!
      USE BIEF_DEF
      IMPLICIT NONE

      TYPE(BIEF_OBJ),   INTENT(IN)    :: TETAP, CF
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: GRAV, DM, DENS
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TETA ! WORK ARRAY T1, T2
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_ENGEL_OLD
      !================================================================!


      !================================================================!
        SUBROUTINE BEDLOAD_EVOL !
      !----------------------------------------------------------------!

     &(HN,Q,S,ELAY,ACLADM, AVA,COEFPN,CALFA,SALFA,LIMTEC,EBOR,
     & MASKEL,MASK,MASBAS,UNSV2D,DEBUG,NPOIN,NPTFR,
     & IELMT,KENT,KDIR,KDDL,LOADMETH,
     & DTS,DM,D90,HMIN,LS0,GRAV,XMVS,XMVE,VCE,
     & VF,ENTET,MSK,CONST_ALAYER,LCONDIS,MESH,
     & QS,T1, T2, T3, T4, T5, T6, T7, T8, T9,
     & T10, T11, T12, T13, ELAY0, BREACH, QSX, QSY, ZFCL,SLOPEFF)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: HN,Q,S,UNSV2D
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ELAY,ACLADM
      TYPE(BIEF_OBJ),   INTENT(IN)    :: COEFPN,CALFA,SALFA
      TYPE(BIEF_OBJ),   INTENT(IN)    :: LIMTEC
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASKEL, MASK,MASBAS
      INTEGER,          INTENT(IN)    :: DEBUG,SLOPEFF
      INTEGER,          INTENT(IN)    :: NPOIN, NPTFR
      INTEGER,          INTENT(IN)    :: IELMT,KENT,KDIR
      INTEGER,          INTENT(IN)    :: LOADMETH,KDDL
      DOUBLE PRECISION, INTENT(IN)    :: DTS, DM, D90, HMIN, LS0
      DOUBLE PRECISION, INTENT(IN)    :: GRAV,XMVS,XMVE,VCE,AVA(NPOIN)
      LOGICAL,          INTENT(IN)    :: VF,ENTET,MSK
      LOGICAL,          INTENT(IN)    :: CONST_ALAYER, LCONDIS
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QS,EBOR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1, T2, T3, T4, T5, T6, T7
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T8, T9, T10, T11, T12, T13
      DOUBLE PRECISION, INTENT(INOUT) :: ELAY0
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: BREACH, QSX, QSY, ZFCL

      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_EVOL
      !================================================================!


      !============================!
        SUBROUTINE BEDLOAD_FORMULA !
      !----------------------------------------------------------------!

     &  (U2D, V2D,UCMOY, HN, CF, MU,TOB, TOBW, UW, TW, THETAW, FW,
     &   ACLADM, UNLADM,KSP,KSR, AVA,  NPOIN, ICF, HIDFAC, XMVS, XMVE,
     &   DM, GRAV, VCE, XKV, HMIN, XWC, D90, KARMAN, ZERO,
     &   PI, SUSP, AC, HIDING, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,
     &   T11,CFP, QSC, QSS,IELMT,SECCURRENT,SLOPEFF,
     &   COEFPN, BIJK,HOULE)

      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D, V2D, UCMOY,HN, CF, TOB
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MU,TOBW, UW, TW, THETAW, FW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, UNLADM, KSP,KSR
      INTEGER,          INTENT(IN)    :: NPOIN, ICF, HIDFAC,IELMT
      DOUBLE PRECISION, INTENT(IN)    :: XMVS, XMVE, DM, GRAV, VCE
      DOUBLE PRECISION, INTENT(IN)    :: XKV, HMIN, XWC, D90
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, ZERO, PI
      LOGICAL,          INTENT(IN)    :: SUSP,SECCURRENT,HOULE
      DOUBLE PRECISION, INTENT(INOUT) :: AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1, T2, T3, T4, T5, T6, T7
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T8, T9, T10,T11
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CFP ! WORK ARRAY T12
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC, QSS
      TYPE(BIEF_OBJ),   INTENT(INOUT) ::  COEFPN
      INTEGER,          INTENT(IN)    :: SLOPEFF
      DOUBLE PRECISION, INTENT (IN)   :: BIJK,AVA(NPOIN)

      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_FORMULA
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_HIDING_FACTOR
      !----------------------------------------------------------------!
     &  (ACLADM, HIDFAC, NPOIN, HIDI, DM, KARIM_HOLLY_YANG, HIDING)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)  :: ACLADM
      INTEGER,          INTENT(IN)  :: HIDFAC, NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: HIDI, DM, KARIM_HOLLY_YANG
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_HIDING_FACTOR
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_HUNZ_MEYER
      !----------------------------------------------------------------!
     &  (TOB,MU, ACLADM, UNLADM, NPOIN, DENS, XMVE, GRAV, DM, AC,
     &    TETAP, AHUNZI, ACP, HIDING, QSC)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TOB, MU, ACLADM, UNLADM
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DENS, XMVE, GRAV, DM, AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: TETAP, AHUNZI ! WORK ARRAY T1, T2
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ACP           ! WORK ARRAY T3
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: HIDING, QSC
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_HUNZ_MEYER
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_INTERACT
      !----------------------------------------------------------------!
     &  (UCMOY, TOBW, TOB, ALPHAW, FW, CF, UW, NPOIN, XMVE, FCW)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)  :: UCMOY, TOBW, TOB, ALPHAW
      TYPE(BIEF_OBJ),   INTENT(IN)  :: FW, CF, UW
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: XMVE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: FCW
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_INTERACT
      !================================================================!


      !================================================================!
        SUBROUTINE BEDLOAD_MAIN !
      !----------------------------------------------------------------!

     &  (ACLADM,KSP,KSR, MASBAS,UNSV2D,CF,EBOR,FW,HN,LIQBOR,
     &   MASK, MASKEL, MASKPT, Q, QBOR, U2D,
     &   V2D, S,UNLADM,UW,THETAW,MU,TOB,TOBW,TW,ZF,
     &   DEBUG, HIDFAC, ICF, IELMT, ISOUS, KDDL, KDIR,
     &   KENT, KINC, KLOG, KNEU, KSORT, LOADMETH, LT,
     &   NPOIN, NPTFR, NSICLA, OPTBAN, LS0, BETA, FD90, FDM,
     &   GRAV, HIDI, HMIN, VCE, XKV, XMVE, XMVS, XWC,
     &   PI, KARMAN, ZERO, KARIM_HOLLY_YANG,MSK, SUSP, VF,
     &   ENTET, CONST_ALAYER, LCONDIS, LGRAFED, MESH,
     &   ELAY, LIEBOR, LIMTEC, MASKTR,
     &   IT1, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,
     &   T12,T13,UNORM,AC, AT0, DTS, ELAY0, FRACSED_GF,
     &   AVAIL, BREACH, CALFA, COEFPN,
     &   DZF_GF, HIDING, QSCL_C, QSCL_S, QS_C,
     &   QSCLXC, QSXC, QSCLYC, QSYC, SALFA, ZF_C, ZFCL_C, NSOUS,
     &   ENTETS, SECCURRENT, SLOPEFF,
     &   PHISED, DEVIA, BETA2, BIJK,SEDCO,HOULE,
     &   U3D,V3D,CODE)

      USE BIEF_DEF
      IMPLICIT NONE

      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, KSR,MASBAS,UNSV2D
      TYPE(BIEF_OBJ),   INTENT(IN)    :: CF,FW,KSP,HN,LIQBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASK, MASKEL, MASKPT
      TYPE(BIEF_OBJ),   INTENT(IN)    :: Q, QBOR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: U2D, V2D,TOB, MU,UNORM,EBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: S,UNLADM
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UW, THETAW,  TOBW, TW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZF
      INTEGER,          INTENT(IN)    :: DEBUG, HIDFAC, ICF
      INTEGER,          INTENT(IN)    :: IELMT, ISOUS, KDDL, KDIR, KENT
      INTEGER,          INTENT(IN)    :: KINC, KLOG, KNEU, KSORT
      INTEGER,          INTENT(IN)    :: LOADMETH, LT,NPOIN, NPTFR
      INTEGER,          INTENT(IN)    :: NSICLA, OPTBAN
      DOUBLE PRECISION, INTENT(IN)    :: LS0, BETA, FD90(NSICLA)
      DOUBLE PRECISION, INTENT(IN)    :: FDM(NSICLA),GRAV
      DOUBLE PRECISION, INTENT(IN)    :: HIDI(NSICLA),HMIN,VCE
      DOUBLE PRECISION, INTENT(IN)    :: XKV,XMVE,XMVS,XWC(NSICLA)
      DOUBLE PRECISION, INTENT(IN)    :: PI,KARMAN,ZERO
      DOUBLE PRECISION, INTENT(IN)    :: KARIM_HOLLY_YANG
      LOGICAL,          INTENT(IN)    :: MSK, SUSP, VF
      LOGICAL,          INTENT(IN)    :: ENTET, CONST_ALAYER
      LOGICAL,          INTENT(IN)    :: LCONDIS, LGRAFED,SECCURRENT
      LOGICAL,          INTENT(IN)    :: SEDCO(NSICLA),HOULE
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ELAY
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: LIEBOR, LIMTEC, MASKTR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: IT1,T1,T2,T3,T4,T5,T6,T7
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T8,T9,T10,T11,T12,T13
      DOUBLE PRECISION, INTENT(INOUT) :: AC(NSICLA), AT0, DTS, ELAY0
      DOUBLE PRECISION, INTENT(INOUT) :: FRACSED_GF(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: BREACH,CALFA,COEFPN
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: DZF_GF
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSCL_C,QSCL_S
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QS_C, QSCLXC, QSXC, QSCLYC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSYC, SALFA, ZF_C, ZFCL_C
      INTEGER,          INTENT(INOUT) :: NSOUS
      LOGICAL,          INTENT(INOUT) :: ENTETS
      DOUBLE PRECISION,   INTENT(IN)  :: BETA2, PHISED
      INTEGER, INTENT (IN)            :: SLOPEFF, DEVIA
      DOUBLE PRECISION, INTENT(IN)    :: BIJK
!
!RK
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
      CHARACTER(LEN=24), INTENT(IN)    :: CODE
      
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_MAIN
      !================================================================!


      !================================================================!
        SUBROUTINE BEDLOAD_MEYER !
      !----------------------------------------------------------------!
     &  (TETAP, HIDING, HIDFAC, DENS, GRAV, DM, AC,
     &   ACP, QSC, SLOPEFF, COEFPN)

      USE BIEF_DEF
      IMPLICIT NONE

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TETAP, HIDING
      INTEGER,          INTENT(IN)    :: HIDFAC, SLOPEFF
      DOUBLE PRECISION, INTENT(IN)    :: DENS, GRAV, DM, AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ACP ! WORK ARRAY T1
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: QSC, COEFPN
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_MEYER
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_NEQ_BED_LOAD !
      !----------------------------------------------------------------!

     &  (HN, Q, S, CALFA, SALFA, MASK,LOADMETH, NPOIN, IELMT,
     &   LS0, DM, XMVE, XMVS, GRAV, VCE, D90, MESH, QSLO, T1, T2, T3,
     &   T4, T5, T6, T7, T8, T9, T10,MSK,MASKEL)

      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),   INTENT(IN)    :: HN, Q, S, CALFA, SALFA, MASK
      TYPE (BIEF_OBJ),   INTENT(IN)    :: MASKEL
      INTEGER,           INTENT(IN)    :: LOADMETH, NPOIN, IELMT
      DOUBLE PRECISION,  INTENT(IN)    :: LS0
      DOUBLE PRECISION,  INTENT(IN)    :: DM, XMVE, XMVS, GRAV, VCE, D90
      TYPE (BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE (BIEF_OBJ),   INTENT(INOUT) :: QSLO
      TYPE (BIEF_OBJ),   INTENT(INOUT) :: T1,T2,T3,T4,T5
      TYPE (BIEF_OBJ),   INTENT(INOUT) :: T6,T7,T8,T9,T10
      LOGICAL, INTENT(IN)              :: MSK
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_NEQ_BED_LOAD
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_NERBED_VF   !
      !----------------------------------------------------------------!
     &(MESH,LIEBOR,KSORT,ELAY,MASBAS,QSX,QSY,AVA,NPOIN,NSEG,NPTFR,
     & DT,QS,T1,T2,T3,BREACH)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: LIEBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: QSX, QSY
      INTEGER,          INTENT(IN)    :: NPOIN, NSEG, NPTFR,KSORT
      DOUBLE PRECISION, INTENT(IN)    :: DT
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QS, T1, T2, T3
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: BREACH
      DOUBLE PRECISION, INTENT(IN)    :: ELAY(NPOIN),MASBAS(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: AVA(NPOIN)
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_NERBED_VF
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_POSTREATMENT   !
      !----------------------------------------------------------------!
     & (ACLADM, CALFA, SALFA, DEBUG,
     &  NPOIN, NSICLA, AT0, DTS, XKV,LGRAFED,
     &  CONST_ALAYER, ZFCL_C, ZF_C, QSCL_C,
     &  ELAY0, FRACSED_GF, QSCLXC, QSCLYC, DZF_GF,
     &  QS_C, QSXC, QSYC,OPTBAN,MASKPT,SEDCO)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM,CALFA,SALFA,MASKPT
      INTEGER,          INTENT(IN)    :: DEBUG,OPTBAN
      INTEGER,          INTENT(IN)    :: NPOIN, NSICLA
      DOUBLE PRECISION, INTENT(IN)    :: AT0, DTS, XKV
      LOGICAL,          INTENT(IN)    :: LGRAFED, CONST_ALAYER
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ZFCL_C, ZF_C,QSCL_C
      DOUBLE PRECISION, INTENT(INOUT) :: ELAY0
      DOUBLE PRECISION, INTENT(INOUT) :: FRACSED_GF(NSICLA)
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSCLXC, QSCLYC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: DZF_GF, QS_C, QSXC, QSYC
      LOGICAL, 		INTENT(IN)    :: SEDCO(NSICLA)
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_POSTREATMENT
      !================================================================!


      !================================================================!
        SUBROUTINE BEDLOAD_SOLIDISCHARGE !
      !----------------------------------------------------------------!

     &  (MESH, U2D, V2D, UNORM, HN,  TW, UW, MU,TOB, CF, TOBW, FW,
     &   THETAW, AVA,  MASKPT, MASKEL, ACLADM, UNLADM,KSP, KSR,LIQBOR,
     &   QBOR, DEBUG, NPOIN, NPTFR, IELMT, ICF, KENT, OPTBAN,
     &   HIDFAC, GRAV, DM, D90, XWC, XMVE, XMVS, XKV, VCE, HMIN,
     &   HIDI,KARMAN, ZERO, PI, KARIM_HOLLY_YANG,
     &   SUSP, MSK,T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,
     &   T11,T12, AC,HIDING, QSC, QSS,
     &   SLOPEFF, COEFPN, PHISED, CALFA, SALFA, BETA, ZF_C, S,
     &   DEVIA, BETA2, SECCURRENT,BIJK,HOULE,UNSV2D,
     &   U3D,V3D,CODE)
      USE BIEF_DEF
      IMPLICIT NONE

      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: U2D, V2D,  HN, TW, UW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UNORM,MU,TOB
      TYPE(BIEF_OBJ),   INTENT(IN)    :: KSP, CF, TOBW, FW, THETAW
      TYPE(BIEF_OBJ),   INTENT(IN)    :: MASKPT, MASKEL
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, UNLADM,KSR,LIQBOR, QBOR
      INTEGER,          INTENT(IN)    :: DEBUG
      INTEGER,          INTENT(IN)    :: NPOIN, NPTFR, IELMT, ICF
      INTEGER,          INTENT(IN)    :: KENT, OPTBAN,HIDFAC
      DOUBLE PRECISION, INTENT(IN)    :: GRAV, DM, D90, XWC, XMVE, XMVS
      DOUBLE PRECISION, INTENT(IN)    :: XKV, VCE, HMIN,HIDI
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, ZERO, PI
      DOUBLE PRECISION, INTENT(IN)    :: KARIM_HOLLY_YANG
      LOGICAL,          INTENT(IN)    :: SUSP, MSK,SECCURRENT,HOULE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1,T2,T3,T4,T5,T6
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T7,T8,T9,T10,T11,T12
      DOUBLE PRECISION, INTENT(INOUT) :: AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HIDING,QSC,QSS
      INTEGER,          INTENT(IN)    :: SLOPEFF,DEVIA
      DOUBLE PRECISION, INTENT(IN)    :: PHISED,BETA,BETA2
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZF_C,S,UNSV2D
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CALFA,SALFA,COEFPN
      DOUBLE PRECISION, INTENT(IN)    :: BIJK,AVA(NPOIN)
C
!RK
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D
      CHARACTER(LEN=24), INTENT(IN)    :: CODE
      
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_SOLIDISCHARGE
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_SOULSBY !
      !----------------------------------------------------------------!
     &(UCMOY,HN,UW,NPOIN,DENS,GRAV,DM,DSTAR,HMIN,D90,QSC,QSS)
      USE BIEF_DEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
      TYPE(BIEF_OBJ),   INTENT(IN)  :: HN, UCMOY, UW
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: DENS, GRAV, DM, DSTAR, HMIN, D90
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC, QSS
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_SOULSBY
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_SOLVS_FE   !
      !----------------------------------------------------------------!
     &(MESH,S,EBOR,MASKEL,MASK,
     & QSX,QSY,IELMT,NPOIN,NPTFR,KENT,KDIR,LIMTEC,DT,
     & MSK, ENTET, T1, T4, T8,
     & ZFCL,HZ,HZN,GLOSEG,DIMGLO,FLODEL,FLULIM,NSEG,UNSV2D)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_MESH), INTENT(INOUT)  :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: S,LIMTEC,MASKEL,MASK,QSX,QSY
      INTEGER,          INTENT(IN)    :: IELMT,NPOIN,NPTFR,KENT,KDIR
      INTEGER,          INTENT(IN)    :: DIMGLO,NSEG
      INTEGER,          INTENT(IN)    :: GLOSEG(DIMGLO,2)
      DOUBLE PRECISION, INTENT(IN)    :: DT
      DOUBLE PRECISION, INTENT(INOUT) :: FLULIM(NSEG)
      LOGICAL,          INTENT(IN)    :: MSK,ENTET
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: FLODEL,T1,T4,T8
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: HZ,EBOR
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: ZFCL
      TYPE(BIEF_OBJ),   INTENT(IN)    :: HZN,UNSV2D
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_SOLVS_FE
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_SOLVS_VF   !
      !----------------------------------------------------------------!
     &(MESH,QSX,QSY,LIEBOR,UNSV2D,EBOR,BREACH,NSEG,NPTFR,
     & NPOIN,KENT,KSORT,DT,T10,ZFCL,FLUX)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: QSX, QSY
      TYPE(BIEF_OBJ),   INTENT(IN)    :: LIEBOR,UNSV2D, EBOR
      TYPE(BIEF_OBJ),   INTENT(IN)    :: BREACH
      INTEGER,          INTENT(IN)    :: NSEG,NPTFR,NPOIN,KENT,KSORT
      DOUBLE PRECISION, INTENT(IN)    :: DT
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T10
      TYPE(BIEF_OBJ),   INTENT(INOUT)   :: ZFCL, FLUX
      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_SOLVS_VF
      !================================================================!


      !================================================================!
      SUBROUTINE BEDLOAD_VANRIJN
     &  (TOB,MU, NPOIN, DM, DENS, GRAV, DSTAR, AC, QSC)

      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)  :: TOB,MU
      INTEGER,          INTENT(IN)  :: NPOIN
      DOUBLE PRECISION, INTENT(IN)  :: DM, DENS, GRAV, DSTAR, AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: QSC

      !----------------------------------------------------------------!
      END SUBROUTINE BEDLOAD_VANRIJN
      !================================================================!


!======================================================================!
!======================================================================!

      END INTERFACE
      END MODULE INTERFACE_SISYPHE_BEDLOAD
C
C#######################################################################
C
!>  @par Use(s)
!><br>BIEF, BIEF_DEF
!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
        MODULE INTERFACE_SISYPHE_SUSPENSION !
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
        INTERFACE                           !
      ! *********************************** !

C**********************************************************************C
C SISYPHE RELEASE 5.9  25/06/2008                             F. HUVELIN
C**********************************************************************C

             ! ======================================= !
             !  INTERFACE FOR THE SISYPHE SUBROUTINE   !
             !        FOR THE SUSPENDED TRANSPORT      !
             ! ======================================= !


C COPYRIGHT EDF-DTMPL-SOGREAH-LHF-GRADIENT
C**********************************************************************C
C                                                                      C
C                 SSSS I   SSSS Y   Y PPPP  H   H EEEEE                C
C                S     I  S      Y Y  P   P H   H E                    C
C                 SSS  I   SSS    Y   PPPP  HHHHH EEEE                 C
C                    S I      S   Y   P     H   H E                    C
C                SSSS  I  SSSS    Y   P     H   H EEEEE                C
C                                                                      C
C----------------------------------------------------------------------C

!======================================================================!
!======================================================================!


      !================================================================!
      SUBROUTINE SUSPENSION_BILAN
     &(MESH,CST,HN,ZFCL_S,MASKEL,IELMT,ITRA,LT,NIT,DT,CSF,
     & MASSOU,MASED0,MSK,ENTET,MASTEN,MASTOU,MASINI,T2,
     & T3,MASFIN,MASDEPT,MASDEP,AGGLOT,
     & VOLU2D,NUMLIQ,NFRLIQ,NPTFR,FLBORTRA)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: CST,HN,VOLU2D
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZFCL_S,MASKEL,FLBORTRA
      INTEGER,          INTENT(IN)    :: IELMT,ITRA,LT,NIT
      INTEGER,          INTENT(IN)    :: NFRLIQ,NPTFR
      INTEGER,          INTENT(IN)    :: NUMLIQ(NFRLIQ)
      DOUBLE PRECISION, INTENT(IN)    :: DT,CSF
      DOUBLE PRECISION, INTENT(IN)    :: MASSOU,MASED0,AGGLOT
      LOGICAL,          INTENT(IN)    :: MSK,ENTET
      DOUBLE PRECISION, INTENT(INOUT) :: MASTEN,MASTOU,MASINI
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T2,T3
      DOUBLE PRECISION, INTENT(INOUT) :: MASFIN,MASDEPT,MASDEP
      END SUBROUTINE SUSPENSION_BILAN
      !================================================================!

      !================================================================!
      SUBROUTINE SUSPENSION_COMPUTATION
      ! ********************************* !
     &  (SLVTRA, HN,HN_TEL,UCONV, VCONV,  CF, MU,TOB,ACLADM, KSP,KSR,
     &   KS, ELAY, AVA, AFBOR, BFBOR, LIMDIF, CLT, MASKEL, MASKTR,
     &   MASKPT, IFAMAS, NPOIN, IELMT, NPTFR, ITRA, LT, NIT, RESOL,
     &   OPTBAN, KENT,KDDL,KDIR,KSORT,KLOG,KINC,KNEU,
     &   OPTSUP, OPDTRA, DEBUG, CSF_VASE, CSF_SABLE,
     &   TETA_SUSP, DT, MASED0, ZERO, XWC, KARMAN, XMVE, XMVS, GRAV,
     &   HMIN, VITCD, VITCE,PARTHENIADES, ENTETS,
     &   ENTET, BILMA, MSK, CHARR, IMP_INFLOW_C, MESH, ZF, CS,
     &   CST,CTILD,CBOR,DISP,IT1,IT2,IT3,IT4,TB,T1,T2,T3,
     &   T4, T5, T6, T7, T8, T9, T10, T11, T12, W1, TE1, TE2, TE3, S,
     &   AM1_S, AM2_S, MBOR,MASTEN, MASTOU, MASINI, AC,
     &   ZFCL_S, FLUDPT, FLUDP, FLUER, HPROP, DISP_C, CSTAEQ,
     &   MASFIN, MASDEPT, MASDEP, MASSOU,QS_C,ICQ,ZREF,
     &   CORR_CONV,U2D,V2D,SEDCO,DIFT,
     &   DM1,ZCONV,UCONV_TEL,VCONV_TEL,SOLSYS,FLBOR_TEL,FLBOR_SIS,
     &   FLBORTRA,CODE,
     &   VOLU2D,V2DPAR,UNSV2D,NUMLIQ,NFRLIQ,LICBOR,MIXTE,AVAIL,NSICLA,
     &   ES,NCOUCH_TASS,CONC_VASE,TOCE_VASE,
     &   FLUER_VASE,TOCE_MIXTE,MS_SABLE,MS_VASE,TASS)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (SLVCFG),    INTENT(INOUT) :: SLVTRA
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZF,VOLU2D,V2DPAR,UNSV2D
      TYPE (BIEF_OBJ),  INTENT(IN), TARGET    :: HN,HN_TEL
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: UCONV, VCONV
      TYPE (BIEF_OBJ),  INTENT(IN)    :: CF,MU,TOB,ACLADM,KSP,KSR,KS
      TYPE (BIEF_OBJ),  INTENT(IN)    :: AFBOR,BFBOR,ELAY,LICBOR
      TYPE (BIEF_OBJ),  INTENT(IN)    :: MASKEL,MASKPT,IFAMAS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MASKTR,LIMDIF,CLT
      INTEGER,          INTENT(IN)    :: NPOIN, IELMT, NPTFR, ITRA, LT
      INTEGER,          INTENT(IN)    :: NIT, RESOL,OPTBAN, KENT,KDDL
      INTEGER,          INTENT(IN)    :: KDIR, OPTSUP, OPDTRA,SOLSYS
      INTEGER,          INTENT(IN)    :: KSORT,KLOG,KINC,KNEU
      INTEGER,          INTENT(IN)    :: NFRLIQ,NSICLA,NCOUCH_TASS
      INTEGER,          INTENT(IN)    :: DEBUG
      INTEGER,          INTENT(IN)    :: NUMLIQ(NFRLIQ)
      DOUBLE PRECISION, INTENT(IN)    :: CSF_VASE, TETA_SUSP, DT, MASED0
      DOUBLE PRECISION, INTENT(IN)    :: ZERO, XWC,CSF_SABLE,AVA(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, XMVE, XMVS, GRAV, HMIN
      DOUBLE PRECISION, INTENT(IN)    :: VITCD, VITCE,PARTHENIADES
      LOGICAL,          INTENT(IN)    :: ENTETS,ENTET,BILMA,MSK,SEDCO
      LOGICAL,          INTENT(IN)    :: CHARR, IMP_INFLOW_C,CORR_CONV
      LOGICAL,          INTENT(IN)    :: DIFT,MIXTE,TASS
      TYPE (BIEF_MESH), INTENT(INOUT) :: MESH
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: CS,CST,CTILD,CBOR,FLBOR_SIS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DISP,IT1,IT2,IT3,IT4,TB
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T2, T3, T4, T5, T6, T7, T8
      TYPE (BIEF_OBJ),  INTENT(INOUT), TARGET :: T1
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T9, T10, T11, T12, W1, TE1
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: TE2, TE3, S, AM1_S, AM2_S
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MBOR,ZREF
      DOUBLE PRECISION, INTENT(INOUT) :: MASTEN, MASTOU, MASINI, AC
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZFCL_S
      TYPE (BIEF_OBJ),  INTENT(IN)    :: UCONV_TEL,VCONV_TEL
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUDPT,FLUDP,FLUER,FLBORTRA
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: HPROP, DISP_C, CSTAEQ
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER_VASE,TOCE_MIXTE
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MS_SABLE,MS_VASE
      DOUBLE PRECISION, INTENT(INOUT) :: MASFIN, MASDEPT, MASDEP
      DOUBLE PRECISION, INTENT(INOUT) :: MASSOU,AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(INOUT) :: CONC_VASE(10),TOCE_VASE(10)
      TYPE (BIEF_OBJ),  INTENT(IN)    :: QS_C,U2D,V2D,DM1,ZCONV
      TYPE (BIEF_OBJ),  INTENT(IN)    :: FLBOR_TEL
      INTEGER,          INTENT(IN)    :: ICQ
      CHARACTER(LEN=24), INTENT(IN)   :: CODE
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_COMPUTATION
      !================================================================!

      !================================================================!
        SUBROUTINE SUSPENSION_CONV !
      !================================================================!
     & (TOB,XMVE,CF,NPOIN,ZREF,U2D,V2D,HN,HMIN,
     &     UCONV,VCONV,KARMAN,ZERO,XWC,T1,ALPHA)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: HN,U2D,V2D,ZREF
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: UCONV, VCONV,T1,ALPHA
      TYPE (BIEF_OBJ),  INTENT(IN)    :: CF, TOB
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: ZERO, XWC,HMIN
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, XMVE
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_CONV
      !================================================================!

      !================================================================!
      SUBROUTINE SUSPENSION_DISPERSION
      !----------------------------------------------------------------!
     & (TOB, XMVE,HN,  OPTDIF, NPOIN, XKX, XKY,
     &   T1, T2, T3, KX, KY, KZ, DISP,U2D,V2D,VISC_TEL,CODE)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TOB, HN,VISC_TEL
      INTEGER,          INTENT(IN)    :: OPTDIF, NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: XMVE, XKX, XKY
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T1, T2, T3
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: KX, KY, KZ, DISP
      TYPE (BIEF_OBJ),  INTENT(IN)    :: U2D,V2D
      CHARACTER(LEN=24), INTENT(IN)   :: CODE
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_DISPERSION
      !================================================================!

      !==============================!
        SUBROUTINE SUSPENSION_DEPOT  !
      ! ***************************  !

     &(TOB, HN,ACLADM,NPOIN, HMIN,XWC,VITCD,
     & ZERO,KARMAN,XMVE,T1,T2,ZREF,FLUDPT,DEBUG,SEDCO)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    ::  TOB,HN, ACLADM
      INTEGER,          INTENT(IN)    ::  NPOIN,DEBUG
      LOGICAL,          INTENT(IN)    :: SEDCO
      DOUBLE PRECISION, INTENT(IN)    ::  HMIN
      DOUBLE PRECISION, INTENT(IN)    :: XWC
      DOUBLE PRECISION, INTENT(IN)    :: VITCD
      DOUBLE PRECISION, INTENT(IN)    :: ZERO, KARMAN,XMVE
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T1, T2
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZREF
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUDPT
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_DEPOT
      !================================================================!

      !================================!
        SUBROUTINE SUSPENSION_EROSION  !
      ! ****************************** !

     &(TAUP,HN,ACLADM,AVA,NPOIN,CHARR,XMVE,XMVS,GRAV,HMIN,XWC,
     & ZERO,ZREF,AC,FLUER,CSTAEQ,QSC,ICQ,DEBUG)
!
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TAUP,HN,ACLADM
      INTEGER,          INTENT(IN)    :: NPOIN,DEBUG
      LOGICAL,          INTENT(IN)    :: CHARR
      DOUBLE PRECISION, INTENT(IN)    :: XMVE,XMVS,GRAV,HMIN
      DOUBLE PRECISION, INTENT(IN)    :: XWC,ZERO,AVA(NPOIN)
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZREF
      DOUBLE PRECISION, INTENT(INOUT) :: AC
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER,CSTAEQ
      TYPE(BIEF_OBJ),   INTENT(IN)    :: QSC
      INTEGER,          INTENT (IN)   :: ICQ
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_EROSION
      !================================================================!

      !================================!
       SUBROUTINE SUSPENSION_EROSION_COH
      ! ****************************** !
     &(TAUP,NPOIN,
     & XMVE,XMVS,GRAV, VITCE,
     & PARTHENIADES,ZERO,DEBUG,
     & FLUER, ES, TOCE_VASE, NCOUCH_TASS, DT, MS_VASE,TASS)
!
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TAUP
      INTEGER,          INTENT(IN)    :: NPOIN,DEBUG
      DOUBLE PRECISION, INTENT(IN)    :: XMVE,XMVS,GRAV
      DOUBLE PRECISION, INTENT(IN)    :: VITCE
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,PARTHENIADES
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_VASE(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)     :: TOCE_VASE(10), DT
      INTEGER,          INTENT(IN)    :: NCOUCH_TASS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      LOGICAL, INTENT(IN) :: TASS
!
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_EROSION_COH
      !================================================================!

      !================================!
        SUBROUTINE SUSPENSION_FLUX_MIXTE
      ! ****************************** !
     &  (TAUP,HN,ACLADM,CS,NPOIN,
     &   CHARR,XMVE,XMVS,GRAV,HMIN,XWC,
     &   ZERO,KARMAN,PARTHENIADES,FLUER_SABLE,FLUER_VASE,ZREF,
     &   AC,CSTAEQ,QSC,ICQ,DEBUG,AVAIL,NSICLA,ES,
     &   TOCE_VASE,NCOUCH_TASS,DT,TOCE_MIXTE,MS_SABLE,MS_VASE)

      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TAUP,HN,ACLADM,CS
      INTEGER,          INTENT(IN)    :: NPOIN,DEBUG,NSICLA
      INTEGER,          INTENT(IN)    :: NCOUCH_TASS
      LOGICAL,          INTENT(IN)    :: CHARR
      DOUBLE PRECISION, INTENT(IN)    :: XMVE, XMVS, GRAV, HMIN
      DOUBLE PRECISION, INTENT(IN)    ::  XWC
      DOUBLE PRECISION, INTENT(IN)    :: ZERO, KARMAN, PARTHENIADES
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZREF
      DOUBLE PRECISION, INTENT(INOUT) :: AC,AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: CSTAEQ
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER_SABLE,FLUER_VASE
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_SABLE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_VASE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT) ::TOCE_MIXTE(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)      :: DT
      TYPE(BIEF_OBJ),   INTENT(IN)       ::  QSC
      INTEGER,          INTENT (IN)      :: ICQ
      DOUBLE PRECISION, INTENT(IN)     :: TOCE_VASE(10)
      !----------------------------------------------------------------!
      END SUBROUTINE
      !================================================================!

      !================================================================!
      SUBROUTINE SUSPENSION_FREDSOE
      !----------------------------------------------------------------!
     &  (ACLADM, TAUP, NPOIN, GRAV, XMVE, XMVS, ZERO, AC,  CSTAEQ)
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, TAUP
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    ::  GRAV, XMVE, XMVS
      DOUBLE PRECISION, INTENT(IN)    :: ZERO
      DOUBLE PRECISION, INTENT(IN)    :: AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) ::  CSTAEQ
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_FREDSOE
      !================================================================!


      !================================================================!
      SUBROUTINE SUSPENSION_LISTING
      !----------------------------------------------------------------!
     &  (MESH,CST,ZFCL_S,UCONV,VCONV,MASKEL,IELMT,DT,MSK,T1)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: CST, ZFCL_S
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UCONV, VCONV, MASKEL
      INTEGER,          INTENT(IN)    :: IELMT
      DOUBLE PRECISION, INTENT(IN)    :: DT
      LOGICAL,          INTENT(IN)    :: MSK
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_LISTING
      !================================================================!


      !================================================================!
        SUBROUTINE SUSPENSION_MAIN
      ! ************************** !

     &(SLVTRA,HN,HN_TEL,MU,TOB,ACLADM,KSP,KSR,KS,
     & CF,VOLU2D,V2DPAR,UNSV2D,AFBOR,
     & BFBOR,ZF,LICBOR,IFAMAS,MASKEL,MASKPT,U2D,V2D,NSICLA,NPOIN,
     & NPTFR,IELMT,OPTDIF,RESOL,LT,NIT,OPTBAN,OPTSUP,OPDTRA,
     & KENT,KSORT,KLOG,KINC,KNEU,KDIR,KDDL,ISOUS,NSOUS,DEBUG,
     & DTS,CSF_VASE,CSF_SABLE,ZERO,GRAV,XKX,XKY,KARMAN,
     & XMVE,XMVS,HMIN,XWC,VITCD,VITCE,PARTHENIADES,ENTET,BILMA,MSK,
     & CHARR,IMP_INFLOW_C,MESH,ZF_S,CS,CST,CTILD,CBOR,DISP,
     & IT1,IT2,IT3,IT4,TB,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,W1,
     & TE1,CLT,TE2,TE3,S,AM1_S,AM2_S,MBOR,ELAY,LIMDIF,
     & MASKTR, TETA_SUSP, AC, MASED0, MASINI, MASTEN,
     & MASTOU, ES,AVAIL,  ENTETS, PASS, ZFCL_S,
     & HPROP, FLUDPT, FLUDP, FLUER, DISP_C, KX, KY,
     & KZ, UCONV, VCONV,QSXS, QSYS, QSCLXS, QSCLYS, QSCL_S,
     & QS_S,QS_C,CSTAEQ,ICQ,MASTCP,MASFIN,MASDEPT,MASDEP,MASSOU,
     & CORR_CONV,ZREF,SEDCO,VISC_TEL,CODE,
     & DIFT,DM1,UCONV_TEL,VCONV_TEL,ZCONV,SOLSYS,FLBOR_TEL,FLBOR_SIS,
     & FLBORTRA,NUMLIQ,NFRLIQ,MIXTE,NCOUCH_TASS,CONC_VASE,
     & TOCE_VASE,FLUER_VASE,TOCE_MIXTE,MS_SABLE,MS_VASE,TASS)
      USE BIEF_DEF
      IMPLICIT NONE
      TYPE (SLVCFG),    INTENT(INOUT) :: SLVTRA
      TYPE (BIEF_OBJ),  INTENT(IN)    :: HN,HN_TEL,MU,TOB, ACLADM
      TYPE (BIEF_OBJ),  INTENT(IN)    :: CF,VOLU2D,AFBOR,BFBOR,ZF
      TYPE (BIEF_OBJ),  INTENT(IN)    :: V2DPAR,UNSV2D,KSP,KSR,KS
      TYPE (BIEF_OBJ),  INTENT(IN)    :: LICBOR, IFAMAS, MASKEL, MASKPT
      TYPE (BIEF_OBJ),  INTENT(IN)    :: U2D, V2D,DM1,ZCONV,FLBOR_TEL
      INTEGER,          INTENT(IN)    :: NSICLA,NPOIN,NPTFR,IELMT
      INTEGER,          INTENT(IN)    :: OPTDIF,RESOL,LT,NIT
      INTEGER,          INTENT(IN)    :: OPTBAN,OPTSUP,OPDTRA,NFRLIQ
      INTEGER,          INTENT(IN)    :: KENT, KSORT, KLOG, KINC, KNEU
      INTEGER,          INTENT(IN)    :: KDIR,KDDL,ISOUS,NSOUS
      INTEGER,          INTENT(IN)    :: DEBUG,SOLSYS,NCOUCH_TASS
      INTEGER,          INTENT(IN)    :: NUMLIQ(NFRLIQ)
      DOUBLE PRECISION, INTENT(IN)    :: DTS,CSF_VASE,CSF_SABLE,KARMAN
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,GRAV,XKX,XKY
      DOUBLE PRECISION, INTENT(IN)    :: XMVE,XMVS,HMIN,XWC(NSICLA)
      DOUBLE PRECISION, INTENT(IN)    :: VITCD,VITCE,PARTHENIADES
      LOGICAL,          INTENT(IN)    :: ENTET,BILMA,MSK,CHARR
      LOGICAL,          INTENT(IN)    :: IMP_INFLOW_C
      LOGICAL,          INTENT(IN)    :: SEDCO(NSICLA),MIXTE,TASS
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZF_S,CS,CST,CTILD,CBOR
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DISP,IT1,IT2,IT3,IT4,TB
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T1,T2,T3,T4,T5,T6,T7,T8
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T9,T10,T11,T12,W1,TE1,CLT
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: TE2,TE3,S,AM1_S,AM2_S,MBOR
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ELAY, LIMDIF,FLBORTRA,MASKTR
      DOUBLE PRECISION, INTENT(INOUT) :: TETA_SUSP, AC(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: MASED0(NSICLA), MASINI(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: MASTEN(NSICLA), MASTOU(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(INOUT) :: TOCE_VASE(10),CONC_VASE(10)
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      LOGICAL,          INTENT(INOUT) :: ENTETS, PASS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZFCL_S,HPROP,ZREF
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUDPT,FLUDP,FLUER
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DISP_C,KX,KY,KZ,UCONV
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: VCONV,FLBOR_SIS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: QSXS,QSYS,QSCLXS,QSCLYS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: QSCL_S,QS_S,CSTAEQ
      TYPE (BIEF_OBJ),  INTENT(IN)    :: QS_C,VISC_TEL
      TYPE (BIEF_OBJ),  INTENT(IN)    :: UCONV_TEL,VCONV_TEL
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER_VASE,TOCE_MIXTE
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MS_SABLE,MS_VASE
      DOUBLE PRECISION, INTENT(OUT)   :: MASTCP(NSICLA),MASFIN(NSICLA)
      DOUBLE PRECISION, INTENT(OUT)   :: MASDEPT(NSICLA),MASDEP(NSICLA)
      DOUBLE PRECISION, INTENT(OUT)   :: MASSOU
      INTEGER, INTENT(IN)             :: ICQ
      LOGICAL, INTENT (IN)            :: CORR_CONV,DIFT
      CHARACTER(LEN=24), INTENT(IN)   :: CODE
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_MAIN
      !================================================================!


      !================================================================!
      SUBROUTINE SUSPENSION_NERBED
      !----------------------------------------------------------------!
     &  (ZR, ELAY, AVA, HN, NPOIN, DT, CSF, HMIN, FLUDP, FLUER, ZF_S)
      !----------------------------------------------------------------!
      USE BIEF
      IMPLICIT NONE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZR,ELAY,AVA,HN,ZF_S
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DT,CSF,HMIN
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUDP,FLUER
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_NERBED
      !================================================================!


      !================================================================!
        SUBROUTINE SUSPENSION_ROUSE
      !================================================================!

     & (USTAR,HN,NPOIN,KARMAN,HMIN,ZERO,XWC,ZREF,T2)
      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN) :: USTAR,HN,ZREF
      INTEGER,          INTENT(IN) :: NPOIN
      DOUBLE PRECISION, INTENT(IN) :: KARMAN,XWC,HMIN,ZERO
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T2
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_ROUSE
      !================================================================!

      !================================================================!
        SUBROUTINE SUSPENSION_BIJKER
      !================================================================!

     &  (TAUP, HN, NPOIN, CHARR, QSC, ZREF, ZERO, HMIN, CSTAEQ, XMVE)


      USE BIEF
      IMPLICIT NONE
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TAUP, HN,QSC
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZREF
      INTEGER,          INTENT(IN)    :: NPOIN
      LOGICAL,          INTENT(IN)    :: CHARR
      DOUBLE PRECISION, INTENT(IN)    :: ZERO
      DOUBLE PRECISION, INTENT(IN)    :: HMIN, XMVE
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CSTAEQ
      !----------------------------------------------------------------!
      END SUBROUTINE SUSPENSION_BIJKER
      !================================================================!
      ! ************************** !
        SUBROUTINE SUSPENSION_EVOL
      ! ************************** !

     &  (ZFCL_S,FLUDP,FLUER,DT, NPOIN,CSF,XMVS, QFLUX,MS,
     &   SEDCO,CONC_VASE,NCOUCH_TASS)
       USE BIEF
       IMPLICIT NONE
       TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZFCL_S,FLUDP,FLUER,QFLUX
       DOUBLE PRECISION, INTENT(IN)    :: DT, XMVS, CSF
       INTEGER, INTENT(IN) :: NPOIN,NCOUCH_TASS
       LOGICAL, INTENT(IN) :: SEDCO
       DOUBLE PRECISION, INTENT(IN) :: CONC_VASE(NCOUCH_TASS)
       DOUBLE PRECISION,  INTENT(INOUT) :: MS(NPOIN,NCOUCH_TASS)

      END SUBROUTINE SUSPENSION_EVOL
      ! ***************************** !
        SUBROUTINE SUSPENSION_VANRIJN ! (_IMP_)
      ! ***************************** !

     &  (ACLADM, TAUP, NPOIN, GRAV, 
     &   XMVE, XMVS, ZERO, AC, CSTAEQ,ZREF)

      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, TAUP,ZREF
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    ::  GRAV,  XMVE, XMVS
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CSTAEQ

      END SUBROUTINE SUSPENSION_VANRIJN


!======================================================================!
!======================================================================!

      END INTERFACE
      END MODULE INTERFACE_SISYPHE_SUSPENSION
C
C#######################################################################
C
          SUBROUTINE KS_SISYPHE(IKS,KS,KSP,KSR,KSPRATIO,HOULE,
     &           GRAV,XMVE,XMVS,VCE,
     &           HMIN,HN,ACLADM,UNORM,UW,TW,NPOIN)

C 
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
C
      USE BIEF
C
      INTEGER,            INTENT(IN)  :: NPOIN,IKS
      LOGICAL,            INTENT(IN)  :: HOULE
      DOUBLE PRECISION,   INTENT(IN)  :: XMVE,XMVS, VCE,GRAV
      DOUBLE PRECISION,   INTENT(IN)  :: HMIN,KSPRATIO
      TYPE(BIEF_OBJ), INTENT(IN)      :: HN,UNORM
      TYPE(BIEF_OBJ), INTENT(IN)      :: TW,UW
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: KS,KSP,KSR
      TYPE(BIEF_OBJ), INTENT(IN)      :: ACLADM      

C
C
C +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C  BED ROUGHNESS PREDICTOR
C                         SKIN   : KSP
C                         TOTAL  : KS
C                         RIPPLES : KSR
C                         KS PUT IN CHESTR IF NO COUPLING, RE-COMPUTED OTHERWISE
C  NOTE: IT IS RECOMMENDED TO USE FRICTION LAW NO 3 WHEN COUPLING TO
C        AVOID UNNECESSARY COMPUTATION
C +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C SKIN BED ROUGHNESS --> KSP
C
        CALL OS('X=CY    ', X=KSP, Y=ACLADM, C=KSPRATIO)
C
C RIPPLED BED ROUGHNESS --> KSR =KSP
C
        CALL OS('X=CY    ', X=KSR, Y=ACLADM, C=KSPRATIO)
C
C TOTAL BED ROUGHNESS --> KS
C       IKS= 0: FLAT BED     KS=KSP
C       IKS = 1: RIPPLED BED KS= KSP + KSR 
C       IKS=3 :              KS= KSP +KSR +KSMR +KSD

         IF(IKS.EQ.0) THEN
           CALL OS('X=Y     ', X=KS, Y=KSP)
         ENDIF
C
         IF(IKS.EQ.1) THEN
C
           IF(HOULE) THEN
C WIBERG AND HARRIS: KSR (RIPPLES)
C                    KS (RIPPLES + SKIN)
              CALL RIDE(KSR%R, TW%R, UW%R, UNORM%R, GRAV, XMVE,
     &                XMVS, VCE, NPOIN, KSPRATIO, ACLADM%R)
              CALL OS('X=Y+Z   ', X=KS, Y=KSP, Z=KSR)
           ELSE
C VR PREDICTOR : KSR (RIPPLES)
              CALL RIDE_VR(KSR%R,KS%R,UNORM%R,HN%R,GRAV,XMVE,
     &                     XMVS,NPOIN,ACLADM%R)
              CALL OS('X=Y+Z   ', X=KS, Y=KSP, Z=KSR)
           ENDIF
C
         ENDIF  
C
          IF(IKS.EQ.3) THEN            
C VR PREDICTOR : KSR (RIPPLES)
              CALL RIDE_VR(KSR%R,KS%R,UNORM%R,HN%R,GRAV,XMVE,
     &                     XMVS,NPOIN,ACLADM%R)
              CALL OS('X=X+Y   ', X=KS, Y=KSP)
           ENDIF
C 

        END
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES AVAIL FOR EACH CLASS AND EACH LAYER;
!>                NEW STRATUM THICKNESS ESTRAT.
!><br>            ACTIVE LAYER IS LAYER 1, IT IS KEPT AT A PRESCRIBED
!>                HEIGHT OF ELAY0.
!><br>            STRATUM IS LAYER 2 OF HEIGHT ESTRAT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ACLADM, AVAIL, CONST_ALAYER, DTS, ELAY, ELAY0, ES, ESTRAT, ESTRATNEW, MASBAS, NLAYER, NLAYNEW, NPOIN, NSICLA, VOLTOT, ZF, ZFCL_W, ZR
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AEVOL, ARRET, ARRET2, AUX, EVOL, HEIGH, I, J, K, TEST1, TEST2, ZERO
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE(), P_DSUM(), P_ISUM()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 10/05/2010
!> </td><td> JMH
!> </td><td> CASE WITH DEPOSITION REWRITTEN, TESTS CHANGED.
!> <br>      OTHER PARTS REWRITTEN AND/OR OPTIMISED.
!> <br>      CLEAN STOP IN PARALLEL IF PROBLEM.
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 16/09/2009
!> </td><td> JMH
!> </td><td> AVAIL(NPOIN,10,NSICLA)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 2002
!> </td><td> MATTHIEU GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td><--</td><td>SEDIMENT FRACTION FOR EACH LAYER, CLASS, POINT
!>    </td></tr>
!>          <tr><td>CONST_ALAYER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DTS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td><--</td><td>ACTIVE LAYER THICKNESS FOR EACH POINT
!>    </td></tr>
!>          <tr><td>ELAY0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ESTRAT
!></td><td><--</td><td>ACTIVE STRATUM THICKNESS FOR EACH POINT
!>    </td></tr>
!>          <tr><td>ESTRATNEW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASBAS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NLAYER
!></td><td><--</td><td>NUMBER OF LAYER FOR EACH POINT
!>    </td></tr>
!>          <tr><td>NLAYNEW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLTOT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_W
!></td><td>--></td><td>EVOLUTION FOR EACH SEDIMENT CLASS
!>    </td></tr>
!>          <tr><td>ZR
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE LAYER
     &(ZFCL_W,NLAYER,ZR,ZF,ESTRAT,ELAY,MASBAS,ACLADM,NSICLA,NPOIN,
     & ELAY0,VOLTOT,ES,AVAIL,CONST_ALAYER,DTS,ESTRATNEW,NLAYNEW)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLADM         |---| 
C| AVAIL          |<--| SEDIMENT FRACTION FOR EACH LAYER, CLASS, POINT
C| CONST_ALAYER   |---| 
C| DTS            |---| 
C| ELAY           |<--| ACTIVE LAYER THICKNESS FOR EACH POINT
C| ELAY0          |---| 
C| ES             |---| 
C| ESTRAT         |<--| ACTIVE STRATUM THICKNESS FOR EACH POINT
C| ESTRATNEW      |---| 
C| MASBAS         |---| 
C| NLAYER         |<--| NUMBER OF LAYER FOR EACH POINT
C| NLAYNEW        |---| 
C| NPOIN          |---| 
C| NSICLA         |---| 
C| VOLTOT         |---| 
C| ZF             |---| 
C| ZFCL_W         |-->| EVOLUTION FOR EACH SEDIMENT CLASS
C| ZR             |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZFCL_W,ZR,ZF
      TYPE (BIEF_OBJ),  INTENT(IN)    :: MASBAS,ACLADM
      INTEGER,          INTENT(IN)    :: NSICLA,NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: DTS
      LOGICAL,          INTENT(IN)    :: CONST_ALAYER
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: NLAYER,ESTRAT,ELAY
      DOUBLE PRECISION, INTENT(INOUT) :: ELAY0
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: VOLTOT(10),ESTRATNEW(NPOIN)
      INTEGER         , INTENT(INOUT) :: NLAYNEW(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION P_DSUM
      EXTERNAL         P_DSUM
      INTEGER  P_ISUM
      EXTERNAL P_ISUM
C
C-----------------------------------------------------------------------
C
      INTEGER I,J,K,ARRET,ARRET2
      DOUBLE PRECISION EVOL,HEIGH,TEST1,TEST2,AEVOL,AUX
C
C-----------------------------------------------------------------------
C
C     TO CHECK FRACTIONS IN THE RANGE [-ZERO,1+ZERO]
C
      DOUBLE PRECISION ZERO
      DATA             ZERO/1.D-10/
C
C-----------------------------------------------------------------------
C
      ARRET=0
C
C-----------------------------------------------------------------------
C
      DO J=1,NPOIN
C
        IF(.NOT.CONST_ALAYER) ELAY0 = 3.D0 * ACLADM%R(J)
C
        NLAYNEW(J) = NLAYER%I(J)
C
C QUESTION JMH, EVOLUTION HAS BEEN COMPUTED BEFORE IN ARRAY E, WHY NOT
C               EVOL=E(J) ?????
C               ELAY(J) = ES(J,1) WHY IS IT AN EXTRA ARRAY ??
C
C
        EVOL  = 0.D0
        HEIGH = ZF%R(J)-ZR%R(J)
C       HERE ELAY.NE.HEIGH BECAUSE ELAY IS THE ACTIVE LAYER THICKNESS
        DO I=1,NSICLA
          EVOL = EVOL + ZFCL_W%ADR(I)%P%R(J)
        ENDDO
C
        IF(NLAYER%I(J).GT.1) THEN
C
          IF(EVOL.GE.0.D0) THEN
C
C           DEPOSITION
C
C           NEW HEIGHT OF LAYER 2 (IT RECEIVES EVOL TO KEEP LAYER 1 CONSTANT)
            ESTRATNEW(J) = ESTRAT%R(J) + EVOL
C
            DO I=1,NSICLA
C             JMH 28/04/2010. THE OLD IMPLEMENTATION CONSISTED OF FIRST
C             GIVING EVOL TO LAYER 2, WITH OLD AVAIL, THEN OF RECEIVING
C             THE DEPOSITION, BUT IF A CLASS DISAPPEARS IN LAYER 1,
C             IT IS NOT POSSIBLE TO GIVE IT FIRST TO LAYER 2, SO NEW
C             FRACTIONS MUST BE COMPUTED BEFORE GIVING EVOL TO LAYER 2
C             THEN I SEE NO DIFFERENCE BETWEEN EVOLELAY0
C             SO BOTH ARE TREATED BELOW, UNLIKE RELEASE 5.9.
C
C             1) LAYER 1 RECEIVES ZFCL_W OF CLASS I, WE COMPUTE THE
C                PROVISIONAL NEW AVAIL(J,1,I) IN AUX
              AUX=(AVAIL(J,1,I)*ELAY0+ZFCL_W%ADR(I)%P%R(J))/
     &                        (ELAY0+EVOL)
C
C             2) LAYER 2 RECEIVES AUX*EVOL OF CLASS I (AUX MAY BE 0 HERE)
              AVAIL(J,2,I)=(AUX*EVOL+AVAIL(J,2,I)*ESTRAT%R(J))/
     &                               ESTRATNEW(J)
C
C             3) SEEN FROM LAYER 1, AUX*EVOL OF CLASS I HAS BEEN GIVEN
C                AND THE NEW LAYER THICKNESS IS ELAY0, HENCE THE NEW AVAIL
              AVAIL(J,1,I)=( AVAIL(J,1,I)*ELAY0-AUX*EVOL
     &                          +ZFCL_W%ADR(I)%P%R(J) )/ELAY0
!
C NOTE CV: CAN BE REPLACED BY
C              AVAIL(J,1,I)= AUX
!
C             OLD (AND WRONG) FORMULATION (IN IT -AVAIL*EVOL SHOULD BE -AUX*EVOL)
C             AVAIL(J,1,I)=( AVAIL(J,1,I)*(ELAY0-EVOL)
C    &                       +ZFCL_W%ADR(I)%P%R(J)     )/ELAY0
!
C             IF(AVAIL(J,1,I).GT.1.D0+ZERO.OR.
C    *           AVAIL(J,1,I).LT.-ZERO) THEN
C               WRITE(LU,*) 'ERROR IN LAYER CASE 1'
C               STOP
C             ENDIF
            ENDDO
C           NEW HEIGHT OF LAYER 1
            ELAY%R(J) = ELAY0
C
          ELSEIF(EVOL.GT.-ELAY0) THEN
C CV: I DON'T AGREE WITH THE COMMENT BELOW
C     WE'RE IN THE CASE : -ELAY0<EVOL<0 HENCE ELAY0>-EVOL>0
C     THICKNESS OF THE FIRST LAYER IS THEREFORE SUFFICIENT
C
C           EROSION GREATER THAN LAYER 1, WE HAVE TO DESTROY A STRATUM
C
            IF(-EVOL.GT.ESTRAT%R(J)) THEN
!
C  CV: USUALLY, LAYER 2 IS VERY BROAD AND TWO LAYERS ARE IN GENERAL SUFFICIENT
C      HERE LAYER 2 IS DESTROYED
!
C             USUAL CASE (NOTE JMH : WHY NOT .GE.2 ?
!
              IF(NLAYER%I(J).GT.2) THEN
!
                DO I=1,NSICLA
                  AVAIL(J,1,I) = (  AVAIL(J,1,I)*ELAY0
     &                            + ZFCL_W%ADR(I)%P%R(J)
     &                            + AVAIL(J,2,I)*ESTRAT%R(J)
     &                            - AVAIL(J,3,I)*(EVOL+ESTRAT%R(J))
     &                           )/ ELAY0
C                 IF(AVAIL(J,1,I).GT.1.D0+ZERO.OR.
C    &               AVAIL(J,1,I).LT.-ZERO) THEN
C                   WRITE(LU,*) 'ERROR IN LAYER CASE 2'
C                   STOP
C                 ENDIF
                  AVAIL(J,2,I) = AVAIL(J,3,I)
                  DO K=3,MIN(9,NLAYER%I(J))
                    AVAIL(J,K,I) = AVAIL(J,K+1,I)
                  ENDDO
                ENDDO
                ELAY%R(J) = ELAY0
                NLAYNEW(J) = NLAYER%I(J) - 1
                ESTRATNEW(J) = ESTRAT%R(J) + EVOL + ES(J,3)
                DO K=3,MIN(9,NLAYER%I(J))
                  ES(J,K) = ES(J,K+1)
                ENDDO
!
C             ONLY ONE LAYER LEFT (NOTE JMH : 1 OR 2 ?)
!
              ELSE
                DO I=1,NSICLA
                  IF(HEIGH.GT.0.D0) THEN
                    AVAIL(J,1,I) = (  AVAIL(J,1,I)*ELAY0
     &                              + ZFCL_W%ADR(I)%P%R(J)
     &                              + ESTRAT%R(J)*AVAIL(J,2,I)
     &                              )/(ELAY%R(J)+EVOL+ESTRAT%R(J))
C                   IF(AVAIL(J,1,I).GT.1.D0+ZERO.OR.
C    &                 AVAIL(J,1,I).LT.-ZERO) THEN
C                     WRITE(LU,*) 'ERROR IN LAYER CASE 3'
C                     STOP
C                   ENDIF
                  ELSE
                    AVAIL(J,1,I) = 0.D0
                  ENDIF
                  AVAIL(J,2,I) = 0.D0
                ENDDO
                NLAYNEW(J) = NLAYER%I(J) - 1
                ELAY%R(J) = HEIGH
                ESTRATNEW(J) = 0.D0
              ENDIF
!
C           ONLY LAYER 1 ERODED
!
            ELSE
              DO I=1,NSICLA
                AVAIL(J,1,I) = (  AVAIL(J,1,I) * ELAY0
     &                          + ZFCL_W%ADR(I)%P%R(J)
     &                          - EVOL*AVAIL(J,2,I)    )/ELAY0
C               IF(AVAIL(J,1,I).GT.1.D0+ZERO.OR.
C    &             AVAIL(J,1,I).LT.-ZERO) THEN
C                 WRITE(LU,*) 'ERROR IN LAYER CASE 4'
C                 STOP
C               ENDIF
              ENDDO
              ELAY%R(J) = ELAY0
              ESTRATNEW(J) = ESTRAT%R(J) + EVOL
            ENDIF
!
          ELSE
C
C           STOPS IF EROSION IS GREATER THAN
C           THICKNESS OF THE ACTIVE LAYER!
C
            IF(LNG.EQ.1) THEN
              WRITE(LU,*) 'EROSION TROP FORTE AU NOEUD J=',J
              WRITE(LU,*) 'DIMINUER DT OU AUGMENTER ELAY0'
            ENDIF
            IF(LNG.EQ.2) THEN
              WRITE(LU,*) 'TOO MUCH EROSION AT POINT J=',J
              WRITE(LU,*) 'DECREASE DT OR INCREASE ELAY0'
            ENDIF
            WRITE(LU,*) 'EVOL=', EVOL, 'ELAY0=',ELAY0
            CALL PLANTE(1)
            STOP
C
C         END OF TESTS ON EVOL
!
          ENDIF
!
C THERE WAS ONLY ONE LAYER
! ------------------------
!
        ELSE
!
C         IT IS NOW BIG ENOUGH TO MAKE TWO LAYERS
!
          IF(HEIGH.GT.ELAY0) THEN
            NLAYNEW(J) = 2
            ESTRATNEW(J) = HEIGH - ELAY0
            ELAY%R(J) = ELAY0
            DO I=1,NSICLA
              AVAIL(J,2,I) = AVAIL(J,1,I)
              AVAIL(J,1,I) = (AVAIL(J,1,I) * (ELAY0-EVOL)
     &                     + ZFCL_W%ADR(I)%P%R(J) )/ELAY0
C             IF(AVAIL(J,1,I).GT.1.D0+ZERO.OR.
C    &           AVAIL(J,1,I).LT.-ZERO) THEN
C                WRITE(LU,*) 'ERROR IN LAYER CASE 5'
C                STOP
C             ENDIF
            ENDDO
!
C IF THERE REMAINS ONLY ONE LAYER
! -------------------------------
!
          ELSE
C           NOTE JMH: THE TRICKIEST PART...
C           THE PROBLEM OF 0/0 CREATED BY THE CHOICE OF AVAIL
C           AS MAIN VARIABLE...
            IF(ELAY%R(J)+EVOL.GT.1.D-15) THEN
              DO I=1,NSICLA
C               AUX=AVAIL(J,1,I)
                AVAIL(J,1,I) = (AVAIL(J,1,I)*ELAY%R(J)+
     &                          ZFCL_W%ADR(I)%P%R(J))
     &                          / (ELAY%R(J)+EVOL)
C               IF(AVAIL(J,1,I).GT.1.D0+ZERO.OR.
C    &            AVAIL(J,1,I).LT.-ZERO) THEN
C                 WRITE(LU,*) 'ERROR IN LAYER CASE 6'
C                 WRITE(LU,*) 'INITIAL AVAIL=',AUX
C                 WRITE(LU,*) 'J=',J,' CLASS ',I
C                 WRITE(LU,*) 'EVOL=',EVOL,' ELAY=',ELAY%R(J)
C                 WRITE(LU,*) 'ZFCL=',ZFCL_W%ADR(I)%P%R(J)
C                 WRITE(LU,*) 'DENOMINATOR=',ELAY%R(J)+EVOL
C                 WRITE(LU,*) 'NUMERATOR=',AUX*ELAY%R(J)+
C    &                                     ZFCL_W%ADR(I)%P%R(J)
C               ENDIF
                AVAIL(J,2,I) = 0.D0
              ENDDO
              IF(ELAY%R(J)+EVOL.LT.1.D-7) THEN
C               PLAYING WITH ZEROES, RISK OF SUM NOT EQUAL TO 1
C               ONLY BECAUSE OF TRUNCATION ERRORS, WE NORMALISE
                TEST1=0.D0
                DO I=1,NSICLA
                  AVAIL(J,1,I)=MAX(0.D0,MIN(1.D0,AVAIL(J,1,I)))
                  TEST1=TEST1+AVAIL(J,1,I)
                ENDDO
                IF((TEST1-1.D0)**2.GT.ZERO) THEN
                  DO I=1,NSICLA
                    AVAIL(J,1,I)=AVAIL(J,1,I)/MAX(TEST1,1.D-21)
                  ENDDO
                ENDIF
              ENDIF
            ELSE
              DO I=1,NSICLA
                AVAIL(J,1,I) = 0.D0
                AVAIL(J,2,I) = 0.D0
              ENDDO
            ENDIF
            ELAY%R(J) = HEIGH
            ESTRATNEW(J) = 0.D0
            NLAYNEW(J) = 1
          ENDIF
        ENDIF
!
      NLAYER%I(J) = NLAYNEW(J)
      ESTRAT%R(J) = ESTRATNEW(J)
      ES(J,1) = ELAY%R(J)
      IF(NLAYER%I(J).GT.1) ES(J,2) = ESTRAT%R(J)
!
      TEST1 = 0.D0
      TEST2 = 0.D0
!
      DO I=1,NSICLA
        DO K=1,NLAYER%I(J)
C         CHECKS THAT AVAIL IS IN THE RANGE (-ZERO,1+ZERO)
          IF(AVAIL(J,K,I).GT.1.D0+ZERO.OR.AVAIL(J,K,I).LT.-ZERO) THEN
            WRITE(LU,*) 'ERROR ON FRACTIONS'
            WRITE(LU,*) 'LAYER ',K,' CLASS ',I,' POINT ',J
            IF(AVAIL(J,K,I).LT.0.D0) THEN
              WRITE(LU,*) 'AVAIL=' ,AVAIL(J,K,I)
            ELSE
              WRITE(LU,*) 'AVAIL-1=' ,AVAIL(J,K,I)-1.D0
            ENDIF
            WRITE(LU,*) 'ZFCL=',ZFCL_W%ADR(I)%P%R(J)
            WRITE(LU,*) 'EVOL=',EVOL,' ELAY=',ELAY%R(J)
            ARRET=1
          ELSE
C           ONCE CHECKED THAT WE HAVE ONLY TRUNCATION ERRORS, CLIPS
            AVAIL(J,1,I)=MAX(AVAIL(J,1,I),0.D0)
            AVAIL(J,1,I)=MIN(AVAIL(J,1,I),1.D0)
          ENDIF
        ENDDO
        TEST1 = TEST1 + AVAIL(J,1,I)
        TEST2 = TEST2 + AVAIL(J,2,I)
      ENDDO
!
C     CHECKS THAT SUM OF AVAIL IS 1 FOR FIRST 2 LAYERS
!
      IF(TEST1.GT.ZERO.AND.(TEST1-1.D0)**2>ZERO) THEN
        WRITE(LU,*) ' PROBLEM IN LAYER: J,TEST1',J,TEST1
        WRITE(LU,*) ' IN LAYER 1 SUM OF FRACTIONS NOT 1'
        ARRET=1
      ENDIF
      IF(TEST2.GT.ZERO.AND.(TEST2-1.D0)**2>ZERO) THEN
        WRITE(LU,*) ' PROBLEM IN LAYER: J,TEST2',J,TEST2
        WRITE(LU,*) ' IN LAYER 2 SUM OF FRACTIONS IS NOT 1'
        ARRET=1
      ENDIF
!
C     END OF LOOP ON ALL POINTS
!
      ENDDO
C
C     COMPUTES THE TOTAL VOLUME OF SEDIMENTS IN THE DOMAIN
C
      DO I = 1, NSICLA
        VOLTOT(I) = 0.D0
      ENDDO
      DO I=1,NSICLA
        DO J=1,NPOIN
          DO K=1,NLAYER%I(J)
            VOLTOT(I) = VOLTOT(I) + ES(J,K)*AVAIL(J,K,I)*MASBAS%R(J)
          ENDDO
        ENDDO
      ENDDO
!
      IF(NCSIZE.GT.1) THEN
        DO I=1,NSICLA
          VOLTOT(I) = P_DSUM(VOLTOT(I))
        ENDDO
      ENDIF
!
!-----------------------------------------------------------------------
!
C     CLEAN STOP FOR ALL PROCESSORS IF PROBLEM
!
      ARRET2=ARRET
      IF(NCSIZE.GT.1) ARRET2=P_ISUM(ARRET)
      IF(ARRET2.GT.0) THEN
        IF(LNG.EQ.1) WRITE(LU,*) 'ARRET APRES ERREUR DANS LAYER'
        IF(LNG.EQ.2) WRITE(LU,*) 'STOP AFTER AN ERROR IN LAYER'
        IF(ARRET.EQ.0) THEN
          IF(LNG.EQ.1) WRITE(LU,*) 'DANS ',ARRET2,' PROCESSEUR(S)'
          IF(LNG.EQ.2) WRITE(LU,*) 'IN ',ARRET2,' PROCESSOR(S)'
        ENDIF
        CALL PLANTE(1)
        STOP
      ENDIF
!
!-----------------------------------------------------------------------
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       READS THE STEERING FILE BY CALL TO DAMOCLES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CODE, FILE_DESC, MOTCAR, NCAR, PATH
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_TELEMAC :<br>
!> @link DECLARATIONS_TELEMAC::ADV_CAR ADV_CAR@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_LPO ADV_LPO@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_LPO_TF ADV_LPO_TF@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_NSC ADV_NSC@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_NSC_NC ADV_NSC_NC@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_NSC_TF ADV_NSC_TF@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_PSI ADV_PSI@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_PSI_NC ADV_PSI_NC@endlink, 
!> @link DECLARATIONS_TELEMAC::ADV_SUP ADV_SUP@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::AC AC@endlink, 
!> @link DECLARATIONS_SISYPHE::AVA0 AVA0@endlink, 
!> @link DECLARATIONS_SISYPHE::BANDEC BANDEC@endlink, 
!> @link DECLARATIONS_SISYPHE::BETA BETA@endlink, 
!> @link DECLARATIONS_SISYPHE::BETA2 BETA2@endlink, 
!> @link DECLARATIONS_SISYPHE::BIJK BIJK@endlink, 
!> @link DECLARATIONS_SISYPHE::BILMA BILMA@endlink, 
!> @link DECLARATIONS_SISYPHE::BINGEOSIS BINGEOSIS@endlink, 
!> @link DECLARATIONS_SISYPHE::BINHYDSIS BINHYDSIS@endlink, 
!> @link DECLARATIONS_SISYPHE::BINPRESIS BINPRESIS@endlink, 
!> @link DECLARATIONS_SISYPHE::BINREFSIS BINREFSIS@endlink, 
!> @link DECLARATIONS_SISYPHE::BINRESSIS BINRESSIS@endlink, 
!> @link DECLARATIONS_SISYPHE::CALAC CALAC@endlink, 
!> @link DECLARATIONS_SISYPHE::CALWC CALWC@endlink, 
!> @link DECLARATIONS_SISYPHE::CBOR_CLASSE CBOR_CLASSE@endlink, 
!> @link DECLARATIONS_SISYPHE::CHARR CHARR@endlink, 
!> @link DECLARATIONS_SISYPHE::CHOIX CHOIX@endlink, 
!> @link DECLARATIONS_SISYPHE::CONC_VASE CONC_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::CONST_ALAYER CONST_ALAYER@endlink, 
!> @link DECLARATIONS_SISYPHE::CORR_CONV CORR_CONV@endlink, 
!> @link DECLARATIONS_SISYPHE::CRIT_CFD CRIT_CFD@endlink, 
!> @link DECLARATIONS_SISYPHE::CS0 CS0@endlink, 
!> @link DECLARATIONS_SISYPHE::CSF_SABLE CSF_SABLE@endlink, 
!> @link DECLARATIONS_SISYPHE::CSF_VASE CSF_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::CTRLSC CTRLSC@endlink, 
!> @link DECLARATIONS_SISYPHE::DEBU DEBU@endlink, 
!> @link DECLARATIONS_SISYPHE::DEBUG DEBUG@endlink, 
!> @link DECLARATIONS_SISYPHE::DELT DELT@endlink, 
!> @link DECLARATIONS_SISYPHE::DEPER DEPER@endlink, 
!> @link DECLARATIONS_SISYPHE::DEVIA DEVIA@endlink, 
!> @link DECLARATIONS_SISYPHE::DIFT DIFT@endlink, 
!> @link DECLARATIONS_SISYPHE::DREDGESIM DREDGESIM@endlink, 
!> @link DECLARATIONS_SISYPHE::ELAY0 ELAY0@endlink, 
!> @link DECLARATIONS_SISYPHE::FD90 FD90@endlink, 
!> @link DECLARATIONS_SISYPHE::FDM FDM@endlink, 
!> @link DECLARATIONS_SISYPHE::GRAV GRAV@endlink, 
!> @link DECLARATIONS_SISYPHE::HIDFAC HIDFAC@endlink, 
!> @link DECLARATIONS_SISYPHE::HIDI HIDI@endlink, 
!> @link DECLARATIONS_SISYPHE::HMIN HMIN@endlink, 
!> @link DECLARATIONS_SISYPHE::HOULE HOULE@endlink, 
!> @link DECLARATIONS_SISYPHE::HYDRO HYDRO@endlink, 
!> @link DECLARATIONS_SISYPHE::ICF ICF@endlink, 
!> @link DECLARATIONS_SISYPHE::ICQ ICQ@endlink, 
!> @link DECLARATIONS_SISYPHE::ICR ICR@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMH_SIS IELMH_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMT IELMT@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMU_SIS IELMU_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::IMP_INFLOW_C IMP_INFLOW_C@endlink, 
!> @link DECLARATIONS_SISYPHE::I_ORIG I_ORIG@endlink, 
!> @link DECLARATIONS_SISYPHE::J_ORIG J_ORIG@endlink, 
!> @link DECLARATIONS_SISYPHE::KFROT KFROT@endlink, 
!> @link DECLARATIONS_SISYPHE::KSPRATIO KSPRATIO@endlink, 
!> @link DECLARATIONS_SISYPHE::LCONDIS LCONDIS@endlink, 
!> @link DECLARATIONS_SISYPHE::LEOPR LEOPR@endlink, 
!> @link DECLARATIONS_SISYPHE::LGRAFED LGRAFED@endlink, 
!> @link DECLARATIONS_SISYPHE::LISPR LISPR@endlink, 
!> @link DECLARATIONS_SISYPHE::LOADMETH LOADMETH@endlink, 
!> @link DECLARATIONS_SISYPHE::LOGDES LOGDES@endlink, 
!> @link DECLARATIONS_SISYPHE::LOGPRE LOGPRE@endlink, 
!> @link DECLARATIONS_SISYPHE::LS0 LS0@endlink, 
!> @link DECLARATIONS_SISYPHE::LUMPI LUMPI@endlink, 
!> @link DECLARATIONS_SISYPHE::LVMAC LVMAC@endlink, 
!> @link DECLARATIONS_SISYPHE::MARDAT MARDAT@endlink, 
!> @link DECLARATIONS_SISYPHE::MARTIM MARTIM@endlink, 
!> @link DECLARATIONS_SISYPHE::MAXFRO MAXFRO@endlink, 
!> @link DECLARATIONS_SISYPHE::MAXLU_SIS MAXLU_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::MAXVAR MAXVAR@endlink, 
!> @link DECLARATIONS_SISYPHE::MIXTE MIXTE@endlink, 
!> @link DECLARATIONS_SISYPHE::MNEMO MNEMO@endlink, 
!> @link DECLARATIONS_SISYPHE::MSK MSK@endlink, 
!> @link DECLARATIONS_SISYPHE::NCONDIS NCONDIS@endlink, 
!> @link DECLARATIONS_SISYPHE::NCOUCH_TASS NCOUCH_TASS@endlink, 
!> @link DECLARATIONS_SISYPHE::NCP NCP@endlink, 
!> @link DECLARATIONS_SISYPHE::NLAYMAX NLAYMAX@endlink, 
!> @link DECLARATIONS_SISYPHE::NMAREE NMAREE@endlink, 
!> @link DECLARATIONS_SISYPHE::NOMBLAY NOMBLAY@endlink, 
!> @link DECLARATIONS_SISYPHE::NPAS NPAS@endlink, 
!> @link DECLARATIONS_SISYPHE::NPRIV NPRIV@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::NSOUS NSOUS@endlink, 
!> @link DECLARATIONS_SISYPHE::OPDTRA OPDTRA@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTASS OPTASS@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTBAN OPTBAN@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTDIF OPTDIF@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTSUP OPTSUP@endlink, 
!> @link DECLARATIONS_SISYPHE::PARTHENIADES PARTHENIADES@endlink, 
!> @link DECLARATIONS_SISYPHE::PERCOU PERCOU@endlink, 
!> @link DECLARATIONS_SISYPHE::PERMA PERMA@endlink, 
!> @link DECLARATIONS_SISYPHE::PHISED PHISED@endlink, 
!> @link DECLARATIONS_SISYPHE::PMAREE PMAREE@endlink, 
!> @link DECLARATIONS_SISYPHE::PRODUC PRODUC@endlink, 
!> @link DECLARATIONS_SISYPHE::PTINIG PTINIG@endlink, 
!> @link DECLARATIONS_SISYPHE::PTINIL PTINIL@endlink, 
!> @link DECLARATIONS_SISYPHE::RC RC@endlink, 
!> @link DECLARATIONS_SISYPHE::RESOL RESOL@endlink, 
!> @link DECLARATIONS_SISYPHE::SECCURRENT SECCURRENT@endlink, 
!> @link DECLARATIONS_SISYPHE::SEDCO SEDCO@endlink, 
!> @link DECLARATIONS_SISYPHE::SFON SFON@endlink, 
!> @link DECLARATIONS_SISYPHE::SISCLI SISCLI@endlink, 
!> @link DECLARATIONS_SISYPHE::SISCOU SISCOU@endlink, 
!> @link DECLARATIONS_SISYPHE::SISFON SISFON@endlink, 
!> @link DECLARATIONS_SISYPHE::SISGEO SISGEO@endlink, 
!> @link DECLARATIONS_SISYPHE::SISHYD SISHYD@endlink, 
!> @link DECLARATIONS_SISYPHE::SISMAF SISMAF@endlink, 
!> @link DECLARATIONS_SISYPHE::SISPRE SISPRE@endlink, 
!> @link DECLARATIONS_SISYPHE::SISREF SISREF@endlink, 
!> @link DECLARATIONS_SISYPHE::SISRES SISRES@endlink, 
!> @link DECLARATIONS_SISYPHE::SISSEC SISSEC@endlink, 
!> @link DECLARATIONS_SISYPHE::SISSEO SISSEO@endlink, 
!> @link DECLARATIONS_SISYPHE::SIS_FILES SIS_FILES@endlink, 
!> @link DECLARATIONS_SISYPHE::SLIDE SLIDE@endlink, 
!> @link DECLARATIONS_SISYPHE::SLOPEFF SLOPEFF@endlink, 
!> @link DECLARATIONS_SISYPHE::SLVSED SLVSED@endlink, 
!> @link DECLARATIONS_SISYPHE::SLVTRA SLVTRA@endlink, 
!> @link DECLARATIONS_SISYPHE::SORIMP SORIMP@endlink, 
!> @link DECLARATIONS_SISYPHE::SORLEO SORLEO@endlink, 
!> @link DECLARATIONS_SISYPHE::SORTIS SORTIS@endlink, 
!> @link DECLARATIONS_SISYPHE::SPHERI SPHERI@endlink, 
!> @link DECLARATIONS_SISYPHE::STDGEO STDGEO@endlink, 
!> @link DECLARATIONS_SISYPHE::SUSP SUSP@endlink, 
!> @link DECLARATIONS_SISYPHE::TASS TASS@endlink, 
!> @link DECLARATIONS_SISYPHE::TETA TETA@endlink, 
!> @link DECLARATIONS_SISYPHE::TETA_SUSP TETA_SUSP@endlink, 
!> @link DECLARATIONS_SISYPHE::TEXTE TEXTE@endlink, 
!> @link DECLARATIONS_SISYPHE::TEXTPR TEXTPR@endlink, 
!> @link DECLARATIONS_SISYPHE::TITCA TITCA@endlink, 
!> @link DECLARATIONS_SISYPHE::TOCE_VASE TOCE_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::TPREC TPREC@endlink, 
!> @link DECLARATIONS_SISYPHE::TRANS_MASS TRANS_MASS@endlink, 
!> @link DECLARATIONS_SISYPHE::UNIT UNIT@endlink, 
!> @link DECLARATIONS_SISYPHE::VALID VALID@endlink, 
!> @link DECLARATIONS_SISYPHE::VARIM VARIM@endlink, 
!> @link DECLARATIONS_SISYPHE::VCE VCE@endlink, 
!> @link DECLARATIONS_SISYPHE::VF VF@endlink, 
!> @link DECLARATIONS_SISYPHE::VITCD VITCD@endlink, 
!> @link DECLARATIONS_SISYPHE::VITCE VITCE@endlink, 
!> @link DECLARATIONS_SISYPHE::XKV XKV@endlink, 
!> @link DECLARATIONS_SISYPHE::XKX XKX@endlink, 
!> @link DECLARATIONS_SISYPHE::XKY XKY@endlink, 
!> @link DECLARATIONS_SISYPHE::XMVE XMVE@endlink, 
!> @link DECLARATIONS_SISYPHE::XMVS XMVS@endlink, 
!> @link DECLARATIONS_SISYPHE::XWC XWC@endlink, 
!> @link DECLARATIONS_SISYPHE::ZERO ZERO@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ADRESS, DIMENS, DOC, EFFPEN, ERR, I, K, MOTCLE, MOTINT, MOTLOG, MOTREA, NMAX, NOM_CAS, NOM_DIC, SUMAVAI, TROUVE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> DAMOCLE(), MAJUS(), NOMVAR_SISYPHE(), PLANTE(), READ_SUBMIT(), SORTIE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>HOMERE_SISYPHE(), HOMERE_TELEMAC2D(), HOMERE_TELEMAC3D()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 03/11/2009
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 09/04/2009
!> </td><td> BD+JMH
!> </td><td> MED FORMAT
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 23/12/2008
!> </td><td> JMH
!> </td><td> KEYWORDS FOR COUPLING WITH DREDGESIM
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 17/10/2008
!> </td><td> JMH
!> </td><td> CHECKS NCSIZE (FOR CONSISTENCY WITH TELEMAC-2D WHEN COUPLING)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 29/07/2008
!> </td><td> CV+JMH
!> </td><td> READS CBOR_CLASSE
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 11/04/2008
!> </td><td> JMH
!> </td><td> DEBUG IS A KEYWORD: DEBUGGER
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> **/03/06
!> </td><td> CV
!> </td><td> ADDED NEW KEYWROD: TASS
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> **/12/2003
!> </td><td> F. HUVELIN
!> </td><td> * INITIALISES F90 TO FDM IF NOT IN THE STEERING FILE
!>          (SEE TEXT : CFH DEC 2003 DEBUT MOD. F90)
!> <br>      * LOGICAL CALWC BECOMES AN INTERNAL VARIABLE
!> <br>      IF CALWC = T, FALL VELOCITIES ARE SPECIFIED BY THE USER
!> <br>      IF CALWC = F, SISYPHE COMPUTES THE FALL VELOCITIES
!> <br>     (SEE TEXT : CFH DEC 2003 DEBUT MOD. CALWC)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> **/10/2003
!> </td><td> C.VILLARET
!> </td><td> * READS KFROT, HOULE
!> <br>      * CSF = CONCENTRATION AT THE BED (% VOLUME)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 2002
!> </td><td> M. GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CODE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FILE_DESC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MOTCAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PATH
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE LECDON_SISYPHE
     &(MOTCAR,FILE_DESC,PATH,NCAR,CODE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CODE           |---| 
C| FILE_DESC      |---| 
C| MOTCAR         |---| 
C| NCAR           |---| 
C| PATH           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_SISYPHE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)               :: NCAR
      CHARACTER(LEN=24), INTENT(IN)     :: CODE
      CHARACTER(LEN=250), INTENT(IN)    :: PATH
C                                                 NMAX
      CHARACTER*144, INTENT(INOUT)      :: MOTCAR(300)
C                                                      NMAX
      CHARACTER(LEN=144), INTENT(INOUT) :: FILE_DESC(4,300)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, PARAMETER :: NMAX = 300
C
      INTEGER            :: I,K,ERR
      INTEGER            :: MOTINT(NMAX)
      INTEGER            :: TROUVE(4,NMAX)
      INTEGER            :: ADRESS(4,NMAX)
      INTEGER            :: DIMENS(4,NMAX)
      DOUBLE PRECISION   :: SUMAVAI
      DOUBLE PRECISION   :: MOTREA(NMAX)
      LOGICAL            :: DOC,EFFPEN
      LOGICAL            :: MOTLOG(NMAX)
      CHARACTER(LEN=250) :: NOM_CAS
      CHARACTER(LEN=250) :: NOM_DIC
      CHARACTER*72       :: MOTCLE(4,NMAX,2)
C
C-----------------------------------------------------------------------
C
C
C-----------------------------------------------------------------------
C
      SUMAVAI = 0

C INITIALISES THE VARIABLES FOR DAMOCLES CALL :
C
      DO K = 1, NMAX
C       A FILENAME NOT GIVEN BY DAMOCLES WILL BE RECOGNIZED AS A WHITE SPACE
C       (IT MAY BE THAT NOT ALL COMPILERS WILL INITIALISE LIKE THAT)
        MOTCAR(K)(1:1)=' '
C
        DIMENS(1,K) = 0
        DIMENS(2,K) = 0
        DIMENS(3,K) = 0
        DIMENS(4,K) = 0
      ENDDO
C
C     WRITES OUT INFO
      DOC = .FALSE.
C
C-----------------------------------------------------------------------
C     OPENS DICTIONNARY AND STEERING FILES
C-----------------------------------------------------------------------
C
      IF(NCAR.GT.0) THEN
C
        NOM_DIC=PATH(1:NCAR)//'SISDICO'
        NOM_CAS=PATH(1:NCAR)//'SISCAS'
C
      ELSE
C
        NOM_DIC='SISDICO'
        NOM_CAS='SISCAS'
C
      ENDIF
C
      OPEN(2,FILE=NOM_DIC,FORM='FORMATTED',ACTION='READ')
      OPEN(3,FILE=NOM_CAS,FORM='FORMATTED',ACTION='READ')
C
C-----------------------------------------------------------------------
C     CALLS DAMOCLES
C-----------------------------------------------------------------------
C
      CALL DAMOCLE( ADRESS , DIMENS  , NMAX   , DOC    , LNG , LU  ,
     &               MOTINT , MOTREA  , MOTLOG , MOTCAR ,
     &               MOTCLE , TROUVE , 2 , 3 ,.FALSE., FILE_DESC )
C
C     DECODES 'SUBMIT' CHAINS
C
      CALL READ_SUBMIT(SIS_FILES,MAXLU_SIS,CODE,FILE_DESC,300)
C
C-----------------------------------------------------------------------
C
C     RETRIEVES FILES NUMBERS IN TELEMAC-2D FORTRAN PARAMETERS
C     AT THIS LEVEL LOGICAL UNITS ARE EQUAL TO THE FILE NUMBER
C
      DO I=1,MAXLU_SIS
        IF(SIS_FILES(I)%TELNAME.EQ.'SISHYD') THEN
          SISHYD=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISGEO') THEN
          SISGEO=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISCLI') THEN
          SISCLI=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISPRE') THEN
          SISPRE=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISRES') THEN
          SISRES=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISREF') THEN
          SISREF=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISCOU') THEN
          SISCOU=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISFON') THEN
          SISFON=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISMAF') THEN
          SISMAF=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISSEC') THEN
          SISSEC=I
        ELSEIF(SIS_FILES(I)%TELNAME.EQ.'SISSEO') THEN
          SISSEO=I
        ENDIF
      ENDDO
C
C-----------------------------------------------------------------------
C
C   ASSIGNS THE STEERING FILE VALUES TO THE PARAMETER FORTRAN NAME
C
C-----------------------------------------------------------------------
C
C ################# !
C INTEGER KEYWORDS  !
C ################# !
C OPTION OF MATRIX ASSEMBLY IS HARD-CODED
C ---------------------------------------------
C
      OPTASS = 1
      PRODUC = 1

      ! DISCRETISES THE VARIABLES
      ! ----------------------------
      IELMT     = 11 ! SEDIMENTOLOGICAL VARIABLES
      IELMH_SIS = 11 ! VARIABLES ASSOCIATED WITH WATER DEPTH
      IELMU_SIS = 11 ! VARIABLES ASSOCIATED WITH VELOCITIES

      ! FOR NOW PRINTOUTS START AT ZERO
      ! -----------------------------------------------
      PTINIG = 0
      PTINIL = 0

      ! NON-EQUILIBIRUM BEDLOAD
      ! ------------------------
      LOADMETH = 0

C     ICM           = MOTINT( ADRESS(1,  1) )
      ICF           = MOTINT( ADRESS(1,  2) )
      NPAS          = MOTINT( ADRESS(1,  3) )
      NMAREE        = MOTINT( ADRESS(1,  4) )
C     N1            = MOTINT( ADRESS(1,  5) )
      LEOPR         = MOTINT( ADRESS(1,  6) )
      LISPR         = MOTINT( ADRESS(1,  7) )
C     STDGEO IS NOT USED, DELETE FROM DECLARATIONS
      STDGEO        = MOTINT( ADRESS(1,  8) )
C     LOGDES IS NOT USED, DELETE FROM DECLARATIONS
      LOGDES        = MOTINT( ADRESS(1,  9) )
C     LOGPRE IS NOT USED, DELETE FROM DECLARATIONS
      LOGPRE        = MOTINT( ADRESS(1, 10) )
      OPTBAN        = MOTINT( ADRESS(1, 11) )
      LVMAC         = MOTINT( ADRESS(1, 12) )
      HYDRO         = MOTINT( ADRESS(1, 13) )
      NSOUS         = MOTINT( ADRESS(1, 14) )
!
      MARDAT(1)     = MOTINT( ADRESS(1, 15) )
      MARDAT(2)     = MOTINT( ADRESS(1, 15) + 1 )
      MARDAT(3)     = MOTINT( ADRESS(1, 15) + 2 )
      MARTIM(1)     = MOTINT( ADRESS(1, 16) )
      MARTIM(2)     = MOTINT( ADRESS(1, 16) + 1 )
      MARTIM(3)     = MOTINT( ADRESS(1, 16) + 2 )
!
      SLVSED%SLV    = MOTINT( ADRESS(1, 17) )
      SLVSED%KRYLOV = MOTINT( ADRESS(1, 18) )
      SLVSED%PRECON = MOTINT( ADRESS(1, 19) )
      SLVSED%NITMAX = MOTINT( ADRESS(1, 20) )
      CHOIX         = MOTINT( ADRESS(1, 21) )
C     ******        = MOTINT( ADRESS(1, 22) )
      NPRIV         = MOTINT( ADRESS(1, 23) )
C
C     NCSIZE        = MOTINT( ADRESS(1, 24) )
C     NUMBER OF PROCESSORS (ALREADY GIVEN IN INIT_FILES2;
C     MUST BE THE SAME, BUT WHEN USING COUPLED MODELS IT CAN
C     WRONGLY BE DIFFERENT)
      IF(NCSIZE.NE.MOTINT(ADRESS(1,24))) THEN
        IF(LNG.EQ.1) THEN
          WRITE(LU,*) 'NOMBRE DE PROCESSEURS PARALLELES DIFFERENT :'
          WRITE(LU,*) 'DEJA DECLARE (CAS DE COUPLAGE ?) :',NCSIZE
          WRITE(LU,*) 'SISYPHE :',MOTINT(ADRESS(1,24))
          WRITE(LU,*) 'LA VALEUR ',NCSIZE,' EST GARDEE'
        ENDIF
        IF(LNG.EQ.2) THEN
          WRITE(LU,*) 'DIFFERENT NUMBER OF PARALLEL PROCESSORS:'
          WRITE(LU,*) 'DECLARED BEFORE (CASE OF COUPLING ?):',NCSIZE
          WRITE(LU,*) 'SISYPHE :',MOTINT(ADRESS(1,24))
          WRITE(LU,*) 'VALUE ',NCSIZE,' IS KEPT'
        ENDIF
      ENDIF
      RESOL         = MOTINT( ADRESS(1, 25) )
      SLVTRA%SLV    = MOTINT( ADRESS(1, 26) )
      SLVTRA%KRYLOV = MOTINT( ADRESS(1, 27) )
      SLVTRA%PRECON = MOTINT( ADRESS(1, 28) )
      SLVTRA%NITMAX = MOTINT( ADRESS(1, 29) )
      OPTDIF        = MOTINT( ADRESS(1, 31) )
      OPTSUP        = MOTINT( ADRESS(1, 32) )
      PRODUC        = MOTINT( ADRESS(1, 33) )
      OPTASS        = MOTINT( ADRESS(1, 34) )
      OPDTRA        = MOTINT( ADRESS(1, 35) )
      DEPER         = MOTINT( ADRESS(1, 36) )
      KFROT         = MOTINT( ADRESS(1, 37) )
      NCONDIS       = MOTINT( ADRESS(1, 38) )
      SLOPEFF       = MOTINT( ADRESS(1, 39) )
      DEVIA         = MOTINT( ADRESS(1, 40) )
      NOMBLAY       = MOTINT( ADRESS(1,251) )
      NSICLA        = MOTINT( ADRESS(1,252) )
      HIDFAC        = MOTINT( ADRESS(1,253) )
      ICQ           = MOTINT( ADRESS(1, 41) )
C     CONTROL SECTIONS
      NCP=DIMENS(1,42)
      ALLOCATE(CTRLSC(NCP),STAT=ERR)
      IF(ERR.NE.0) THEN
        IF(LNG.EQ.1) WRITE(LU,1039) ERR
        IF(LNG.EQ.2) WRITE(LU,2039) ERR
1039    FORMAT(1X,'LECDON_SISYPHE :',/,1X,
     &            'ERREUR A L''ALLOCATION DE CTRLSC : ',/,1X,
     &            'CODE D''ERREUR : ',1I6)
2039    FORMAT(1X,'LECDON_SISYPHE:',/,1X,
     &            'ERROR DURING ALLOCATION OF CTRLSC: ',/,1X,
     &            'ERROR CODE: ',1I6)
      ENDIF
      IF(NCP.GE.1) THEN
        DO K=1,NCP
          CTRLSC(K) = MOTINT( ADRESS(1,42) + K-1 )
        ENDDO
      ENDIF
C     COORDINATES OF THE ORIGIN
      I_ORIG = MOTINT( ADRESS(1,43)   )
      J_ORIG = MOTINT( ADRESS(1,43)+1 )
      DEBUG  = MOTINT( ADRESS(1,44)   )
      NCOUCH_TASS = MOTINT( ADRESS(1,45)   )
C CV V6P0
      ICR  =   MOTINT(ADRESS(1,46)   )
C CV V6P1
      IKS  =   MOTINT(ADRESS(1,47)   )
!
! ############### !
C REAL KEYWORDS   !
! ############### !
!
      ! NON-EQUILIBIRUM BEDLOAD
      ! ------------------------
      LS0         = 1.D0
!
      RC          = MOTREA( ADRESS(2,  1) )
      XMVE        = MOTREA( ADRESS(2,  2) )
      XMVS        = MOTREA( ADRESS(2,  3) )
      DO K=1,NSICLA
        FDM(K)   = MOTREA( ADRESS(2,  4) + K-1 )
      ENDDO
C     IF OLD NAME OF KEYWORD 28 HAS BEEN FOUND
      IF(TROUVE(2,28).EQ.2) THEN
        DO K=1,NSICLA
          FDM(K) = MOTREA( ADRESS(2,28) + K-1 )
        ENDDO
      ENDIF
      XKV         = MOTREA( ADRESS(2,  5) )
CV
CV      AC          = MOTREA( ADRESS(2,  6) )
      DO K=1,MAX(DIMENS(2,6),NSICLA)
         AC(K)   = MOTREA( ADRESS(2, 6) + K-1 )
      ENDDO
      IF(DIMENS(2,6).LT.NSICLA) THEN
        DO K=DIMENS(2,6)+1,NSICLA
          AC(K) = MOTREA( ADRESS(2, 6)+DIMENS(2,6)-1 )
        ENDDO
      ENDIF
CV
      SFON        = MOTREA( ADRESS(2,  7) )
      GRAV        = MOTREA( ADRESS(2,  8) )
      ZERO        = MOTREA( ADRESS(2,  9) )
      SLVSED%ZERO = ZERO
      VCE         = MOTREA( ADRESS(2, 10) )
      HMIN        = MOTREA( ADRESS(2, 11) )
      DELT        = MOTREA( ADRESS(2, 12) )
      TPREC       = MOTREA( ADRESS(2, 13) )
      PMAREE      = MOTREA( ADRESS(2, 14) )
      TETA        = MOTREA( ADRESS(2, 15) )
      BETA        = MOTREA( ADRESS(2, 16) )
      SLVSED%EPS  = MOTREA( ADRESS(2, 17) )
      TETA_SUSP   = MOTREA( ADRESS(2, 18) )
      XKX         = MOTREA( ADRESS(2, 19) )
      XKY         = MOTREA( ADRESS(2, 20) )
      SLVTRA%EPS  = MOTREA( ADRESS(2, 21) )
      DO K=1,NSICLA
         XWC(K)   = MOTREA( ADRESS(2, 22) + K-1 )
      ENDDO
CV
      IF(DIMENS(2,22).LT.NSICLA) THEN
        DO K=DIMENS(2,22)+1,NSICLA
          XWC(K) = MOTREA( ADRESS(2, 22)+DIMENS(2,22)-1 )
        ENDDO
      ENDIF

CV
      CRIT_CFD    = MOTREA( ADRESS(2, 23) )
      KSPRATIO    = MOTREA( ADRESS(2, 24) )
      PHISED      = MOTREA( ADRESS(2, 25) )
      BETA2       = MOTREA( ADRESS(2, 26) )
      BIJK        = MOTREA( ADRESS(2, 27) )
C
      CSF_VASE    = MOTREA( ADRESS(2, 29) )
C
C     INITIAL CONCENTRATIONS
C
      DO K=1,NSICLA
        CS0(K)=MOTREA( ADRESS(2,30) + K-1 )
      ENDDO
      DO K=1,10*MAXFRO
        CBOR_CLASSE(K)=0.D0
      ENDDO
      IF(DIMENS(2,31).GT.0) THEN
        DO K=1,DIMENS(2,31)
          CBOR_CLASSE(K)=MOTREA( ADRESS(2,31) + K-1 )
        ENDDO
      ENDIF
      IF(DIMENS(2,32).GT.0) THEN
        DO K=1,DIMENS(2,32)
          CONC_VASE(K)=MOTREA( ADRESS(2,32) + K-1 )
        ENDDO
      ENDIF
      IF(DIMENS(2,33).GT.0) THEN
        DO K=1,DIMENS(2,33)
          TRANS_MASS(K)=MOTREA( ADRESS(2,33) + K-1 )
        ENDDO
      ENDIF
      IF(DIMENS(2,34).GT.0) THEN
        DO K=1,DIMENS(2,34)
          TOCE_VASE(K)=MOTREA( ADRESS(2,34) + K-1 )
        ENDDO
      ENDIF
C
CV V6P0: 20/07/2009
C
      VITCE= MOTREA( ADRESS(2,35))
C IF MULTI-LAYER CONSOLIDATION MODEL: USE THE VALUE FOR THE FIRST LAYER
C SEE END
      VITCD= MOTREA( ADRESS(2,36))
      PARTHENIADES = MOTREA( ADRESS(2,37))
C
C CONVERTS TO  M/S
C
       PARTHENIADES = PARTHENIADES/XMVS
C
C END MODIFICATION CV 20/07
      DO K=1,NSICLA
         HIDI(K)  = MOTREA( ADRESS(2,253) + K-1 )
         IF (TROUVE(2,255).EQ.1) THEN
           FD90(K)= FDM(K)
         ELSE
           FD90(K)= MOTREA( ADRESS(2,255) + K-1 )
         ENDIF
         AVA0(K)  = MOTREA( ADRESS(2,258) + K-1 )
      ENDDO
      ELAY0       = MOTREA( ADRESS(2,259) )


      ! ################## !
      ! LOGICAL KEYWORDS !
      ! ################## !
C INDEX 99 IS ALREADY USED FOR KEYWORD 'LIST OF FILES'
C INDEX 54 IS ALREADY USED FOR KEYWORD 'DESCRIPTION OF LIBRARIES'
C INDEX 57 IS ALREADY USED FOR KEYWORD 'DEFAULT EXECUTABLE'
      ! SPHERICAL EQUATIONS HARD-CODED
      ! ----------------------------------
      SPHERI       = .FALSE.


      ! COMPUTATION OF FALL VELOCITIES
      ! ------------------------------------------
      CALWC = .FALSE.
      ! IF TROUVE: VELOCITIES ARE USER-DEFINED
      ! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IF (TROUVE(2, 22).EQ.2) CALWC = .TRUE.
C CV
      ! SHIELDS PARAMETER
      ! ------------------------------------------
      CALAC = .FALSE.
      ! IF TROUVE
      ! ~~~~~~~~~~~~~
      IF (TROUVE(2, 6).EQ.2) CALAC = .TRUE.


      BILMA        = MOTLOG( ADRESS(3,  1) )
      PERMA        = MOTLOG( ADRESS(3,  2) )
      BANDEC       = MOTLOG( ADRESS(3,  3) )
      VALID        = MOTLOG( ADRESS(3,  4) )
C     DTVAR        = MOTLOG( ADRESS(3,  5) )
      LUMPI        = MOTLOG( ADRESS(3,  6) )
      SUSP         = MOTLOG( ADRESS(3,  7) )
      CHARR        = MOTLOG( ADRESS(3,  8) )
      HOULE        = MOTLOG( ADRESS(3, 10) )
      CONST_ALAYER = MOTLOG( ADRESS(3, 11) )
      LCONDIS      = MOTLOG( ADRESS(3, 12) )
      LGRAFED      = MOTLOG( ADRESS(3, 13) )
C     USED TO CHECK SIS_FILES(SISPRE)%NAME
      DEBU         = MOTLOG( ADRESS(3, 14) )
      IMP_INFLOW_C = MOTLOG( ADRESS(3, 15) )
      SECCURRENT   = MOTLOG( ADRESS(3, 16) )
      IF(CODE(1:9).EQ.'TELEMAC3D') SECCURRENT = .FALSE.
      UNIT         = MOTLOG( ADRESS(3, 17) )
      VF           = MOTLOG( ADRESS(3,253) )
      CORR_CONV    = MOTLOG( ADRESS(3, 18) )
      DO K=1,NSICLA
        SEDCO(K)   = .FALSE.
      ENDDO
      IF(DIMENS(3,19).GT.0) THEN
        DO K=1,DIMENS(3,19)
          SEDCO(K) = MOTLOG( ADRESS(3,19) + K-1 )
        ENDDO
      ENDIF
      SLIDE    = MOTLOG( ADRESS(3, 20) )
      DIFT     = MOTLOG( ADRESS(3, 21) )
      EFFPEN   = MOTLOG( ADRESS(3, 22) )
      IF(.NOT.EFFPEN) THEN
        SLOPEFF=0
        DEVIA=0
      ENDIF
C CV 06/06/2008
      TASS = MOTLOG(ADRESS(3,23))
      MIXTE=MOTLOG(ADRESS(3,24))
C COUPLING WITH DREDGESIM
      DREDGESIM=MOTLOG(ADRESS(3,25))
C V6P1
      KSPRED   =MOTLOG(ADRESS(3,26))
!
! ################################### !
C CHARACTER STRING KEYWORDS           !
! ################################### !
!
      TITCA            = MOTCAR( ADRESS(4, 1) )(1:72)
      SORTIS           = MOTCAR( ADRESS(4, 2) )(1:72)
      VARIM            = MOTCAR( ADRESS(4, 3) )(1:72)
      SIS_FILES(SISGEO)%NAME=MOTCAR( ADRESS(4,6) )
      SIS_FILES(SISCLI)%NAME=MOTCAR( ADRESS(4,9) )
      SIS_FILES(SISHYD)%NAME=MOTCAR( ADRESS(4,29) )
      SIS_FILES(SISPRE)%NAME=MOTCAR( ADRESS(4,11) )
      SIS_FILES(SISRES)%NAME=MOTCAR( ADRESS(4,12) )
      SIS_FILES(SISFON)%NAME=MOTCAR( ADRESS(4,16) )
      SIS_FILES(SISRES)%FMT = MOTCAR( ADRESS(4,31) )(1:8)
      CALL MAJUS(SIS_FILES(SISRES)%FMT)
C     RESULT FILE FORMAT FOR PREVIOUS SEDIMENTOLOGICAL
C     COMPUTATION...
      SIS_FILES(SISPRE)%FMT = MOTCAR( ADRESS(4,34) )(1:8)
      CALL MAJUS(SIS_FILES(SISPRE)%FMT)
C     REFERENCE FILE FORMAT
      SIS_FILES(SISREF)%FMT = MOTCAR( ADRESS(4,33) )(1:8)
      CALL MAJUS(SIS_FILES(22)%FMT)
C     HYDRODYNAMIC FILE FORMAT
      SIS_FILES(SISHYD)%FMT = MOTCAR( ADRESS(4,32) )(1:8)
      CALL MAJUS(SIS_FILES(SISHYD)%FMT)
C     WAVE FILE FORMAT (COUPLING WITH TOMAWAC)
      SIS_FILES(SISCOU)%FMT = MOTCAR( ADRESS(4,35) )(1:8)
      CALL MAJUS(SIS_FILES(SISCOU)%FMT)
      BINGEOSIS        = MOTCAR( ADRESS(4,18) )(1:3)
      BINHYDSIS        = MOTCAR( ADRESS(4,19) )(1:3)
      BINPRESIS        = MOTCAR( ADRESS(4,20) )(1:3)
      BINRESSIS        = MOTCAR( ADRESS(4,21) )(1:3)
      SIS_FILES(SISREF)%NAME=MOTCAR( ADRESS(4,22) )
      BINREFSIS        = MOTCAR( ADRESS(4,23) )(1:3)
C     DREDGESIM STEERING FILE
      SIS_FILES(SISMAF)%NAME = MOTCAR( ADRESS(4,27) )
C     ******           = MOTCAR( ADRESS(4,28) )
C     WAVE FILE
      SIS_FILES(SISCOU)%NAME=MOTCAR( ADRESS(4,30) )
C !JAJ ####
      SIS_FILES(SISSEC)%NAME=MOTCAR( ADRESS(4,36) )
      SIS_FILES(SISSEO)%NAME=MOTCAR( ADRESS(4,37) )
C
      IF(LNG.EQ.1) WRITE(LU,101)
      IF(LNG.EQ.2) WRITE(LU,102)
101   FORMAT(1X,/,19X, '********************************************',/,
     &            19X, '*               LECDON:                    *',/,
     &            19X, '*        APRES APPEL DE DAMOCLES           *',/,
     &            19X, '*     VERIFICATION DES DONNEES LUES        *',/,
     &            19X, '*     SUR LE FICHIER DES PARAMETRES        *',/,
     &            19X, '********************************************',/)
102   FORMAT(1X,/,19X, '********************************************',/,
     &            19X, '*               LECDON:                    *',/,
     &            19X, '*        AFTER CALLING DAMOCLES            *',/,
     &            19X, '*        CHECKING OF DATA  READ            *',/,
     &            19X, '*         IN THE STEERING FILE             *',/,
     &            19X, '********************************************',/)
C
C-----------------------------------------------------------------------
C
C LOGICALS FOR OUTPUT VARIABLES
C
C  NPRIV MOFIFIED FOR OUTPUT OF USER-BUILT VARIABLES
      CALL NOMVAR_SISYPHE(TEXTE,TEXTPR,MNEMO,NSICLA,UNIT)
      CALL SORTIE(SORTIS , MNEMO , MAXVAR , SORLEO )
      CALL SORTIE(VARIM  , MNEMO , MAXVAR , SORIMP )
      DO I = 1, 4
         IF ((NPRIV.LT.I).AND.
     &       (SORLEO(I+26+(NOMBLAY+4)*NSICLA+NOMBLAY).OR.
     &        SORIMP(I+26+(NOMBLAY+4)*NSICLA+NOMBLAY))) THEN
            NPRIV=MAX(NPRIV,I)
         ENDIF
      ENDDO
C
C-----------------------------------------------------------------------
C
C     CANCELS OUTPUT OF VARIABLES WHICH ARE NOT BUILT IN THIS CASE
C
      IF(.NOT.SUSP) THEN
CV 7/09/2006 MIGHT WANT TO OUTPUT THE SUSPENDED COMPONENT IN BIJKER
C        SORIMP(24+4*NSICLA)=.FALSE.
C        SORIMP(25+4*NSICLA)=.FALSE.
C        SORIMP(26+4*NSICLA)=.FALSE.
      ENDIF
      IF(.NOT.CHARR) THEN
        SORLEO(21+(NOMBLAY+2)*NSICLA)=.FALSE.
        SORLEO(22+(NOMBLAY+2)*NSICLA)=.FALSE.
        SORLEO(23+(NOMBLAY+2)*NSICLA)=.FALSE.
        SORIMP(21+(NOMBLAY+2)*NSICLA)=.FALSE.
        SORIMP(22+(NOMBLAY+2)*NSICLA)=.FALSE.
        SORIMP(23+(NOMBLAY+2)*NSICLA)=.FALSE.
      ENDIF
C
C-----------------------------------------------------------------------
C
C     CV ... IF CANNOT FIND ANY BETTER (MOVED HERE BY JMH, IT WAS AT THE END)
      IF(TASS) NOMBLAY=NCOUCH_TASS
C
C-----------------------------------------------------------------------
C
C CHECKS TETA VALUE
C
      IF( TETA.LT.0.D0.OR.TETA.GT.1.D0) THEN
          IF (LNG.EQ.1) WRITE(LU,50)
          IF (LNG.EQ.2) WRITE(LU,51)
50      FORMAT(/,1X,'VALEUR DE TETA INCORRECTE !            ',/
     &          ,1X,'TETA DOIT ETRE COMPRIS ENTRE 0 ET 1    ')
51      FORMAT(/,1X,'BAD VALUE FOR TETA !                   ',/
     &          ,1X,'TETA MUST BE WITHIN 0 AND 1            ')
        CALL PLANTE(1)
        STOP
      ENDIF
C
C     INITIALISES MSK (MASKING VARIABLE)
C     FOR NOW MASKING IS ONLY DONE FOR ONE 'OPTION FOR THE TREATMENT
C     OF TIDAL FLATS'. SHOULD BE OFFERED AS AN OPTION FOR THE USER TO
C     CREATE ISLANDS IN THE FUTURE
      MSK = .FALSE.
      IF (.NOT.BANDEC) OPTBAN=0
      IF (OPTBAN.EQ.2) MSK = .TRUE.
C
C-----------------------------------------------------------------------
C
C     CHECKS WHETHER THERE IS A VALIDATION FILE
C
      IF (VALID.AND.SIS_FILES(SISREF)%NAME.EQ.' ') THEN
          VALID=.FALSE.
        IF (LNG.EQ.1) WRITE(LU,70)
        IF (LNG.EQ.2) WRITE(LU,71)
        WRITE(LU,*)
70      FORMAT(/,1X,'VALIDATION IMPOSSIBLE  :      ',/
     &          ,1X,'PAS DE FICHIER DE VALIDATION !        ')
71      FORMAT(/,1X,'VALIDATION IS NOT POSSIBLE :  ',/
     &          ,1X,'NO VALIDATION FILE  !                 ')
      ENDIF
C
CMGDL
C     CHECKS THE NUMBER OF
      IF(NSICLA.GT.10) THEN
      IF (LNG.EQ.1) WRITE(LU,80)
        IF (LNG.EQ.2) WRITE(LU,81)
        WRITE(LU,*)
80      FORMAT(/,1X,'LE NOMBRE MAXIMUM DE CLASSES DE SEDIMENTS EST 10')
81      FORMAT(/,1X,'THE MAXIMUM NUMBER OF SEDIMENT CLASSES IS 10')
        CALL PLANTE(1)
        STOP
      ENDIF
C     CHECKS THE SUM OF INITIAL AVAI
      DO I=1,NSICLA
      SUMAVAI = SUMAVAI + AVA0(I)
      ENDDO
      IF(ABS(SUMAVAI-1).GE.1.D-8) THEN
      IF (LNG.EQ.1) WRITE(LU,90)
        IF (LNG.EQ.2) WRITE(LU,91)
        WRITE(LU,*)
90      FORMAT(/,1X,'LA SOMME DES FRACTIONS DE SEDIMENTS ',/
     &          ,1X,'EST DIFFERENTE DE 1 !        ')
91      FORMAT(/,1X,'SUM OF SEDIMENT FRACTIONS IS NOT 1  ')
        CALL PLANTE(1)
        STOP
      ENDIF
C
C     WARNING FOR THE CHOICE OF RIGID BED METHOD
C
      IF(CHOIX.GT.0.AND.CHOIX.LT.4.AND.VF) THEN
      IF(LNG.EQ.1) WRITE(LU,200)
        IF (LNG.EQ.2) WRITE(LU,201)
        WRITE(LU,*)
200     FORMAT(/,1X,'CALCUL EN VOLUMES FINIS : ',/
     &          ,1X,'LA METHODE 4 POUR LES FONDS NON ERODABLES SERA UTIL
     &ISEE ')
201     FORMAT(/,1X,'FINITE VOLUMES CHOSEN: ',/
     &          ,1X,'METHOD 4 FOR RIGID BED WILL BE USED ')
C       ADDED BY JMH 12/07/2007
        CHOIX=4
      ENDIF
      IF (CHOIX.EQ.4.AND..NOT.VF) THEN
        IF(LNG.EQ.1) WRITE(LU,300)
        IF(LNG.EQ.2) WRITE(LU,301)
        WRITE(LU,*)
300     FORMAT(/,1X,'CALCUL EN ELEMENTS FINIS : ',/
     &          ,1X,'LA METHODE 4 NE PEUT ETRE UTILISEE, METHODE 3 UTILI
     &SEE A LA PLACE')
301     FORMAT(/,1X,'FINITE ELEMENTS CHOSEN: ',/
     &          ,1X,'METHOD 4 FOR RIGID BED CAN NOT BE USED, METHOD 3 US
     &ED INSTEAD')
C       ADDED BY JMH 12/07/2007
        CHOIX=3
      ENDIF
C
C     CHECKS THAT THE BEDLOAD TRANSPORT FORMULATION AND THE HIDING
C     FACTOR FORMULATION CAN GO TOGETHER
C
      IF ((HIDFAC.EQ.3.AND.ICF.NE.6).OR.
     &    (HIDFAC.EQ.1.AND.ICF.NE.1).OR.
     &    (HIDFAC.EQ.2.AND.ICF.NE.1)) THEN
      IF (LNG.EQ.1) WRITE(LU,110)
        IF (LNG.EQ.2) WRITE(LU,111)
        WRITE(LU,*)
110     FORMAT(/,1X,'MAUVAIS ASSOCIATION ENTRE LA FORMULE DE TRANSPORT E
     &T LE HIDING FACTOR ')
111     FORMAT(/,1X,'CHOICE OF TRANSPORT FORMULA AND HIDING FACTOR FORMU
     &LATION NOT ALLOWED ')
        CALL PLANTE(1)
        STOP
      ENDIF
C
C     WITHOUT AND WITH COUPLING, SOME CORRECTIONS
C
      IF(CODE(1:7).EQ.'TELEMAC'.AND.
     &   SIS_FILES(SISHYD)%NAME(1:1).NE.' ') THEN
        SIS_FILES(SISHYD)%NAME(1:1)=' '
        IF(LNG.EQ.1) WRITE(LU,112)
112     FORMAT(/,1X,'COUPLAGE : FICHIER HYDRODYNAMIQUE IGNORE')
        IF(LNG.EQ.1) WRITE(LU,113)
113     FORMAT(/,1X,'COUPLING: HYDRODYNAMIC FILE IGNORED')
      ENDIF
C
C     COMPUTATION CONTINUED
C
      IF(DEBU) THEN
        IF(SIS_FILES(SISPRE)%NAME(1:1).EQ.' ') THEN
          IF(LNG.EQ.1) WRITE(LU,312)
312       FORMAT(/,1X,'SUITE DE CALCUL :',/,
     &    1X,'FICHIER PRECEDENT SEDIMENTOLOGIQUE ABSENT')
          IF(LNG.EQ.2) WRITE(LU,313)
313       FORMAT(/,1X,'COMPUTATION CONTINUED:',/,
     &             1X,'PREVIOUS SEDIMENTOLOGICAL FILE MISSING')
          CALL PLANTE(1)
          STOP
        ENDIF
      ELSE
        IF(SIS_FILES(SISPRE)%NAME(1:1).NE.' ') THEN
          SIS_FILES(SISPRE)%NAME(1:1)=' '
          IF(LNG.EQ.1) WRITE(LU,212)
212       FORMAT(/,1X,'PAS DE SUITE DE CALCUL :',/,
     &             1X,'FICHIER PRECEDENT SEDIMENTOLOGIQUE IGNORE')
          IF(LNG.EQ.2) WRITE(LU,213)
213       FORMAT(/,1X,'NO COMPUTATION CONTINUED:',/,
     &             1X,'PREVIOUS SEDIMENTOLOGICAL FILE IGNORED')
        ENDIF
      ENDIF
C
C METHODS NOT CODED UP FOR SUSPENSION
C -------------------------------------------
C
C     JMH ON 09/10/2009 : NEW PARAMETERISATION AND NEW SCHEMES
C
      IF(SUSP) THEN
      IF(RESOL.NE.ADV_CAR   .AND.RESOL.NE.ADV_SUP   .AND.
     &   RESOL.NE.ADV_PSI_NC.AND.RESOL.NE.ADV_NSC_NC.AND.
     &   RESOL.NE.ADV_LPO   .AND.RESOL.NE.ADV_NSC   .AND.
     &   RESOL.NE.ADV_PSI   .AND.RESOL.NE.ADV_LPO_TF.AND.
     &   RESOL.NE.ADV_NSC_TF                              ) THEN
         IF (LNG.EQ.1) WRITE(LU,302) RESOL
         IF (LNG.EQ.2) WRITE(LU,303) RESOL
302      FORMAT(1X,'METHODE DE RESOLUTION NON PROGRAMMEE : ',1I6)
303      FORMAT(1X,'RESOLVING METHOD NOT IMPLEMENTED : ',1I6)
         IF(RESOL.EQ.8) THEN
           IF(LNG.EQ.2) THEN
           WRITE(LU,*) 'LE SCHEMA 8 AVANT VERSION 6.0 EST DEVENU LE 4'
           ENDIF
           IF(LNG.EQ.2) THEN
           WRITE(LU,*) 'NUMBER 8 PRIOR TO VERSION 6.0 IS NOW NUMBER 4'
           ENDIF
         ENDIF
         CALL PLANTE(1)
         STOP
      ENDIF
      ENDIF
CC
C CV 27/01/2005
C
      IF(.NOT.HOULE) SIS_FILES(SISCOU)%NAME(1:1)=' '
      IF(HOULE) THEN
        IF(ICF.NE.4.AND.ICF.NE.5.AND.ICF.NE.8.AND.ICF.NE.9) THEN
          IF(LNG.EQ.1) WRITE(LU,1303) ICF
          IF(LNG.EQ.2) WRITE(LU,1304) ICF
1303      FORMAT(' LA FORMULE DE TRANSPORT',1I3,1X,
     &       'NE PREND PAS EN COMPTE LA HOULE,',/,1X,
     &       'ESSAYER 4, 5, 8 OU 9')
1304      FORMAT(' TRANSPORT FORMULA',1I3,1X,
     &       'DOES NOT TAKE WAVES INTO ACCOUNT,',/,1X,
     &       'TRY 4, 5, 8 OR 9')
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDIF
!
C BEDLOAD AND SUSPENDED TRANSPORT COUPLING
! ---------------------------------
!
      IF((ICF==30.OR.ICF==3.OR.ICF==9).AND.SUSP.AND.CHARR) THEN
        IF(LNG.EQ.1) WRITE(LU,1301) ICF
        IF(LNG.EQ.2) WRITE(LU,1302) ICF
        CALL PLANTE(1)
        STOP
      ENDIF
1301  FORMAT('POUR LA FORMULE :',1I3,/,1X,
     &       'LE TERME DE TRANSPORT EN SUSPENSION EST CALCULE'
     &      ,' LORS DU CHARRIAGE ET LORS DE LA SUSPENSION')
1302  FORMAT('FOR THE FORMULA',1I3,/,1X,
     &       'THE SUSPENSION TERM IS CALCULATED TWICE,'
     &      ,' WITH TOTAL LOAD FORMULA AND SUSPENSION ')
!
C REFERENCE CONCENTRATION
!
C MODIFICATION CV 31/12      IF(ICQ.EQ.2.AND.(PERCOU.NE.1.OR..NOT.CHARR)) THEN
!
      IF(ICQ.EQ.2.AND.(PERCOU.GT.1.OR..NOT.CHARR)) THEN
        IF(LNG == 1) WRITE(LU,1401) ICQ
        IF(LNG == 2) WRITE(LU,1402) ICQ
1401  FORMAT('POUR LA METHODE DE BIJKER: ICQ=',1I3,/,1X,
     &       'LE CHARRIAGE DOIT ETRE CALCULE A CHAQUE PAS DE TEMPS
     &       , CHOISIR  : PERCOU = 1 ET',/,1X,
     &       'CHARRIAGE=OUI')
1402  FORMAT('FOR THE BIJKER REFERENCE CONCENTRATION',1I3,/,1X,
     &       'BEDLOAD MUST BE COMPUTED, CHOOSE:',/,1X,
     &       'BEDLOAD = YES')
        CALL PLANTE(1)
        STOP
      ENDIF
!
C     CHECKS CONSISTENCY OF BEDLOAD LAWS
!
C     SOULSBY SLOPE EFFECT : REQUIRES A THRESHOLD FORMULA
!
      IF(SLOPEFF.EQ.2) THEN
C       CHECK FOR ICF=6
C       IF(ICF.NE.1.AND.ICF.NE.6) THEN
        IF(ICF.NE.1) THEN
        IF(LNG == 1) WRITE(LU,1403) ICF
        IF(LNG == 2) WRITE(LU,1404) ICF
1403    FORMAT('LA LOI DE TRANSPORT SOLIDE, ICI ICF=',1I3,/,1X,
     &         'DOIT ETRE UNE FORMULE A SEUIL',/,1X,
     &         'SI FORMULE POUR EFFET DE PENTE=2 (SOULSBY)')
1404    FORMAT('BED-LOAD TRANSPORT FORMULA, HERE ICF=',1I3,/,1X,
     &         'MUST HAVE A THRESHOLD',/,1X,
     &         'IF FORMULA FOR SLOPE EFFECT=2 (SOULSBY)')
        ENDIF
      ENDIF
C
C V6P0 : COHERENCE IF CONSOLIDATION MODEL IS USED
C VITCE AND CSF_VASE STEM FROM THE FIRST LAYER OF THE MULTI-LAYER MODEL
C +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
      IF(TASS) THEN
        VITCE = SQRT(TOCE_VASE(1)/XMVE)
        CSF_VASE = CONC_VASE(1)/XMVS
      ENDIF
C
      IF(MIXTE) THEN
C       FILLS VOIDS WITH MUD
        CSF_SABLE= 1.D0
      ELSE
C       VOID INDICES TAKEN INTO ACCOUNT
        CSF_SABLE= 1.D0/XKV
      ENDIF
C
      IF((.NOT.MIXTE).AND.SEDCO(1)) THEN
        CHARR=.FALSE.
        ! SUSP=.TRUE.
      ENDIF
C
      IF(NOMBLAY.GT.NLAYMAX) THEN
        WRITE (LU,*) 'NUMBER OF BED LOAD MODEL LAYERS LARGER THAN '
        WRITE (LU,*) 'THE MAXIMUM PROGRAMMED VALUE OF ', NLAYMAX
        CALL PLANTE(1)
        STOP
      ENDIF
      IF(NOMBLAY.LT.2) THEN
        WRITE (LU,*) 'BEWARE: NUMBER OF BED LOAD MODEL LAYERS'
        WRITE (LU,*) '======= LOWER THAN THE DEFAULT VALUE OF 2'
      ENDIF
C
C----------------------------------------------------------------
C
C  V6P1
C
      IF(KSPRED) KFROT=5
C
C
C----------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       READS THE BOUNDARY CONDITION FILE AND
!>                STORES THE DATA READ IN ARRAYS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  JMH : SHOULD REALLY CALL LECLIM INSTEAD
!>               IDENTIFYING THE DIFFERENCES : COPY FOR THE CLASSES ?

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AFBOR, BFBOR, BOUNDARY_COLOUR, EBOR, ISEG, KENT, LIEBOR, MESH, NACHB, NBOR, NLIM, NPTFR, NSICLA, NUMLIQ, STDGEO, XSEG, YSEG
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NBMAXNSHARE NBMAXNSHARE@endlink, 
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink, 
!> @link BIEF_DEF::NHALO NHALO@endlink, 
!> @link BIEF_DEF::NPTIR NPTIR@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> BID, I, IBID, IF1, IF2, IF3, IF4, IF5, IF6, IF7, K, PTIR
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td> 01/10/2008
!> </td><td> JMH
!> </td><td> CORRECTED IFAPAR (FINITE VOLUME IN PARALLEL MODE)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 12/08/2008
!> </td><td> JMH
!> </td><td> READS NHALO AND IFAPAR (CHARACTERISTICS IN PARALLEL MODE)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 16/06/2008
!> </td><td> JMH
!> </td><td> ADDED ARGUMENT BOUNDARY_COLOUR
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td>
!> </td><td> C. LENORMANT; C. MACHET; JACEK.JANKOWSKI@BAW.DE
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AFBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BFBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BOUNDARY_COLOUR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>EBOR
!></td><td><--</td><td>EVOLUTION AUX BORDS
!>    </td></tr>
!>          <tr><td>ISEG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KADH
!></td><td>--></td><td>TYPE DE CONDITION LIMITE DE PAROI (ADHERENCE)
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>--></td><td>TYPE DE CONDITION LIMITE D'ENTREE.
!>    </td></tr>
!>          <tr><td>KINC
!></td><td>--></td><td>TYPE DE CONDITION LIMITE D'ONDE INCIDENTE
!>    </td></tr>
!>          <tr><td>KLOG
!></td><td>--></td><td>TYPE DE CONDITION LIMITE DE PAROI (PAROI)
!>    </td></tr>
!>          <tr><td>KSORT
!></td><td>--></td><td>TYPE DE CONDITION LIMITE DE SORTIE LIBRE
!>    </td></tr>
!>          <tr><td>LIEBOR
!></td><td><--</td><td>TYPES DE CONDITIONS AUX LIMITES EN TEMPERA-
!>                  TURE POUR LES POINTS DE BORD.
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NACHB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NBOR
!></td><td><--</td><td>ADRESSES DES POINTS DE BORD.
!>    </td></tr>
!>          <tr><td>NLIM
!></td><td>--></td><td>NUMERO DE CANAL DU FICHIER DES CONDITIONS LIM.
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>--></td><td>NOMBRE DE POINTS FRONTIERES.
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NUMLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>STDGEO
!></td><td>--></td><td>STANDARD DU FICHIER DE GEOMETRIE.
!>    </td></tr>
!>          <tr><td>XSEG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>YSEG
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE LECLIS
     &(LIEBOR,EBOR,NPTFR,NBOR,STDGEO,NLIM,KENT,ISEG,XSEG,YSEG,
     & NACHB,NUMLIQ,NSICLA,AFBOR,BFBOR,BOUNDARY_COLOUR,MESH)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AFBOR          |---| 
C| BFBOR          |---| 
C| BOUNDARY_COLOUR|---| 
C| EBOR           |<--| EVOLUTION AUX BORDS
C| ISEG           |---| 
C| KADH           |-->| TYPE DE CONDITION LIMITE DE PAROI (ADHERENCE)
C| KENT           |-->| TYPE DE CONDITION LIMITE D'ENTREE.
C| KINC           |-->| TYPE DE CONDITION LIMITE D'ONDE INCIDENTE
C| KLOG           |-->| TYPE DE CONDITION LIMITE DE PAROI (PAROI)
C| KSORT          |-->| TYPE DE CONDITION LIMITE DE SORTIE LIBRE
C| LIEBOR         |<--| TYPES DE CONDITIONS AUX LIMITES EN TEMPERA-
C|                |   | TURE POUR LES POINTS DE BORD.
C| MESH           |---| 
C| NACHB          |---| 
C| NBOR           |<--| ADRESSES DES POINTS DE BORD.
C| NLIM           |-->| NUMERO DE CANAL DU FICHIER DES CONDITIONS LIM.
C| NPTFR          |-->| NOMBRE DE POINTS FRONTIERES.
C| NSICLA         |---| 
C| NUMLIQ         |---| 
C| STDGEO         |-->| STANDARD DU FICHIER DE GEOMETRIE.
C| XSEG           |---| 
C| YSEG           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)            :: NPTFR
      INTEGER, INTENT(INOUT)         :: LIEBOR(NPTFR)
      TYPE(BIEF_OBJ),INTENT(INOUT)   :: EBOR
      INTEGER, INTENT(INOUT)         :: NBOR(NPTFR)
      INTEGER, INTENT(INOUT)         :: BOUNDARY_COLOUR(NPTFR)
      INTEGER, INTENT(IN)            :: STDGEO,NLIM,KENT,NSICLA
      DOUBLE PRECISION, INTENT(INOUT):: XSEG(NPTFR),YSEG(NPTFR)
      INTEGER, INTENT(INOUT)         :: ISEG(NPTFR),NACHB(NBMAXNSHARE,*)
      INTEGER, INTENT(INOUT)         :: NUMLIQ(*)
      DOUBLE PRECISION, INTENT(INOUT):: AFBOR(NPTFR),BFBOR(NPTFR)
      TYPE(BIEF_MESH), INTENT(INOUT) :: MESH
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER IBID,PTIR,I,K,IF1,IF2,IF3,IF4,IF5,IF6,IF7
      DOUBLE PRECISION BID
C
C-----------------------------------------------------------------------
C
      REWIND NLIM
C
C-----------------------------------------------------------------------
C
C READS ALL THE LINES IN THE BOUNDARY CONDITION FILE
C
C
        DO 40 K=1,NPTFR
C
        IF (STDGEO.EQ.3 .AND. NCSIZE.LE.1) THEN

          READ(NLIM,*) IBID,IBID,IBID,BID,BID,BID,BID,
     &                 LIEBOR(K),EBOR%ADR(1)%P%R(K),AFBOR(K),BFBOR(K),
     &                 NBOR(K),BOUNDARY_COLOUR(K)

        ELSEIF (STDGEO.EQ.3 .AND. NCSIZE.GT.1) THEN

          READ(NLIM,*) IBID,IBID,IBID,BID,BID,BID,BID,
     &                 LIEBOR(K),EBOR%ADR(1)%P%R(K),AFBOR(K),BFBOR(K),
     &                 NBOR(K),BOUNDARY_COLOUR(K),
     &                 ISEG(K),XSEG(K),YSEG(K),NUMLIQ(K)
C
        ELSE
          IF(LNG.EQ.1) WRITE(LU,21) STDGEO
          IF(LNG.EQ.2) WRITE(LU,22) STDGEO
          CALL PLANTE(1)
          STOP
        ENDIF
C
40      CONTINUE
C
21        FORMAT(1X,'LECLIS : STANDARD DU FICHIER DE GEOMETRIE : ',1I6,/
     &           1X,'         CETTE VALEUR EST INCONNUE ET       ',    /
     &           1X,'         LE FICHIER DES CONDITIONS LIMITES  ',    /
     &           1X,'         EN DEPEND |')
22        FORMAT(1X,'LECLIS : GEOMETRY FILE STANDARD : ',I6   ,/
     &           1X,'         UNKNOWN PARAMETER AND BOUNDARY ',/
     &           1X,'         CONDITIONS FILE DEPENDS ON IT !')
23        FORMAT(1X,'LECLIS : ERREUR LIGNE ',I5,' DANS LE FICHIER DES',
     &         /,1X,'         CONDITIONS AUX LIMITES, POINT DE BORD',
     &         /,1X,'         NUMERO ',I5,' AU LIEU DE ',I5)
24        FORMAT(1X,'LECLIS : ERROR LINE ',I5,' IN BOUNDARY CONDITIONS',
     &         /,1X,'         FILE, BOUNDARY POINT NUMBER ',I5,
     &         /,1X,'         INSTEAD OF ',I5)
C
C-----------------------------------------------------------------------
C
C  CHECKS, CORRECTS AND STORES :
C
        DO K=1,NPTFR
C
          IF(LIEBOR(K).NE.KENT) EBOR%ADR(1)%P%R(K)=0.D0
C
C         COPIES THE SAME EBOR FOR ALL CLASSES
          IF(NSICLA.GE.2) THEN
            DO I=2,NSICLA
              EBOR%ADR(I)%P%R(K)=EBOR%ADR(1)%P%R(K)
            ENDDO
          ENDIF
C
        ENDDO
C
C-----------------------------------------------------------------------
C
C  IN PARALLEL MODE : READS NPTIR AND NACHB
C
      IF(NCSIZE.GT.1) THEN
        READ(NLIM,*) PTIR
        IF(NPTIR.NE.PTIR) THEN
          IF(LNG==1) WRITE(LU,151) NPTIR,PTIR
          IF(LNG==2) WRITE(LU,152) NPTIR,PTIR
151       FORMAT(1X,'LECLIS : INCOHERENCE ENTRE GEOMETRIE ',/,1X,
     &              '         ET CONDITIONS AUX LIMITES'   ,/,1X,I6,
     &    ' POINTS INTERFACE DANS LA GEOMETRIE',/,1X,I6,
     &    ' POINTS INTERFACE DANS LE FICHIER CONLIM')
152       FORMAT(1X,'LECLIS : DIFFERENCE BETWEEN GEOMETRY ',/,1X,
     &              '         AND BOUNDARY CONDITIONS'   ,/,1X,I6,
     &    ' INTERFACE POINTS IN GEOMETRY',/,1X,I6,
     &    ' INTERFACE POINTS IN CONLIM FILE')
        ENDIF
        DO K=1,NPTIR
          READ(NLIM,*) (NACHB(I,K),I=1,NBMAXNSHARE)
        ENDDO
C
C       JAJ //// READ THE NEIGHBOURHOODS FOR HALO CELLS ALONG THE INTERFACES
C       FILLING PATTERN: IFAPAR(1:7,K), K=1:NHALO
C                        -> NHALO: NUMBER OF HALO CELLS IN THIS PARTITION
!
C       IFAPAR(1,K)   : HALO ELEMENT -LOCAL- NUMBER IN THIS PARTITION
C       IFAPAR(2:4,K) : PROCESSOR NUMBERS BEHIND THE 3 ELEMENT EDGES
C       IFAPAR(5:7,K) : -LOCAL- ELEMENT NUMBERS BEHIND THE 3 EDGES
C                       IN THE NUMBERING OF PARTITIONS THEY BELONG TO
C       ACTUALLY, NOT ALL OF THAT IS REQUIRED AND CAN BE OPTIMISED
C       AFTER THE DEVELOPMENT STAGE IS OVER
!
        READ(NLIM,*,ERR=901) NHALO
        IF(NHALO.GT.2*NPTIR) THEN ! SEE BIEF LIBRARY, SUBROUTINE ALMESH
          WRITE(LU,*) ' => NHALO>2*NPTIR DETECTED IN BC FILE'
          CALL PLANTE(1)
          STOP
        ENDIF
        DO K=1,NHALO
C         READ(NLIM,*,ERR=901) (MESH%IFAPAR%I(7*(K-1)+I),I=1,7)
          READ(NLIM,*,ERR=901) IF1,IF2,IF3,IF4,IF5,IF6,IF7
!
C         CORRECTING A BUG (IN IFAPAR THERE IS A CONFUSION BETWEEN PROCESSOR 0
C                           AND LIQUID BOUNDARY BUT
C                           IN CASE OF LIQUID BOUNDARY, THE ELEMENT BEHIND
C                           IS GIVEN AS 0, SO BOTH CASES MAY BE DISTINGUISHED
C                           HERE ALL BOUNDARIES (LIQUID OR SOLID) ARE PUT AT -1
!
          IF(IF5.EQ.0) IF2=-1
          IF(IF6.EQ.0) IF3=-1
          IF(IF7.EQ.0) IF4=-1
          MESH%IFAPAR%I(6*(IF1-1)+1)=IF2
          MESH%IFAPAR%I(6*(IF1-1)+2)=IF3
          MESH%IFAPAR%I(6*(IF1-1)+3)=IF4
          MESH%IFAPAR%I(6*(IF1-1)+4)=IF5
          MESH%IFAPAR%I(6*(IF1-1)+5)=IF6
          MESH%IFAPAR%I(6*(IF1-1)+6)=IF7
        ENDDO
      ENDIF
C
      GO TO 1000
C
C-----------------------------------------------------------------------
C
CJAJ //// BE PRECISE IN THE CASE OF THE BC FILE APPENDIX
901   CONTINUE
      WRITE (LU,*) 'LECLIM: ',
     &             'ERROR IN READING IFAPAR IN THE BC CONDITIONS FILE'
      CALL PLANTE(1)
      STOP
C
C-----------------------------------------------------------------------
C
1000  CONTINUE
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       ELIMINATES NEGATIVE WATER DEPTHS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @warning  USER SUBROUTINE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> HN, NPOIN, Q, QU, QV
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I
!>   </td></tr>
!>     </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/95
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>HN
!></td><td><-></td><td>HAUTEUR D' EAU
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS
!>    </td></tr>
!>          <tr><td>Q
!></td><td>--></td><td>DEBIT LIQUIDE
!>    </td></tr>
!>          <tr><td>QU , QV
!></td><td>--></td><td>COMPOSANTES DU DEBIT VECTORIEL
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE MASKAB
     &(HN , Q , QU , QV , NPOIN)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| HN             |<->| HAUTEUR D' EAU
C| NPOIN          |-->| NOMBRE DE POINTS
C| Q             |-->| DEBIT LIQUIDE
C| QU , QV        |-->| COMPOSANTES DU DEBIT VECTORIEL
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN):: NPOIN
C
      DOUBLE PRECISION, INTENT(IN)    :: HN(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: Q(NPOIN),QU(NPOIN),QV(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I
C
C-----------------------------------------------------------------------
C
C
C CAPS WATER DEPTHS
C
C
      DO I=1,NPOIN
C
C  TREATS NEGATIVE VALUES IN THE DOMAIN
C
         IF(HN(I).LE.0.D0) THEN
C
            Q(I)  = 0.D0
            QU(I) = 0.D0
            QV(I) = 0.D0
C
         ENDIF
C
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE MASKAB
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COLLAPSE OF SAND WITH A SLOPE GREATER THAN A
!>                STABILITY CRITERION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> EVOL, IKLE, MESH, NELEM, NELMAX, NPOIN, SLOPE, UNSV2D, XEL, YEL, ZF, ZR
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> A, B, DEUXSURF, I, I1, I2, I3, IELEM, L, TANSL, X2, X3, Y2, Y3, Z2, Z3, ZC
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_MAXSLOPE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> CPSTVC(), OS(), PARCOM()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.8                                       </center>
!> </td><td> 16/11/2007
!> </td><td> J-M HERVOUET (LNH) 01 30 87 80 18
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>EVOL
!></td><td><-></td><td>WORK ARRAY, THEN EVOLUTION DUE TO SLIDE
!>    </td></tr>
!>          <tr><td>IKLE
!></td><td>--></td><td>CONNECTIVITY TABLE
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>--></td><td>MESH STRUCTURE
!>    </td></tr>
!>          <tr><td>NELEM
!></td><td>--></td><td>NUMBER OF ELEMENTS
!>    </td></tr>
!>          <tr><td>NELMAX
!></td><td>--></td><td>MAXIMUM NUMBER OF ELEMENTS
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF POINTS IN THE MESH
!>    </td></tr>
!>          <tr><td>SLOPE
!></td><td>--></td><td>MAXIMUM SLOPE IN DEGREES
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>--></td><td>INVERSE OF INTEGRAL OF BASES
!>    </td></tr>
!>          <tr><td>XEL,YEL
!></td><td>--></td><td>MESH COORDINATES PER ELEMENT
!>    </td></tr>
!>          <tr><td>ZF
!></td><td><-></td><td>BOTTOM THAT WILL BE MODIFIED
!>    </td></tr>
!>          <tr><td>ZR
!></td><td>--></td><td>NON ERODABLE BED
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE MAXSLOPE
     &(SLOPE,ZF,ZR,XEL,YEL,NELEM,NELMAX,NPOIN,IKLE,EVOL,UNSV2D,MESH)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| EVOL           |<->| WORK ARRAY, THEN EVOLUTION DUE TO SLIDE
C| IKLE           |-->| CONNECTIVITY TABLE
C| MESH           |-->| MESH STRUCTURE
C| NELEM          |-->| NUMBER OF ELEMENTS
C| NELMAX         |-->| MAXIMUM NUMBER OF ELEMENTS
C| NPOIN          |-->| NUMBER OF POINTS IN THE MESH
C| SLOPE          |-->| MAXIMUM SLOPE IN DEGREES
C| UNSV2D         |-->| INVERSE OF INTEGRAL OF BASES
C| XEL,YEL        |-->| MESH COORDINATES PER ELEMENT
C| ZF             |<->| BOTTOM THAT WILL BE MODIFIED
C| ZR             |-->| NON ERODABLE BED
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
C
      USE INTERFACE_SISYPHE, EX_MAXSLOPE => MAXSLOPE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN) :: NELEM,NELMAX,NPOIN
      INTEGER, INTENT(IN) :: IKLE(NELMAX,3)
C
      DOUBLE PRECISION, INTENT(IN   ) :: SLOPE
      DOUBLE PRECISION, INTENT(INOUT) :: ZF(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: ZR(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: XEL(NELMAX,3),YEL(NELMAX,3)
C
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: EVOL
      TYPE(BIEF_OBJ), INTENT(IN)      :: UNSV2D
      TYPE(BIEF_MESH) :: MESH
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER IELEM,I1,I2,I3,I
      DOUBLE PRECISION X2,X3,Y2,Y3,Z2,Z3,A,B,L,ZC,DEUXSURF,TANSL
C
      INTRINSIC SQRT,MIN,MAX,TAN
C
C-----------------------------------------------------------------------
C
      TANSL=TAN(3.141592653589D0*SLOPE/180.D0)
C
C     INITIALISES THE RIGHT-HAND SIDE EVOL TO ZERO
C
      CALL CPSTVC(UNSV2D,EVOL)
      CALL OS('X=0     ',X=EVOL)
C
C     LOOP ON ELEMENTS
C
      DO IELEM=1,NELEM
C
        I1=IKLE(IELEM,1)
        I2=IKLE(IELEM,2)
        I3=IKLE(IELEM,3)
C
        X2=XEL(IELEM,2)
        X3=XEL(IELEM,3)
        Y2=YEL(IELEM,2)
        Y3=YEL(IELEM,3)
        Z2=ZF(I2)-ZF(I1)
        Z3=ZF(I3)-ZF(I1)
C
C       TWICE THE TRIANGLE AREA
C
        DEUXSURF=X2*Y3-X3*Y2
C
C       AVERAGE BOTTOM IN THE ELEMENT
C
        ZC=(ZF(I1)+ZF(I2)+ZF(I3))/3.D0
C
C       COMPONENTS OF BOTTOM GRADIENT
C
        A=(Z2*Y3-Z3*Y2)/DEUXSURF
        B=(Z3*X2-Z2*X3)/DEUXSURF
C
C       CORRECTING FACTOR ON SLOPE
C
        L=MIN(1.D0,TANSL/MAX(SQRT(A**2+B**2),1.D-8))
C
C       L LIMITED DUE TO NON-ERODABLE BEDS : ZF MUST NOT GO BELOW ZR
C
        IF(ZF(I1).GT.ZC) L=MAX(L,(ZR(I1)-ZC)/MAX(ZF(I1)-ZC,1.D-8))
        IF(ZF(I2).GT.ZC) L=MAX(L,(ZR(I2)-ZC)/MAX(ZF(I2)-ZC,1.D-8))
        IF(ZF(I3).GT.ZC) L=MAX(L,(ZR(I3)-ZC)/MAX(ZF(I3)-ZC,1.D-8))
C
C       BUILDS THE RIGHT-HAND SIDE
C
        EVOL%R(I1)=EVOL%R(I1)+(1.D0-L)*(ZC-ZF(I1))*DEUXSURF/6.D0
        EVOL%R(I2)=EVOL%R(I2)+(1.D0-L)*(ZC-ZF(I2))*DEUXSURF/6.D0
        EVOL%R(I3)=EVOL%R(I3)+(1.D0-L)*(ZC-ZF(I3))*DEUXSURF/6.D0
C
      ENDDO
C
C-----------------------------------------------------------------------
C
C     FINAL RESOLUTION
C
      IF(NCSIZE.GT.1) THEN
        CALL PARCOM(EVOL,2,MESH)
      ENDIF
C
      DO I=1,NPOIN
        EVOL%R(I)=EVOL%R(I)*UNSV2D%R(I)
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       GEOMETRIC MEAN GRAIN SIZES OF ACTIVE-LAYER AND UNDER-LAYER.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @warning  USER SUBROUTINE; MUST BE CODED BY THE USER; THIS IS MERELY AN EXAMPLE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::ACLADM ACLADM@endlink, 
!> @link DECLARATIONS_SISYPHE::AVAIL AVAIL@endlink, 
!> @link DECLARATIONS_SISYPHE::FDM FDM@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::UNLADM UNLADM@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I, J
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> **/11/2002
!> </td><td> BUI MINH DUC
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLADM
!></td><td><--</td><td>MEAN DIAMETER OF THE ACTIVE LAYER
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>--></td><td>SEDIMENT FRACTION FOR EACH LAYER, CLASS, POINT
!>    </td></tr>
!>          <tr><td>AVAIL(NPOIN,NLAYER,NSICLA)
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NLAYER
!></td><td>--></td><td>NUMBER OF LAYER FOR EACH POINT
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF NODES
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>--></td><td>NUMBER OF SIZE-CLASSES OF BED MATERIAL
!>    </td></tr>
!>          <tr><td>UNLADM
!></td><td><--</td><td>MEAN DIAMETER OF THE ACTIVE STRATUM
!>                  = MEAN OF ALL DIFFERENT BED MATERIAL SIZES
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                       SUBROUTINE MEAN_GRAIN_SIZE
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLADM         |<--| MEAN DIAMETER OF THE ACTIVE LAYER
C| AVAIL          |-->| SEDIMENT FRACTION FOR EACH LAYER, CLASS, POINT
C| AVAIL(NPOIN,NLA|---| 
C| NLAYER         |-->| NUMBER OF LAYER FOR EACH POINT
C| NPOIN          |-->| NUMBER OF NODES
C| NSICLA         |-->| NUMBER OF SIZE-CLASSES OF BED MATERIAL
C| UNLADM         |<--| MEAN DIAMETER OF THE ACTIVE STRATUM
C|                |   | = MEAN OF ALL DIFFERENT BED MATERIAL SIZES
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_SISYPHE
C
      IMPLICIT NONE
      INTEGER I , J
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C-----------------------------------------------------------------------
C
C  UNLADM IS NEEDED FOR HUNZIKER
C
      DO J=1,NPOIN
        ACLADM%R(J) = 0.D0
        UNLADM%R(J) = 0.D0
        IF(NSICLA.GT.1) THEN
         DO I=1,NSICLA
          IF(AVAIL(J,1,I).GT.0.D0) THEN
            ACLADM%R(J) = ACLADM%R(J) + FDM(I)*AVAIL(J,1,I)
            UNLADM%R(J) = UNLADM%R(J) + FDM(I)*AVAIL(J,2,I)
          ENDIF
         ENDDO
        ENDIF
        IF(ACLADM%R(J).LE.0.D0) ACLADM%R(J) = FDM(1)
        IF(UNLADM%R(J).LE.0.D0) UNLADM%R(J) = ACLADM%R(J)
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       FIXES THE NON-ERODABLE BED ELEVATION ZR.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  METHODS OF TREATMENT OF NON-ERODABLE BEDS CAN LEAD TO ZF.

!>  @note  CHOOSE TO SMOOTH THE SOLUTION WITH NLISS > 0.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CHOIX, H, NLISS, NPOIN, X, Y, Z, ZF, ZR
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OV()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td>
!> </td><td> C. LENORMANT
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CHOIX
!></td><td>--></td><td>SELECTED METHOD FOR THE TREATMENT OF RIGID BEDS
!>    </td></tr>
!>          <tr><td>H
!></td><td>--></td><td>WATER DEPTH
!>    </td></tr>
!>          <tr><td>NLISS
!></td><td><-></td><td>NUMBER OF SMOOTHINGS
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF 2D POINTS
!>    </td></tr>
!>          <tr><td>X,Y
!></td><td>--></td><td>2D COORDINATES
!>    </td></tr>
!>          <tr><td>Z
!></td><td>--></td><td>FREE SURFACE
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>--></td><td>BED LEVEL
!>    </td></tr>
!>          <tr><td>ZR
!></td><td><--</td><td>RIGID BED LEVEL
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE NOEROD
     & (H , ZF , ZR , Z , X , Y , NPOIN , CHOIX , NLISS )
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CHOIX          |-->| SELECTED METHOD FOR THE TREATMENT OF RIGID BEDS
C| H             |-->| WATER DEPTH
C| NLISS          |<->| NUMBER OF SMOOTHINGS
C| NPOIN          |-->| NUMBER OF 2D POINTS
C| X,Y            |-->| 2D COORDINATES
C| Z             |-->| FREE SURFACE
C| ZF             |-->| BED LEVEL
C| ZR             |<--| RIGID BED LEVEL
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN):: NPOIN , CHOIX
      INTEGER, INTENT(INOUT):: NLISS
C
      DOUBLE PRECISION, INTENT(IN)::  Z(NPOIN) , ZF(NPOIN)
      DOUBLE PRECISION , INTENT(IN)::  X(NPOIN) , Y(NPOIN), H(NPOIN)
      DOUBLE PRECISION , INTENT(INOUT)::  ZR(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I
C
C--------------------
C RIGID BEDS POSITION
C---------------------
C
C     DEFAULT VALUE:       ZR=ZF-100
C
      CALL OV( 'X=C       ',ZR,ZF,ZF,-100.D0,NPOIN)
C
C------------------
C SMOOTHING OPTION
C------------------
C
C     NLISS : NUMBER OF SMOOTHING IF  (ZF - ZR ) NEGATIVE
C             DEFAULT VALUE : NLISS = 0 (NO SMOOTHING)
C
      NLISS = 0
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       GIVES THE VARIABLE NAMES FOR THE RESULTS AND
!>                GEOMETRY FILES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> MNEMO, NSICLA, TEXTE, TEXTPR, UNIT
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::MAXVAR MAXVAR@endlink, 
!> @link DECLARATIONS_SISYPHE::NOMBLAY NOMBLAY@endlink, 
!> @link DECLARATIONS_SISYPHE::NPRIV NPRIV@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ADD, CLA, I, J, K, LAY, MNEMO_AVAI, MNEMO_CS, MNEMO_ES, MNEMO_QS, MNEMO_QSC, MNEMO_QSS, TEXTE_AVAI, TEXTE_CS, TEXTE_ES, TEXTE_QS, TEXTE_QSC, TEXTE_QSS
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>LECDON_SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 03/11/2009
!> </td><td> JMH
!> </td><td> MODIFIED AFTER JACEK JANKOWSKI DEVELOPMENTS
!>           FOR RESTARTS WITH GRADED SEDIMENTS
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 2003
!> </td><td> M. GONZALES DE LINARES; C.VILLARET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 11/09/95
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>MNEMO
!></td><td><--</td><td>SYMBOLS TO SPECIFY THE VARIABLES FOR OUTPUT
!>                  IN THE STEERING FILE
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TEXTE
!></td><td><--</td><td>NAMES OF VARIABLES (PRINTOUT)
!>    </td></tr>
!>          <tr><td>TEXTPR
!></td><td><--</td><td>NAMES OF VARIABLES (INPUT)
!>    </td></tr>
!>          <tr><td>UNIT
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE NOMVAR_SISYPHE
     &( TEXTE ,TEXTPR , MNEMO , NSICLA , UNIT )
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| MNEMO          |<--| SYMBOLS TO SPECIFY THE VARIABLES FOR OUTPUT
C|                |   | IN THE STEERING FILE
C| NSICLA         |---| 
C| TEXTE          |<--| NAMES OF VARIABLES (PRINTOUT)
C| TEXTPR         |<--| NAMES OF VARIABLES (INPUT)
C| UNIT           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE DECLARATIONS_SISYPHE, ONLY : MAXVAR,NSICLM,NLAYMAX,NOMBLAY,
     &                                 NPRIV
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)         :: NSICLA
      CHARACTER*8, INTENT(INOUT)  :: MNEMO(MAXVAR)
      CHARACTER*32, INTENT(INOUT) :: TEXTE(MAXVAR),TEXTPR(MAXVAR)
      LOGICAL, INTENT(IN)         :: UNIT
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I,J,K,ADD
C
      CHARACTER(LEN=32) TEXTE_AVAI(NLAYMAX*NSICLM),TEXTE_QS(NSICLM)
      CHARACTER(LEN=32) TEXTE_CS(NSICLM),TEXTE_QSC(NSICLM)
      CHARACTER(LEN=32) TEXTE_QSS(NSICLM),TEXTE_ES(NLAYMAX)
      CHARACTER(LEN=8)  MNEMO_AVAI(NLAYMAX*NSICLM),MNEMO_QS(NSICLM)
      CHARACTER(LEN=8)  MNEMO_CS(NSICLM),MNEMO_ES(NLAYMAX)
      CHARACTER(LEN=8)  MNEMO_QSC(NSICLM),MNEMO_QSS(NSICLM)
      CHARACTER(LEN=2)  CLA
      CHARACTER(LEN=1)  LAY
C
C-----------------------------------------------------------------------
C
      ADD=26+MAX(4,NPRIV)+NSICLA*(NOMBLAY+4)+NOMBLAY
      IF(ADD.GT.MAXVAR) THEN
        IF(LNG.EQ.1) THEN
         WRITE(LU,*) 'NOMVAR_SISYPHE : MAXVAR DOIT VALOIR AU MOINS ',ADD
        ENDIF
        IF(LNG.EQ.2) THEN
         WRITE(LU,*) 'NOMVAR_SISYPHE: MAXVAR SHOULD BE AT LEAST ',ADD
        ENDIF
        CALL PLANTE(1)
        STOP
      ENDIF
C
C-----------------------------------------------------------------------
C     2 3RD FRACTION MEANS FRACTION OF SEDIMENT OF CLASS 3 IN 2ND LAYER
C
      IF(NOMBLAY.GT.9.OR.NSICLA.GT.99) THEN
        WRITE (LU,*) 'REPROGRAM NOMVAR_SISYPHE DUE TO CONSTANT FORMATS'
        CALL PLANTE(1)
        STOP
      ENDIF
C
      DO I=1,NSICLA
        DO J=1,NOMBLAY
          K=(I-1)*NOMBLAY+J
          WRITE(LAY,'(I1)') J
          IF(I.LT.10) THEN
            WRITE(CLA,'(I1)') I
          ELSE
            WRITE(CLA,'(I2)') I
          ENDIF
          TEXTE_AVAI(K) = TRIM('FRAC LAY '//LAY//' CL '//CLA)
          MNEMO_AVAI(K) = TRIM(LAY//'A'//CLA)
        ENDDO
      ENDDO
C
      DO J=1,NSICLA
        IF(J<10) THEN
          WRITE(CLA,'(I1)') J
        ELSE
          WRITE(CLA,'(I2)') J
        ENDIF
        TEXTE_QS(J)  = TRIM('QS CLASS '//CLA)
        TEXTE_QSC(J) = TRIM('QS BEDLOAD CL'//CLA)
        TEXTE_QSS(J) = TRIM('QS SUSP. CL'//CLA)
        IF(UNIT) THEN
          TEXTE_CS(J) = TRIM('CONC MAS CL'//CLA)
          TEXTE_CS(J)(17:19) = 'G/L'
        ELSE
          TEXTE_CS(J) = TRIM('CONC VOL CL'//CLA)
        ENDIF
        MNEMO_QS(J)  = TRIM('QS'//CLA)
        MNEMO_QSC(J) = TRIM('QSBL'//CLA)
        MNEMO_QSS(J) = TRIM('QSS'//CLA)
        MNEMO_CS(J)  = TRIM('CS'//CLA)
      ENDDO
C
      DO K=1,NOMBLAY
        WRITE(LAY,'(I1)') K
CV        TEXTE_ES(K)(1:16)  = 'LAY. '//LAY//' THICKNESS'
        TEXTE_ES(K)(1:16)  = 'LAYER'//LAY//' THICKNESS'
        TEXTE_ES(K)(17:32) = 'M               '
        MNEMO_ES(K) = LAY//'ES     '
      ENDDO
C
C-----------------------------------------------------------------------
C
      IF(LNG.EQ.2) THEN
C
C       ENGLISH VERSION
C
        TEXTE(01) = 'VELOCITY U      M/S             '
        TEXTE(02) = 'VELOCITY V      M/S             '
        TEXTE(03) = 'WATER DEPTH     M               '
        TEXTE(04) = 'FREE SURFACE    M               '
        TEXTE(05) = 'BOTTOM          M               '
        TEXTE(06) = 'FLOWRATE Q      M3/S/M          '
        TEXTE(07) = 'FLOWRATE QX     M3/S/M          '
        TEXTE(08) = 'FLOWRATE QY     M3/S/M          '
        TEXTE(09) = 'RIGID BED       M               '
        TEXTE(10) = 'FRICTION COEFT                  '
        TEXTE(11) = 'BOTTOM FRICTION N/M2            '
        TEXTE(12) = 'WAVE HEIGHT HM0 M               '
        TEXTE(13) = 'PEAK PERIOD TPR5S               '
        TEXTE(14) = 'MEAN DIRECTION  DEG             '
        TEXTE(15) = 'SOLID DISCH     M2/S            '
        TEXTE(16) = 'SOLID DISCH X   M2/S            '
        TEXTE(17) = 'SOLID DISCH Y   M2/S            '
        TEXTE(18) = 'EVOLUTION       M               '
        TEXTE(19) = 'RUGOSITE TOTALE M               '
        TEXTE(20) = 'FROT. PEAU MU                   '
C
        TEXTE(21+NSICLA*(NOMBLAY+2))='QS BEDLOAD      M2/S            '
        TEXTE(22+NSICLA*(NOMBLAY+2))='QS BEDLOAD X    M2/S            '
        TEXTE(23+NSICLA*(NOMBLAY+2))='QS BEDLOAD Y    M2/S            '
        TEXTE(24+NSICLA*(NOMBLAY+2))='QS SUSPENSION   M2/S            '
        TEXTE(25+NSICLA*(NOMBLAY+2))='QS SUSPENSION X M2/S            '
        TEXTE(26+NSICLA*(NOMBLAY+2))='QS SUSPENSION Y M2/S            '
C
      ELSE
C
C       FRENCH VERSION
C
        TEXTE(01)  = 'VITESSE U       M/S             '
        TEXTE(02)  = 'VITESSE V       M/S             '
        TEXTE(03)  = 'HAUTEUR D''EAU   M              '
        TEXTE(04)  = 'SURFACE LIBRE   M               '
        TEXTE(05)  = 'FOND            M               '
        TEXTE(06)  = 'DEBIT           M3/S/M          '
        TEXTE(07)  = 'DEBIT QX        M3/S/M          '
        TEXTE(08)  = 'DEBIT QY        M3/S/M          '
        TEXTE(09)  = 'FOND RIGIDE     M               '
        TEXTE(10)  = 'COEFT FROTTEMENT                '
        TEXTE(11)  = 'FROTTEMENT TOB  N/M2            '
        TEXTE(12)  = 'HAUTEUR HM0     M               '
        TEXTE(13)  = 'PERIODE PIC TPR5S               '
        TEXTE(14)  = 'DIRECTION MOY   DEG             '
        TEXTE(15)  = 'DEBIT SOLIDE    M2/S            '
        TEXTE(16)  = 'DEBIT SOLIDE X  M2/S            '
        TEXTE(17)  = 'DEBIT SOLIDE Y  M2/S            '
        TEXTE(18)  = 'EVOLUTION       M               '
        TEXTE(19)  = 'TOTAL BED ROUGH.M               '
        TEXTE(20)  = 'SKIN FRICTION MU                '
C
        ADD=NSICLA*(NOMBLAY+2)
        TEXTE(21+ADD)='QS CHARRIAGE    M2/S            '
        TEXTE(22+ADD)='QS CHARRIAGE X  M2/S            '
        TEXTE(23+ADD)='QS CHARRIAGE Y  M2/S            '
        TEXTE(24+ADD)='QS SUSPENSION   M2/S            '
        TEXTE(25+ADD)='QS SUSPENSION X M2/S            '
        TEXTE(26+ADD)='QS SUSPENSION Y M2/S            '
C
      ENDIF
C
C     AVAIL: ALL LAYERS OF CLASS 1, THEN ALL LAYERS OF CLASS 2, ETC.
C            SAME ORDER AS IN POINT_SISYPHE
C
      DO J=1,NOMBLAY
        DO I=1,NSICLA
          TEXTE(20+(I-1)*NOMBLAY+J) = TEXTE_AVAI((I-1)*NOMBLAY+J)
          MNEMO(20+(I-1)*NOMBLAY+J) = MNEMO_AVAI((I-1)*NOMBLAY+J)
        ENDDO
      ENDDO
C
      DO I=1,NSICLA
        TEXTE(20+I+NOMBLAY*NSICLA)     = TEXTE_QS(I)
        MNEMO(20+I+NOMBLAY*NSICLA)     = MNEMO_QS(I)
        TEXTE(20+I+(NOMBLAY+1)*NSICLA) = TEXTE_CS(I)
        MNEMO(20+I+(NOMBLAY+1)*NSICLA) = MNEMO_CS(I)
        TEXTE(26+I+NSICLA*(NOMBLAY+2)) = TEXTE_QSC(I)
        MNEMO(26+I+NSICLA*(NOMBLAY+2)) = MNEMO_QSC(I)
        TEXTE(26+I+NSICLA*(NOMBLAY+3)) = TEXTE_QSS(I)
        MNEMO(26+I+NSICLA*(NOMBLAY+3)) = MNEMO_QSS(I)
      ENDDO
C
      DO I=1,NOMBLAY
        TEXTE(26+I+NSICLA*(NOMBLAY+4)) = TEXTE_ES(I)
        MNEMO(26+I+NSICLA*(NOMBLAY+4)) = MNEMO_ES(I)
      ENDDO
C
      ADD=NSICLA*(NOMBLAY+4)+NOMBLAY
      TEXTE(27+ADD)='PRIVE 1                         '
      TEXTE(28+ADD)='PRIVE 2                         '
      TEXTE(29+ADD)='PRIVE 3                         '
      TEXTE(30+ADD)='PRIVE 4                         '
C     NPRIV MAY BE GREATER THAN 4
C     TEXTE(31+ADD)='PRIVE 5                         '
C
      DO I=1,30+NSICLA*(NOMBLAY+4)+NOMBLAY
        TEXTPR(I)=TEXTE(I)
      ENDDO
C
C-----------------------------------------------------------------------
C
C     OTHER NAMES FOR OUTPUT VARIABLES (STEERING FILE)
C
C     VELOCITY U
      MNEMO(1)   = 'U       '
C     VELOCITY V
      MNEMO(2)   = 'V       '
C     WATER DEPTH
      MNEMO(3)   = 'H       '
C     FREE SURFACE
      MNEMO(4)   = 'S       '
C     BOTTOM
      MNEMO(5)   = 'B       '
C     SCALAR FLOW RATE
      MNEMO(6)   = 'Q       '
C     SCALAR FLOW RATE X
      MNEMO(7)   = 'I       '
C     SCALAR FLOW RATE Y
      MNEMO(8)   = 'J       '
C     RIGID BED
      MNEMO(9)   = 'R       '
C     FRICTION COEFFICIENT
      MNEMO(10)   = 'CHESTR  '
C     MEAN BOTTOM FRICTION
      MNEMO(11)   = 'TOB     '
C     WAVE HEIGHT
      MNEMO(12)   = 'W       '
C     PEAK PERIOD
      MNEMO(13)   = 'X       '
C     WAVE DIRECTION
      MNEMO(14)   = 'THETAW  '
C     SOLID DISCHARGE
      MNEMO(15)   = 'M       '
C     SOLID DISCHARGE X
      MNEMO(16)   = 'N       '
C     SOLID DISCHARGE Y
      MNEMO(17)   = 'P       '
C     EVOLUTION
      MNEMO(18)   = 'E       '
C     KS
      MNEMO(19)   = 'KS      '
C     MU
      MNEMO(20)   = 'MU      '
C
      MNEMO(21+NSICLA*(NOMBLAY+2)) = 'QSBL    '
      MNEMO(22+NSICLA*(NOMBLAY+2)) = 'QSBLX   '
      MNEMO(23+NSICLA*(NOMBLAY+2)) = 'QSBLY   '
      MNEMO(24+NSICLA*(NOMBLAY+2)) = 'QSSUSP  '
      MNEMO(25+NSICLA*(NOMBLAY+2)) = 'QSSUSPX '
      MNEMO(26+NSICLA*(NOMBLAY+2)) = 'QSSUSPY '
C
      ADD=NSICLA*(NOMBLAY+4)+NOMBLAY
      MNEMO(27+ADD) = 'A       '
      MNEMO(28+ADD) = 'G       '
      MNEMO(29+ADD) = 'L       '
      MNEMO(30+ADD) = 'O       '
C     THE NUMBER OF PRIVATE ARRAYS IS A KEYWORD
C     MNEMO(31+ADD) = '????????'
C
C----------------------------
C
      ADD=NSICLA*(NOMBLAY+4)+NOMBLAY+26+MAX(NPRIV,4)
      IF(ADD.LT.MAXVAR) THEN
        DO I=ADD+1,MAXVAR
          MNEMO(I) =' '
          TEXTE(I) =' '
          TEXTPR(I)=' '
        ENDDO
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       ALLOCATES STRUCTURES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::ACLADM ACLADM@endlink, 
!> @link DECLARATIONS_SISYPHE::AFBOR AFBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::AM1_S AM1_S@endlink, 
!> @link DECLARATIONS_SISYPHE::AM2_S AM2_S@endlink, 
!> @link DECLARATIONS_SISYPHE::AVAI AVAI@endlink, 
!> @link DECLARATIONS_SISYPHE::AVAIL AVAIL@endlink, 
!> @link DECLARATIONS_SISYPHE::BFBOR BFBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::BOUNDARY_COLOUR BOUNDARY_COLOUR@endlink, 
!> @link DECLARATIONS_SISYPHE::BREACH BREACH@endlink, 
!> @link DECLARATIONS_SISYPHE::CALFA CALFA@endlink, 
!> @link DECLARATIONS_SISYPHE::CBOR CBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::CF CF@endlink, 
!> @link DECLARATIONS_SISYPHE::CHESTR CHESTR@endlink, 
!> @link DECLARATIONS_SISYPHE::CLT CLT@endlink, 
!> @link DECLARATIONS_SISYPHE::CLU CLU@endlink, 
!> @link DECLARATIONS_SISYPHE::CLV CLV@endlink, 
!> @link DECLARATIONS_SISYPHE::COEFPN COEFPN@endlink, 
!> @link DECLARATIONS_SISYPHE::CS CS@endlink, 
!> @link DECLARATIONS_SISYPHE::CST CST@endlink, 
!> @link DECLARATIONS_SISYPHE::CSTAEQ CSTAEQ@endlink, 
!> @link DECLARATIONS_SISYPHE::CTILD CTILD@endlink, 
!> @link DECLARATIONS_SISYPHE::DEL_QU DEL_QU@endlink, 
!> @link DECLARATIONS_SISYPHE::DEL_QV DEL_QV@endlink, 
!> @link DECLARATIONS_SISYPHE::DEL_Z DEL_Z@endlink, 
!> @link DECLARATIONS_SISYPHE::DISP DISP@endlink, 
!> @link DECLARATIONS_SISYPHE::DISP_C DISP_C@endlink, 
!> @link DECLARATIONS_SISYPHE::DZF_GF DZF_GF@endlink, 
!> @link DECLARATIONS_SISYPHE::E E@endlink, 
!> @link DECLARATIONS_SISYPHE::EBOR EBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::ECPL ECPL@endlink, 
!> @link DECLARATIONS_SISYPHE::ELAY ELAY@endlink, 
!> @link DECLARATIONS_SISYPHE::EMAX EMAX@endlink, 
!> @link DECLARATIONS_SISYPHE::EQUA EQUA@endlink, 
!> @link DECLARATIONS_SISYPHE::ES ES@endlink, 
!> @link DECLARATIONS_SISYPHE::ESOMT ESOMT@endlink, 
!> @link DECLARATIONS_SISYPHE::ESTRAT ESTRAT@endlink, 
!> @link DECLARATIONS_SISYPHE::FLBOR FLBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::FLBORTRA FLBORTRA@endlink, 
!> @link DECLARATIONS_SISYPHE::FLBOR_SIS FLBOR_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUDP FLUDP@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUDPT FLUDPT@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUER FLUER@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUERT FLUERT@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUER_VASE FLUER_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::FW FW@endlink, 
!> @link DECLARATIONS_SISYPHE::HCLIP HCLIP@endlink, 
!> @link DECLARATIONS_SISYPHE::HCPL HCPL@endlink, 
!> @link DECLARATIONS_SISYPHE::HIDING HIDING@endlink, 
!> @link DECLARATIONS_SISYPHE::HN HN@endlink, 
!> @link DECLARATIONS_SISYPHE::HPROP HPROP@endlink, 
!> @link DECLARATIONS_SISYPHE::HW HW@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMH_SIS IELMH_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMT IELMT@endlink, 
!> @link DECLARATIONS_SISYPHE::IFAMAS IFAMAS@endlink, 
!> @link DECLARATIONS_SISYPHE::INDIC INDIC@endlink, 
!> @link DECLARATIONS_SISYPHE::IT1 IT1@endlink, 
!> @link DECLARATIONS_SISYPHE::IT2 IT2@endlink, 
!> @link DECLARATIONS_SISYPHE::IT3 IT3@endlink, 
!> @link DECLARATIONS_SISYPHE::IT4 IT4@endlink, 
!> @link DECLARATIONS_SISYPHE::KS KS@endlink, 
!> @link DECLARATIONS_SISYPHE::KSP KSP@endlink, 
!> @link DECLARATIONS_SISYPHE::KSR KSR@endlink, 
!> @link DECLARATIONS_SISYPHE::KX KX@endlink, 
!> @link DECLARATIONS_SISYPHE::KY KY@endlink, 
!> @link DECLARATIONS_SISYPHE::KZ KZ@endlink, 
!> @link DECLARATIONS_SISYPHE::LAYTHI LAYTHI@endlink, 
!> @link DECLARATIONS_SISYPHE::LICBOR LICBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::LIEBOR LIEBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::LIHBOR LIHBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::LIMDIF LIMDIF@endlink, 
!> @link DECLARATIONS_SISYPHE::LIMPRO LIMPRO@endlink, 
!> @link DECLARATIONS_SISYPHE::LIMTEC LIMTEC@endlink, 
!> @link DECLARATIONS_SISYPHE::LIQBOR LIQBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::MASK MASK@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKB MASKB@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKEL MASKEL@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKPT MASKPT@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKTR MASKTR@endlink, 
!> @link DECLARATIONS_SISYPHE::MBOR MBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::MESH MESH@endlink, 
!> @link DECLARATIONS_SISYPHE::MSK MSK@endlink, 
!> @link DECLARATIONS_SISYPHE::MSKTMP MSKTMP@endlink, 
!> @link DECLARATIONS_SISYPHE::MS_SABLE MS_SABLE@endlink, 
!> @link DECLARATIONS_SISYPHE::MS_VASE MS_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::MU MU@endlink, 
!> @link DECLARATIONS_SISYPHE::NCP NCP@endlink, 
!> @link DECLARATIONS_SISYPHE::NLAYER NLAYER@endlink, 
!> @link DECLARATIONS_SISYPHE::NOMBLAY NOMBLAY@endlink, 
!> @link DECLARATIONS_SISYPHE::NPRIV NPRIV@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::NUMLIQ NUMLIQ@endlink, 
!> @link DECLARATIONS_SISYPHE::NVARCL NVARCL@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTASS OPTASS@endlink, 
!> @link DECLARATIONS_SISYPHE::PRIVE PRIVE@endlink, 
!> @link DECLARATIONS_SISYPHE::PRODUC PRODUC@endlink, 
!> @link DECLARATIONS_SISYPHE::QBOR QBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::QS QS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCL QSCL@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLX QSCLX@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLXC QSCLXC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLXS QSCLXS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLY QSCLY@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLYC QSCLYC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLYS QSCLYS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCL_C QSCL_C@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCL_S QSCL_S@endlink, 
!> @link DECLARATIONS_SISYPHE::QSX QSX@endlink, 
!> @link DECLARATIONS_SISYPHE::QSXC QSXC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSXS QSXS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSY QSY@endlink, 
!> @link DECLARATIONS_SISYPHE::QSYC QSYC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSYS QSYS@endlink, 
!> @link DECLARATIONS_SISYPHE::QS_C QS_C@endlink, 
!> @link DECLARATIONS_SISYPHE::QS_S QS_S@endlink, 
!> @link DECLARATIONS_SISYPHE::QU QU@endlink, 
!> @link DECLARATIONS_SISYPHE::QV QV@endlink, 
!> @link DECLARATIONS_SISYPHE::S S@endlink, 
!> @link DECLARATIONS_SISYPHE::SALFA SALFA@endlink, 
!> @link DECLARATIONS_SISYPHE::SEDCO SEDCO@endlink, 
!> @link DECLARATIONS_SISYPHE::SISSEC SISSEC@endlink, 
!> @link DECLARATIONS_SISYPHE::SIS_FILES SIS_FILES@endlink, 
!> @link DECLARATIONS_SISYPHE::SLVSED SLVSED@endlink, 
!> @link DECLARATIONS_SISYPHE::SLVTRA SLVTRA@endlink, 
!> @link DECLARATIONS_SISYPHE::SORLEO SORLEO@endlink, 
!> @link DECLARATIONS_SISYPHE::SPHERI SPHERI@endlink, 
!> @link DECLARATIONS_SISYPHE::TB TB@endlink, 
!> @link DECLARATIONS_SISYPHE::TE1 TE1@endlink, 
!> @link DECLARATIONS_SISYPHE::TE2 TE2@endlink, 
!> @link DECLARATIONS_SISYPHE::TE3 TE3@endlink, 
!> @link DECLARATIONS_SISYPHE::THETAW THETAW@endlink, 
!> @link DECLARATIONS_SISYPHE::TOB TOB@endlink, 
!> @link DECLARATIONS_SISYPHE::TOBW TOBW@endlink, 
!> @link DECLARATIONS_SISYPHE::TOCE_MIXTE TOCE_MIXTE@endlink, 
!> @link DECLARATIONS_SISYPHE::TW TW@endlink, 
!> @link DECLARATIONS_SISYPHE::U2D U2D@endlink, 
!> @link DECLARATIONS_SISYPHE::UCONV UCONV@endlink, 
!> @link DECLARATIONS_SISYPHE::UNLADM UNLADM@endlink, 
!> @link DECLARATIONS_SISYPHE::UNORM UNORM@endlink, 
!> @link DECLARATIONS_SISYPHE::UNSV2D UNSV2D@endlink, 
!> @link DECLARATIONS_SISYPHE::UW UW@endlink, 
!> @link DECLARATIONS_SISYPHE::V2D V2D@endlink, 
!> @link DECLARATIONS_SISYPHE::V2DPAR V2DPAR@endlink, 
!> @link DECLARATIONS_SISYPHE::VARCL VARCL@endlink, 
!> @link DECLARATIONS_SISYPHE::VARSOR VARSOR@endlink, 
!> @link DECLARATIONS_SISYPHE::VCONV VCONV@endlink, 
!> @link DECLARATIONS_SISYPHE::VF VF@endlink, 
!> @link DECLARATIONS_SISYPHE::VOLU2D VOLU2D@endlink, 
!> @link DECLARATIONS_SISYPHE::W1 W1@endlink, 
!> @link DECLARATIONS_SISYPHE::Z Z@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF ZF@endlink, 
!> @link DECLARATIONS_SISYPHE::ZFCL ZFCL@endlink, 
!> @link DECLARATIONS_SISYPHE::ZFCL_C ZFCL_C@endlink, 
!> @link DECLARATIONS_SISYPHE::ZFCL_S ZFCL_S@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF_C ZF_C@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF_S ZF_S@endlink, 
!> @link DECLARATIONS_SISYPHE::ZR ZR@endlink, 
!> @link DECLARATIONS_SISYPHE::ZREF ZREF@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CFG, CFGBOR, I, IELBT, IELM0, IELM0_SUB, IELM1, K, NTR
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> DIM, IKLE, LV, MXELVS, MXPTVS, NELEM, NELMAX, NPMAX, NPOIN, NPTFR, NPTFRX, T1, T10, T11, T12, T13, T14, T2, T3, T4, T5, T6, T7, T8, T9, TYPELM, X, Y
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> ADDBLO(), ALLBLO(), ALLMAT(), ALLVEC(), ALLVEC_IN_BLOCK(), ALMESH(), IELBOR(), NBFEL(), OS(), Q(), READ_SECTIONS_SISYPHE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>HOMERE_SISYPHE(), HOMERE_TELEMAC2D(), HOMERE_TELEMAC3D()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 19/08/2010
!> </td><td> JMH
!> </td><td> SEE MS_VASE (FOR MIXED SEDIMENTS)
!> </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 18/09/2009
!> </td><td> JMH
!> </td><td> SEE AVAI AND LAYTHI
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 16/09/2009
!> </td><td> JMH
!> </td><td> AVAIL(NPOIN,10,NSICLA)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 16/06/2008
!> </td><td> JMH
!> </td><td> ADDED BOUNDARY_COLOUR
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 10/06/2002
!> </td><td> C. MACHET
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 11/09/1995
!> </td><td> C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE POINT_SISYPHE
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_SISYPHE
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ LOCAL VARIABLES
      ! ------------------
      INTEGER :: I,K,NTR,IELM0,IELM1,IELBT,IELM0_SUB
      INTEGER :: CFG(2),CFGBOR(2)

C-----------------------------------------------------------------------
C
C-----------------------------------------------------------------------

      IF (LNG == 1) WRITE(LU,11)
      IF (LNG == 2) WRITE(LU,12)

      ! ************************************** !
      ! I - DISCRETISATION AND TYPE OF STORAGE !
      ! ************************************** !
      ! IELMT, IELMH_SIS AND IELMU_SIS HARD-CODED IN LECDON
      IELM0     = 10
      IELM1     = 11
      IELBT     = IELBOR(IELMT,1)
      IELM0_SUB = 10*(IELMT/10)

      CFG(1)    = OPTASS
      CFG(2)    = PRODUC
      CFGBOR(1) = 1 ! CFG IMPOSED FOR BOUNDARY MATRICES
      CFGBOR(2) = 1 ! CFG IMPOSED FOR BOUNDARY MATRICES

      IF(VF) EQUA(1:15)='SAINT-VENANT VF'

      ! ******************************************* !
      ! II - ALLOCATES THE MESH STRUCTURE           !
      ! ******************************************* !
      CALL ALMESH(MESH,'MESH_S',IELMT,SPHERI,CFG,
     &            SIS_FILES(SISGEO)%LU,EQUA)

      IKLE  => MESH%IKLE
      X     => MESH%X%R
      Y     => MESH%Y%R
      NELEM => MESH%NELEM
      NELMAX=> MESH%NELMAX
      NPTFR => MESH%NPTFR
      NPTFRX=> MESH%NPTFRX
      DIM   => MESH%DIM
      TYPELM=> MESH%TYPELM
      NPOIN => MESH%NPOIN
      NPMAX => MESH%NPMAX
      MXPTVS=> MESH%MXPTVS
      MXELVS=> MESH%MXELVS
      LV    => MESH%LV


      ! ******************** !
      ! III - REAL ARRAYS    !
      ! ******************** !
      CALL ALLVEC(1, S     , 'S     ', 0    , 1, 1) ! VOID STRUCTURE
!
      CALL ALLVEC(1, E     , 'E     ', IELMT, 1, 2) ! RESULT
      CALL ALLVEC(1, Z     , 'Z     ', IELMT, 1, 2) ! RESULT
      CALL ALLVEC(1, DEL_Z , 'DEL_Z ', IELMT, 1, 2) ! INCREMENT OF Z IF HYDRO
      CALL ALLVEC(1, ZF_C  , 'ZF_C  ', IELMT, 1, 2) ! VARIABLES E SUMMED UP
      CALL ALLVEC(1, ZF_S  , 'ZF_S  ', IELMT, 1, 2) ! VARIABLES E SUMMED U
      CALL ALLVEC(1, ESOMT , 'ESOMT ', IELMT, 1, 2) ! VARIABLES E SUMMED U
      CALL ALLVEC(1, EMAX  , 'EMAX  ', IELMT, 1, 2) ! VARIABLES E SUMMED U
      CALL ALLVEC(1, Q     , 'Q     ', IELMT, 1, 2) ! FLOWRATE
      CALL ALLVEC(1, QU    , 'QU    ', IELMT, 1, 2) ! X FLOWRATE
      CALL ALLVEC(1, QV    , 'QV    ', IELMT, 1, 2) ! Y FLOWRATE
      CALL ALLVEC(1, DEL_QU, 'DEL_QU', IELMT, 1, 2) ! INCREMENT OF QU IF HYDRO
      CALL ALLVEC(1, DEL_QV, 'DEL_QV', IELMT, 1, 2) ! INCREMENT OF QV IF HYDRO
      CALL ALLVEC(1, U2D   , 'U2D   ', IELMT, 1, 2) ! X VELOCITY
      CALL ALLVEC(1, V2D   , 'V2D   ', IELMT, 1, 2) ! Y VELOCITY
      CALL ALLVEC(1, QS    , 'QS    ', IELMT, 1, 2) ! TRANSPORT RATE
      CALL ALLVEC(1, QSX   , 'QSX   ', IELMT, 1, 2) ! X TRANSPORT RATE
      CALL ALLVEC(1, QSY   , 'QSY   ', IELMT, 1, 2) ! Y TRANSPORT RATE
      CALL ALLVEC(1, QS_C  , 'QS_C  ', IELMT, 1, 2) ! BEDLOAD RATE
      CALL ALLVEC(1, QSXC  , 'QSXC  ', IELMT, 1, 2) ! X BEDLOAD RATE
      CALL ALLVEC(1, QSYC  , 'QSYC  ', IELMT, 1, 2) ! Y BEDLOAD RATE
      CALL ALLVEC(1, QS_S  , 'QS_S  ', IELMT, 1, 2) ! SUSPENSION RATE
      CALL ALLVEC(1, QSXS  , 'QSXS  ', IELMT, 1, 2) ! X SUSPENSION RATE
      CALL ALLVEC(1, QSYS  , 'QSYS  ', IELMT, 1, 2) ! Y SUSPENSION RATE
      CALL ALLVEC(1, HIDING, 'HIDING', IELMT, 1, 2) ! HIDING FACTOR
      CALL ALLVEC(1, ZF    , 'ZF    ', IELMT, 1, 2) ! BED ELEVATIONS
      CALL ALLVEC(1, ZR    , 'ZR    ', IELMT, 1, 2) ! NON-ERODABLE BED ELEVATIONS
      CALL ALLVEC(1, ZREF  , 'ZREF  ', IELMT, 1, 2) ! REFERENCE ELEVATION
      CALL ALLVEC(1, CHESTR, 'CHESTR', IELMT, 1, 2) ! FRICTION COEFFICIENT
      CALL ALLVEC(1, COEFPN, 'COEFPN', IELMT, 1, 2) ! SLOPE EFFECT
      CALL ALLVEC(1, CALFA , 'CALFA ', IELMT, 1, 2)
      CALL ALLVEC(1, SALFA , 'SALFA ', IELMT, 1, 2)
      CALL ALLVEC(1, CF    , 'CF    ', IELMT, 1, 2) ! ADIMENSIONAL FRICTION
      CALL ALLVEC(1, TOB   , 'TOB   ', IELMT, 1, 2) ! TOTAL FRICTION
      CALL ALLVEC(1, TOBW  , 'TOBW  ', IELMT, 1, 2) ! WAVE VARIABLE
      CALL ALLVEC(1, MU    , 'MU    ', IELMT, 1, 2) ! SKIN FRICTION
      CALL ALLVEC(1, KSP   , 'KSP   ', IELMT, 1, 2) ! SKIN ROUGHNESS
      CALL ALLVEC(1, KS    , 'KS    ', IELMT, 1, 2) ! TOTAL ROUGHNESS
      CALL ALLVEC(1, KSR   , 'KSR   ', IELMT, 1, 2) ! RIPPLE INDUCED ROUGHNESS
      CALL ALLVEC(1, THETAW, 'THETAW', IELMT, 1, 2) ! WAVE VARIABLE
      CALL ALLVEC(1, FW    , 'FW    ', IELMT, 1, 2) ! WAVE VARIABLE
      CALL ALLVEC(1, UW    , 'UW    ', IELMT, 1, 2) ! WAVE VARIABLE
      CALL ALLVEC(1, HW    , 'HW    ', IELMT, 1, 2)
      CALL ALLVEC(1, TW    , 'TW    ', IELMT, 1, 2)
      CALL ALLVEC(1, DZF_GF, 'DZF_GF', IELMT, 1, 2) ! BED LEVEL CHANGE FOR GRAIN-FEEDING
      CALL ALLVEC(1, ACLADM, 'ACLADM', IELMT, 1, 2) ! MEAN DIAMETER IN ACTIVE LAYER
      CALL ALLVEC(1, UNLADM, 'UNLADM', IELMT, 1, 2) ! MEAN DIAMETER IN 2ND LAYER
      CALL ALLVEC(1, HCPL  , 'HCPL  ', IELMT, 1, 2) ! WATER DEPTH SAVED FOR CONSTANT FLOW DISCHARGE
      CALL ALLVEC(1, ECPL  , 'ECPL  ', IELMT, 1, 2) ! EVOLUTION SAVED FOR CONSTANT FLOW DISCHARGE
      CALL ALLVEC(1, ELAY  , 'ELAY  ', IELMT, 1, 2) ! ACTIVE LAYER THICKNESS
      CALL ALLVEC(1, ESTRAT, 'ESTRAT', IELMT, 1, 2) ! 2ND LAYER THICKNESS
      CALL ALLVEC(1, KX    , 'KX    ', IELMT, 1, 1)
      CALL ALLVEC(1, KY    , 'KY    ', IELMT, 1, 1)
      CALL ALLVEC(1, KZ    , 'KZ    ', IELMT, 1, 1)
      CALL ALLVEC(1, UCONV , 'UCONV ', IELMT, 1, 1)
      CALL ALLVEC(1, VCONV , 'VCONV ', IELMT, 1, 1)
      CALL ALLVEC(1, UNORM , 'UNORM ', IELMT, 1, 2)
      CALL ALLVEC(1, DISP  , 'DISP  ', IELMT, 3, 1)
      CALL ALLVEC(1, DISP_C, 'DISP_C', IELMT, 3, 1)
      CALL ALLVEC(1, MASKB , 'MASKB ', IELM0, 1, 2)
      CALL ALLVEC(1, MASK  , 'MASK  ', IELBT, 1, 2)
      CALL ALLVEC(1, AFBOR , 'AFBOR ', IELBT, 1, 1)
      CALL ALLVEC(1, BFBOR , 'BFBOR ', IELBT, 1, 1)
      CALL ALLVEC(1, FLBOR , 'FLBOR ', IELBT, 1, 1)
C     BOUNDARY FLUX FOR CALL TO CVDFTR
      CALL ALLVEC(1, FLBOR_SIS , 'FLBORS', IELBT, 1, 1)
      CALL ALLVEC(1, FLBORTRA  , 'FLBTRA', IELBT, 1, 1)
      CALL ALLVEC(1, CSTAEQ, 'CSTAEQ', IELMT, 1, 2)
      CALL ALLVEC(1, HN    , 'HN    ', IELMH_SIS, 1, 2) ! WATER DEPTH
      CALL ALLVEC(1, HCLIP , 'HCLIP ', IELMH_SIS, 1, 2) ! CLIPPING WATER DEPTH
      CALL ALLVEC(1, HPROP , 'HPROP ', IELMH_SIS, 1, 1)
      CALL ALLVEC(1, VOLU2D, 'VOLU2D', IELMH_SIS, 1, 1)
      CALL ALLVEC(1, V2DPAR, 'V2DPAR', IELMH_SIS, 1, 1)
      CALL ALLVEC(1, UNSV2D, 'UNSV2D', IELMH_SIS, 1, 1)
!
      IF(MSK) THEN
        CALL ALLVEC(1,MASKEL,'MASKEL', IELM0 , 1 , 2 )
        CALL ALLVEC(1,MSKTMP,'MSKTMP', IELM0 , 1 , 2 )
        CALL ALLVEC(1,MASKPT,'MASKPT', IELMT , 1 , 2 )
      ELSE
        CALL ALLVEC(1,MASKEL,'MASKEL', 0 , 1 , 0 )
        CALL ALLVEC(1,MSKTMP,'MSKTMP', 0 , 1 , 0 )
        CALL ALLVEC(1,MASKPT,'MASKPT', 0 , 1 , 0 )
      ENDIF
!
C     FOR MIXED SEDIMENTS
!
      IF(SEDCO(1).OR.SEDCO(2)) THEN
!      IF(MIXTE.OR.TASS) THEN
        CALL ALLVEC(1,FLUER_VASE,'FRMIXT',IELMT,1,2)
        CALL ALLVEC(1,TOCE_MIXTE ,'TCMIXT',IELMT,10,2)
        CALL ALLVEC(1,MS_SABLE   ,'MSSABL',IELMT,10,2)
        CALL ALLVEC(1,MS_VASE    ,'MSVASE',IELMT,10,2)
      ELSE
        CALL ALLVEC(1,FLUER_VASE,'FRMIXT',0,1,0)
        CALL ALLVEC(1,TOCE_MIXTE ,'TCMIXT',0,1,0)
        CALL ALLVEC(1,MS_SABLE   ,'MSSABL',0,1,0)
        CALL ALLVEC(1,MS_VASE    ,'MSVASE',0,1,0)
      ENDIF
!
      ! *********************** !
      ! IV - INTEGER ARRAYS     ! (_IMP_)
      ! *********************** !
      CALL ALLVEC(2, LIEBOR, 'LIEBOR', IELBOR(IELM1,1), 1, 1)
      CALL ALLVEC(2, LIQBOR, 'LIQBOR', IELBOR(IELM1,1), 1, 1)
      CALL ALLVEC(2, LIMTEC, 'LIMTEC', IELBOR(IELM1,1), 1, 1)
      CALL ALLVEC(2, NUMLIQ, 'NUMLIQ', IELBOR(IELM1,1), 1, 1)
      CALL ALLVEC(2, CLT   , 'CLT   ', IELBOR(IELMT,1), 1, 1)
      CALL ALLVEC(2, CLU   , 'CLU   ', IELBOR(IELMT,1), 1, 1)
      CALL ALLVEC(2, CLV   , 'CLV   ', IELBOR(IELMT,1), 1, 1)
      CALL ALLVEC(2, LIMDIF, 'LIMDIF', IELBOR(IELMT,1), 1, 1)
      CALL ALLVEC(2, LICBOR, 'LICBOR', IELBOR(IELMT,1), 1, 1)
      CALL ALLVEC(2, LIHBOR, 'LIHBOR', IELBOR(IELMT,1), 1, 1)
      CALL ALLVEC(2, BOUNDARY_COLOUR,
     &                       'BNDCOL', IELBOR(IELMT,1), 1, 1)
      CALL ALLVEC(2, LIMPRO, 'LIMPRO', IELBOR(IELMT,1), 6, 1)
      CALL ALLVEC(2, INDIC , 'INDIC ', IELM1          , 1, 1)
      CALL ALLVEC(2, IT1   , 'IT1   ', IELM1          , 1, 2)
      CALL ALLVEC(2, IT2   , 'IT2   ', IELM1          , 1, 2)
      CALL ALLVEC(2, IT3   , 'IT3   ', IELM1          , 1, 2)
      CALL ALLVEC(2, IT4   , 'IT4   ', IELM1          , 1, 2)
      CALL ALLVEC(2, NLAYER, 'NLAYE ', IELMT          , 1, 2) ! NUMBER OF LAYERS

      IF(VF) THEN
        CALL ALLVEC(2,BREACH,'BREACH',IELM1,1,2)
      ELSE
        CALL ALLVEC(2,BREACH,'BREACH',0,1,0)
      ENDIF

      IF(MSK) THEN
        CALL ALLVEC(2,IFAMAS,'IFAMAS',IELM0,NBFEL(IELM0),1)
      ELSE
        CALL ALLVEC(2,IFAMAS,'IFAMAS',0,1,0)
      ENDIF

      ! ******************* !
      ! V - BLOCK OF ARRAYS !
      ! ******************* !
      ALLOCATE(AVAIL(NPOIN,10,NSICLA)) ! FRACTION OF EACH CLASS FOR EACH LAYER
      ALLOCATE(ES(NPOIN,10))           ! THICKNESS OF EACH CLASS ???

      !================================================================!
      CALL ALLBLO(MASKTR, 'MASKTR') ! MASK OF THE BOUNDARY CONDITIONS
      CALL ALLBLO(EBOR  , 'EBOR  ') ! BOUNDARY CONDITIONS
      CALL ALLBLO(QBOR  , 'QBOR  ') ! BOUNDARY CONDITIONS
      CALL ALLBLO(AVAI  , 'AVAI  ') ! FRACTION OF EACH CLASS FOR THE TWO FIRST LAYERS
      CALL ALLBLO(LAYTHI, 'LAYTHI') ! LAYER THICKNESSES
      !================================================================!
      CALL ALLBLO(QSCL  , 'QSCL  ') ! TRANSPORT RATE FOR EACH CLASS
      CALL ALLBLO(QSCLX , 'QSCLX ') ! TRANSPORT RATE FOR EACH CLASS ALONG X
      CALL ALLBLO(QSCLY , 'QSCLY ') ! TRANSPORT RATE FOR EACH CLASS ALONG Y
      CALL ALLBLO(QSCL_C, 'QSCL_C') ! BEDLOAD TRANSPORT RATE FOR EACH CLASS
      CALL ALLBLO(QSCLXC, 'QSCLXC') ! BEDLOAD TRANSPORT RATE FOR EACH CLASS ALONG X
      CALL ALLBLO(QSCLYC, 'QSCLYC') ! BEDLOAD TRANSPORT RATE FOR EACH CLASS ALONG Y
      CALL ALLBLO(ZFCL  , 'ZFCL  ') ! EVOLUTION FOR EACH CLASS
      CALL ALLBLO(ZFCL_C, 'ZFCL_C') ! EVOLUTION FOR EACH CLASS DUE TO BEDLOAD TRANSPORT
      !================================================================!
      CALL ALLBLO(CBOR  , 'CBOR  ') ! BOUNDARY CONDITIONS
      CALL ALLBLO(QSCL_S, 'QSCL_S') ! SUSPENDED TRANSPORT RATE FOR EACH CLASS
      CALL ALLBLO(QSCLXS, 'QSCLXS') ! SUSPENDED TRANSPORT RATE FOR EACH CLASS ALONG X
      CALL ALLBLO(QSCLYS, 'QSCLYS') ! SUSPENDED TRANSPORT RATE FOR EACH CLASS ALONG Y
      CALL ALLBLO(ZFCL_S, 'ZFCL_S') ! EVOLUTION FOR EACH CLASS DUE TO SUSPENDED TRANSPORT
      CALL ALLBLO(FLUDP , 'FLUDP ') ! DEPOSITION FLUX
      CALL ALLBLO(FLUDPT, 'FLUDPT') ! DEPOSITION FLUX FOR IMPLICITATION
      CALL ALLBLO(FLUER , 'FLUER ') ! EROSION FLUX
      CALL ALLBLO(FLUERT, 'FLUERT') ! EROSION FLUX FOR IMPLICITATION
      CALL ALLBLO(CS    , 'CS    ') ! CONCENTRATION AT TIME N
      CALL ALLBLO(CTILD , 'CTILD ') ! CONCENTRATION AT TIME N+1/2 (=> ADVECTION STEP)
      CALL ALLBLO(CST   , 'CST   ') ! CONCENTRATION AT TIME N+1   (=> RESULT)
      !================================================================!
      !================================================================!
      CALL ALLVEC_IN_BLOCK(MASKTR, 4       , 1, 'MSKTR ', IELBT, 1, 2)
      CALL ALLVEC_IN_BLOCK(EBOR  , NSICLA  , 1, 'EBOR  ', IELBT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QBOR  , NSICLA  , 1, 'QBOR  ', IELBT, 1, 2)
!
C     JMH 18/09/09 AVAI ALLOCATED WITH SIZE 0 AND POINTING TO
C                  RELEVANT SECTIONS OF AVAIL
C     CALL ALLVEC_IN_BLOCK(AVAI,NOMBLAY*NSICLA,1,'AVAI  ',IELMT,1,2)
      CALL ALLVEC_IN_BLOCK(AVAI,NOMBLAY*NSICLA,1,'AVAI  ',    0,1,0)
      DO I=1,NSICLA
        DO K=1,NOMBLAY
          AVAI%ADR(K+(I-1)*NOMBLAY)%P%R=>AVAIL(1:NPOIN,K,I)
          AVAI%ADR(K+(I-1)*NOMBLAY)%P%MAXDIM1=NPOIN
          AVAI%ADR(K+(I-1)*NOMBLAY)%P%DIM1=NPOIN
        ENDDO
      ENDDO
C     LAYTHI ALLOCATED WITH SIZE 0 AND POINTING TO RELEVANT SECTIONS OF ES
C     CALL ALLVEC_IN_BLOCK(LAYTHI,NOMBLAY, 1, 'LAYTHI', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(LAYTHI,NOMBLAY, 1, 'LAYTHI',     0, 1, 0)
      DO K=1,NOMBLAY
        LAYTHI%ADR(K)%P%R=>ES(1:NPOIN,K)
        LAYTHI%ADR(K)%P%MAXDIM1=NPOIN
        LAYTHI%ADR(K)%P%DIM1=NPOIN
      ENDDO
!
      !================================================================!
      CALL ALLVEC_IN_BLOCK(QSCL  , NSICLA  , 1, 'QSCL  ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCLX , NSICLA  , 1, 'QSCLX ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCLY , NSICLA  , 1, 'QSCLY ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCL_C, NSICLA  , 1, 'QSCL_C', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCLXC, NSICLA  , 1, 'QSCLXC', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCLYC, NSICLA  , 1, 'QSCLYC', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(ZFCL  , NSICLA  , 1, 'ZFCL  ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(ZFCL_C, NSICLA  , 1, 'ZFCL_C', IELMT, 1, 2)
      !================================================================!
      CALL ALLVEC_IN_BLOCK(CBOR  , NSICLA  , 1, 'CBOR  ', IELBT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCL_S, NSICLA  , 1, 'QSCL_S', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCLXS, NSICLA  , 1, 'QSCLXS', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(QSCLYS, NSICLA  , 1, 'QSCLYS', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(ZFCL_S, NSICLA  , 1, 'ZFCL_S', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(FLUDP , NSICLA  , 1, 'FLUDP ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(FLUDPT, NSICLA  , 1, 'FLUDPT', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(FLUER , NSICLA  , 1, 'FLUER ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(FLUERT, NSICLA  , 1, 'FLUERT', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(CS    , NSICLA  , 1, 'CS    ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(CTILD , NSICLA  , 1, 'CTILD ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(CST   , NSICLA  , 1, 'CST   ', IELMT, 1, 2)
      !================================================================!


      ! ************* !
      ! VI - MATRICES !
      ! ************* !


      !================================================================!
      CALL ALLMAT(AM1_S, 'AM1_S ', IELMT, IELMT, CFG   , 'Q', 'Q') ! SUSPENSION WORK MATRIX
      CALL ALLMAT(AM2_S, 'AM2_S ', IELMT, IELMT, CFG   , 'Q', 'Q') ! SUSPENSION WORK MATRIX
      CALL ALLMAT(MBOR , 'MBOR  ', IELBT, IELBT, CFGBOR, 'Q', 'Q') ! SUSPENSION BOUNDRAY MATRIX
      !================================================================!


      ! ****************** !
      ! VII - OTHER ARRAYS !
      ! ****************** !
!
C     NTR SHOULD AT LEAST BE THE NUMBER OF VARIABLES IN VARSOR THAT WILL BE READ IN
C     VALIDA. HERE UP TO THE LAYER THICKNESSES
      NTR   = 26+(NOMBLAY+4)*NSICLA+NOMBLAY+NPRIV
      IF(SLVSED%SLV == 7) NTR = MAX(NTR,2+2*SLVSED%KRYLOV)
      IF(SLVTRA%SLV == 7) NTR = MAX(NTR,2+2*SLVTRA%KRYLOV)
      IF(3*(SLVSED%PRECON/3) == SLVSED%PRECON) NTR = NTR + 2 ! IF PRECOND. BLOC-DIAG (+2 DIAG)
      IF(3*(SLVTRA%PRECON/3) == SLVTRA%PRECON) NTR = NTR + 2 ! IF PRECOND. BLOC-DIAG (+2 DIAG)
!
C     W1 NO LONGER USED (IS SENT TO CVDFTR BUT CVDFTR DOES NOTHING WITH IT)
      CALL ALLVEC(1, W1 , 'W1    ', IELM0    , 1    , 1) ! WORK ARRAY
      CALL ALLVEC(1, TE1, 'TE1   ', IELM0_SUB, 1    , 1) ! WORK ARRAY BY ELEMENT
      CALL ALLVEC(1, TE2, 'TE2   ', IELM0_SUB, 1    , 1) ! WORK ARRAY BY ELEMENT
      CALL ALLVEC(1, TE3, 'TE3   ', IELM0_SUB, 1    , 1) ! WORK ARRAY BY ELEMENT
!
      CALL ALLBLO(VARCL, 'VARCL ') ! CLANDESTINE VARIABLES
      CALL ALLBLO(PRIVE, 'PRIVE ') ! USER ARRAY
      CALL ALLBLO(TB   , 'TB    ') ! WORKING ARRAY
!
      CALL ALLVEC_IN_BLOCK(TB   , NTR   , 1, 'T     ', IELMT, 1, 2)
      CALL ALLVEC_IN_BLOCK(VARCL, NVARCL, 1, 'CL    ', IELMT, 1, 2)
      IF(NPRIV.GT.0) THEN
        CALL ALLVEC_IN_BLOCK(PRIVE,MAX(NPRIV,4),1,'PRIV  ',IELMT,1, 2)
      ELSE
        CALL ALLVEC_IN_BLOCK(PRIVE,4           ,1,'PRIV  ',    0,1, 0)
      ENDIF
C     TO AVOID WRITING NON-INITIALISED ARRAYS TO FILE
      CALL OS('X=0     ',X=PRIVE)
!
      ! ************ !
      ! VIII - ALIAS !
      ! ************ !
!
      T1   => TB%ADR( 1)%P ! WORK ARRAY
      T2   => TB%ADR( 2)%P ! WORK ARRAY
      T3   => TB%ADR( 3)%P ! WORK ARRAY
      T4   => TB%ADR( 4)%P ! WORK ARRAY
      T5   => TB%ADR( 5)%P ! WORK ARRAY
      T6   => TB%ADR( 6)%P ! WORK ARRAY
      T7   => TB%ADR( 7)%P ! WORK ARRAY
      T8   => TB%ADR( 8)%P ! WORK ARRAY
      T9   => TB%ADR( 9)%P ! WORK ARRAY
      T10  => TB%ADR(10)%P ! WORK ARRAY
      T11  => TB%ADR(11)%P ! WORK ARRAY
      T12  => TB%ADR(12)%P ! WORK ARRAY
      T13  => TB%ADR(13)%P ! WORK ARRAY
      T14  => TB%ADR(14)%P ! WORK ARRAY
!
      ! ****************************************************************** !
      ! IX - ALLOCATES A BLOCK CONNECTING A VARIABLE NAME TO ITS ARRAY     !
      ! ****************************************************************** !
!
      CALL ALLBLO(VARSOR, 'VARSOR')
      CALL ADDBLO(VARSOR, U2D    )            ! 01
      CALL ADDBLO(VARSOR, V2D    )            ! 02
      CALL ADDBLO(VARSOR, HN    )             ! 03
      CALL ADDBLO(VARSOR, Z     )             ! 04
      CALL ADDBLO(VARSOR, ZF    )             ! 05
      CALL ADDBLO(VARSOR, Q     )             ! 06
      CALL ADDBLO(VARSOR, QU    )             ! 07
      CALL ADDBLO(VARSOR, QV    )             ! 08
      CALL ADDBLO(VARSOR, ZR    )             ! 09
      CALL ADDBLO(VARSOR, CHESTR)             ! 10
      CALL ADDBLO(VARSOR, TOB   )             ! 11
      CALL ADDBLO(VARSOR, HW    )             ! 12
      CALL ADDBLO(VARSOR, TW    )             ! 13
      CALL ADDBLO(VARSOR, THETAW)             ! 14
      CALL ADDBLO(VARSOR, QS    )             ! 15
      CALL ADDBLO(VARSOR, QSX   )             ! 16
      CALL ADDBLO(VARSOR, QSY   )             ! 17
      CALL ADDBLO(VARSOR, ESOMT )             ! 18
      CALL ADDBLO(VARSOR, KS)                 ! 19
      CALL ADDBLO(VARSOR, MU)                 ! 20
C
C     AVAI: FROM 21 TO 20+NOMBLAY*NSICLA
C
      DO I = 1,NOMBLAY*NSICLA
        CALL ADDBLO(VARSOR, AVAI%ADR(I)%P)
      ENDDO
C
C     QSCL: FROM 21+NOMBLAY*NSICLA TO 20+(NOMBLAY+1)*NSICLA
C
      DO I = 1, NSICLA
        CALL ADDBLO(VARSOR, QSCL%ADR(I)%P)
      ENDDO
C
C     CS: FROM 21+(NOMBLAY+1)*NSICLA TO 20+(NOMBLAY+2)*NSICLA
C
      DO I=1,NSICLA
        CALL ADDBLO(VARSOR, CS%ADR(I)%P)
      ENDDO
      CALL ADDBLO(VARSOR,QS_C)               ! 21+(NOMBLAY+2)*NSICLA
      CALL ADDBLO(VARSOR,QSXC)               ! 22+(NOMBLAY+2)*NSICLA
      CALL ADDBLO(VARSOR,QSYC)               ! 23+(NOMBLAY+2)*NSICLA
      CALL ADDBLO(VARSOR,QS_S)               ! 24+(NOMBLAY+2)*NSICLA
      CALL ADDBLO(VARSOR,QSXS)               ! 25+(NOMBLAY+2)*NSICLA
      CALL ADDBLO(VARSOR,QSYS)               ! 26+(NOMBLAY+2)*NSICLA
C
C     QSCL_C: FROM 27+(NOMBLAY+2)*NSICLA TO 26+(NOMBLAY+3)*NSICLA
C
      DO I=1,NSICLA
        CALL ADDBLO(VARSOR,QSCL_C%ADR(I)%P)
      ENDDO
C
C     QSCL_S: FROM 27+(NOMBLAY+3)*NSICLA TO 26+(NOMBLAY+4)*NSICLA
C
      DO I=1,NSICLA
        CALL ADDBLO(VARSOR,QSCL_S%ADR(I)%P)
      ENDDO
C
C     LAYTHI: FROM 27+(NOMBLAY+4)*NSICLA TO 26+(NOMBLAY+4)*NSICLA+NOMBLAY
C
      DO I=1,NOMBLAY
        CALL ADDBLO(VARSOR,LAYTHI%ADR(I)%P) ! 26+(NOMBLAY+4)*NSICLA+NOMBLAY
      ENDDO
C
C     PRIVE: FROM 27+(NOMBLAY+4)*NSICLA+NOMBLAY TO
C                 26+(NOMBLAY+4)*NSICLA+MAX(4,NPRIV)+NOMBLAY
C
      DO I=1,MAX(4,NPRIV)
        CALL ADDBLO(VARSOR,PRIVE%ADR(I)%P)
      ENDDO
!
      IF(VARCL%N.GT.0) THEN
        DO I=1,VARCL%N
          CALL ADDBLO(VARSOR,VARCL%ADR(I)%P)
          SORLEO(26+MAX(4,NPRIV)+NSICLA*(NOMBLAY+4)+NOMBLAY+I)=.TRUE.
        ENDDO
      ENDIF
!
!
!-----------------------------------------------------------------------
C !JAJ #### IF REQUIRED, HERE WE CAN READ THE INPUT SECTIONS FILE
C      AND MODIFY NCP AND CTRLSC(1:NCP) ACCORDINGLY IN READ_SECTIONS
!
      IF(TRIM(SIS_FILES(SISSEC)%NAME).NE.'') THEN
        IF(LNG.EQ.1) THEN
          WRITE(LU,*)
     &   'POINT_SISYPHE: SECTIONS DEFINIES PAR FICHIER'
        ELSEIF(LNG.EQ.2) THEN
          WRITE(LU,*)
     &   'POINT_SISYPHE: SECTIONS DEFINED IN THE SECTIONS INPUT FILE'
        ENDIF
        CALL READ_SECTIONS_SISYPHE
      ELSE ! THE PREVIOUS WAY OF DOING THINGS
        IF(NCP.NE.0) THEN
          IF(LNG.EQ.1) THEN
            WRITE(LU,*)
     &      'POINT_SISYPHE: SECTIONS DEFINED IN THE PARAMETER FILE'
          ELSEIF(LNG.EQ.2) THEN
            IF(NCP.NE.0) WRITE(LU,*)
     &      'POINT_SISYPHE: SECTIONS DEFINED IN THE PARAMETER FILE'
          ENDIF
        ENDIF
      ENDIF
!
      IF(LNG == 1) WRITE(LU,21)
      IF(LNG == 2) WRITE(LU,22)
!
11    FORMAT(1X,///,21X,'*******************************',/,
     &21X,              '* ALLOCATION DE LA MEMOIRE    *',/,
     &21X,              '*******************************',/)
21    FORMAT(1X,///,21X,'****************************************',/,
     &21X,              '* FIN DE L''ALLOCATION DE LA MEMOIRE  : *',/,
     &21X,              '****************************************',/)

12    FORMAT(1X,///,21X,'*******************************',/,
     &21X,              '*     MEMORY ORGANISATION     *',/,
     &21X,              '*******************************',/)
22    FORMAT(1X,///,21X,'*************************************',/,
     &21X,              '*    END OF MEMORY ORGANIZATION:    *',/,
     &21X,              '*************************************',/)
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       PREPARES THE VARIABLES WHICH WILL BE WRITTEN TO
!>                THE RESULTS FILE OR TO THE LISTING.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AAT, LLT
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::HN HN@endlink, 
!> @link DECLARATIONS_SISYPHE::KS KS@endlink, 
!> @link DECLARATIONS_SISYPHE::LEOPR LEOPR@endlink, 
!> @link DECLARATIONS_SISYPHE::LISPR LISPR@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::PTINIG PTINIG@endlink, 
!> @link DECLARATIONS_SISYPHE::PTINIL PTINIL@endlink, 
!> @link DECLARATIONS_SISYPHE::QU QU@endlink, 
!> @link DECLARATIONS_SISYPHE::SORIMP SORIMP@endlink, 
!> @link DECLARATIONS_SISYPHE::SORLEO SORLEO@endlink, 
!> @link DECLARATIONS_SISYPHE::U2D U2D@endlink, 
!> @link DECLARATIONS_SISYPHE::V2D V2D@endlink, 
!> @link DECLARATIONS_SISYPHE::Z Z@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF ZF@endlink
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I, IMP, LEO, LTT
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), Q()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE(), SIS_ARRET()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 07/12/2009
!> </td><td> JMH
!> </td><td> KS SET TO 0 IF LLT=0
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AAT
!></td><td>--></td><td>CURRENT TIME (FOR BUILDING SOLUTIONS)
!>    </td></tr>
!>          <tr><td>LLT
!></td><td>--></td><td>LOCAL LT (MAY BE LT-1+PERCOU)
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE PREDES
     &(LLT,AAT)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AAT            |-->| CURRENT TIME (FOR BUILDING SOLUTIONS)
C| LLT            |-->| LOCAL LT (MAY BE LT-1+PERCOU)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE DECLARATIONS_SISYPHE
      IMPLICIT NONE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN)          :: LLT
      DOUBLE PRECISION, INTENT(IN) :: AAT
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER LTT,I
      LOGICAL IMP,LEO
C
C-----------------------------------------------------------------------
C
C     THE OUTPUT VARIABLES ARE BUILT ONLY IF NECESSARY, HENCE THE
C     FOLLOWING TESTS, WHICH MUST BE THE SAME AS IN DESIMP (BIEF LIBRARY)
C
      IMP=.FALSE.
      LEO=.FALSE.
      LTT=(LLT/LISPR)*LISPR
      IF(LLT.EQ.LTT.AND.LLT.GE.PTINIL) IMP=.TRUE.
      LTT=(LLT/LEOPR)*LEOPR
      IF(LLT.EQ.LTT.AND.LLT.GE.PTINIG) LEO=.TRUE.
C
C     NO PRINTOUTS REUIRED: LEAVING
      IF (.NOT.(LEO.OR.IMP)) GO TO 1000
C
C=======================================================================
C     COMPUTES SECONDARY VARIABLES
C=======================================================================
C
C     FREE SURFACE: H+ZF
C
      IF((LEO.AND.SORLEO(4)).OR.(IMP.AND.SORIMP(4))) THEN
        CALL OS('X=Y+Z   ',X=Z,Y=HN,Z=ZF)
      ENDIF
C
C     DISCHARGE
C
      IF((LEO.AND.SORLEO(6)).OR.(IMP.AND.SORIMP(6))) THEN
        DO I=1,NPOIN
          Q%R(I)=HN%R(I)*SQRT(U2D%R(I)**2+V2D%R(I)**2)
        ENDDO
      ENDIF
C
C     DISCHARGE ALONG X
C
      IF((LEO.AND.SORLEO(7)).OR.(IMP.AND.SORIMP(7))) THEN
        CALL OS('X=YZ    ',X=QU,Y=U2D,Z=HN)
      ENDIF
C
C     DISCHARGE ALONG Y
C
      IF((LEO.AND.SORLEO(8)).OR.(IMP.AND.SORIMP(8))) THEN
        CALL OS('X=YZ    ',X=QU,Y=V2D,Z=HN)
      ENDIF
C
C=======================================================================
C
C     VARIABLES WHICH ARE NOT INITIALISED AT THE FIRST CALL OF PREDES
C
      IF(LLT.EQ.0) THEN
C       JMH ON 27/11/2009
        IF((LEO.AND.SORLEO(19)).OR.(IMP.AND.SORIMP(19))) THEN
          CALL OS('X=0     ',X=KS)
        ENDIF
      ENDIF
C
C=======================================================================
C
1000  CONTINUE
C
C=======================================================================
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       ALLOWS THE USER TO CODE THEIR OWN BEDLOAD TRANSPORT
!>                FORMULATION, BEST SUITED TO THEIR APPLICATION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @warning  USER SUBROUTINE; SAND TRANSPORT FORMULA MUST BE CODED BY THE USER

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>BEDLOAD_FORMULA()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/11/2003
!> </td><td> F. HUVELIN
!> </td><td> MODIFIED
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 20/05/1996
!> </td><td>
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>--></td><td>CRITICAL SHIELDS PARAMETER
!>    </td></tr>
!>          <tr><td>CF
!></td><td>--></td><td>QUADRATIC FRICTION COEFFICIENT (TOTAL FRICTION)
!>    </td></tr>
!>          <tr><td>CFP
!></td><td>--></td><td>QUADRATIC FRICTION COEFFICIENT (SKIN FRICTION)
!>    </td></tr>
!>          <tr><td>CHESTR
!></td><td>--></td><td>FRICTION COEFFICIENT (HEZY, NIKURADSE OR STICKLER)
!>    </td></tr>
!>          <tr><td>DM
!></td><td>--></td><td>MEAN SAND DIAMETER
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>GRAVITY
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>WATER DEPTH
!>    </td></tr>
!>          <tr><td>HW
!></td><td>--></td><td>WAVE HEIGHT
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF POINTS
!>    </td></tr>
!>          <tr><td>Q
!></td><td>--></td><td>WATER FLOW RATE
!>    </td></tr>
!>          <tr><td>QSS,QSC
!></td><td><--</td><td>SUSPENDED AND BED LOAD SAND TRANSPORT
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>--></td><td>MEAN BOTTOM FRICTION
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td>--></td><td>WAVE INDUCED BOTTOM FRICTION
!>    </td></tr>
!>          <tr><td>TW
!></td><td>--></td><td>WAVE PERIOD
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>--></td><td>FLOW VISCOSITY
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>FLOW DENSITY
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>--></td><td>SAND DENSITY
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE QSFORM
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |-->| CRITICAL SHIELDS PARAMETER
C| CF             |-->| QUADRATIC FRICTION COEFFICIENT (TOTAL FRICTION)
C| CFP            |-->| QUADRATIC FRICTION COEFFICIENT (SKIN FRICTION)
C| CHESTR         |-->| FRICTION COEFFICIENT (HEZY, NIKURADSE OR STICKLER)
C| DM             |-->| MEAN SAND DIAMETER
C| GRAV           |-->| GRAVITY
C| HN             |-->| WATER DEPTH
C| HW             |-->| WAVE HEIGHT
C| NPOIN          |-->| NUMBER OF POINTS
C| Q             |-->| WATER FLOW RATE
C| QSS,QSC        |<--| SUSPENDED AND BED LOAD SAND TRANSPORT
C| TOB            |-->| MEAN BOTTOM FRICTION
C| TOBW           |-->| WAVE INDUCED BOTTOM FRICTION
C| TW             |-->| WAVE PERIOD
C| VCE            |-->| FLOW VISCOSITY
C| XMVE           |-->| FLOW DENSITY
C| XMVS           |-->| SAND DENSITY
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE DECLARATIONS_SISYPHE
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C  FOLLOWING LINES NEED TO BE COMMENTED OUT
C
      IF(LNG.EQ.1) WRITE(LU,52)
      IF(LNG.EQ.2) WRITE(LU,53)
C
52    FORMAT(/,1X,' STOP :',/
     &     ,1X,' LE TAUX DE TRANSPORT DOIT ETRE
     &       CALCULE DANS QSFORM')
53    FORMAT(/,1X,'SISYPHE IS STOPPED : ',/
     &      ,1X,' SAND TRANSPORT MUST BE CALCULATED IN QSFORM')
      CALL PLANTE(1)
      STOP
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       - READS SECTIONS INPUT FILE IN SCALAR AND PARALLEL MODES
!><br>            - DEFINES THE CONTROL SECTIONS, OR...
!><br>            - ...RE-DEFINES THE ONES DECLARED PREVIOUSLY IN THE STEERING FILE
!><br>            - SECTIONS ARE DEFINED BY GLOBAL NODE NUMBERS OR,
!>                BY END POINT COORDINATES (THEN NEAREST NODE FOUND)
!><br>            - IN PARALLEL MODE, TWO OPTIONS:
!><br>                 -> TAKES THE "SCALAR" FILE (AS "PREVIOUSLY")
!><br>                 -> TAKES A PARTITIONED FILE - COMPUTING FLUXES THROUGH SECTIONS
!>                     - CROSSING NUMEROUS MESH PARTITIONS IS POSSIBLE
!><br>            - MODIFIES CTRLSC AND NCP

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::CHAIN CHAIN@endlink, 
!> @link DECLARATIONS_SISYPHE::CTRLSC CTRLSC@endlink, 
!> @link DECLARATIONS_SISYPHE::MESH MESH@endlink, 
!> @link DECLARATIONS_SISYPHE::NCP NCP@endlink, 
!> @link DECLARATIONS_SISYPHE::SISSEC SISSEC@endlink, 
!> @link DECLARATIONS_SISYPHE::SIS_FILES SIS_FILES@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> DISTB, DISTE, DMINB, DMINE, ERR, I, IHOWSEC, INP, N, NSEC, XA, YA
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>POINT_SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 15/02/2010
!> </td><td> JAJ PINXIT JACEK.JANKOWSKI@BAW.DE
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>     </table>
C
C#######################################################################
C
                     SUBROUTINE READ_SECTIONS_SISYPHE
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF, ONLY: NCSIZE
      USE DECLARATIONS_SISYPHE, ONLY: MESH, CHAIN, NCP, CTRLSC,
     &                                SIS_FILES, SISSEC
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
!
      INTEGER :: NSEC, IHOWSEC, I, N, ERR, INP
      DOUBLE PRECISION :: XA, YA, DISTB, DISTE, DMINB, DMINE
!
!-----------------------------------------------------------------------
!
C      WRITE(LU,*) '-> ENTERING READ_SECTIONS_SISYPHE'
      INP=SIS_FILES(SISSEC)%LU
      READ (INP,*) ! THE NECESSARY COMMENT LINE
      READ (INP,*) NSEC, IHOWSEC
      IF (.NOT.ALLOCATED(CHAIN)) THEN
        ALLOCATE (CHAIN(NSEC), STAT=ERR)
        IF (ERR/=0) THEN
          WRITE(LU,*)
     &      'READ_SECTIONS: ERROR BY REALLOCATING CHAIN:',ERR
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDIF

      SELECT CASE (IHOWSEC)
      CASE (:-1) ! SECTION END POINTS PROVIDED AS GLOBAL NODES
        DO N=1,NSEC
          READ (INP,*) CHAIN(N)%DESCR
          READ (INP,*) CHAIN(N)%NPAIR(:)
          IF (NCSIZE>1) THEN
            CHAIN(N)%XYBEG(:)=0.0D0
            CHAIN(N)%XYEND(:)=0.0D0
          ELSE
            CHAIN(N)%XYBEG(:)= (/MESH%X%R(CHAIN(N)%NPAIR(1)),
     &                           MESH%Y%R(CHAIN(N)%NPAIR(1))/)
            CHAIN(N)%XYEND(:)= (/MESH%X%R(CHAIN(N)%NPAIR(2)),
     &                           MESH%Y%R(CHAIN(N)%NPAIR(2))/)
          ENDIF
          CHAIN(N)%NSEG=-1
          NULLIFY(CHAIN(N)%LISTE)
        END DO
C        WRITE(LU,'(A)') ' -> SECTION, TERMINAL COORDINATES:'
C        DO N=1,NSEC
C          WRITE(LU,'(I9,4(1X,1PG13.6))') N,
C     &          CHAIN(N)%XYBEG, CHAIN(N)%XYEND
C        END DO
      CASE (0) ! SECTION END POINTS PROVIDED BY COORDINATES
        DO N=1,NSEC
          READ (INP,*) CHAIN(N)%DESCR
          READ (INP,*) CHAIN(N)%XYBEG(:), CHAIN(N)%XYEND(:)
          CHAIN(N)%NPAIR(:)=0
          CHAIN(N)%NSEG=-1
          NULLIFY(CHAIN(N)%LISTE)
        END DO
        DO N=1,NSEC         ! FIND NEAREST NODES
          XA=MESH%X%R(1)
          YA=MESH%Y%R(1)
          DMINB = SQRT( (CHAIN(N)%XYBEG(1)-XA)**2
     &                + (CHAIN(N)%XYBEG(2)-YA)**2 )
          DMINE = SQRT( (CHAIN(N)%XYEND(1)-XA)**2
     &                + (CHAIN(N)%XYEND(2)-YA)**2 )
          CHAIN(N)%NPAIR(1)=1
          CHAIN(N)%NPAIR(2)=1
          DO I=2,MESH%NPOIN ! COMPUTATIONALLY INTENSIVE
            XA=MESH%X%R(I)
            YA=MESH%Y%R(I)
            DISTB = SQRT( (CHAIN(N)%XYBEG(1)-XA)**2
     &                  + (CHAIN(N)%XYBEG(2)-YA)**2 )
            DISTE = SQRT( (CHAIN(N)%XYEND(1)-XA)**2
     &                 + (CHAIN(N)%XYEND(2)-YA)**2 )
            IF ( DISTB < DMINB ) THEN
              CHAIN(N)%NPAIR(1)=I
              DMINB=DISTB
            ENDIF
            IF ( DISTE < DMINE ) THEN
              CHAIN(N)%NPAIR(2)=I
              DMINE=DISTE
            ENDIF
          END DO
C          WRITE(LU,'(A,3(1X,I9))')
C     &          ' -> SECTION, TERMINAL NODES: ', N, CHAIN(N)%NPAIR(:)
        END DO
      CASE (1:) ! PARTITIONED, INSTEAD OF END POINTS, READY CHAINS PROVIDED
        DO N=1,NSEC
          READ (INP,*) CHAIN(N)%DESCR
          READ (INP,*) CHAIN(N)%NSEG
          IF (CHAIN(N)%NSEG>0) THEN
            ALLOCATE (CHAIN(N)%LISTE(CHAIN(N)%NSEG,2), STAT=ERR)
            IF (ERR/=0) THEN
              WRITE(LU,*) 'READ_SECTIONS: ',
     &         ' ERROR BY REALLOCATING CHAIN(N)%LISTE, N, ERR:',N,ERR
              CALL PLANTE(1)
              STOP
            ENDIF
            DO I=1,CHAIN(N)%NSEG
              READ(INP,*) CHAIN(N)%LISTE(I,:)
              CHAIN(N)%NPAIR=-1 ! HM...
              CHAIN(N)%XYBEG=0.0D0
              CHAIN(N)%XYEND=0.0D0
            END DO
          ELSE
            NULLIFY(CHAIN(N)%LISTE)
          ENDIF
        END DO
      END SELECT
!
!-----------------------------------------------------------------------
!
C      WRITE(LU,*) 'SECTIONS SUMMARY:'
C      WRITE(LU,*) 'NSEC,IHOWSEC: ',NSEC,IHOWSEC
C      SELECT CASE (IHOWSEC)
C      CASE(:0) ! SERIAL CASE, OR "CLASSICAL CASE" IN PARALLEL (DEVEL)
C        DO N=1,NSEC
C          WRITE(LU,*) CHAIN(N)%DESCR
C          WRITE(LU,*) CHAIN(N)%XYBEG(:), CHAIN(N)%XYEND(:)
C          WRITE(LU,*) CHAIN(N)%NPAIR(:)
C        END DO
C      CASE (1:) ! PARTITIONED, READY SEGMENT CHAINS GIVEN
C        DO N=1,NSEC
C          WRITE(LU,*) 'NAME: ', CHAIN(N)%DESCR
C          WRITE(LU,*) 'NSEG: ', CHAIN(N)%NSEG
C          DO I=1,CHAIN(N)%NSEG
C            WRITE(LU,*) CHAIN(N)%LISTE(I,:)
C          END DO
C        END DO
C      END SELECT
!
!-----------------------------------------------------------------------
C TRANSFER TO THE GLOBAL TELEMAC OR SISYPHE VARIABLES
C NCP IS 2 * NUMBER OF SECTIONS
C CTRLSC IS THE LIST OF THE SECTION END NODES
C CTRLSC HAS TO BE RE-ALLOCATED CAREFULLY
!
C      WRITE (LU,*) 'ARRANGING SECTIONS FOR SISYPHE'
C      WRITE (LU,*) 'SISYPHE NCP WAS: ',NCP
      NCP = 2*NSEC
      IF (ALLOCATED(CTRLSC)) THEN
        DEALLOCATE(CTRLSC, STAT=ERR)
        IF (ERR/=0) THEN
          WRITE(LU,*)
     &    'READ_SECTIONS_SISYPHE: ERROR BY DEALLOCATING CTRLSC:',ERR
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDIF
      ALLOCATE (CTRLSC(NCP), STAT=ERR)
      IF (ERR/=0) THEN
        WRITE(LU,*)
     &    'READ_SECTIONS_SISYPHE: ERROR BY REALLOCATING CTRLSC:',ERR
        CALL PLANTE(1)
        STOP
      ENDIF
      I=1
      DO N=1,NSEC
        CTRLSC(I)   = CHAIN(N)%NPAIR(1)
        CTRLSC(I+1) = CHAIN(N)%NPAIR(2)
        I=I+2
      END DO
C      WRITE (LU,*) 'NCP@SISYPHE: ',NCP
C      WRITE (LU,*) 'CTRLSC@SISYPHE: ',CTRLSC
!
!-----------------------------------------------------------------------
!
C      WRITE(LU,*) '-> LEAVING READ_SECTIONS_SISYPHE'
      RETURN
      END SUBROUTINE READ_SECTIONS_SISYPHE
!-----------------------------------------------------------------------
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES MISSING DATA/VARIABLES FOR HYDRODYNAMIC
!>                AND/OR SEDIMENTOLOGICAL CONTINUATION RUN.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ALIRE, H, HW, ICF, LISTI, NPOIN, PASS, Q, QU, QV, S, THETAW, TROUVE, TW, U, V, ZF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> K
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_RESCUE_SISYPHE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OV(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td>
!> </td><td> C. LENORMANT
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ALIRE
!></td><td>---</td><td>TABLEAU DES VARIABLES A LIRE
!>    </td></tr>
!>          <tr><td>H
!></td><td><--</td><td>HAUTEUR.
!>    </td></tr>
!>          <tr><td>HW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KX,KY
!></td><td><--</td><td>COEFFICIENTS DE DISPERSION
!>    </td></tr>
!>          <tr><td>LISTI
!></td><td>--></td><td>LOGIQUE VRAI SI ON IMPRIME DES MESSAGES
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS DU MAILLAGE
!>    </td></tr>
!>          <tr><td>NPRIV
!></td><td>--></td><td>NOMBRE DE TABLEAUX UTILISATEURS DU CAS
!>    </td></tr>
!>          <tr><td>NTRAC
!></td><td>--></td><td>NOMBRE DE TRACEURS DU CAS A TRAITER
!>    </td></tr>
!>          <tr><td>PASS
!></td><td>--></td><td>LOGIQUE VRAI SI ON EST EN DEBUT DE CALCUL
!>    </td></tr>
!>          <tr><td>Q
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td><--</td><td>SURFACE LIBRE.
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TROUVE
!></td><td>--></td><td>LOGIQUE INDIQUANT LES VARIABLES TROUVEES
!>                  DANS LE SOUS-PROGRAMME SUITE
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td><--</td><td>COTE DES POINTS DU FOND.
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE RESCUE_SISYPHE
     &(QU,QV,Q,U,V,H,S,ZF,HW,TW,THETAW,NPOIN,TROUVE,ALIRE,PASS,
     & ICF,LISTI,MAXVAR)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ALIRE          |---| TABLEAU DES VARIABLES A LIRE
C| H              |<--| HAUTEUR.
C| HW             |---| 
C| ICF            |---| 
C| KX,KY          |<--| COEFFICIENTS DE DISPERSION
C| LISTI          |-->| LOGIQUE VRAI SI ON IMPRIME DES MESSAGES
C| MAXVAR         |-->| MAXIMUM NUMBER OF OUTPUT VARIABLES
C| NPOIN          |-->| NOMBRE DE POINTS DU MAILLAGE
C| NPRIV          |-->| NOMBRE DE TABLEAUX UTILISATEURS DU CAS
C| NTRAC          |-->| NOMBRE DE TRACEURS DU CAS A TRAITER
C| PASS           |-->| LOGIQUE VRAI SI ON EST EN DEBUT DE CALCUL
C| Q              |---| 
C| QU             |---| 
C| QV             |---| 
C| S              |<--| SURFACE LIBRE.
C| THETAW         |---| 
C| TROUVE         |-->| LOGIQUE INDIQUANT LES VARIABLES TROUVEES
C|                |   | DANS LE SOUS-PROGRAMME SUITE
C| TW             |---| 
C| U              |---| 
C| V              |---| 
C| ZF             |<--| COTE DES POINTS DU FOND.
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
C
      USE INTERFACE_SISYPHE, EX_RESCUE_SISYPHE
     &           => RESCUE_SISYPHE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN) :: MAXVAR
      INTEGER, INTENT(IN) :: TROUVE(MAXVAR),ALIRE(MAXVAR),NPOIN,ICF
      LOGICAL, INTENT(IN) :: PASS,LISTI
C
      DOUBLE PRECISION, INTENT(INOUT) :: QU(NPOIN), QV(NPOIN), Q(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: U(NPOIN) , V(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: S(NPOIN) , ZF(NPOIN), H(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: HW(NPOIN), TW(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: THETAW(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER K
C
C-----------------------------------------------------------------------
C
C PRINTOUTS :
C -----------
      IF(PASS.AND.LISTI) THEN
        WRITE(LU,200)
200     FORMAT(80('-'))
        IF(ALIRE(8).EQ.1) THEN
          IF(LNG.EQ.1) WRITE(LU,300)
          IF(LNG.EQ.2) WRITE(LU,301)
300       FORMAT(1X,'RESCUE : FICHIER HYDRODYNAMIQUE')
301       FORMAT(1X,'RESCUE : HYDRODYNAMIC FILE')
        ELSE
          IF(LNG.EQ.1) WRITE(LU,310)
          IF(LNG.EQ.2) WRITE(LU,311)
310       FORMAT(1X,'RESCUE : FICHIER SEDIMENTOLOGIQUE')
311       FORMAT(1X,'RESCUE : SEDIMENTOLOGICAL FILE')
        ENDIF
      ENDIF
C
C ------------------------------------------------------------------
C  WATER DEPTH :
C  -------------
      IF((ALIRE(3).EQ.1).AND.(TROUVE(3).NE.1)) THEN
        IF(TROUVE(4).EQ.1.AND.TROUVE(5).EQ.1) THEN
          IF (LISTI) THEN
            IF(LNG.EQ.1) WRITE(LU,400)
            IF(LNG.EQ.2) WRITE(LU,401)
          ENDIF
          CALL OV( 'X=Y-Z   ' , H , S , ZF , 0.D0 , NPOIN )
        ELSE
          IF (LISTI) THEN
            IF(LNG.EQ.1) WRITE(LU,420)
            IF(LNG.EQ.2) WRITE(LU,421)
          ENDIF
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDIF
C
400       FORMAT(1X,'HAUTEUR D''EAU CALCULEE AVEC LE FOND',
     &         /,1X,'ET LA SURFACE LIBRE')
401       FORMAT(1X,'WATER DEPTH COMPUTED WITH BATHYMETRY',
     &         /,1X,' AND SURFACE ELEVATION')
420       FORMAT(1X,'IMPOSSIBLE DE CALCULER LA HAUTEUR D''EAU')
421       FORMAT(1X,'WATER DEPTH UNABLE TO BE COMPUTED')
C
C ----------------------------------------------------------------------
C
C CLIPS NEGATIVE WATER DEPTHS :
C -------------------------------------
C
      DO K = 1,NPOIN
        H(K) = MAX(H(K),0.D0)
      ENDDO
C
C------------------------------------------------------------------------
C
C  WAVE HEIGHT AND PERIOD
C
      IF(ICF==4.OR.ICF==5.OR.ICF==8.OR.ICF==9) THEN
C
        IF(ALIRE(12).EQ.1.AND.TROUVE(12).EQ.0) THEN
          IF(LNG.EQ.1) WRITE(LU,900)
          IF(LNG.EQ.2) WRITE(LU,901)
          CALL OV( 'X=C     ' , HW , U , V , 0.D0 , NPOIN )
        ENDIF
C
900     FORMAT(1X,'CALCUL PRECEDENT SANS LA HAUTEUR DE HOULE : ON',
     &          ' PREND ZERO')
901     FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT WAVE HEIGHT : IT IS',
     &          ' FIXED TO ZERO')
C
         IF(ALIRE(13).EQ.1.AND.TROUVE(13).EQ.0) THEN
           IF(LNG.EQ.1) WRITE(LU,902)
           IF(LNG.EQ.2) WRITE(LU,903)
           CALL OV( 'X=C     ' , TW , U , V , 0.D0 , NPOIN )
         ENDIF
902     FORMAT(1X,'CALCUL PRECEDENT SANS LA PERIODE DE HOULE : ON',
     &          ' PREND ZERO')
903     FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT WAVE PERIOD : IT IS',
     &          ' FIXED TO ZERO')
C
         IF(ALIRE(14).EQ.1.AND.TROUVE(14).EQ.0) THEN
           IF(LNG.EQ.1) WRITE(LU,902)
           IF(LNG.EQ.2) WRITE(LU,903)
           CALL OV( 'X=C     ' , THETAW , U , V , 90.D0  , NPOIN )
         ENDIF
      ENDIF
909   FORMAT(1X,'CALCUL PRECEDENT SANS ANGLE DE HOULE : ON',
     &          ' PREND ZERO')
910   FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT WAVE ANGLE : IT IS',
     &          ' FIXED TO ZERO')
C
C-----------------------------------------------------------------------
C  NON-ERODABLE BED
C
      IF(ALIRE(9).EQ.1.AND.TROUVE(9).EQ.0) THEN
        IF(LNG.EQ.1) WRITE(LU,907)
        IF(LNG.EQ.2) WRITE(LU,908)
      ENDIF
907   FORMAT(1X,'CALCUL PRECEDENT SANS FOND NON ERODABLE')
908   FORMAT(1X,'PREVIOUS CALCULATION WITHOUT NON ERODABLE',
     &         /,1X,'BOTTOM')
C
C-----------------------------------------------------------------------
C  BED ELEVATION
C
      IF(ALIRE(5).EQ.1.AND.TROUVE(5).EQ.0) THEN
C
        IF(TROUVE(4).EQ.1.AND.TROUVE(3).EQ.1) THEN
          IF (LISTI) THEN
          IF(LNG.EQ.1) WRITE(LU,410)
          IF(LNG.EQ.2) WRITE(LU,411)
410       FORMAT(1X,'FOND CALCULE AVEC LA HAUTEUR D''EAU',
     &         /,1X,'ET LA SURFACE LIBRE')
411       FORMAT(1X,'BATHYMETRY COMPUTED FROM WATER DEPTH',
     &         /,1X,'AND SURFACE ELEVATION')
          ENDIF
          CALL OV( 'X=Y-Z   ' , ZF , S , H , 0.D0 , NPOIN )
        ELSE
          CALL  OV( 'X=C     ' , ZF , ZF, ZF, 0.D0 , NPOIN )
          IF(LNG.EQ.1) WRITE(LU,960)
          IF(LNG.EQ.2) WRITE(LU,961)
        ENDIF
960     FORMAT(1X,'COTE DU FOND NON TROUVEE',/,
     &            'LA COTE EST INITIALISEE A ZERO')
961     FORMAT(1X,'BOTTOM TOPOGRAPHY NOT FOUND',/,
     &            'IT IS SET TO ZERO')
C
      ENDIF
C
      IF (PASS.AND.LISTI) THEN
        WRITE(LU,970)
970     FORMAT(80('-'))
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE RESCUE_SISYPHE
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES MISSING DATA/VARIABLES FOR HYDRODYNAMIC
!>                AND/OR SEDIMENTOLOGICAL CONTINUATION RUN.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  RESCUE_SISYPHE MUST BE MODIFIED FOR UNSTEADY SIMULATIONS
!>         TO TAKE THE BED EVOLUTIONS INTO ACCOUNT.

!>  @note  THE WATER DEPTH NEEDS TO BE COMPUTED FROM THE BED ELEVATION
!>        (SISYPHE) AND THE FREE SURFACE ELEVATION (HYDRO FILE).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>DECLARATIONS_SISYPHE, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ALIRE, ENTET, H, HW, ICF, NPOIN, Q, QU, QV, S, THETAW, TROUVE, TW, U, V, ZF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_RESCUE_SISYPHE_NOTPERMA
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OV(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.7                                       </center>
!> </td><td>
!> </td><td> C.VILLARET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ALIRE
!></td><td>---</td><td>TABLEAU DES VARIABLES A LIRE
!>    </td></tr>
!>          <tr><td>ENTET
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>H
!></td><td><--</td><td>HAUTEUR.
!>    </td></tr>
!>          <tr><td>HW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KX,KY
!></td><td><--</td><td>COEFFICIENTS DE DISPERSION
!>    </td></tr>
!>          <tr><td>LISTI
!></td><td>--></td><td>LOGIQUE VRAI SI ON IMPRIME DES MESSAGES
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS DU MAILLAGE
!>    </td></tr>
!>          <tr><td>NPRIV
!></td><td>--></td><td>NOMBRE DE TABLEAUX UTILISATEURS DU CAS
!>    </td></tr>
!>          <tr><td>NTRAC
!></td><td>--></td><td>NOMBRE DE TRACEURS DU CAS A TRAITER
!>    </td></tr>
!>          <tr><td>Q
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td><--</td><td>SURFACE LIBRE.
!>    </td></tr>
!>          <tr><td>THETAW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TROUVE
!></td><td>--></td><td>LOGIQUE INDIQUANT LES VARIABLES TROUVEES
!>                  DANS LE SOUS-PROGRAMME SUITE
!>    </td></tr>
!>          <tr><td>TW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td><--</td><td>COTE DES POINTS DU FOND.
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                     SUBROUTINE RESCUE_SISYPHE_NOTPERMA
     &(QU,QV,Q,U,V,H,S,ZF,HW,TW,THETAW,NPOIN,TROUVE,ALIRE,ICF,ENTET,
     & MAXVAR)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ALIRE          |---| TABLEAU DES VARIABLES A LIRE
C| ENTET          |---| 
C| H              |<--| HAUTEUR.
C| HW             |---| 
C| ICF            |---| 
C| KX,KY          |<--| COEFFICIENTS DE DISPERSION
C| LISTI          |-->| LOGIQUE VRAI SI ON IMPRIME DES MESSAGES
C| MAXVAR         |-->| MAXIMUM NUMBER OF OUTPUT VARIABLES
C| NPOIN          |-->| NOMBRE DE POINTS DU MAILLAGE
C| NPRIV          |-->| NOMBRE DE TABLEAUX UTILISATEURS DU CAS
C| NTRAC          |-->| NOMBRE DE TRACEURS DU CAS A TRAITER
C| Q              |---| 
C| QU             |---| 
C| QV             |---| 
C| S              |<--| SURFACE LIBRE.
C| THETAW         |---| 
C| TROUVE         |-->| LOGIQUE INDIQUANT LES VARIABLES TROUVEES
C|                |   | DANS LE SOUS-PROGRAMME SUITE
C| TW             |---| 
C| U              |---| 
C| V              |---| 
C| ZF             |<--| COTE DES POINTS DU FOND.
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_RESCUE_SISYPHE_NOTPERMA
     &           => RESCUE_SISYPHE_NOTPERMA
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN) :: MAXVAR
      INTEGER, INTENT(IN) :: TROUVE(MAXVAR),ALIRE(MAXVAR),NPOIN,ICF
C
      DOUBLE PRECISION, INTENT(INOUT) :: QU(NPOIN), QV(NPOIN), Q(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: U(NPOIN) , V(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: S(NPOIN) , ZF(NPOIN), H(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: HW(NPOIN), TW(NPOIN)
      DOUBLE PRECISION, INTENT(INOUT) :: THETAW(NPOIN)
      LOGICAL, INTENT(IN)             :: ENTET
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
C     THE ESSENTIAL VARIABLES NOT MODIFIED BY THE BED EVOLUTIONS
C     ARE THE FREE SURFACE AND THE FLOW
C
C     COMPUTES THE FREE SURFACE(4) FROM THE NON-MODIFIED WATER DEPTH
C     AND THE NON-MODIFIED BED ELEVATION
C
      IF(TROUVE(4).EQ.0.AND.ALIRE(4).EQ.1) THEN
        IF(TROUVE(3).EQ.1.AND.TROUVE(5).EQ.1) THEN
          CALL OV( 'X=Y+Z   ' , S , H , ZF , 0.D0 , NPOIN )
        ELSE
          WRITE(LU,*) 'UNABLE TO BUILD FREE SURFACE'
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDIF
C
C COMPUTES THE TELEMAC WATER DEPTH(3) FROM THE NON-MODIFIED
C BED ELEVATION AND THE FREE SURFACE
C
      IF(TROUVE(3).EQ.0.AND.ALIRE(3).EQ.1) THEN
        IF(TROUVE(5).EQ.1) THEN
          CALL OV( 'X=Y-Z   ' , H , S , ZF , 0.D0 , NPOIN )
        ELSE
          WRITE(LU,*) 'MISSING BOTTOM OR WATER DEPTH'
          CALL PLANTE(1)
          STOP
        ENDIF
      ENDIF
C
C  FLOWRATE ALONG X:  QU
C
      IF (ALIRE(7).EQ.1.AND.TROUVE(7).EQ.0)  THEN
        IF (TROUVE(1).EQ.1) THEN
          IF(ENTET) THEN
          IF (LNG.EQ.1) WRITE(LU,150)
          IF (LNG.EQ.2) WRITE(LU,151)
150       FORMAT(1X,'DEBIT /X CALCULE AVEC LA VITESSE ET LA HAUTEUR')
151       FORMAT(1X,'DISCHARGE /X COMPUTED WITH DEPTH AND VELOCITY')
          ENDIF
          CALL OV( 'X=YZ    ' , QU , U , H  , 0.D0 , NPOIN )
        ELSE
          IF(ENTET) THEN
          IF (LNG.EQ.1) WRITE(LU,190)
          IF (LNG.EQ.2) WRITE(LU,191)
190       FORMAT(1X,'CALCUL PRECEDENT SANS LA VITESSE U: ON PREND ZERO')
191       FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT VELOCITY U: U IS
     &               EQUAL TO ZERO')
          ENDIF
          CALL OV( 'X=C     ' , QU , U , H, 0.D0 , NPOIN )
        ENDIF
      ENDIF
C
C-----------------------------------------------------------------------
C
C  FLOWRATE ALONG Y :  QV
C
      IF (ALIRE(8).EQ.1.AND.TROUVE(8).EQ.0)  THEN
        IF (TROUVE(2).EQ.1) THEN
          IF(ENTET) THEN
          IF (LNG.EQ.1) WRITE(LU,160)
          IF (LNG.EQ.2) WRITE(LU,161)
160       FORMAT(1X,'DEBIT /Y CALCULE AVEC LA VITESSE ET LA HAUTEUR')
161       FORMAT(1X,'DISCHARGE /Y COMPUTED WITH DEPTH AND VELOCITY')
          ENDIF
          CALL OV( 'X=YZ    ' , QV , V , H , 0.D0 , NPOIN )
        ELSE
          IF(ENTET) THEN
          IF (LNG.EQ.1) WRITE(LU,210)
          IF (LNG.EQ.2) WRITE(LU,211)
210       FORMAT(1X,'CALCUL PRECEDENT SANS LA VITESSE V: ON PREND ZERO')
211       FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT VELOCITY V:
     &               FIXED TO ZERO')
          ENDIF
          CALL OV( 'X=C     ' , QV , V , H , 0.D0, NPOIN )
        ENDIF
      ENDIF
C
C-----------------------------------------------------------------------
C
C  FLOWRATE (M2/S)
C
      IF ((ALIRE(6).EQ.1).AND.(TROUVE(6).EQ.0))  THEN
       CALL OV( 'X=N(Y,Z)' , Q  , QU  , QV  , 0.D0 , NPOIN )
      ENDIF
C
C-----------------------------------------------------------------------
C  WAVE HEIGHT AND PERIOD
C
      IF ((ICF==4).OR.(ICF==5).OR.
     &    (ICF==8).OR.(ICF==9)    ) THEN
C
         IF ((ALIRE(12).EQ.1).AND.(TROUVE(12).EQ.0)) THEN
            IF(LNG.EQ.1) WRITE(LU,900)
            IF(LNG.EQ.2) WRITE(LU,901)
           CALL OV( 'X=C     ' , HW , U , V , 0.D0 , NPOIN )
         ENDIF
C
900     FORMAT(1X,'CALCUL PRECEDENT SANS LA HAUTEUR DE HOULE : ON',
     &          ' PREND ZERO')
901     FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT WAVE HEIGHT : IT IS',
     &          ' FIXED TO ZERO')
C
         IF ((ALIRE(13).EQ.1).AND.(TROUVE(13).EQ.0)) THEN
            IF(LNG.EQ.1) WRITE(LU,902)
            IF(LNG.EQ.2) WRITE(LU,903)
            CALL OV( 'X=C     ' , TW , U , V , 0.D0 , NPOIN )
         ENDIF
902     FORMAT(1X,'CALCUL PRECEDENT SANS LA PERIODE DE HOULE : ON',
     &          ' PREND ZERO')
903     FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT WAVE PERIOD : IT IS',
     &          ' FIXED TO ZERO')
C
         IF ((ALIRE(14).EQ.1).AND.(TROUVE(14).EQ.0)) THEN
            IF(LNG.EQ.1) WRITE(LU,902)
            IF(LNG.EQ.2) WRITE(LU,903)
            CALL OV( 'X=C     ' , THETAW , U , V , 90.D0  , NPOIN )
         ENDIF
      ENDIF
909     FORMAT(1X,'CALCUL PRECEDENT SANS ANGLE DE HOULE : ON',
     &          ' PREND ZERO')
910     FORMAT(1X,'PREVIOUS COMPUTATION WITHOUT WAVE ANGLE : IT IS',
     &          ' FIXED TO ZERO')
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE RESCUE_SISYPHE_NOTPERMA
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE DIMENSIONS OF EQUILIBRIUM RIPPLES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @reference "RIPPLE GEOMETRY IN WAVE-DOMINATED ENVIRONMENTS",
!>              WIBERG, P.L. & C.K. HARRIS. 1994. JOURNAL OF
!>              GEOPHYSICAL RESEARCH, 99 (C1): 775-789.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ACLADM, GRAV, KS, KSPRATIO, NPOIN, TW, UNORM, UW, VCE, XMVE, XMVS
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> A0, AA, AI, ALPHA, BB, CC, DD, DHRA, ETA, HRA, I, KSP, LAMBDA, LRA, LRO, M, PI, S, UC, VAR1, WH1, WH2, WH3, ZERO
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>TOB_SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 01/10/2003
!> </td><td> C. VILLARET (LNHE)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM
!></td><td>--></td><td>DIAMTRE MOYEN DU SEDIMENT
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>ACCELERATION DE LA PESANTEUR
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>KS
!></td><td><--</td><td>COEFFICIENT DE RUGOSITE
!>    </td></tr>
!>          <tr><td>KSPRATIO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS
!>    </td></tr>
!>          <tr><td>Q
!></td><td>--></td><td>DEBIT MOYEN
!>    </td></tr>
!>          <tr><td>TW
!></td><td>--></td><td>PERIODE DE HOULE
!>    </td></tr>
!>          <tr><td>UNORM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UW
!></td><td>--></td><td>COURANT ORBITAL
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>--></td><td>VISCOSITE DE L'EAU
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>MASSE VOLUMIQUE DE L'EAU
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>--></td><td>MASSE VOLUMIQUE DU SEDIMENT
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE RIDE
     & (KS,TW,UW,UNORM,GRAV,XMVE,XMVS,VCE,NPOIN,KSPRATIO,ACLADM)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLADM         |---| 
C| DM             |-->| DIAMTRE MOYEN DU SEDIMENT
C| GRAV           |-->| ACCELERATION DE LA PESANTEUR
C| HN             |-->| HAUTEUR D'EAU
C| KS             |<--| COEFFICIENT DE RUGOSITE
C| KSPRATIO       |---| 
C| NPOIN          |-->| NOMBRE DE POINTS
C| Q             |-->| DEBIT MOYEN
C| TW             |-->| PERIODE DE HOULE
C| UNORM          |---| 
C| UW             |-->| COURANT ORBITAL
C| VCE            |-->| VISCOSITE DE L'EAU
C| XMVE           |-->| MASSE VOLUMIQUE DE L'EAU
C| XMVS           |-->| MASSE VOLUMIQUE DU SEDIMENT
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
C
      INTEGER I,NPOIN
      DOUBLE PRECISION KS(NPOIN)
C     IF EXTENDED GRANULOMETRY DM(NPOIN)
      DOUBLE PRECISION  GRAV,XMVE,XMVS, VCE
      DOUBLE PRECISION UNORM(NPOIN), UW(NPOIN), TW(NPOIN)
C
      DOUBLE PRECISION PI, ZERO,AI
C
      DOUBLE PRECISION ETA, LAMBDA
C
      DOUBLE PRECISION AA,BB,CC,DD
      DOUBLE PRECISION ALPHA,S,M,A0
      DOUBLE PRECISION WH1,WH2,WH3
      DOUBLE PRECISION VAR1,DHRA,LRA,HRA,LRO
      DOUBLE PRECISION UC,KSP
      DOUBLE PRECISION, INTENT(IN) :: KSPRATIO
      DOUBLE PRECISION, INTENT(IN) :: ACLADM(NPOIN)
C
C---------------------------------------------------------------------
C
      PI=4.D0*DATAN(1.D0)
      ZERO=1.D-6
C
C     COEFFICIENTS
C
      WH1=0.095D0
      WH2=0.442D0
      WH3=2.28D0
      AA=(WH2+1.D0)/2.D0/WH1
      BB=AA*AA-WH3/WH1
      CC=1.D0/WH1
C
C     LOOP ON THE NODES
C
      DO I=1,NPOIN
C
C       SKIN FRICTION
C
        KSP = KSPRATIO * ACLADM(I)
        AI  = ACLADM(I)*GRAV*(XMVS-XMVE)/XMVE
C
C       MOBILITY NUMBER
C
        M=UW(I)**2/AI
C
        IF(M.LT.1.69D0) THEN
C
          KS(I)=KSP
C
        ELSE
C
C         WIBERG AND HARRIS
C
          A0=UW(I)*TW(I)/(2.D0*PI)
          S=ACLADM(I)*SQRT(AI)/4.D0/VCE
          LRA=535.D0*ACLADM(I)
CJMB***************************************************
CJMB LINE OF CODE MOVED SO ALPHA COMPUTED BEFORE VAR1
CJMB TANNAKA AND DANG (1996)
          UC=UNORM(I)
          IF(UW(I).GT.ZERO) THEN
            ALPHA=(TANH(0.3D0*S**(2.D0/3.D0)))**2.5D0
            ALPHA=1.D0+0.81D0*ALPHA*(UC/UW(I))**1.9D0
          ELSE
            ALPHA=1.D0
          ENDIF
CJMB*******************************************************

          VAR1=LOG(ALPHA*2.D0*A0/LRA)
          DD=MAX((BB-CC*VAR1),0.D0)
          DHRA=EXP(AA-SQRT(DD))
          HRA=ALPHA*2.D0*A0/DHRA

C
          IF(DHRA.LE.20.D0) THEN
C           ORBITAL RIPPLES DHRA
            LRO=0.62D0*2.D0*A0*ALPHA
            LAMBDA=LRO
            ETA=0.17D0*LAMBDA
          ELSEIF(DHRA.LE.100.D0) THEN
C           SUB ORBITAL RIPPLES 20
            LRO=0.62D0*2.D0*A0*ALPHA
            VAR1=(LOG(DHRA)-LOG(100.D0))/(LOG(20.D0)-LOG(100.D0))
            VAR1=LOG(LRA)+VAR1*(LOG(LRO)-LOG(LRA))
            LAMBDA=EXP(VAR1)
            VAR1=LOG(ALPHA*2.D0*A0/LAMBDA)
CCV 25/05               ETA=ALPHA*2.D0*A0/EXP(AA-SQRT(BB-CC*VAR1))
            DD=MAX((BB-CC*VAR1),0.D0)
            ETA=ALPHA*2.D0*A0/EXP(AA-SQRT(DD))
          ELSE
C           ANORBITAL RIPPLES DHRA>100
C           LAMBDA NOT USED HERE BUT KEPT FOR OTHER FORMULATIONS
C           LAMBDA=LRA
            ETA=HRA
          ENDIF
C
          KS(I)=MAX(ETA,KSP)
C
        ENDIF
C
      ENDDO
C
C---------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE DIMENSIONS OF EQUILIBRIUM RIPPLES.
!>                VAN RIJN (2007) (CURRENT ONLY).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ACLADM, GRAV, HN, KS, KSR, NPOIN, UNORM, XMVE, XMVS
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AI, DGRAVEL, DSAND, DSILT, FES, FFS, I, KSCD, KSCMR, KSCR, MOB, UC, ZERO
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>TOB_SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td>
!> </td><td> C. VILLARET (LNHE); AG DAVIES (UCW)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLAD50
!></td><td>--></td><td>DIAMTRE MOYEN DU SEDIMENT
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>ACCELERATION DE LA PESANTEUR
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>KS
!></td><td><--</td><td>COEFFICIENT DE RUGOSITE TOTALE
!>    </td></tr>
!>          <tr><td>KSR
!></td><td><--</td><td>COEFFICIENT DE RUGOSITE DE PEAU
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS
!>    </td></tr>
!>          <tr><td>UNORM
!></td><td>--></td><td>INTENSITE DU COURANT
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>MASSE VOLUMIQUE DE L'EAU
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>--></td><td>MASSE VOLUMIQUE DU SEDIMENT
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                       SUBROUTINE RIDE_VR
     & (KSR,KS,UNORM,HN,GRAV,XMVE,XMVS,NPOIN,ACLADM)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLAD50        |-->| DIAMTRE MOYEN DU SEDIMENT
C| ACLADM         |---| 
C| GRAV           |-->| ACCELERATION DE LA PESANTEUR
C| HN             |-->| HAUTEUR D'EAU
C| KS             |<--| COEFFICIENT DE RUGOSITE TOTALE
C| KSR            |<--| COEFFICIENT DE RUGOSITE DE PEAU
C| NPOIN          |-->| NOMBRE DE POINTS
C| UNORM          |-->| INTENSITE DU COURANT
C| XMVE           |-->| MASSE VOLUMIQUE DE L'EAU
C| XMVS           |-->| MASSE VOLUMIQUE DU SEDIMENT
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
C
      INTEGER I,NPOIN
C
      DOUBLE PRECISION, INTENT(INOUT)  :: KSR(NPOIN),KS(NPOIN)
      DOUBLE PRECISION, INTENT(IN)     :: GRAV,XMVE,XMVS
      DOUBLE PRECISION, INTENT(IN)     :: HN(NPOIN)
      DOUBLE PRECISION, INTENT(IN)     :: ACLADM(NPOIN),UNORM(NPOIN)
C
C LOCAL VARIABLES
C
      DOUBLE PRECISION UC,AI,ZERO,KSCR,KSCD,KSCMR,MOB,FES,FFS
      DOUBLE PRECISION DSAND,DGRAVEL,DSILT
C
C---------------------------------------------------------------------
C
      ZERO=1.D-6
      DSILT=0.000032D0
      DGRAVEL=0.002D0
      DSAND=0.000062D0
C
C COMPUTES CURRENT-DOMINATED ROUGHNESS USING VAN RIJN (2007)
C
      DO I=1,NPOIN
C
C MOBILITY NUMBER FOR CURRENT ONLY
C
         AI  = ACLADM(I)*GRAV*(XMVS-XMVE)/XMVE
         MOB = UNORM(I)**2/AI
C
C RIPPLE ROUGHNESS
C
         IF(ACLADM(I).LE.0.25D0*DGRAVEL)THEN
           FES=1.D0
         ELSE
           FES=(0.25D0*DGRAVEL/ACLADM(I))**1.5D0
         ENDIF
C
         IF(ACLADM(I).LT.DSILT)THEN
           KSCR=20.D0*DSILT
         ELSE
           AI= TANH(0.015D0*(MOB-150.D0))
           KSCR=FES*ACLADM(I)*(85.D0-65.D0*AI)
         ENDIF
C
C MEGARIPPLE ROUGHNESS
C
         IF(ACLADM(I).GE.(1.5D0*DSAND))THEN
           FFS=1.D0
         ELSE
           FFS=ACLADM(I)/1.5D0/DSAND
         ENDIF
         IF(ACLADM(I).LE.DSILT)THEN
           KSCMR=0.D0
         ELSE
           KSCMR=0.00002D0*FFS*HN(I)*(1.D0-EXP(-0.05D0*MOB))
           IF(MOB.GT.550.D0.AND.ACLADM(I).GE.1.5D0*DSAND)THEN
             KSCMR=0.02D0
           ELSEIF(MOB.GT.550D0.AND.ACLADM(I).LT.1.5D0*DSAND)THEN
             KSCMR=200.D0*ACLADM(I)
           ENDIF
         ENDIF
C
C DUNE ROUGHNESS
C
         IF(ACLADM(I).LT.DSILT) THEN
           KSCD=0.D0
         ELSE
           AI=(1.D0-EXP(-0.02D0*MOB))*(600.D0-MOB)
           KSCD=0.00008D0*FFS*HN(I)* AI
         ENDIF
         IF(MOB.GT.600.D0) KSCD=0.D0
         IF(KSCD.GT.1.D0) KSCD=1.D0
C
C ***RIPPLE BED ROUGHNESS FOR SEDIMENT COMPUTATIONS IN SISYPHE ***
C
         KSR(I)=KSCR
C
C *** TOTAL ROUGHNESS FOR COMPUTATIONS IN TELEMAC2D **
C
         KS(I)=SQRT(KSCR**2+KSCMR**2+KSCD**2)
C
      ENDDO
C
CAGD****************************************************
C
C---------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief  

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, DECLARATIONS_TELEMAC, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CF_TEL, CHARR_TEL, CODE, CONSTFLOW, DM1, DT_TEL, FLBOR_TEL, GRAFCOUNT, HN_TEL, H_TEL, LISTCOUNT, LOOPCOUNT, NSIS_CFD, PART, PERICOU, SISYPHE_CFD, SOLSYS, SUSP_TEL, TELNIT, T_TEL, U3D, UCONV_TEL, UETCAR, U_TEL, V3D, VCONV_TEL, VISC_TEL, V_TEL, ZCONV, ZF_SIS
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink<hr>
!> DECLARATIONS_TELEMAC :<br>
!> @link DECLARATIONS_TELEMAC::KDDL KDDL@endlink, 
!> @link DECLARATIONS_TELEMAC::KDIR KDIR@endlink, 
!> @link DECLARATIONS_TELEMAC::KENT KENT@endlink, 
!> @link DECLARATIONS_TELEMAC::KINC KINC@endlink, 
!> @link DECLARATIONS_TELEMAC::KLOG KLOG@endlink, 
!> @link DECLARATIONS_TELEMAC::KNEU KNEU@endlink, 
!> @link DECLARATIONS_TELEMAC::KSORT KSORT@endlink<hr>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::AC AC@endlink, 
!> @link DECLARATIONS_SISYPHE::ACLADM ACLADM@endlink, 
!> @link DECLARATIONS_SISYPHE::AFBOR AFBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::AM1_S AM1_S@endlink, 
!> @link DECLARATIONS_SISYPHE::AM2_S AM2_S@endlink, 
!> @link DECLARATIONS_SISYPHE::AVA0 AVA0@endlink, 
!> @link DECLARATIONS_SISYPHE::AVAIL AVAIL@endlink, 
!> @link DECLARATIONS_SISYPHE::BETA BETA@endlink, 
!> @link DECLARATIONS_SISYPHE::BETA2 BETA2@endlink, 
!> @link DECLARATIONS_SISYPHE::BFBOR BFBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::BIJK BIJK@endlink, 
!> @link DECLARATIONS_SISYPHE::BILMA BILMA@endlink, 
!> @link DECLARATIONS_SISYPHE::BINRESSIS BINRESSIS@endlink, 
!> @link DECLARATIONS_SISYPHE::BOUNDARY_COLOUR BOUNDARY_COLOUR@endlink, 
!> @link DECLARATIONS_SISYPHE::BREACH BREACH@endlink, 
!> @link DECLARATIONS_SISYPHE::CALAC CALAC@endlink, 
!> @link DECLARATIONS_SISYPHE::CALFA CALFA@endlink, 
!> @link DECLARATIONS_SISYPHE::CALWC CALWC@endlink, 
!> @link DECLARATIONS_SISYPHE::CBOR CBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::CF CF@endlink, 
!> @link DECLARATIONS_SISYPHE::CHARR CHARR@endlink, 
!> @link DECLARATIONS_SISYPHE::CHESTR CHESTR@endlink, 
!> @link DECLARATIONS_SISYPHE::CHOIX CHOIX@endlink, 
!> @link DECLARATIONS_SISYPHE::CLT CLT@endlink, 
!> @link DECLARATIONS_SISYPHE::CMAX CMAX@endlink, 
!> @link DECLARATIONS_SISYPHE::COEFPN COEFPN@endlink, 
!> @link DECLARATIONS_SISYPHE::CONC_VASE CONC_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::CONST_ALAYER CONST_ALAYER@endlink, 
!> @link DECLARATIONS_SISYPHE::CORR_CONV CORR_CONV@endlink, 
!> @link DECLARATIONS_SISYPHE::CS CS@endlink, 
!> @link DECLARATIONS_SISYPHE::CS0 CS0@endlink, 
!> @link DECLARATIONS_SISYPHE::CSF_SABLE CSF_SABLE@endlink, 
!> @link DECLARATIONS_SISYPHE::CSF_VASE CSF_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::CST CST@endlink, 
!> @link DECLARATIONS_SISYPHE::CSTAEQ CSTAEQ@endlink, 
!> @link DECLARATIONS_SISYPHE::CTILD CTILD@endlink, 
!> @link DECLARATIONS_SISYPHE::CTRLSC CTRLSC@endlink, 
!> @link DECLARATIONS_SISYPHE::DEBLIQ DEBLIQ@endlink, 
!> @link DECLARATIONS_SISYPHE::DEBSOL DEBSOL@endlink, 
!> @link DECLARATIONS_SISYPHE::DEBU DEBU@endlink, 
!> @link DECLARATIONS_SISYPHE::DEBUG DEBUG@endlink, 
!> @link DECLARATIONS_SISYPHE::DELT DELT@endlink, 
!> @link DECLARATIONS_SISYPHE::DEL_QU DEL_QU@endlink, 
!> @link DECLARATIONS_SISYPHE::DEL_QV DEL_QV@endlink, 
!> @link DECLARATIONS_SISYPHE::DEL_Z DEL_Z@endlink, 
!> @link DECLARATIONS_SISYPHE::DEVIA DEVIA@endlink, 
!> @link DECLARATIONS_SISYPHE::DIFT DIFT@endlink, 
!> @link DECLARATIONS_SISYPHE::DISP DISP@endlink, 
!> @link DECLARATIONS_SISYPHE::DISP_C DISP_C@endlink, 
!> @link DECLARATIONS_SISYPHE::DREDGESIM DREDGESIM@endlink, 
!> @link DECLARATIONS_SISYPHE::DT DT@endlink, 
!> @link DECLARATIONS_SISYPHE::DZF_GF DZF_GF@endlink, 
!> @link DECLARATIONS_SISYPHE::E E@endlink, 
!> @link DECLARATIONS_SISYPHE::EBOR EBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::ELAY ELAY@endlink, 
!> @link DECLARATIONS_SISYPHE::ELAY0 ELAY0@endlink, 
!> @link DECLARATIONS_SISYPHE::EMAX EMAX@endlink, 
!> @link DECLARATIONS_SISYPHE::ENTET ENTET@endlink, 
!> @link DECLARATIONS_SISYPHE::EQUA EQUA@endlink, 
!> @link DECLARATIONS_SISYPHE::ES ES@endlink, 
!> @link DECLARATIONS_SISYPHE::ESOMT ESOMT@endlink, 
!> @link DECLARATIONS_SISYPHE::ESTRAT ESTRAT@endlink, 
!> @link DECLARATIONS_SISYPHE::FD90 FD90@endlink, 
!> @link DECLARATIONS_SISYPHE::FDM FDM@endlink, 
!> @link DECLARATIONS_SISYPHE::FINLIQ FINLIQ@endlink, 
!> @link DECLARATIONS_SISYPHE::FINSOL FINSOL@endlink, 
!> @link DECLARATIONS_SISYPHE::FLBORTRA FLBORTRA@endlink, 
!> @link DECLARATIONS_SISYPHE::FLBOR_SIS FLBOR_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUDP FLUDP@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUDPT FLUDPT@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUER FLUER@endlink, 
!> @link DECLARATIONS_SISYPHE::FLUER_VASE FLUER_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::FRACSED_GF FRACSED_GF@endlink, 
!> @link DECLARATIONS_SISYPHE::FW FW@endlink, 
!> @link DECLARATIONS_SISYPHE::GRAV GRAV@endlink, 
!> @link DECLARATIONS_SISYPHE::HIDFAC HIDFAC@endlink, 
!> @link DECLARATIONS_SISYPHE::HIDI HIDI@endlink, 
!> @link DECLARATIONS_SISYPHE::HIDING HIDING@endlink, 
!> @link DECLARATIONS_SISYPHE::HMIN HMIN@endlink, 
!> @link DECLARATIONS_SISYPHE::HN HN@endlink, 
!> @link DECLARATIONS_SISYPHE::HOULE HOULE@endlink, 
!> @link DECLARATIONS_SISYPHE::HPROP HPROP@endlink, 
!> @link DECLARATIONS_SISYPHE::HW HW@endlink, 
!> @link DECLARATIONS_SISYPHE::ICF ICF@endlink, 
!> @link DECLARATIONS_SISYPHE::ICQ ICQ@endlink, 
!> @link DECLARATIONS_SISYPHE::ICR ICR@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMH_SIS IELMH_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMT IELMT@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMU_SIS IELMU_SIS@endlink, 
!> @link DECLARATIONS_SISYPHE::IELMX IELMX@endlink, 
!> @link DECLARATIONS_SISYPHE::IFAMAS IFAMAS@endlink, 
!> @link DECLARATIONS_SISYPHE::IMP_INFLOW_C IMP_INFLOW_C@endlink, 
!> @link DECLARATIONS_SISYPHE::IT1 IT1@endlink, 
!> @link DECLARATIONS_SISYPHE::IT2 IT2@endlink, 
!> @link DECLARATIONS_SISYPHE::IT3 IT3@endlink, 
!> @link DECLARATIONS_SISYPHE::IT4 IT4@endlink, 
!> @link DECLARATIONS_SISYPHE::I_ORIG I_ORIG@endlink, 
!> @link DECLARATIONS_SISYPHE::J_ORIG J_ORIG@endlink, 
!> @link DECLARATIONS_SISYPHE::KARIM_HOLLY_YANG KARIM_HOLLY_YANG@endlink, 
!> @link DECLARATIONS_SISYPHE::KARMAN KARMAN@endlink, 
!> @link DECLARATIONS_SISYPHE::KFROT KFROT@endlink, 
!> @link DECLARATIONS_SISYPHE::KS KS@endlink, 
!> @link DECLARATIONS_SISYPHE::KSP KSP@endlink, 
!> @link DECLARATIONS_SISYPHE::KSPRATIO KSPRATIO@endlink, 
!> @link DECLARATIONS_SISYPHE::KSR KSR@endlink, 
!> @link DECLARATIONS_SISYPHE::KX KX@endlink, 
!> @link DECLARATIONS_SISYPHE::KY KY@endlink, 
!> @link DECLARATIONS_SISYPHE::KZ KZ@endlink, 
!> @link DECLARATIONS_SISYPHE::LCONDIS LCONDIS@endlink, 
!> @link DECLARATIONS_SISYPHE::LEOPR LEOPR@endlink, 
!> @link DECLARATIONS_SISYPHE::LGRAFED LGRAFED@endlink, 
!> @link DECLARATIONS_SISYPHE::LICBOR LICBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::LIEBOR LIEBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::LIMDIF LIMDIF@endlink, 
!> @link DECLARATIONS_SISYPHE::LIMTEC LIMTEC@endlink, 
!> @link DECLARATIONS_SISYPHE::LIQBOR LIQBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::LISPR LISPR@endlink, 
!> @link DECLARATIONS_SISYPHE::LOADMETH LOADMETH@endlink, 
!> @link DECLARATIONS_SISYPHE::LS0 LS0@endlink, 
!> @link DECLARATIONS_SISYPHE::LT LT@endlink, 
!> @link DECLARATIONS_SISYPHE::LVMAC LVMAC@endlink, 
!> @link DECLARATIONS_SISYPHE::MARDAT MARDAT@endlink, 
!> @link DECLARATIONS_SISYPHE::MARTIM MARTIM@endlink, 
!> @link DECLARATIONS_SISYPHE::MASDEP MASDEP@endlink, 
!> @link DECLARATIONS_SISYPHE::MASDEPT MASDEPT@endlink, 
!> @link DECLARATIONS_SISYPHE::MASED0 MASED0@endlink, 
!> @link DECLARATIONS_SISYPHE::MASFIN MASFIN@endlink, 
!> @link DECLARATIONS_SISYPHE::MASINI MASINI@endlink, 
!> @link DECLARATIONS_SISYPHE::MASK MASK@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKEL MASKEL@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKPT MASKPT@endlink, 
!> @link DECLARATIONS_SISYPHE::MASKTR MASKTR@endlink, 
!> @link DECLARATIONS_SISYPHE::MASSOU MASSOU@endlink, 
!> @link DECLARATIONS_SISYPHE::MASTCP MASTCP@endlink, 
!> @link DECLARATIONS_SISYPHE::MASTEN MASTEN@endlink, 
!> @link DECLARATIONS_SISYPHE::MASTOU MASTOU@endlink, 
!> @link DECLARATIONS_SISYPHE::MAXFRO MAXFRO@endlink, 
!> @link DECLARATIONS_SISYPHE::MAXVAR MAXVAR@endlink, 
!> @link DECLARATIONS_SISYPHE::MBOR MBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::MESH MESH@endlink, 
!> @link DECLARATIONS_SISYPHE::MIXTE MIXTE@endlink, 
!> @link DECLARATIONS_SISYPHE::MSK MSK@endlink, 
!> @link DECLARATIONS_SISYPHE::MSKTMP MSKTMP@endlink, 
!> @link DECLARATIONS_SISYPHE::MS_SABLE MS_SABLE@endlink, 
!> @link DECLARATIONS_SISYPHE::MS_VASE MS_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::MU MU@endlink, 
!> @link DECLARATIONS_SISYPHE::NCONDIS NCONDIS@endlink, 
!> @link DECLARATIONS_SISYPHE::NCOUCH_TASS NCOUCH_TASS@endlink, 
!> @link DECLARATIONS_SISYPHE::NCP NCP@endlink, 
!> @link DECLARATIONS_SISYPHE::NELEM NELEM@endlink, 
!> @link DECLARATIONS_SISYPHE::NELMAX NELMAX@endlink, 
!> @link DECLARATIONS_SISYPHE::NFRLIQ NFRLIQ@endlink, 
!> @link DECLARATIONS_SISYPHE::NFRSOL NFRSOL@endlink, 
!> @link DECLARATIONS_SISYPHE::NLAYER NLAYER@endlink, 
!> @link DECLARATIONS_SISYPHE::NMAREE NMAREE@endlink, 
!> @link DECLARATIONS_SISYPHE::NOMBLAY NOMBLAY@endlink, 
!> @link DECLARATIONS_SISYPHE::NPAS NPAS@endlink, 
!> @link DECLARATIONS_SISYPHE::NPOIN NPOIN@endlink, 
!> @link DECLARATIONS_SISYPHE::NPTFR NPTFR@endlink, 
!> @link DECLARATIONS_SISYPHE::NSICLA NSICLA@endlink, 
!> @link DECLARATIONS_SISYPHE::NSOUS NSOUS@endlink, 
!> @link DECLARATIONS_SISYPHE::NUMLIQ NUMLIQ@endlink, 
!> @link DECLARATIONS_SISYPHE::OPDTRA OPDTRA@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTASS OPTASS@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTBAN OPTBAN@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTDIF OPTDIF@endlink, 
!> @link DECLARATIONS_SISYPHE::OPTSUP OPTSUP@endlink, 
!> @link DECLARATIONS_SISYPHE::PARTHENIADES PARTHENIADES@endlink, 
!> @link DECLARATIONS_SISYPHE::PERMA PERMA@endlink, 
!> @link DECLARATIONS_SISYPHE::PHISED PHISED@endlink, 
!> @link DECLARATIONS_SISYPHE::PI PI@endlink, 
!> @link DECLARATIONS_SISYPHE::PMAREE PMAREE@endlink, 
!> @link DECLARATIONS_SISYPHE::PRODUC PRODUC@endlink, 
!> @link DECLARATIONS_SISYPHE::PTINIG PTINIG@endlink, 
!> @link DECLARATIONS_SISYPHE::PTINIL PTINIL@endlink, 
!> @link DECLARATIONS_SISYPHE::QBOR QBOR@endlink, 
!> @link DECLARATIONS_SISYPHE::QS QS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCL QSCL@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLX QSCLX@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLXC QSCLXC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLXS QSCLXS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLY QSCLY@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLYC QSCLYC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCLYS QSCLYS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCL_C QSCL_C@endlink, 
!> @link DECLARATIONS_SISYPHE::QSCL_S QSCL_S@endlink, 
!> @link DECLARATIONS_SISYPHE::QSX QSX@endlink, 
!> @link DECLARATIONS_SISYPHE::QSXC QSXC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSXS QSXS@endlink, 
!> @link DECLARATIONS_SISYPHE::QSY QSY@endlink, 
!> @link DECLARATIONS_SISYPHE::QSYC QSYC@endlink, 
!> @link DECLARATIONS_SISYPHE::QSYS QSYS@endlink, 
!> @link DECLARATIONS_SISYPHE::QS_C QS_C@endlink, 
!> @link DECLARATIONS_SISYPHE::QS_S QS_S@endlink, 
!> @link DECLARATIONS_SISYPHE::QU QU@endlink, 
!> @link DECLARATIONS_SISYPHE::QV QV@endlink, 
!> @link DECLARATIONS_SISYPHE::RC RC@endlink, 
!> @link DECLARATIONS_SISYPHE::RESOL RESOL@endlink, 
!> @link DECLARATIONS_SISYPHE::S S@endlink, 
!> @link DECLARATIONS_SISYPHE::SALFA SALFA@endlink, 
!> @link DECLARATIONS_SISYPHE::SECCURRENT SECCURRENT@endlink, 
!> @link DECLARATIONS_SISYPHE::SEDCO SEDCO@endlink, 
!> @link DECLARATIONS_SISYPHE::SFON SFON@endlink, 
!> @link DECLARATIONS_SISYPHE::SISCOU SISCOU@endlink, 
!> @link DECLARATIONS_SISYPHE::SISHYD SISHYD@endlink, 
!> @link DECLARATIONS_SISYPHE::SISPRE SISPRE@endlink, 
!> @link DECLARATIONS_SISYPHE::SIS_FILES SIS_FILES@endlink, 
!> @link DECLARATIONS_SISYPHE::SLIDE SLIDE@endlink, 
!> @link DECLARATIONS_SISYPHE::SLOPEFF SLOPEFF@endlink, 
!> @link DECLARATIONS_SISYPHE::SLVTRA SLVTRA@endlink, 
!> @link DECLARATIONS_SISYPHE::SORIMP SORIMP@endlink, 
!> @link DECLARATIONS_SISYPHE::SORLEO SORLEO@endlink, 
!> @link DECLARATIONS_SISYPHE::SPHERI SPHERI@endlink, 
!> @link DECLARATIONS_SISYPHE::SUSP SUSP@endlink, 
!> @link DECLARATIONS_SISYPHE::T1 T1@endlink, 
!> @link DECLARATIONS_SISYPHE::T10 T10@endlink, 
!> @link DECLARATIONS_SISYPHE::T11 T11@endlink, 
!> @link DECLARATIONS_SISYPHE::T12 T12@endlink, 
!> @link DECLARATIONS_SISYPHE::T13 T13@endlink, 
!> @link DECLARATIONS_SISYPHE::T14 T14@endlink, 
!> @link DECLARATIONS_SISYPHE::T2 T2@endlink, 
!> @link DECLARATIONS_SISYPHE::T3 T3@endlink, 
!> @link DECLARATIONS_SISYPHE::T4 T4@endlink, 
!> @link DECLARATIONS_SISYPHE::T5 T5@endlink, 
!> @link DECLARATIONS_SISYPHE::T6 T6@endlink, 
!> @link DECLARATIONS_SISYPHE::T7 T7@endlink, 
!> @link DECLARATIONS_SISYPHE::T8 T8@endlink, 
!> @link DECLARATIONS_SISYPHE::T9 T9@endlink, 
!> @link DECLARATIONS_SISYPHE::TASS TASS@endlink, 
!> @link DECLARATIONS_SISYPHE::TB TB@endlink, 
!> @link DECLARATIONS_SISYPHE::TE1 TE1@endlink, 
!> @link DECLARATIONS_SISYPHE::TE2 TE2@endlink, 
!> @link DECLARATIONS_SISYPHE::TE3 TE3@endlink, 
!> @link DECLARATIONS_SISYPHE::TETA_SUSP TETA_SUSP@endlink, 
!> @link DECLARATIONS_SISYPHE::TEXTE TEXTE@endlink, 
!> @link DECLARATIONS_SISYPHE::TEXTPR TEXTPR@endlink, 
!> @link DECLARATIONS_SISYPHE::THETAW THETAW@endlink, 
!> @link DECLARATIONS_SISYPHE::TITCA TITCA@endlink, 
!> @link DECLARATIONS_SISYPHE::TOB TOB@endlink, 
!> @link DECLARATIONS_SISYPHE::TOBW TOBW@endlink, 
!> @link DECLARATIONS_SISYPHE::TOCE_MIXTE TOCE_MIXTE@endlink, 
!> @link DECLARATIONS_SISYPHE::TOCE_VASE TOCE_VASE@endlink, 
!> @link DECLARATIONS_SISYPHE::TPREC TPREC@endlink, 
!> @link DECLARATIONS_SISYPHE::TRANS_MASS TRANS_MASS@endlink, 
!> @link DECLARATIONS_SISYPHE::TW TW@endlink, 
!> @link DECLARATIONS_SISYPHE::U2D U2D@endlink, 
!> @link DECLARATIONS_SISYPHE::UCONV UCONV@endlink, 
!> @link DECLARATIONS_SISYPHE::UNIT UNIT@endlink, 
!> @link DECLARATIONS_SISYPHE::UNLADM UNLADM@endlink, 
!> @link DECLARATIONS_SISYPHE::UNORM UNORM@endlink, 
!> @link DECLARATIONS_SISYPHE::UNSV2D UNSV2D@endlink, 
!> @link DECLARATIONS_SISYPHE::UW UW@endlink, 
!> @link DECLARATIONS_SISYPHE::V2D V2D@endlink, 
!> @link DECLARATIONS_SISYPHE::V2DPAR V2DPAR@endlink, 
!> @link DECLARATIONS_SISYPHE::VALID VALID@endlink, 
!> @link DECLARATIONS_SISYPHE::VARCL VARCL@endlink, 
!> @link DECLARATIONS_SISYPHE::VARCLA VARCLA@endlink, 
!> @link DECLARATIONS_SISYPHE::VARSOR VARSOR@endlink, 
!> @link DECLARATIONS_SISYPHE::VCE VCE@endlink, 
!> @link DECLARATIONS_SISYPHE::VCONV VCONV@endlink, 
!> @link DECLARATIONS_SISYPHE::VF VF@endlink, 
!> @link DECLARATIONS_SISYPHE::VITCD VITCD@endlink, 
!> @link DECLARATIONS_SISYPHE::VITCE VITCE@endlink, 
!> @link DECLARATIONS_SISYPHE::VOLTOT VOLTOT@endlink, 
!> @link DECLARATIONS_SISYPHE::VOLU2D VOLU2D@endlink, 
!> @link DECLARATIONS_SISYPHE::W1 W1@endlink, 
!> @link DECLARATIONS_SISYPHE::XKV XKV@endlink, 
!> @link DECLARATIONS_SISYPHE::XKX XKX@endlink, 
!> @link DECLARATIONS_SISYPHE::XKY XKY@endlink, 
!> @link DECLARATIONS_SISYPHE::XMVE XMVE@endlink, 
!> @link DECLARATIONS_SISYPHE::XMVS XMVS@endlink, 
!> @link DECLARATIONS_SISYPHE::XWC XWC@endlink, 
!> @link DECLARATIONS_SISYPHE::Z Z@endlink, 
!> @link DECLARATIONS_SISYPHE::ZERO ZERO@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF ZF@endlink, 
!> @link DECLARATIONS_SISYPHE::ZFCL_C ZFCL_C@endlink, 
!> @link DECLARATIONS_SISYPHE::ZFCL_S ZFCL_S@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF_C ZF_C@endlink, 
!> @link DECLARATIONS_SISYPHE::ZF_S ZF_S@endlink, 
!> @link DECLARATIONS_SISYPHE::ZR ZR@endlink, 
!> @link DECLARATIONS_SISYPHE::ZREF ZREF@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ALIR0, ALIRE, ALIRH, ALIRV, AT, AT0, BID, CHGMSK, DTS, ENTETS, HIST, I, IMA, IMAX, IMI, IMIN, ISOUS, J, K, MASS_GF, MN, MT, NCALCU, NHIST, NIDT, NIT, NLISS, NSOR, NUMDEB, NUMEN, NUMEN0, NUMENX, PASS, PASS_SUSP, RESU, SAVEQU, SAVEQV, SAVEZ, SAVEZF, TROUVE, VALNIT, VCUMU, XMA, XMAX, XMI, XMIN, YAZR
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SISYPHE, SAVEQU, SAVEQV, SAVEZ, SAVEZF
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BEDLOAD_MAIN(), BIEF_DESIMP(), BIEF_SUITE(), BIEF_VALIDA(), BILAN_SISYPHE(), CALCUW(), CONDIM_SISYPHE(), CONDIS_SISYPHE(), CONLIT(), CORSTR_SISYPHE(), CREATE_DATASET(), DREDGESIM_INTERFACE(), ENTETE_SISYPHE(), FLUSEC_SISYPHE(), FONSTR(), FRONT2(), INBIEF(), INIT_CONSTANT(), INIT_SEDIMENT(), INIT_TRANSPORT(), INIT_ZERO(), LAYER(), LECLIS(), MASKTF(), MASKTO(), MAXI(), MAXSLOPE(), MEAN_GRAIN_SIZE(), MINI(), NOEROD(), OS(), OV(), PARCOM(), PLANTE(), PREDES(), P_DMAX(), P_DMIN(), P_IMAX(), Q(), RESCUE_SISYPHE(), RESCUE_SISYPHE_NOTPERMA(), SIS_ARRET(), SUSPENSION_MAIN(), TASSEMENT(), TOB_SISYPHE(), VECTOR(), WRITE_MESH()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>HOMERE_SISYPHE(), TELEMAC2D(), TELEMAC3D()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td>
!> </td><td> C. LENORMANT; J.-M. HERVOUET; S. HADJI; C. MACHET; C. VILLARET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CF_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CHARR_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CODE
!></td><td>---</td><td>NAME OF CALLING PROGRAMME
!>    </td></tr>
!>          <tr><td>CONSTFLOW
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBOR_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAFCOUNT
!></td><td>--></td><td>PERIODE DE SORTIE GRAPHIQUE
!>    </td></tr>
!>          <tr><td>HN_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>H_TEL
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>LISTCOUNT
!></td><td>--></td><td>PERIODE DE SORTIE LISTING
!>    </td></tr>
!>          <tr><td>LOOPCOUNT
!></td><td>--></td><td>NUMERO DE L'ITERATION
!>    </td></tr>
!>          <tr><td>NSIS_CFD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PART
!></td><td>--></td><td>SI -1, PAS DE COUPLAGE : ON PASSE TOUTE LA
!>                  SUBROUTINE. SINON, INDIQUE LA PARTIE DE LA
!>                  SUBROUTINE DANS LAQUELLE ON PASSE
!>    </td></tr>
!>          <tr><td>PERICOU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SISYPHE_CFD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SOLSYS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SUSP_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TELNIT
!></td><td>--></td><td>NOMBRE D'ITERATION
!>    </td></tr>
!>          <tr><td>T_TEL
!></td><td>--></td><td>CURRENT TIME IN CALLING PROGRAMME
!>    </td></tr>
!>          <tr><td>U3D,V3D
!></td><td>--></td><td>3D VELOCITY SENT BY TELEMAC 3D
!>    </td></tr>
!>          <tr><td>UCONV_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UETCAR
!></td><td>--></td><td>VARIABLES HYDRO ENVOYEES PAR TELEMAC 2D
!>    </td></tr>
!>          <tr><td>U_TEL
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>VCONV_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VISC_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V_TEL
!></td><td>--></td><td>VARIABLES HYDRO ENVOYEES PAR TELEMAC 2D
!>    </td></tr>
!>          <tr><td>ZCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF_SIS
!></td><td><--</td><td>FOND ENVOYE A TELEMAC 2D
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE SISYPHE
     &(PART,LOOPCOUNT,GRAFCOUNT,LISTCOUNT,TELNIT,
     & U_TEL,V_TEL,H_TEL,HN_TEL,ZF_SIS,UETCAR,CF_TEL,KS_TEL,
     & CONSTFLOW,NSIS_CFD,SISYPHE_CFD,CODE,PERICOU,
     & U3D,V3D,T_TEL,VISC_TEL,DT_TEL,CHARR_TEL,SUSP_TEL,
     & FLBOR_TEL,SOLSYS,DM1,UCONV_TEL,VCONV_TEL,ZCONV)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CF_TEL         |---| 
C| CHARR_TEL      |---| 
C| CODE           |---| NAME OF CALLING PROGRAMME
C| CONSTFLOW      |---| 
C| DM1            |---| 
C| DT_TEL         |---| 
C| FLBOR_TEL      |---| 
C| GRAFCOUNT      |-->| PERIODE DE SORTIE GRAPHIQUE
C| HN_TEL         |---| 
C| H_TEL          |-->| 
C| LISTCOUNT      |-->| PERIODE DE SORTIE LISTING
C| LOOPCOUNT      |-->| NUMERO DE L'ITERATION
C| NSIS_CFD       |---| 
C| PART           |-->| SI -1, PAS DE COUPLAGE : ON PASSE TOUTE LA
C|                |   | SUBROUTINE. SINON, INDIQUE LA PARTIE DE LA
C|                |   | SUBROUTINE DANS LAQUELLE ON PASSE
C| PERICOU        |---| 
C| SISYPHE_CFD    |---| 
C| SOLSYS         |---| 
C| SUSP_TEL       |---| 
C| TELNIT         |-->| NOMBRE D'ITERATION
C| T_TEL          |-->| CURRENT TIME IN CALLING PROGRAMME
C| U3D,V3D        |-->| 3D VELOCITY SENT BY TELEMAC 3D
C| UCONV_TEL      |---| 
C| UETCAR         |-->| VARIABLES HYDRO ENVOYEES PAR TELEMAC 2D
C| U_TEL          |-->| 
C| VCONV_TEL      |---| 
C| VISC_TEL       |---| 
C| V_TEL          |-->| VARIABLES HYDRO ENVOYEES PAR TELEMAC 2D
C| ZCONV          |---| 
C| ZF_SIS         |<--| FOND ENVOYE A TELEMAC 2D
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_SISYPHE => SISYPHE
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_SISYPHE
!
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER,           INTENT(IN)    :: PART,LOOPCOUNT,GRAFCOUNT
      INTEGER,           INTENT(IN)    :: LISTCOUNT,TELNIT,PERICOU
      CHARACTER(LEN=24), INTENT(IN)    :: CODE
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U_TEL,V_TEL,H_TEL,HN_TEL
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: ZF_SIS,UETCAR,KS_TEL
      INTEGER,           INTENT(INOUT) :: NSIS_CFD
      LOGICAL,           INTENT(INOUT) :: CONSTFLOW,SISYPHE_CFD
      TYPE(BIEF_OBJ),    INTENT(IN)    :: U3D,V3D,VISC_TEL
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: CF_TEL
      DOUBLE PRECISION,  INTENT(IN)    :: T_TEL
      LOGICAL,           INTENT(INOUT) :: CHARR_TEL,SUSP_TEL
      DOUBLE PRECISION,  INTENT(IN)    :: DT_TEL
      INTEGER,           INTENT(IN)    :: SOLSYS
      TYPE(BIEF_OBJ),    INTENT(IN)    :: FLBOR_TEL,DM1,ZCONV
      TYPE(BIEF_OBJ),    INTENT(IN)    :: UCONV_TEL,VCONV_TEL
C
      INTEGER                        P_IMAX
      DOUBLE PRECISION P_DMAX,P_DMIN
      EXTERNAL         P_DMAX,P_DMIN,P_IMAX
C
      INTEGER, PARAMETER :: NHIST = 0
      INTEGER, PARAMETER :: NSOR = 100
      INTEGER            :: VALNIT,NLISS
      INTEGER            :: I,J,K,MN,MT,ISOUS,NIDT,NIT,IMA,IMI
      INTEGER            :: IMIN,IMAX,NCALCU,NUMEN,NUMENX,NUMDEB
      INTEGER            :: ALIRE(MAXVAR),ALIRV(MAXVAR),ALIRH(MAXVAR)
      INTEGER            :: ALIR0(MAXVAR)
      INTEGER            :: TROUVE(MAXVAR+10)
      DOUBLE PRECISION   :: AT0,DTS,BID,XMA,XMI
      DOUBLE PRECISION   :: XMIN,XMAX
      DOUBLE PRECISION   :: AT,VCUMU,MASS_GF
      DOUBLE PRECISION   :: HIST(1)
      LOGICAL            :: PASS,PASS_SUSP
      LOGICAL            :: RESU,ENTETS,CHGMSK,YAZR
!
      DOUBLE PRECISION, POINTER, DIMENSION(:) :: SAVEZF,SAVEQU,SAVEQV
      DOUBLE PRECISION, POINTER, DIMENSION(:) :: SAVEZ
!
      ! SAVES LOCAL VARIABLES
      ! --------------------------------
      SAVE VCUMU               ! FOR THE BALANCE
      SAVE MASS_GF             ! FOR GRAIN-FEEDING
      SAVE PASS, PASS_SUSP     ! IDENTIFIES 1ST TIMESTEP
      SAVE NIDT, NCALCU, NUMEN, NIT, VALNIT !
      SAVE AT0                 ! TIME
C     NUMEN0 : 1ST RECORD TO READ
      INTEGER :: NUMEN0
!
      ! VARIABLES TO READ IF COMPUTATION IS CONTINUED
      ! --------------------------------
      ! 0 : DISCARD
      ! 1 : READ  (SEE SUBROUTINE NOMVAR)
!
C   HYDRO + EVOLUTION
      DATA ALIRE /1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,400*0/
C   WAVES ONLY
      DATA ALIRH /0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,400*0/
C   NOTHING TO READ
      DATA ALIR0 /0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     &            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,400*0/
!
C    FOR VALIDATION, EACH VARIABLE IN THE FILE IS COMPARED
!
      DATA ALIRV /500*1/
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!      KSPRED=.TRUE.
       IKS = 3
! on travaille en Nikuradse
      IF(KSPRED) KFROT=5
!
C------------------------------------------------------------------
C     PART 1 : INITIALISATION
C------------------------------------------------------------------
C
      IF(PART==0.OR.PART==-1) THEN
        IF(DEBUG.GT.0) WRITE(LU,*) 'INITIALIZATION'
C
        WRITE(LU,*) 'PART 0 : INITIALISING SISYPHE'
C
C       INITIALISES THE CONSTANTS
C
        CALL INIT_CONSTANT(KARIM_HOLLY_YANG,KARMAN,PI)
C        IF(SUSP) CALL USER_KRONE_PART(VITCE,VITCD,
C     *                                PARTHENIADES,XMVS,CMAX)
C
C      READS THE WAVE DATA IN THE HYDRODYNAMIC FILE
C
        IF(HOULE.AND.SIS_FILES(SISCOU)%NAME(1:1).EQ.' ') THEN
          ALIRE(12)=1
          ALIRE(13)=1
          ALIRE(14)=1
        ENDIF
C
C       READS THE SEDIMENTOLOGICAL DATA IN THE CONTINUATION FILE
C
        IF(DEBU) THEN
          ALIRE(15)=1
          ALIRE(16)=1
          ALIRE(17)=1
          ALIRE(18)=1
C         READS AVAI FROM THE PREVIOUS COMPUTATION FILE
          DO I=1,NSICLA*NOMBLAY
            ALIRE(20+I)=1
          ENDDO
C         READS CS (CONCENTRATION) FROM THE PREVIOUS COMPUTATION FILE
          IF(SUSP) THEN
            DO I=1,NSICLA
             ALIRE(20+(NOMBLAY+1)*NSICLA+I)=1
            ENDDO
          ENDIF
C         READS THE LAYER THICKNESSES
          DO I=1,NOMBLAY
            ALIRE(26+(NOMBLAY+4)*NSICLA+I)=1
          ENDDO
        ENDIF
C
C --------  INITIALISES (SETS TO 0) THE ARRAYS
C
        CALL INIT_ZERO
C
C --------  END OF INITIALISATION
C
C       DISCRETISATION : LINEAR FOR THE TIME BEING
C
C       IELMT HARD-CODED IN LECDON
C
        IELMX  = MAX(IELMT,IELMH_SIS,IELMU_SIS)
        NELMAX = NELEM
C
C=======================================================================
C
C : 1          READS, PREPARES AND CONTROLS THE DATA
C
C=======================================================================
C
        RESU = .TRUE.
C
C       READS THE BOUNDARY CONDITIONS AND INDICES FOR THE BOUNDARY NODES
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'LECLIS'
        CALL LECLIS(LIEBOR%I,EBOR,
     &              MESH%NPTFR,MESH%NBOR%I,3,
     &              SIS_FILES(SISCLI)%LU,KENT,
     &              MESH%ISEG%I,MESH%XSEG%R,MESH%YSEG%R,MESH%NACHB%I,
     &              NUMLIQ%I,NSICLA,AFBOR%R,BFBOR%R,BOUNDARY_COLOUR%I,
     &              MESH)
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_LECLIS'
C
C-----------------------------------------------------------------------
C
C       COMPLEMENTS THE DATA STRUCTURE FOR BIEF
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'INBIEF'
        CALL INBIEF(IT1%I,KLOG,IT2,IT3,IT4,LVMAC,IELMX,
     &                 0.D0,SPHERI,MESH,T1,T2,OPTASS,PRODUC,EQUA)
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_INBIEF'
C
C-----------------------------------------------------------------------
C
C       LOCATES THE BOUNDARIES
C
        IF(NCSIZE.GT.1) THEN
          NFRLIQ=0
          DO I=1,NPTFR
            NFRLIQ=MAX(NFRLIQ,NUMLIQ%I(I))
          ENDDO
          NFRLIQ=P_IMAX(NFRLIQ)
          WRITE(LU,*) ' '
          IF(LNG.EQ.1) WRITE(LU,*) 'FRONTIERES LIQUIDES :',NFRLIQ
          IF(LNG.EQ.2) WRITE(LU,*) 'LIQUID BOUNDARIES:',NFRLIQ
        ELSE
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE FRONT2'
          CALL FRONT2(NFRLIQ,NFRSOL,DEBLIQ,FINLIQ,DEBSOL,FINSOL,
     &                LIEBOR%I,LIEBOR%I,
     &                MESH%X%R,MESH%Y%R,MESH%NBOR%I,MESH%KP1BOR%I,
     &                IT1%I,NPOIN,NPTFR,KLOG,.TRUE.,NUMLIQ%I,MAXFRO)
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE FRONT2'
        ENDIF
C
C-----------------------------------------------------------------------
C       LOOKS FOR BOTTOM AND BOTTOM FRICTION IN THE GEOMETRY FILE :
C-----------------------------------------------------------------------
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'FONSTR'
        CALL FONSTR(T1,ZF,T2,CHESTR,SIS_FILES(SISGEO)%LU,
     &              SIS_FILES(SISFON)%LU,SIS_FILES(SISFON)%NAME,
     &              MESH,SFON,.TRUE.)
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_FONSTR'
C
C-----------------------------------------------------------------------
C
C       PREPARES THE RESULTS FILE (OPTIONAL)
C
C       STANDARD SELAFIN FORMAT
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'ECRGEO'
        ! CREATES DATA FILE USING A GIVEN FILE FORMAT : FORMAT_RES
        ! THE DATA ARE CREATED IN THE FILE: SISRES, AND ARE
        ! CHARACTERISED BY A TITLE AND NAME OF OUTPUT VARIABLES
        ! CONTAINED IN THE FILE.
        CALL CREATE_DATASET(SIS_FILES(SISRES)%FMT, ! RESULTS FILE FORMAT
     &                      SIS_FILES(SISRES)%LU,  ! LU FOR RESULTS FILE
     &                      TITCA,      ! TITLE
     &                      MAXVAR,     ! MAX NUMBER OF OUTPUT VARIABLES
     &                      TEXTE,      ! NAMES OF OUTPUT VARIABLES
     &                      SORLEO)     ! PRINT TO FILE OR NOT
        ! WRITES THE MESH IN THE OUTPUT FILE :
        ! IN PARALLEL, REQUIRES NCSIZE AND NPTIR.
        ! THE REST OF THE INFORMATION IS IN MESH.
        ! ALSO WRITES : START DATE/TIME AND COORDINATES OF THE
        ! ORIGIN.
        CALL WRITE_MESH(SIS_FILES(SISRES)%FMT, ! RESULTS FILE FORMAT
     &                  SIS_FILES(SISRES)%LU,  ! LU FOR RESULTS FILE
     &                  MESH,          ! CHARACTERISES MESH
     &                  1,             ! NUMBER OF PLANES /NA/
     &                  MARDAT,        ! START DATE
     &                  MARTIM,        ! START TIME
     &                  I_ORIG,J_ORIG) ! COORDINATES OF THE ORIGIN.
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_ECRGEO'
C
C   --- FILLS IN MASKEL BY DEFAULT
C
        IF(MSK) CALL OS ('X=C     ', X=MASKEL, C=1.D0)
C
C       BUILDS THE MASK
C
        DO K = 1, MESH%NPTFR
          IF(LIEBOR%I(K).NE.2.AND.LIEBOR%I(MESH%KP1BOR%I(K)).NE.2) THEN
            MASK%R(K) = 1.D0
          ELSE
            MASK%R(K) = 0.D0
          ENDIF
          LIQBOR%I(K) = KSORT
        ENDDO
C
C=======================================================================
C
C : 2                  INITIALISES
C
C=======================================================================
C
        PASS      = .TRUE.
C
        PASS_SUSP = .TRUE.
        VCUMU     = 0.D0
        MASS_GF   = 0.D0
C
C
C----   DETERMINES THE NUMBER OF EVENTS (1ST LOOP)       : NCALCU
C                      NUMBER OF TIMESTEPS (2ND LOOP)    : NIDT
C                      TOTAL NUMBER OF TIMESTEPS         : NIT
C                      INITIAL TIME                      : AT0
C                      TIMESTEP                          : DT
C
C
        IF(PART.EQ.0) THEN
           AT0=T_TEL
           DT = DT_TEL
           NCALCU = 1
           NIDT   = 1
           NIT=TELNIT
        ELSE
          AT0=MAX(TPREC,0.D0)
          DT=DELT
          IF(PERMA) THEN
             NCALCU=1
             NIDT=NPAS
             NIT=NIDT
          ELSE
             NCALCU = NMAREE
C COMPUTES DT AFTER READING THE HYDRO FILE
C             NIDT =  NINT ( PMAREE / DT + 0.1D0 )
C             NIT=NIDT*NCALCU
C ELSE
              NIDT=NPAS
              NIT=NIDT*NCALCU
          ENDIF
        ENDIF
C
C UNSTEADY MODE : DT IS COMPUTED FROM THE HYDRO FILE
C                 NUMEN: TOTAL NUMBER OF RECORDS

        IF(SIS_FILES(SISHYD)%NAME(1:1).NE.' ')  THEN
            IF(DEBUG.GT.0) WRITE(LU,*) 'BIEF_SUITE'
            WRITE(LU,*) 'APPEL DE BIEF_SUITE'
C           JUST TO GET NUMEN AND DT (SEE ALIR0)
            CALL BIEF_SUITE(VARSOR,VARCL,NUMEN,SIS_FILES(SISHYD)%LU,
     &                    SIS_FILES(SISHYD)%FMT,HIST,0,NPOIN,AT,
     &                    TEXTPR,VARCLA,
     &                    0,TROUVE,ALIR0,.TRUE.,.TRUE.,MAXVAR,DT=DT)
            IF(DEBUG.GT.0) WRITE(LU,*) 'SORTIE DE BIEF_SUITE'
            WRITE(LU,*) 'LECTURE FICHIER HYDRODYNAMIQUE:'
          IF(.NOT.PERMA) THEN
             NIDT =  NINT ( PMAREE / DT + 0.1D0 )
             IF(ABS(NIDT*DT-PMAREE) > 1.D-3) THEN
               IF (LNG == 1) WRITE(LU,101) NIDT*DT
               IF (LNG == 2) WRITE(LU,102) NIDT*DT
             ENDIF
             NIT  = NCALCU * NIDT
          ENDIF
        ENDIF
C
C       VALIDATES AGAINST THE LAST TIMESTEP
C
        VALNIT = NIT
C
101     FORMAT(/,'ATTENTION : LA PERIODE DE CALCUL NE CORRESPOND PAS A',/,
     &       'UN MULTIPLE DE LA PERIODE DE SORTIE HYDRODYNAMIQUE.',/,
     &       'LE CALCUL S''EFFECTUERA DONC SUR ',G16.7,'SECONDES')
102     FORMAT(/,'CAUTION : THE PERIOD OF COMPUTATION IS NOT A MULTIPLE',
     &         /,'OF THE HYDRODYNAMIC FILE PRINTOUT PERIOD.',/,
     &       'THE LENGTH OF COMPUTATION WILL THEREFORE BE',G16.7,/,
     &       'SECONDS')
C

C  SISYPHE ONLY
C  -----------------------------------------------------------------------
C  ---- READS
C       THE PREVIOUS HYDRODYNAMIC FILE
C
C
C NUMEN : NUMBER OF RECORDS IN THE HYDRODYNAMIC FILE
C DT    : TIMESTEP OF THE HYDRODYNAMIC RECORDS
C NUMEN0: 1ST RECORD TO READ FROM HYDRODYNAMIC FILE
C TPREC : START TIME
C
C
C V5P9      NUMEN0 = INT( (TPREC - ATDEB)/DT + 1.1D0 )
C
        IF(PART.EQ.-1) THEN
          IF(.NOT.PERMA) THEN
            IF(TPREC.GE.0.D0) THEN
                NUMEN0 = INT( TPREC /DT + 1.1D0 )
            ELSE
                NUMEN0 = NUMEN-INT(PMAREE/DT+1.1D0)
            ENDIF
          ELSE
            IF(TPREC.GE.0.D0) THEN
               NUMEN0 = INT( TPREC /DT + 1.1D0 )
            ELSE
               NUMEN0 = NUMEN
            ENDIF
          ENDIF
C
          IF(SIS_FILES(SISHYD)%NAME(1:1).NE.' ')  THEN
            IF(DEBUG.GT.0) WRITE(LU,*) 'BIEF_SUITE'
            CALL BIEF_SUITE(VARSOR,VARCL,NUMEN0,SIS_FILES(SISHYD)%LU,
     &                    SIS_FILES(SISHYD)%FMT,HIST,0,NPOIN,AT,
     &                    TEXTPR,VARCLA,
     &                    0,TROUVE,ALIRE,.TRUE.,PERMA,MAXVAR)
C
C           TRACES IF WAVE DATA HAVE BEEN FOUND
C
            IF(HOULE) THEN
              IF(TROUVE(12).EQ.1) HW%TYPR='Q'
              IF(TROUVE(13).EQ.1) TW%TYPR='Q'
              IF(TROUVE(14).EQ.1) THETAW%TYPR='Q'
            ENDIF
            IF(DEBUG.GT.0) WRITE(LU,*) 'END_BIEF_SUITE'
            IF(DEBUG.GT.0) WRITE(LU,*) 'RESCUE_SISYPHE'
            CALL RESCUE_SISYPHE(QU%R,QV%R,Q%R,U2D%R,V2D%R,HN%R,Z%R,
     &                        ZF%R,HW%R,TW%R,THETAW%R,NPOIN,
     &                        TROUVE,ALIRE,PASS,ICF,.TRUE.,MAXVAR)
            IF(DEBUG.GT.0) WRITE(LU,*) 'END_RESCUE_SISYPHE'
          ENDIF

C
        ENDIF
C
C---- RESUMES SISYPHE COMPUTATION
C
        YAZR=.FALSE.
        IF(SIS_FILES(SISPRE)%NAME(1:1).NE.' ')  THEN
C
C         READS THE HYDRO AND SEDIMENTOLOGICAL VARIABLES
C
          IF(DEBUG.GT.0) WRITE(LU,*) 'BIEF_SUITE'
          CALL BIEF_SUITE(VARSOR,VARCL,NUMENX,SIS_FILES(SISPRE)%LU,
     &                    SIS_FILES(SISPRE)%FMT,
     &                    HIST,0,NPOIN,AT0,TEXTPR,VARCLA,0,
     &                    TROUVE,ALIRE,.TRUE.,.TRUE.,MAXVAR)
          IF(TROUVE(9).EQ.1) YAZR=.TRUE.
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_BIEF_SUITE'
C
          IF(DEBUG.GT.0) WRITE(LU,*) 'RESCUE_SISYPHE'
          CALL RESCUE_SISYPHE(QU%R,QV%R,Q%R,U2D%R,V2D%R,HN%R,Z%R,ZF%R,
     &                        HW%R,TW%R,THETAW%R,NPOIN,TROUVE,ALIRE,
     &                        PASS,ICF,.TRUE.,MAXVAR)
          IF(DEBUG.GT.0) WRITE(LU,*) 'SORTIE DE BIEF_SUITE'
C
C         CHANGES THE UNITS OF CONCENTRATIONS
C
          IF(SUSP.AND.UNIT) THEN
            DO I=1,NSICLA
             IF(TROUVE(20+(NOMBLAY+1)*NSICLA+I).EQ.1) THEN
               CALL OS('X=CX    ',X=CS%ADR(I)%P,C=1.D0/XMVS)
             ENDIF
            ENDDO
          ENDIF
C
        ENDIF
C
C----   READS THE LAST RECORD : WAVE FILE
C
C       NOTE : SIS_FILES(SISCOU)%NAME SET TO ' ' IF HOULE=NO
C
        IF(SIS_FILES(SISCOU)%NAME(1:1).NE.' ')  THEN
C
          IF(DEBUG.GT.0) WRITE(LU,*) 'SUITE_HOULE'
          WRITE(LU,*) ' LECTURE HOULE :',SIS_FILES(SISCOU)%NAME
          CALL BIEF_SUITE(VARSOR,VARCL,NUMENX,SIS_FILES(SISCOU)%LU,
     &                    SIS_FILES(SISCOU)%FMT,HIST,0,NPOIN,AT,
     &                    TEXTPR,VARCLA,0,
     &                    TROUVE,ALIRH,.TRUE.,.TRUE.,MAXVAR)
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_SUITE_HOULE'
C         TRACES IF WAVE DATA HAVE BEEN FOUND
          IF(TROUVE(12).EQ.1) HW%TYPR='Q'
          IF(TROUVE(13).EQ.1) TW%TYPR='Q'
          IF(TROUVE(14).EQ.1) THETAW%TYPR='Q'
C
        ENDIF
C
        IF(CODE(1:7) == 'TELEMAC'.AND.PART==0) THEN
          WRITE(LU,*) 'INITIALISATION EN CAS DE COUPLAGE : PART=',PART
C         INFORMATION ON SUSPENSION SENT BACK
          CHARR_TEL = CHARR
          SUSP_TEL = SUSP
C
C         OV INSTEAD OF OS IN ORDER TO AVOID PROBLEMS WITH QUASI-BUBBLE ELEMENTS
C         OPERATES ONLY ON THE (1:NPOIN) RANGE OF THE TELEMAC FIELDS
C         IT IS A HIDDEN DISCRETISATION CHANGE
C
          CALL OV( 'X=Y     ', U2D%R, U_TEL%R, U_TEL%R, 0.D0, NPOIN)
          CALL OV( 'X=Y     ', V2D%R, V_TEL%R, V_TEL%R, 0.D0, NPOIN)
          CALL OV( 'X=Y     ', HN%R , H_TEL%R, H_TEL%R, 0.D0, NPOIN)
          CALL OS('X=Y     ', X=ZF,Y=ZF_SIS)
C
C         CLIPS NEGATIVE DEPTHS
C
          IF(OPTBAN.GT.0) THEN
            DO I = 1,NPOIN
             IF(HN%R(I).LT.HMIN) THEN
               U2D%R(I)=0.D0
               V2D%R(I)=0.D0
               HN%R(I) = HMIN
             ENDIF
            ENDDO
          ENDIF
        ENDIF
C
C  ---- END COUPLING  -------------
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'CONDIM_SISYPHE'
        IF(.NOT.DEBU) THEN
        CALL CONDIM_SISYPHE
     &        (U2D%R,V2D%R,QU%R,QV%R,HN%R,ZF%R,Z%R,ESOMT%R,THETAW%R,
     &         Q%R,HW%R,TW%R,MESH%X%R,MESH%Y%R,NPOIN,AT0,PMAREE)
        ENDIF
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_CONDIM_SISYPHE'
C
C       AT THIS LEVEL U2D,V2D,H AND ZF MUST HAVE BEEN DEFINED
C       EITHER BY BIEF_SUITE, CONDIM_SISYPHE OR CALLING PROGRAM
C
C       NOW COMPUTES FUNCTIONS OF U2D,V2D,HN AND ZF
C
C       FREE SURFACE
        CALL OS('X=Y+Z   ', X=Z, Y=ZF, Z=HN)
C
        IF(CODE(1:7).NE.'TELEMAC') THEN
C         PRODUCT H*
          CALL OS('X=YZ    ', X=QU, Y=U2D, Z=HN)
C         PRODUCT H*V
          CALL OS('X=YZ    ', X=QV, Y=V2D, Z=HN)
C         DISCHARGE
          CALL OS('X=N(Y,Z)', X=Q, Y=QU, Z=QV)
        ENDIF
C
C       CHECKS THE WAVE DATA
C
        IF(HOULE) THEN
          IF(HW%TYPR    .NE.'Q'.OR.
     &       TW%TYPR    .NE.'Q'.OR.
     &       THETAW%TYPR.NE.'Q') THEN
            WRITE(LU,*) ' '
            WRITE(LU,*) ' '
            IF(LNG.EQ.1) THEN
              WRITE(LU,*) 'DONNEES DE HOULE MANQUANTES'
              IF(HW%TYPR.NE.'Q') WRITE(LU,*) 'HAUTEUR HM0'
              IF(TW%TYPR.NE.'Q') WRITE(LU,*) 'PERIODE PIC TPR5'
              IF(THETAW%TYPR.NE.'Q') WRITE(LU,*) 'DIRECTION MOY'
            ENDIF
            IF(LNG.EQ.2) THEN
              WRITE(LU,*) 'MISSING WAVE DATA'
              IF(HW%TYPR.NE.'Q') WRITE(LU,*) 'WAVE HEIGHT HM0'
              IF(TW%TYPR.NE.'Q') WRITE(LU,*) 'PEAK PERIOD TPR5'
              IF(THETAW%TYPR.NE.'Q') WRITE(LU,*) 'MEAN DIRECTION'
            ENDIF
            CALL PLANTE(1)
            STOP
          ENDIF
        ENDIF
C
C END OF HYDRODYNAMIC INITIALISATION
C
C
C        COMPUTES AREAS (WITHOUT MASKING)
C
         CALL VECTOR(VOLU2D,'=','MASBAS          ',
     &               IELMH_SIS,1.D0,
     &               T1,T1,T1,T1,T1,T1,MESH,.FALSE.,MASKEL)
C        V2DPAR : LIKE VOLU2D BUT IN PARALLEL VALUES COMPLETED AT
C                 INTERFACES BETWEEN SUBDOMAINS
         CALL OS('X=Y     ',X=V2DPAR,Y=VOLU2D)
         IF(NCSIZE.GT.1) CALL PARCOM(V2DPAR,2,MESH)
C        INVERSE OF VOLUMES (DONE WITHOUT MASKING)
         CALL OS('X=1/Y   ',X=UNSV2D,Y=V2DPAR,
     &           IOPT=2,INFINI=0.D0,ZERO=1.D-12)
C
C START OF MODIFICATIONS FOR MIXED SEDIMENTS
C
C        SETTING THE NON-ERODABLE BED (IT CAN BE SET BEFORE
C                                      IF COMPUTATION CONTINUED, I.E. DEBU)
C
         IF(.NOT.DEBU.OR..NOT.YAZR) THEN
           CALL NOEROD(HN%R,ZF%R,ZR%R,Z%R,MESH%X%R,
     &                 MESH%Y%R,NPOIN,CHOIX,NLISS)
         ENDIF
C
C        INITIALISATION FOR SEDIMENT
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'INIT_SEDIMENT'
          CALL INIT_SEDIMENT(NSICLA,ELAY,ZF,ZR,NPOIN,
     &                    AVAIL,FRACSED_GF,AVA0,LGRAFED,CALWC,
     &                    XMVS,XMVE,GRAV,VCE,XWC,FDM,CALAC,AC,
     &                    SEDCO, ES, NCOUCH_TASS,CONC_VASE,
     &                    MS_SABLE, MS_VASE,ACLADM, UNLADM)
          IF(DEBUG.GT.0) WRITE(LU,*) 'END INIT_SEDIMENT'
C
C
C END OF MODIFICATIONS CV
C
!
C MEAN VELOCITY
!======================================================================

        CALL OS('X=N(Y,Z)',X=UNORM,Y=U2D,Z=V2D)

! =====================================================================
C  WAVE ORBITAL VELOCITY
! =====================================================================

        IF(HOULE) THEN
          CALL CALCUW(UW%R,HN%R,HW%R,TW%R,GRAV,NPOIN)
        ENDIF

C ======================================================================
        IF(DEBUG.GT.0) WRITE(LU,*) 'TOB_SISYPHE'
        CALL TOB_SISYPHE(TOB,TOBW,MU,KS,KSP,KSR,CF,FW,
     &                   CHESTR,UETCAR,CF_TEL,KS_TEL,CODE ,
     &                   KFROT,ICR,KSPRATIO,HOULE,
     &                   GRAV,XMVE,XMVS,VCE,KARMAN,ZERO,
     &                   HMIN,HN,ACLADM,UNORM,UW,TW,NPOIN,KSPRED,IKS)
        IF(DEBUG.GT.0) WRITE(LU,*) 'END TOB_SISYPHE'
C
C       INITIALISATION FOR TRANSPORT
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'INIT_TRANSPORT'
        CALL INIT_TRANSPORT(TROUVE,DEBU,HIDING,NSICLA,NPOIN,
     &     T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T14,
     &     CHARR,QS_C,QSXC,QSYC,CALFA,SALFA,COEFPN,SLOPEFF,
     &     SUSP,QS_S,QS,QSCL,QSCL_C,QSCL_S,QSCLXS,QSCLYS,
     &     UNORM,U2D,V2D,HN,CF,MU,TOB,TOBW,UW,TW,THETAW, FW,HOULE,
     &     AVAIL,ACLADM,UNLADM,KSP,KSR,KS,
     &     ICF,HIDFAC,XMVS,XMVE,GRAV,VCE,XKV,HMIN, KARMAN,
     &     ZERO,PI,AC,IMP_INFLOW_C,ZREF,ICQ,CSTAEQ,
     &     CMAX,CS,CS0,UCONV,VCONV,CORR_CONV,SECCURRENT,BIJK,
     &     IELMT, MESH, FDM,XWC,FD90,SEDCO,VITCE,PARTHENIADES,VITCD,
!RK
     &     U3D,V3D,CODE)    
        IF(DEBUG.GT.0) WRITE(LU,*) 'END INIT_TRANSPORT'
C
C ---------- DEBUT IMPRESSIION INITIALISATION =================
C
        CALL ENTETE_SISYPHE(1,AT0,0)
C       PREPARES RESULTS
C
C CONCENTRATION OUTPUT IN G/L
C
        IF(UNIT) CALL OS('X=CX    ',X=CS,C=XMVS)
        CALL PREDES(0,AT0)
C
C       PRINTS OUT THE RESULTS
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'BIEF_DESIMP'
        CALL BIEF_DESIMP(SIS_FILES(SISRES)%FMT,VARSOR,
     &                   HIST,0,NPOIN,SIS_FILES(SISRES)%LU,'STD',
     &                   AT0,0,LISPR,LEOPR,SORLEO,SORIMP,MAXVAR,
     &                   TEXTE,PTINIG,PTINIL)
        IF(DEBUG.GT.0) WRITE(LU,*) 'END BIEF_DESIMP'
C
        IF(UNIT) CALL OS('X=CX    ',X=CS,C=1.D0/XMVS)
C
C===============FIN IMPRESSION CONDITIONS INITIALES =================
C
C      COUPLING
C
       IF(DREDGESIM) THEN
         CALL DREDGESIM_INTERFACE(1)
         IF(LNG.EQ.1) WRITE(LU,*) 'SISYPHE COUPLE AVEC DREDGESIM'
         IF(LNG.EQ.2) WRITE(LU,*) 'SISYPHE COUPLED WITH DREDGESIM'
       ENDIF
C
       IF(CODE(1:7).NE.'SISYPHE') THEN
         IF(LNG.EQ.1) WRITE(LU,*) 'SISYPHE COUPLE AVEC : ',CODE
         IF(LNG.EQ.2) WRITE(LU,*) 'SISYPHE COUPLED WITH: ',CODE
       ENDIF
C
C      COUPLING WITH TELEMAC-2D OR 3D
C
       IF(CODE(1:7).EQ.'TELEMAC') NCALCU = 1
C
C=======================================================================
C
C     INITIAL CONDITION FOR CONSTANT FLOW DISCHARGE
C
      IF(LCONDIS) THEN
        SISYPHE_CFD = LCONDIS
        NSIS_CFD    = NCONDIS
        CONSTFLOW   = .FALSE.
      ELSE
        SISYPHE_CFD = .FALSE.
        NSIS_CFD    = 1
        CONSTFLOW   = .FALSE.
      ENDIF
C
C=======================================================================
C
C     END OF INITIALISATIONS
         IF(DEBUG.GT.0) WRITE(LU,*) 'END_INITIALIZATION'
      ENDIF ! IF (PART==0 OR PART = -1)
C
C=======================================================================
C
      IF(PART==1.OR.PART==-1) THEN
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'TIME_LOOP'
C
C=======================================================================
C
C : 3                    /* LOOP ON TIME */
C
C=======================================================================
C
C----   STOPS THE COMPUTATION WHEN THE REQUIRED NUMBER OF ITERATIONS IS 0
C
        IF(NIT == 0) THEN
          IF (LNG == 1) WRITE(LU,200)
          IF (LNG == 2) WRITE(LU,201)
200       FORMAT(' ARRET DANS SISYPHE, NOMBRE D''ITERATIONS',/,
     &         ' DEMANDE NUL')
201       FORMAT(' STOP IN SISYPHE, NUMBER OF ITERATIONS EQ.0')
          CALL PLANTE(1)
          STOP
        ENDIF
C
C---------------------------------------------------------------------
C       STARTS THE COMPUTATIONS
C---------------------------------------------------------------------
C       LOOP ON THE NUMBER OF EVENTS
C       (IN STEADY STATE: LOOP ON THE TIMESTEPS)
C-----------------------------------
C
        IF(CODE(1:7) == 'TELEMAC') THEN
C         VALNIT IS THE NUMBER OF SISYPHE ITERATIONS UPDATING FOR COUPLING
          VALNIT = (TELNIT/PERICOU)*PERICOU-PERICOU+1
C         MODIFICATION JMH + CV: TO AVOID 2 SUCCESSIVE CALLS TO VALIDA
C         WHEN BEDLOAD AND SUSPENSION
          IF(GRAFCOUNT.GT.TELNIT) VALNIT=NIT+1
C         CHARR, SUSP AND TIME STEP MONITORED BY CALLING PROGRAM
          CHARR = CHARR_TEL
          SUSP= SUSP_TEL
          AT0=T_TEL
        ENDIF
C
        DO 710 MN = 1, NCALCU
C
          IF(.NOT.PERMA.AND.CODE(1:7).NE.'TELEMAC') THEN
C           DETERMINES THE FIRST RECORD TO BE READ :
C           NUMDEB IS THE FIRST RECORD TO BE READ FROM THE HYDRO
C           FILE
            NUMDEB=NUMEN0
            IF(NUMDEB+NIDT > NUMEN) THEN
              IF (LNG == 1) WRITE(LU,202)
              IF (LNG == 2) WRITE(LU,203)
202           FORMAT(1X,'FICHIER HYDRODYNAMIQUE PAS ASSEZ LONG')
203           FORMAT(1X,'THE HYDRODYNAMIC FILE IS NOT LONG ENOUGH')
              CALL PLANTE(1)
            ENDIF
          ENDIF
C
C         LOOP ON THE RECORDS (IF PERMA NIDT=1)
C         ------------------------------
C         WHEN COUPLED
C
CV          IF(CODE(1:7) == 'TELEMAC') DT=DT_TEL
C
          DO 700 MT = 1, NIDT
C
C  ----   DETERMINES THE TIMESTEP NUMBER :
C
            LT = (MN-1)*NIDT +  MT
C
            IF(CODE(1:7) == 'TELEMAC') THEN
              DT=DT_TEL
              LT    = LOOPCOUNT
              LEOPR = GRAFCOUNT
              LISPR = LISTCOUNT
              NSOUS=1
            ENDIF
C
C  ----     PRINTOUTS TO LISTING :
C
            ENTETS = .FALSE.
            IF(LISPR*((LT-1+PERICOU)/LISPR) == (LT-1+PERICOU)) THEN
              ENTET = .TRUE.
            ELSE
              ENTET = .FALSE.
            ENDIF
C
C----      READS AND UPDATES H AND ZF
C----      IF 1ST PASS OR UNSTEADY AND NO COUPLING
C
           DTS = DT / NSOUS
C
           ISOUS = 0
C
           IF(.NOT.PERMA.OR.PASS) THEN
C
C            BEWARE : THE VALUE FOR ESOMT IS NOT READ FROM THE FILE SISHYD
C            NOTE : NAME FOR SISHYD SET TO ' ' IF COUPLING
C
             IF(SIS_FILES(SISHYD)%NAME(1:1).NE.' ')  THEN
C
C              WORK ON ZF,QU,QV,Z WILL BE IN FACT DONE ON:
C              T4,DEL_QU,DEL_QV AND DEL_Z
C              BY PLAYING WITH POINTERS
               SAVEZF=>ZF%R
               SAVEQU=>QU%R
               SAVEQV=>QV%R
               SAVEZ =>Z%R
               ZF%R  =>T4%R
               QU%R  =>DEL_QU%R
               QV%R  =>DEL_QV%R
               Z%R   =>DEL_Z%R
C
               NUMDEB=NUMDEB+1
C
               IF(ENTET) WRITE(LU,*) 'DEFINITION INITIALE DES VITESSES'
C
               CALL BIEF_SUITE(VARSOR,VARCL,NUMDEB,
     &            SIS_FILES(SISHYD)%LU,SIS_FILES(SISHYD)%FMT,
     &            HIST,0,NPOIN,BID,TEXTPR,VARCLA,0,
     &            TROUVE,ALIRE,ENTET,PERMA,MAXVAR)
C
               IF(DEBUG.GT.0) WRITE(LU,*) 'RESCUE_SISYPHE_NOTPERMA'
               CALL RESCUE_SISYPHE_NOTPERMA
     &              (QU%R,QV%R,Q%R,U2D%R,V2D%R,HN%R,Z%R,T4%R,
     &               HW%R,TW%R,THETAW%R,NPOIN,TROUVE,ALIRE,ICF,ENTET,
     &               MAXVAR)
               IF(DEBUG.GT.0) WRITE(LU,*) 'END_RESCUE_SISYPHE_NOTPERMA'
C
C              BACK TO ORIGINAL ADDRESSES
               ZF%R=>SAVEZF
               QU%R=>SAVEQU
               QV%R=>SAVEQV
               Z%R=>SAVEZ
C
C              INCREMENT OF QU, QV AND Z PER SUB-TIME-STEP
               DO I = 1,NPOIN
                 DEL_QU%R(I) = (DEL_QU%R(I)-QU%R(I))/NSOUS
                 DEL_QV%R(I) = (DEL_QV%R(I)-QV%R(I))/NSOUS
                 DEL_Z%R(I)  = (DEL_Z%R(I) -Z%R(I)) /NSOUS
               ENDDO
C
C              UPDATES UNSTEADY HYDRO
C              (TO BE MOVED TO RESCUE_SISYPHE_NOTPERMA)
C              -----------------------------------
C              CLIPS NEGATIVE DEPTHS
C              COMPUTES U2D AND V2D
C
               CALL OS('X=Y-Z   ', X=HN, Y=Z, Z=ZF)
C
               IF(OPTBAN.GT.0) THEN
                 DO I = 1,NPOIN
                   IF(HN%R(I).LT.HMIN) THEN
                     U2D%R(I)=0.D0
                     V2D%R(I)=0.D0
                     HN%R(I) = MAX(HN%R(I),HMIN)
                   ELSE
                     U2D%R(I)=QU%R(I)/HN%R(I)
                     V2D%R(I)=QV%R(I)/HN%R(I)
                   ENDIF
                 ENDDO
               ELSE
                 CALL OS('X=Y/Z   ', X=U2D, Y=QU,   Z=HN)
                 CALL OS('X=Y/Z   ', X=V2D, Y=QV,   Z=HN)
               ENDIF
C
               IF(DEBUG.GT.0) WRITE(LU,*) 'CONDIM_SISYPHE'
               CALL CONDIM_SISYPHE
     &        (U2D%R,V2D%R,QU%R,QV%R,HN%R,ZF%R,Z%R,ESOMT%R,THETAW%R,
     &         Q%R,HW%R,TW%R,MESH%X%R,MESH%Y%R,NPOIN,AT0,PMAREE)
               IF(DEBUG.GT.0) WRITE(LU,*) 'END_CONDIM_SISYPHE'
             ENDIF ! (SIS_FILES(SISHYD)%NAME(1:1) /=' ')
           ENDIF ! (NOT.PERMA.OR.PASS)
C
        IF(PASS) THEN
C         IN STEADY STATE LOGICAL FOR READING SET TO FALSE
          IF (PERMA) PASS = .FALSE.
        ELSE
C         COMPUTES THE WATER DEPTH
          CALL OS('X=Y-Z   ', X=HN, Y=Z, Z=ZF)
        ENDIF
C
C       COUPLING
C
        IF(CODE(1:7) == 'TELEMAC') THEN
C
C         OV INSTEAD OF OS IN ORDER TO AVOID PROBLEMS WITH QUASI-BUBBLE ELEMENTS
C         OPERATES ONLY ON THE (1:NPOIN) RANGE OF THE TELEMAC FIELDS
C         IT IS A HIDDEN DISCRETISATION CHANGE
C
          CALL OV( 'X=Y     ',U2D%R, U_TEL%R, U_TEL%R, 0.D0, NPOIN)
          CALL OV( 'X=Y     ',V2D%R, V_TEL%R, V_TEL%R, 0.D0, NPOIN)
          CALL OV( 'X=Y     ', HN%R, H_TEL%R, H_TEL%R, 0.D0, NPOIN)
C         ADDED BY JMH 01/07/2004 (ZF MAY BE MODIFIED BY CALLING PROGRAM)
          CALL OS('X=Y     ', X=ZF, Y=ZF_SIS)
C         CLIPS NEGATIVE DEPTHS
          IF(OPTBAN.GT.0) THEN
            DO I = 1,HN%DIM1
              IF(HN%R(I).LT.HMIN) THEN
               U2D%R(I)=0.D0
               V2D%R(I)=0.D0
               HN%R(I)=HMIN
              ENDIF
            ENDDO
          ENDIF
C         FREE SURFACE
          CALL OS('X=Y+Z   ', X=Z, Y=ZF, Z=HN)
C         PRODUCT H*
C         CALL OS('X=YZ    ', X=QU, Y=U2D, Z=HN)
C         PRODUCT H*V
C         CALL OS('X=YZ    ', X=QV, Y=V2D, Z=HN)
C         DISCHARGE
C         CALL OS('X=N(Y,Z)', X=Q, Y=QU, Z=QV)
C
        ENDIF
C
C       END OF COUPLING
! =========================================================================
C TREATMENT OF TIDAL FLATS, DEFINITION OF THE MASKS
! =====================================================================!
C
        IF(OPTBAN.EQ.2) THEN
C
C ----    BUILDS MASKING BY ELEMENTS
C
          CHGMSK = .FALSE.
          CALL OS ('X=Y     ', X=MSKTMP, Y=MASKEL)
          CALL OS ('X=C     ', X=MASKEL, C=1.D0)
          IF(CODE(1:7) == 'TELEMAC') THEN
C           MASKS ARE DERIVED FROM THE NON-CLIPPED VALUES OF H
C           PROVIDED BY TELEMAC
            CALL MASKTF(MASKEL%R,H_TEL%R,HMIN,MESH%IKLE%I,
     &                  NELEM,NPOIN)
          ELSE
            CALL MASKTF(MASKEL%R,HN%R,HMIN,MESH%IKLE%I,
     &                  NELEM,NPOIN)
          ENDIF
C
          DO I=1,NELEM
            IF(MASKEL%R(I).NE.MSKTMP%R(I)) THEN
              CHGMSK = .TRUE.
              EXIT
            ENDIF
          ENDDO
C
C        JMH 17/12/2009
C
C        ELSEIF(OPTBAN.EQ.1) THEN
C
C          CANCELS Q QU AND QV IF HN.LE.0.D0
C          CALL MASKAB(HN%R,Q%R,QU%R,QV%R,NPOIN)
C
        ENDIF
C
C ----   BUILDS THE MASK OF THE POINTS FROM THE MASK OF THE ELEMENTS
C ----   AND CHANGES IFAMAS (IFABOR WITH MASKING)
C
        IF(MSK) CALL MASKTO(MASKEL%R,MASKPT,IFAMAS%I,
     &                      MESH%IKLE%I,
     &                      MESH%IFABOR%I,MESH%ELTSEG%I,MESH%NSEG,
     &                      NELEM,NPOIN,IELMT,MESH)
C
C ------------------------------------------------------------------
C  START OF SUB-ITERATIONS IN UNSTEADY STATE
C
C ------------------------------------------------------------------
C
702      CONTINUE
C
         ISOUS = ISOUS + 1
         AT0=AT0+DTS
         IF(ENTET.AND.ISOUS.EQ.1) CALL ENTETE_SISYPHE(2,AT0,LT)
         IF(ENTET.AND.ISOUS.EQ.NSOUS) ENTETS=.TRUE.
C
C---------------------------------------------------------------------
C        FRICTION COEFFICIENT VARIABLE IN TIME
C---------------------------------------------------------------------
C
         CALL CORSTR_SISYPHE
C
C ----   READS THE BOUNDARY CONDITIONS
C
         CALL CONLIT(MESH%NBOR%I)
C
C =======================================================================
C
C        IF 'VARIABLE TIME-STEP = YES' NSOUS WILL BE COMPUTED FURTHER DOWN
C        THE CONPUTATION OF THE TIMESTEP SIS HAS BEEN MOVED BEFORE READING
C        THE HYDRO CONDITIONS
C
C  ---   MEAN DIAMETER FOR THE ACTIVE-LAYER AND UNDER-LAYER
C
         IF(.NOT.MIXTE.AND.NSICLA.GT.1) CALL MEAN_GRAIN_SIZE
C
C  ---   MEAN VELOCITY UNORM
C
         CALL OS('X=N(Y,Z)',X=UNORM,Y=U2D,Z=V2D)
C
C  ---   WAVE ORBITAL VELOCITY --> UW
C
         IF(HOULE) THEN
           CALL CALCUW(UW%R,HN%R,HW%R,TW%R,GRAV,NPOIN)
         ENDIF
C
          CALL TOB_SISYPHE
     &     (TOB,TOBW, MU, KS, KSP,KSR,CF, FW,
     &      CHESTR, UETCAR, CF_TEL,KS_TEL, CODE ,
     &      KFROT, ICR, KSPRATIO,HOULE,
     &      GRAV,XMVE,  XMVS, VCE, KARMAN,ZERO,
     &      HMIN,HN, ACLADM, UNORM,UW, TW, NPOIN,KSPRED,IKS)
C
C  END OF INITIALISATION
C
      ! ******************** !
      ! BEDLOAD COMPUTATION  !
      ! ******************** !

        IF(CHARR) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'BEDLOAD_MAIN'
          CALL BEDLOAD_MAIN
     &        (ACLADM,KSP,KSR,VOLU2D,UNSV2D,
     &         CF,EBOR,FW,HN,LIQBOR,MASK,MASKEL,
     &         MASKPT,Q,QBOR,U2D,V2D,S,UNLADM,UW,THETAW,
     &         MU,TOB,TOBW,TW,ZF,DEBUG,HIDFAC,ICF,
     &         IELMT,ISOUS,KDDL,KDIR,KENT,KINC,KLOG,KNEU,KSORT,
     &         LOADMETH,LT,NPOIN,NPTFR,NSICLA,
     &         OPTBAN,LS0,BETA,FD90,FDM,GRAV,HIDI,HMIN,
     &         VCE,XKV,XMVE,XMVS,XWC,PI,KARMAN,ZERO,
     &         KARIM_HOLLY_YANG,MSK,SUSP,VF,ENTET,
     &         CONST_ALAYER,LCONDIS,LGRAFED,MESH,
     &         ELAY,LIEBOR,LIMTEC,MASKTR,
     &         IT1,T1,T2,T3,T4,T5,T6,T7,T8,T9,
     &         T10,T11,T12,T13,UNORM,AC,AT0,DTS,ELAY0,FRACSED_GF,
     &         AVAIL,BREACH,CALFA,COEFPN,DZF_GF,HIDING,
     &         QSCL_C,QSCL_S,QS_C,QSCLXC,QSXC,QSCLYC,
     &         QSYC,SALFA,ZF_C,ZFCL_C,NSOUS,ENTETS,
     &         SECCURRENT,SLOPEFF,PHISED,DEVIA,BETA2,BIJK,
     &         SEDCO,HOULE,
!RK 
     &         U3D,V3D,CODE)
C
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_BEDLOAD_MAIN'
C
C         UPDATES THE BOTTOM
C
          CALL OS('X=X+Y   ',X=ZF,Y=ZF_C)
C
C         UPDATES THE LAYERS  --> ELAY
C
          IF(.NOT.MIXTE.AND.NSICLA.GT.1) THEN
            IF(DEBUG.GT.0) WRITE(LU,*) 'LAYER'
            CALL LAYER(ZFCL_C,NLAYER,ZR,ZF,ESTRAT,ELAY,VOLU2D,
     &                 ACLADM,NSICLA,NPOIN,ELAY0,VOLTOT,ES,
     &                 AVAIL,CONST_ALAYER,DTS,T2%R,IT1%I)
            IF(DEBUG.GT.0) WRITE(LU,*) 'END_LAYER'
          ELSE
            CALL OS('X=Y-Z   ',X=ELAY,Y=ZF,Z=ZR)
          ENDIF
C END OF BEDLOAD
        ENDIF

      ! ********************** !
      ! SUSPENSION COMPUTATION !
      ! ********************** !
        IF(SUSP) THEN
C
          IF(DEBUG.GT.0) WRITE(LU,*) 'SUSPENSION_MAIN'
          CALL SUSPENSION_MAIN
     &(SLVTRA,HN,HN_TEL,MU,TOB,ACLADM,KSP,KSR,KS,CF,
     & VOLU2D,V2DPAR,UNSV2D,AFBOR,BFBOR,ZF,LICBOR,
     & IFAMAS,MASKEL,MASKPT,U2D,V2D,NSICLA,
     & NPOIN,NPTFR,IELMT,OPTDIF,RESOL,LT,NIT,OPTBAN,OPTSUP,
     & OPDTRA,KENT,KSORT,KLOG,KINC,KNEU,KDIR,KDDL,ISOUS,NSOUS,
     & DEBUG,DTS,CSF_VASE,CSF_SABLE,ZERO,GRAV,XKX,XKY,
     & KARMAN,XMVE,XMVS,HMIN,XWC,VITCD,VITCE,PARTHENIADES,
     & ENTET,BILMA,MSK,CHARR,IMP_INFLOW_C,MESH,ZF_S,CS,
     & CST,CTILD,CBOR,DISP,IT1,IT2,IT3,IT4,TB,T1,T2,T3,T4,T5,T6,
     & T7,T8,T9,T10,T11,T12,W1,TE1,CLT,TE2,TE3,S,AM1_S,AM2_S,MBOR,
     & ELAY,LIMDIF,MASKTR,TETA_SUSP,AC,
     & MASED0,MASINI,MASTEN,MASTOU,ES,AVAIL,ENTETS,PASS_SUSP,
     & ZFCL_S,HPROP,FLUDPT,FLUDP,FLUER,DISP_C,KX,KY,KZ,UCONV,
     & VCONV,QSXS,QSYS,QSCLXS,QSCLYS,QSCL_S,QS_S,QS_C,
     & CSTAEQ,ICQ,MASTCP,MASFIN,MASDEPT,MASDEP,MASSOU,CORR_CONV,
     & ZREF,SEDCO,VISC_TEL,CODE,DIFT,DM1,UCONV_TEL,VCONV_TEL,
     & ZCONV,SOLSYS,FLBOR_TEL,FLBOR_SIS,FLBORTRA,NUMLIQ%I,NFRLIQ,
     & MIXTE,NCOUCH_TASS,CONC_VASE,TOCE_VASE,
     & FLUER_VASE,TOCE_MIXTE,MS_SABLE,MS_VASE,TASS)
         IF(DEBUG.GT.0) WRITE(LU,*) 'END_SUSPENSION_MAIN'
C
C      UPDATES THE BOTTOM
C
       CALL OS('X=X+Y   ',X=ZF,Y=ZF_S)
C
C      UPDATES THE LAYERS
C      REDEFINES THE LAYER OF ERODABLE SEDIMENT
C      EXTENDED GRANULOMETRY (TO BE REPLACED WITH NOMBLAY>1
C
        IF(.NOT.MIXTE.AND.NSICLA.GT.1) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'LAYER'
          CALL LAYER(ZFCL_S,NLAYER,ZR,ZF,ESTRAT,ELAY,VOLU2D,
     &               ACLADM,NSICLA,NPOIN,ELAY0,VOLTOT,ES,
     &               AVAIL,CONST_ALAYER,DTS,T2%R,IT1%I)
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_LAYER'
        ELSE
          CALL OS('X=Y-Z   ',X=ELAY,Y=ZF,Z=ZR)
        ENDIF
C END OF SUSPENSION
      ENDIF
!
C RECONSTITUTES THE BEDLOAD AND/OR SUSPENSION DATA
! -----------------------------------------------------
!
        IF( DEBUG.GT.0) WRITE(LU,*) 'QS_RESULT'
!
        CALL OS('X=0     ', X=QSX)
        CALL OS('X=0     ', X=QSY)
!
        DO I = 1, NSICLA
          CALL OS('X=Y+Z   ', X=QSCLX%ADR(I)%P, Y=QSCLXC%ADR(I)%P,
     &                                          Z=QSCLXS%ADR(I)%P)
          CALL OS('X=Y+Z   ', X=QSCLY%ADR(I)%P, Y=QSCLYC%ADR(I)%P,
     &                                          Z=QSCLYS%ADR(I)%P)
          CALL OS('X=N(Y,Z)', X=QSCL%ADR(I)%P,  Y=QSCLX%ADR(I)%P,
     &                                          Z=QSCLY%ADR(I)%P)
          CALL OS('X=X+Y   ', X=QSX, Y=QSCLX%ADR(I)%P)
          CALL OS('X=X+Y   ', X=QSY, Y=QSCLY%ADR(I)%P)
        ENDDO
        CALL OS('X=N(Y,Z)', X=QS, Y=QSX, Z=QSY)
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_QS_RESULT'
!
!=======================================================================
!
C     MAXIMUM BOTTOM SLOPE : EVOL IN T1
!
      IF(SLIDE) THEN
!
        IF(ENTET) CALL ENTETE_SISYPHE(14,AT0,LT)
!
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE MAXSLOPE'
        CALL MAXSLOPE(PHISED,ZF%R,ZR%R,MESH%XEL%R,MESH%YEL%R,MESH%NELEM,
     &                MESH%NELMAX,NPOIN,MESH%IKLE%I,T1,UNSV2D,MESH)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE MAXSLOPE'
        CALL OS('X=X+Y   ',X=ZF,Y=T1)
!
        IF(NSICLA.EQ.1) THEN
          CALL OS('X=Y-Z   ',X=ELAY,Y=ZF,Z=ZR)
        ELSE
          WRITE(LU,*) 'SLIDE NOT IMPLEMENTED WITH GRADED SEDIMENT'
          CALL PLANTE(1)
          STOP
        ENDIF
!
      ENDIF
!
!========================================================================
!
C     SETTLING: EVOLUTION COMPUTED IN T3
!
      IF(TASS) THEN
C
        IF(ENTET) THEN
          IF(.NOT.CHARR.AND..NOT.SUSP.AND..NOT.SLIDE) THEN
            CALL ENTETE_SISYPHE(2,AT0,LT)
          ENDIF
          CALL ENTETE_SISYPHE(15,AT0,LT)
        ENDIF
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE TASSEMENT'
        CALL TASSEMENT(ZF,NPOIN,DTS,ELAY,T3,T2,LT,AVAIL,NSICLA,
     &                 ES,XMVS,XKV,TRANS_MASS,CONC_VASE,NCOUCH_TASS,
     &                 MS_SABLE%R,MS_VASE%R)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE TASSEMENT'
C
C       UPDATES ZF (ELAY HAS BEEN UPDATED IN TASSEMENT)
C
        CALL OS('X=X+Y   ',X=ZF,Y=T3)
C
      ENDIF
!
!=======================================================================
C : 5        COMPUTES THE EVOLUTIONS FOR THIS CYCLE OF TIMESTEP
C            AND UPDATES AFTER THIS COMPUTATION
!=======================================================================
!
C ----  COMPUTES  THE EVOLUTIONS FOR THIS (SUB) TIMESTEP
!
      IF(CHARR) THEN
        CALL OS('X=Y     ',X=E,Y=ZF_C)
      ELSE
        CALL OS('X=0     ',X=E)
      ENDIF
      IF(SUSP)  CALL OS('X=X+Y   ',X=E,Y=ZF_S)
      IF(SLIDE) CALL OS('X=X+Y   ',X=E,Y=T1)
      IF(TASS)  CALL OS('X=X+Y   ',X=E,Y=T3)
!
      CALL OS('X=X+Y   ', X=ESOMT, Y=E)
C
C  UPDATES
C
        IF(PART.EQ.-1) THEN
C
        CALL OS('X=X-Y   ',X=HN,Y=E)
        IF(OPTBAN.GT.0) THEN
          DO I = 1,HN%DIM1
            IF(HN%R(I).LT.HMIN) THEN
              U2D%R(I)=0.D0
              V2D%R(I)=0.D0
              HN%R(I) =HMIN
            ELSE
              U2D%R(I)= QU%R(I)/HN%R(I)
              V2D%R(I)= QV%R(I)/HN%R(I)
            ENDIF
          ENDDO
        ELSE
          CALL OS('X=Y/Z   ', X=U2D, Y=QU,   Z=HN)
          CALL OS('X=Y/Z   ', X=V2D, Y=QV,   Z=HN)
        ENDIF
C
C=======================================================================
C : 6     STOPS IF EVOLUTIONS GREATER THAN EMAX = RC*(INITIAL DEPTH)
C=======================================================================
C
C       DETERMINES THE MAXIMUM EVOLUTION THRESHOLD
        DO I = 1, NPOIN
          EMAX%R(I) = RC*MAX(HN%R(I),HMIN)
        ENDDO
C
C ----  STOPS WHEN THE EVOLUTIONS ARE GREATER THAN A CERTAIN THRESHOLD
C CCV   THIS TEST IS ONLY CALLED IN 'SISYPHE ONLY' MODE
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'ARRET'
          CALL SIS_ARRET(ESOMT,EMAX,HN,VARSOR,NPOIN,MN,
     &                   SIS_FILES(SISRES)%LU,SIS_FILES(SISRES)%FMT,
     &                   MAXVAR,AT0,RC,HIST,BINRESSIS,TEXTE,
     &                   SORLEO,SORIMP,T1,T2)
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_ARRET'
        ENDIF
C
C ----     CONSTANT FLOW DISCHARGE
C
        IF(LCONDIS) THEN
          CALL CONDIS_SISYPHE(CONSTFLOW)
        ELSE
          CONSTFLOW =.FALSE.
        ENDIF
C
C=======================================================================
C : 8     MASS BALANCE
C=======================================================================
C       COMPUTES THE COMPONENTS OF SAND TRANSPORT FOR THE MASS BALANCE,
C       GRAPHIC OUTPUTS AND VALIDATION STAGE
C
        IF(BILMA.AND.CHARR) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'BILAN_SISYPHE'
          CALL BILAN_SISYPHE(E,ESOMT,QSX,QSY,
     &                       MESH,MSK,MASKEL,T1,T2,S,IELMU_SIS,VCUMU,
     &       DTS,NPTFR,ENTETS,ZFCL_C,QSCLXC,QSCLYC,NSICLA,
     &       VOLTOT,DZF_GF,MASS_GF,LGRAFED,NUMLIQ%I,NFRLIQ)
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_BILAN_SISYPHE'
        ENDIF
C
C       CONTROL SECTIONS
C
        IF(NCP.GT.0) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'FLUSEC_SISYPHE'
          CALL FLUSEC_SISYPHE(U2D,V2D,HN,
     &                        QSXC,QSYC,CHARR,QSXS,QSYS,SUSP,
     &                        MESH%IKLE%I,
     &                        MESH%NELMAX,MESH%NELEM,
     &                        MESH%X%R,MESH%Y%R,
     &                        DT,NCP,CTRLSC,ENTETS,AT0,MESH%KNOGL%I)
          IF(DEBUG.GT.0) WRITE(LU,*) 'END_FLUSEC_SISYPHE'
        ENDIF
C
C-----------------------------------------------------------------------
C
        IF(.NOT.PERMA.AND.SIS_FILES(SISHYD)%NAME(1:1).NE.' ') THEN
C
C         UPDATES THE HYDRO
C
C         IF READING ON HYDRODYNAMIC FILE, INCREMENTS QU, QV AND Z
          IF(SIS_FILES(SISHYD)%NAME(1:1).NE.' ')  THEN
            CALL OS('X=X+Y   ', X=QU, Y=DEL_QU)
            CALL OS('X=X+Y   ', X=QV, Y=DEL_QV)
            CALL OS('X=X+Y   ', X=Z , Y=DEL_Z)
          ENDIF
          CALL OS('X=Y-Z   ', X=HN, Y=Z, Z=ZF)
C         CLIPS NEGATIVE DEPTHS
          IF(OPTBAN.GT.0) THEN
            DO I = 1, NPOIN
             IF(HN%R(I).LT.HMIN) THEN
               U2D%R(I)=0.D0
               V2D%R(I)=0.D0
               HN%R(I) = MAX(HN%R(I),HMIN)
             ELSE
               U2D%R(I)= QU%R(I)/HN%R(I)
               V2D%R(I)= QV%R(I)/HN%R(I)
             ENDIF
            ENDDO
          ELSE
            CALL OS('X=Y/Z   ', X=U2D, Y=QU,   Z=HN)
            CALL OS('X=Y/Z   ', X=V2D, Y=QV,   Z=HN)
          ENDIF
C
        ENDIF
C
C       END OF THE LOOP ON SUB-TIMESTEPS NSOUS
C ---------------------------------------------------------
        IF(DEBUG.GT.0) WRITE(LU,*) 'SOUS_ITERATION_NEXT'
        IF (ISOUS < NSOUS) GOTO 702
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_SOUS_ITERATION'
C=======================================================================
C : 9        PRINTS OUT EXTREME VALUES
C=======================================================================
C
        IF(ENTET.AND.CHARR) THEN
          WRITE(LU,*)
          CALL MAXI(XMAX,IMAX,E%R,NPOIN)
          IF(NCSIZE.GT.1) THEN
            XMA=P_DMAX(XMAX)
            IF(XMAX.EQ.XMA) THEN
              IMA=MESH%KNOLG%I(IMAX)
            ELSE
              IMA=0
            ENDIF
            IMA=P_IMAX(IMA)
          ELSE
            IMA=IMAX
            XMA=XMAX
          ENDIF
          IF(LNG.EQ.1) WRITE(LU,371) XMA,IMA
          IF(LNG.EQ.2) WRITE(LU,372) XMA,IMA
371       FORMAT(' EVOLUTION MAXIMUM        : ',G16.7,' NOEUD : ',I6)
372       FORMAT(' MAXIMAL EVOLUTION        : ',G16.7,' NODE  : ',I6)
          CALL MINI(XMIN,IMIN,E%R,NPOIN)
          IF(NCSIZE.GT.1) THEN
            XMI=P_DMIN(XMIN)
            IF(XMIN.EQ.XMI) THEN
              IMI=MESH%KNOLG%I(IMIN)
            ELSE
              IMI=0
            ENDIF
            IMI=P_IMAX(IMI)
          ELSE
            IMI=IMIN
            XMI=XMIN
          ENDIF
          IF(LNG.EQ.1) WRITE(LU,373) XMI,IMI
          IF(LNG.EQ.2) WRITE(LU,374) XMI,IMI
373       FORMAT(' EVOLUTION MINIMUM        : ',G16.7,' NOEUD : ',I6)
374       FORMAT(' MINIMAL EVOLUTION        : ',G16.7,' NODE  : ',I6)
C
          IF(CONST_ALAYER) THEN
            IF(NSICLA.GT.1.AND.XMI.LT.-0.5D0*ELAY0) THEN
              IF(LNG.EQ.1) WRITE(LU,885)
              IF(LNG.EQ.2) WRITE(LU,886)
885           FORMAT(' EROSION SUPERIEURE A EPAISSEUR DE COUCHE !')
886           FORMAT(' EROSION GREATER THAN ONE LAYER THICKNESS !')
            ENDIF
            IF(NSICLA.GT.1.AND.XMA.GT.ELAY0) THEN
              IF(LNG.EQ.1) WRITE(LU,887)
              IF(LNG.EQ.2) WRITE(LU,888)
887           FORMAT(' DEPOT SUPERIEUR A EPAISSEUR DE COUCHE !')
888           FORMAT(' DEPOSITION MORE THAN ONE LAYER THICKNESS !')
            ENDIF
          ELSE
            DO J=1,NPOIN
              ELAY0 = 3.D0*ACLADM%R(J)
              IF(NSICLA.GT.1.AND.E%R(J).LT.-0.5D0*ELAY0) THEN
                IF(LNG.EQ.1) WRITE(LU,885)
                IF(LNG.EQ.2) WRITE(LU,886)
              ENDIF
              IF(NSICLA.GT.1.AND.E%R(J).GT.ELAY0) THEN
                IF(LNG.EQ.1) WRITE(LU,887)
                IF(LNG.EQ.2) WRITE(LU,888)
              ENDIF
            ENDDO
          ENDIF
        ENDIF
        IF(ENTET) THEN
          CALL MAXI(XMAX,IMAX,ESOMT%R,NPOIN)
          IF(NCSIZE.GT.1) THEN
            XMA=P_DMAX(XMAX)
            IF(XMAX.EQ.XMA) THEN
              IMA=MESH%KNOLG%I(IMAX)
            ELSE
              IMA=0
            ENDIF
            IMA=P_IMAX(IMA)
          ELSE
            IMA=IMAX
            XMA=XMAX
          ENDIF
          IF (LNG.EQ.1) WRITE(LU,881) XMA,IMA
          IF (LNG.EQ.2) WRITE(LU,882) XMA,IMA
881       FORMAT(' EVOLUTION MAXIMUM TOTALE : ',G16.7,' NOEUD : ',I6)
882       FORMAT(' TOTAL MAXIMAL EVOLUTION  : ',G16.7,' NODE  : ',I6)
          CALL MINI(XMIN,IMIN,ESOMT%R,NPOIN)
          IF(NCSIZE.GT.1) THEN
            XMI=P_DMIN(XMIN)
            IF(XMIN.EQ.XMI) THEN
              IMI=MESH%KNOLG%I(IMIN)
            ELSE
              IMI=0
            ENDIF
            IMI=P_IMAX(IMI)
          ELSE
            IMI=IMIN
            XMI=XMIN
          ENDIF
          IF (LNG.EQ.1) WRITE(LU,883) XMI,IMI
          IF (LNG.EQ.2) WRITE(LU,884) XMI,IMI
883       FORMAT(' EVOLUTION MINIMUM TOTALE : ',G16.7,' NOEUD : ',I6)
884       FORMAT(' TOTAL MINIMAL EVOLUTION  : ',G16.7,' NODE  : ',I6)
        ENDIF

C=======================================================================
C : 10         PRINTS OUT RESULTS AT THIS TIMESTEP
C              AND COMPARES AGAINST A REFERENCE FILE
C=======================================================================
C

C       IN COUPLING MODE, OUTPUT TIMES OF TELEMAC AND SISYPHE ARE
C       SYNCHRONISED, IT MEANS THAT WE MUST HAVE :
C       LT * DT (TIME AT THE END OF TIME STEP LT IN TELEMAC)
C       EQUAL TO:
C       (LT-1)*DT + PERICOU*DT (TIME AT THE END OF TIME STEP LT IN SISYPHE
C       HENCE THE FACT THAT LT IS REPLACED BY LT-1+PERICOU
C       DEFAULT VALUE OF PERICOU IS 1
C
        IF(UNIT) CALL OS('X=CX    ', X=CS, C= XMVS)
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE PREDES'
        CALL PREDES(LT-1+PERICOU,AT0)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE PREDES'
        IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE BIEF_DESIMP'
        CALL BIEF_DESIMP(SIS_FILES(SISRES)%FMT,VARSOR,
     &                   HIST,0,NPOIN,SIS_FILES(SISRES)%LU,
     &                   'STD',AT0,LT-1+PERICOU,LISPR,LEOPR,
     &                   SORLEO,SORIMP,MAXVAR,TEXTE,PTINIG,PTINIL)
        IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE BIEF_DESIMP'
C
        IF(UNIT) CALL OS('X=CX    ', X=CS,  C= 1.D0/XMVS)
C
C       SENDS THE NEW ZF TO TELEMAC-2D OR 3D
C
        IF(CODE(1:7) == 'TELEMAC') THEN
          CALL OV ('X=Y     ', ZF_SIS%R, ZF%R, ZF%R, 0.D0, NPOIN)
        ENDIF
C
C       THE SUBROUTINE VALIDA FROM THE LIBRARY IS STANDARD
C       IT CAN BE MODIFIED FOR EACH PARTICULAR CASE
C       BUT ITS CALL MUST BE LEFT IN THE LOOP ON TIME
C
        IF(VALID) THEN
          IF(DEBUG.GT.0) WRITE(LU,*) 'APPEL DE BIEF_VALIDA'
          CALL BIEF_VALIDA(TB,TEXTPR,SIS_FILES(SISREF)%LU,
     &                     SIS_FILES(SISREF)%FMT,
     &                     VARSOR,TEXTE,SIS_FILES(SISRES)%LU,
     &                     SIS_FILES(SISRES)%FMT,
     &                     MAXVAR,NPOIN,LT,VALNIT,ALIRV)
          IF(DEBUG.GT.0) WRITE(LU,*) 'RETOUR DE BIEF_VALIDA'
        ENDIF
C
C       END OF THE LOOP ON THE RECORDS : 700
700     CONTINUE
C
C=======================================================================
C
C       END OF THE LOOP ON THE NUMBER OF EVENTS : 710
C
710     CONTINUE
C
C-----------------------------------------------------------------------
C
        IF(DEBUG.GT.0) WRITE(LU,*) 'END_TIME_LOOP'
      ENDIF
C
C-----------------------------------------------------------------------
C
      IF(DREDGESIM.AND.(LOOPCOUNT.EQ.TELNIT.AND.PART.EQ.1.
     &                                            .OR. PART.EQ.-1)) THEN
         CALL DREDGESIM_INTERFACE(3)
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       STOP TEST IN CASE EVOLUTION BECOMES TOO IMPORTANT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AT0, BINRESSIS, EMAX, ESM, FMTRES, HIST, HN, MAXVAR, MN, NPOIN, NRES, RC, SORIMP, SORLEO, T1, T2, TEXTE, VARSOR
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> IMIN, XMIN
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SIS_ARRET
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BIEF_DESIMP(), MINI(), OS(), PLANTE(), PREDES()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.8                                       </center>
!> </td><td> 05/01/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 11/09/1995
!> </td><td> E. PELTIER; C. LENORMANT; J.-M. HERVOUET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AT0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BINRESSIS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>EMAX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ESM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FMTRES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HIST
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MAXVAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NRES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>RC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SORIMP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SORLEO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TEXTE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VARSOR
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SIS_ARRET !
     &(ESM,EMAX,HN,VARSOR,NPOIN,MN,NRES,FMTRES,MAXVAR,AT0,RC,HIST,
     & BINRESSIS,TEXTE,SORLEO,SORIMP,T1,T2)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AT0            |---| 
C| BINRESSIS      |---| 
C| EMAX           |---| 
C| ESM            |---| 
C| FMTRES         |---| 
C| HIST           |---| 
C| HN             |---| 
C| MAXVAR         |---| 
C| MN             |---| 
C| NPOIN          |---| 
C| NRES           |---| 
C| RC             |---| 
C| SORIMP         |---| 
C| SORLEO         |---| 
C| T1             |---| 
C| T2             |---| 
C| TEXTE          |---| 
C| VARSOR         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_SIS_ARRET => SIS_ARRET
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      TYPE(BIEF_OBJ),    INTENT(IN)    :: ESM, EMAX, HN, VARSOR
      INTEGER,           INTENT(IN)    :: NPOIN, MN, NRES, MAXVAR
      DOUBLE PRECISION,  INTENT(IN)    :: AT0, RC, HIST(1)
      CHARACTER(LEN=3),  INTENT(IN)    :: BINRESSIS
      CHARACTER(LEN=32), INTENT(IN)    :: TEXTE(MAXVAR)
      CHARACTER(LEN=8),  INTENT(IN)    :: FMTRES
      LOGICAL,           INTENT(IN)    :: SORLEO(*), SORIMP(*)
      TYPE(BIEF_OBJ),    INTENT(INOUT) :: T1, T2
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER          :: IMIN
      DOUBLE PRECISION :: XMIN
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ************************************ !
      ! I - COMPUTES F ABSOLUTE VALUE        !
      ! ************************************ !
      CALL OS('X=ABS(Y)', X=T1, Y=ESM)

      ! ************************************************** !
      ! II - COMPUTES THE DIFFERENCE BETWEEN THE AUTHORISED! (_IMP_)
      !      VALUE FOR DEPOSITION AND F ABSOLUTE VALUE     !
      ! ************************************************** !
      CALL OS('X=Y-Z   ', X=T2, Y=EMAX, Z=T1)

      ! ************************************************************** !
      ! III - COMPUTES THE MINIMUM VALUE OF THIS DIFFERENCE (NPOIN)    !
      ! ************************************************************** !
      CALL MINI(XMIN, IMIN, T2%R, NPOIN)

      ! ************************************************************* !
      ! IV - IF THE MINIMUM VALUE IS NEGATIVE, COMPUTATION IS STOPPED !
      ! ************************************************************* !
      IF (XMIN < 0.D0) THEN

         ! IV.1 - PRINTS THE VALUES
         ! --------------------------
         IF(LNG.EQ.1) THEN
            WRITE(LU,400) MN
            WRITE(LU,*) ' '
            WRITE(LU,402) IMIN
            WRITE(LU,404) HN%R(IMIN)
            WRITE(LU,406) RC
            WRITE(LU,408) EMAX%R(IMIN)
            WRITE(LU,410) ESM%R(IMIN)
            WRITE(LU,412) AT0
            WRITE(LU,*) ' '
            WRITE(LU,*) 'DERNIER RESULTAT SAUVEGARDE'
         ELSE IF(LNG.EQ.2) THEN
            WRITE(LU,401) MN
            WRITE(LU,*) ' '
            WRITE(LU,403) IMIN
            WRITE(LU,405) HN%R(IMIN)
            WRITE(LU,407) RC
            WRITE(LU,409) EMAX%R(IMIN)
            WRITE(LU,411) ESM%R(IMIN)
            WRITE(LU,413) AT0
            WRITE(LU,*) ' '
            WRITE(LU,*) 'LAST RESULT SAVED'
         ENDIF


         ! IV.2 - SAVES THE LAST RESULT
         ! -----------------------------
         CALL PREDES(1,AT0)
         CALL BIEF_DESIMP(FMTRES,VARSOR,HIST,0,NPOIN,NRES,BINRESSIS,AT0,
     &                    1,1,1,SORLEO,SORIMP,MAXVAR,TEXTE,1,1)
         CALL PLANTE(1)
         STOP
      ENDIF


      !----------------------------------------------------------------!
400   FORMAT(1X,/,' EVOLUTION TROP FORTE AU CALCUL  : ',1I6)
402   FORMAT(' NOEUD NUMERO                    : ',1I6)
404   FORMAT(' HAUTEUR D''EAU                  : ',G16.7)
406   FORMAT(' RAPPORT D''EVOLUTION CRITIQUE   : ',G16.7)
408   FORMAT(' EVOLUTION MAXIMALE ADMISSIBLE   : ',G16.7)
410   FORMAT(' EVOLUTION CUMULEE CALCULEE      : ',G16.7)
412   FORMAT(' TEMPS                           : ',G16.7)
      !----------------------------------------------------------------!
401   FORMAT(1X,/,' TOO MUCH EVOLUTION AT COMPUTATION: ',1I6)
403   FORMAT(' NODE NUMBER                     : ',1I6)
405   FORMAT(' WATER DEPTH                     : ',G16.7)
407   FORMAT(' CRITICAL EVOLUTION RATIO        : ',G16.7)
409   FORMAT(' MAXIMAL ALLOWED EVOLUTION       : ',G16.7)
411   FORMAT(' COMPUTED CUMULATED EVOLUTION    : ',G16.7)
413   FORMAT(' TIME                            : ',G16.7)
      !----------------------------------------------------------------!

!======================================================================!
!======================================================================!

      RETURN
      END

C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE REFERENCE CONCENTRATION AT Z= 2*D50
!>                USING ZYSERMAN AND FREDSOE FORMULATION (1994).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CHARR, CSTAEQ, HMIN, HN, NPOIN, QSC, TAUP, XMVE, ZERO, ZREF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CMAX, I, USTARP
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_BIJKER
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_TRANSPORT(), SUSPENSION_EROSION(), SUSPENSION_FLUX_MIXTE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.6                                       </center>
!> </td><td> 04/01/2005
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 14/04/2004
!> </td><td> C. VILLARET  01 30 87 83 28
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>AVA
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CHARR
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CSTAEQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>HCLIP
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSPRATIO
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TAUP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_BIJKER      !
     &  (TAUP, HN, NPOIN, CHARR, QSC, ZREF,
     &    ZERO, HMIN, CSTAEQ,XMVE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |-->| 
C| AVA            |-->| 
C| CF             |-->| 
C| CHARR          |-->| 
C| CSTAEQ         |---| 
C| FLUER          |---| 
C| GRAV           |-->| 
C| HCLIP          |-->| 
C| HMIN           |-->| 
C| HN             |---| 
C| KSPRATIO       |-->| 
C| NPOIN          |-->| 
C| QSC            |---| 
C| TAUP           |---| 
C| TOB            |-->| 
C| XMVE           |-->| 
C| XMVS           |-->| 
C| ZERO           |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_SUSPENSION_BIJKER => SUSPENSION_BIJKER
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: TAUP,QSC,HN
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZREF
      INTEGER,          INTENT(IN)    :: NPOIN
      LOGICAL,          INTENT(IN)    :: CHARR
      DOUBLE PRECISION, INTENT(IN)    :: HMIN,ZERO,XMVE
C
      TYPE(BIEF_OBJ),   INTENT(INOUT)   ::  CSTAEQ


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER                     :: I
      DOUBLE PRECISION            :: USTARP,CMAX
C
C     MAXIMUM CONCENTRATION CORRESPONDING TO DENSE PACKING
C
      DATA CMAX/0.6D0/
C
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      IF(.NOT.CHARR) THEN
        WRITE(LU,*) 'SUSPENSION_BIJKER ERROR ON CHARR'
        CALL PLANTE(1)
        STOP
      ENDIF
C
      DO I=1,NPOIN
C
        IF(TAUP%R(I).LE.ZERO) THEN
          CSTAEQ%R(I) = 0.D0
        ELSE
          USTARP=SQRT(TAUP%R(I)/XMVE)
          CSTAEQ%R(I) = QSC%R(I)/(6.34D0*USTARP*ZREF%R(I))
          CSTAEQ%R(I) = MIN(CSTAEQ%R(I),CMAX)
        ENDIF
C
      ENDDO

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE SUSPENSION_BIJKER
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       MASS-BALANCE FOR THE SUSPENSION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AGGLOT, CSF, CST, DT, ENTET, FLBORTRA, HN, IELMT, ITRA, LT, MASDEP, MASDEPT, MASED0, MASFIN, MASINI, MASKEL, MASSOU, MASTEN, MASTOU, MESH, MSK, NFRLIQ, NIT, NPTFR, NUMLIQ, T2, T3, VOLU2D, ZFCL_S
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> ERREUR, FLT_BOUND, FLUXT, I, IFRLIQ, PERDUE, P_DSUM, RELATI
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_BILAN
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> BIEF_SUM(), DOTS(), OS(), VECTOR()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 10/06/2008
!> </td><td>
!> </td><td> TRACER FLUX GIVEN BY FLBORTRA (FROM CVDFTR)
!> <br>      DELETED 13 ARGUMENTS
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 28/05/2008
!> </td><td>
!> </td><td> FLUX GIVEN BY BOUNDARIES
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 05/05/2008
!> </td><td>
!> </td><td> COMPUTES THE MASS ACCOUNTING FOR MASS-LUMPING
!> </td></tr>
!>      <tr>
!>      <td><center> 5.8                                       </center>
!> </td><td> 29/10/2007
!> </td><td> J-M HERVOUET
!> </td><td> CORRECTIONS IN PARALLEL MODE
!> </td></tr>
!>      <tr>
!>      <td><center> 5.6                                       </center>
!> </td><td> 22/12/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> **/05/2003
!> </td><td> M. GONZALES DE LINARES
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 13/12/2000
!> </td><td> C. MOULIN (LNH) 01 30 87 83 81
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AGGLOT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CST
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DISP_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTET
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBORTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HPROP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ITRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASDEP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASDEPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASED0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASFIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASINI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASSOU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASTEN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASTOU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NFRLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NIT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NUMLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLU2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_BILAN
     &(MESH,CST,HN,ZFCL_S,MASKEL,
     & IELMT,ITRA,LT,NIT,DT,CSF,
     & MASSOU,MASED0,MSK,ENTET,MASTEN,MASTOU,MASINI,T2,
     & T3,MASFIN,MASDEPT,MASDEP,AGGLOT,
     & VOLU2D,NUMLIQ,NFRLIQ,NPTFR,FLBORTRA)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AGGLOT         |---| 
C| CSF            |---| 
C| CST            |---| 
C| DISP_C         |---| 
C| DT             |---| 
C| ENTET          |---| 
C| FLBORTRA       |---| 
C| HN             |---| 
C| HPROP          |---| 
C| IELMT          |---| 
C| ITRA           |---| 
C| LT             |---| 
C| MASDEP         |---| 
C| MASDEPT        |---| 
C| MASED0         |---| 
C| MASFIN         |---| 
C| MASINI         |---| 
C| MASKEL         |---| 
C| MASSOU         |---| 
C| MASTEN         |---| 
C| MASTOU         |---| 
C| MESH           |---| 
C| MSK            |---| 
C| NFRLIQ         |---| 
C| NIT            |---| 
C| NPTFR          |---| 
C| NUMLIQ         |---| 
C| T2             |---| 
C| T3             |---| 
C| VOLU2D         |---| 
C| ZFCL_S         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_SUSPENSION_BILAN => SUSPENSION_BILAN
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: CST,HN,VOLU2D
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ZFCL_S,MASKEL,FLBORTRA
      INTEGER,          INTENT(IN)    :: IELMT,ITRA,LT,NIT,NFRLIQ,NPTFR
      INTEGER,          INTENT(IN)    :: NUMLIQ(NFRLIQ)
      DOUBLE PRECISION, INTENT(IN)    :: DT,CSF
      DOUBLE PRECISION, INTENT(IN)    :: MASSOU,MASED0,AGGLOT
      LOGICAL,          INTENT(IN)    :: MSK,ENTET
      DOUBLE PRECISION, INTENT(INOUT) :: MASTEN,MASTOU,MASINI
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T2,T3
      DOUBLE PRECISION, INTENT(INOUT) :: MASFIN,MASDEPT,MASDEP

      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER IFRLIQ,I
      DOUBLE PRECISION            :: ERREUR, PERDUE, RELATI, FLUXT
C     HERE 300 IS MAXFRO, THE MAXIMUM NUMBER OF LIQUID BOUNDARIES
      DOUBLE PRECISION FLT_BOUND(300)

      ! 4/ EXTERNAL FUNCTION
      ! --------------------
      DOUBLE PRECISION, EXTERNAL :: P_DSUM

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ************************************** !
      ! I - QUANTITY OF SEDIMENT IN SUSPENSION !
      ! ************************************** !
!
      IF(AGGLOT.GT.0.999999D0) THEN
C       ASSUMES HERE THAT AGGLOT=1.D0
        CALL OS('X=YZ    ',X=T2,Y=VOLU2D,Z=CST)
      ELSE
        CALL VECTOR(T2,'=','MASVEC          ',IELMT,
     &              1.D0-AGGLOT,CST,T3,T3,T3,T3,T3,MESH,MSK,MASKEL)
        CALL VECTOR(T3,'=','MASBAS          ',IELMT,
     &                   AGGLOT,T2,T2,T2,T2,T2,T2,MESH,MSK,MASKEL)
        CALL OS('X=X+YZ  ',X=T2,Y=T3,Z=CST)
      ENDIF
C
      MASFIN = DOTS(T2,HN)
      IF(NCSIZE.GT.1) MASFIN=P_DSUM(MASFIN)

      ! ************************** !
      ! II - TOTAL MASS OF DEPOSIT !
      ! ************************** !

      CALL VECTOR(T2, '=', 'MASVEC          ', IELMT, CSF, ZFCL_S, HN,
     &            HN, HN, HN, HN, MESH, MSK, MASKEL)
      MASDEPT = BIEF_SUM(T2)
      IF(NCSIZE.GT.1) MASDEPT = P_DSUM(MASDEPT)

      ! *************************************************** !
      ! III - TOTAL MASS OF DEPOSITED (OR ERODED) SEDIMENTS !
      ! *************************************************** !

      MASDEP = MASDEP + MASDEPT
C
C=======================================================================
C
C   COMPUTES THE FLUXES (NO DIFFUSIVE FLUX,...TO INVESTIGATE)
C
C=======================================================================
C
      FLUXT=0.D0
C
      IF(NFRLIQ.GT.0) THEN
        DO IFRLIQ=1,NFRLIQ
          FLT_BOUND(IFRLIQ)=0.D0
        ENDDO
        IF(NPTFR.GT.0) THEN
          DO I=1,NPTFR
C           NOTE: FLUX_BOUNDARIES COULD BE DEFINED BETWEEN 0 AND NFRLIQ
            IFRLIQ=NUMLIQ(I)
            IF(IFRLIQ.GT.0) THEN
              FLT_BOUND(IFRLIQ)=FLT_BOUND(IFRLIQ)+FLBORTRA%R(I)
            ENDIF
          ENDDO
        ENDIF
        IF(NCSIZE.GT.1) THEN
          DO IFRLIQ=1,NFRLIQ
            FLT_BOUND(IFRLIQ)=P_DSUM(FLT_BOUND(IFRLIQ))
          ENDDO
        ENDIF
        DO IFRLIQ=1,NFRLIQ
          FLUXT=FLUXT+FLT_BOUND(IFRLIQ)
        ENDDO
      ENDIF

      ! ********************************************** !
      ! VII - QUANTITY ENTERED THROUGH LIQUID BOUNDARY !
      ! ********************************************** !

      MASTEN = MASTEN - FLUXT * DT

      ! ************************************** !
      ! VIII - QUANTITY CREATED BY SOURCE TERM !
      ! ************************************** !

      MASTOU = MASTOU + MASSOU

      ! ***************************** !
      ! IX - RELATIVE ERROR ON VOLUME !
      ! ***************************** !
!
C CORRECTION JMH 17/03/05 : MISSING TERM
C                                         - MASDEPT
      ERREUR = MASINI + MASSOU - DT*FLUXT - MASDEPT - MASFIN
!
      IF (MASFIN > 1.D-8) ERREUR = ERREUR / MASFIN

      ! *********** !
      ! X - LISTING !
      ! *********** !

      IF(ENTET) THEN
        IF(LNG.EQ.1) THEN
          WRITE(LU,1005) ITRA,MASINI
          WRITE(LU,1100) ITRA,MASFIN
          IF(NFRLIQ.GT.0) THEN
            DO IFRLIQ=1,NFRLIQ
              WRITE(LU,1110) IFRLIQ,ITRA,-FLT_BOUND(IFRLIQ)
            ENDDO
          ENDIF
          IF (ABS(MASDEPT) > 1.D-8) WRITE(LU,1115) MASDEPT
          IF (ABS(MASSOU ) > 1.D-8) WRITE(LU,1116) MASSOU
          WRITE(LU,1120) ERREUR
        ELSEIF(LNG.EQ.2) THEN
          WRITE(LU,2005) ITRA,MASINI
          WRITE(LU,2100) ITRA,MASFIN
          IF(NFRLIQ.GT.0) THEN
            DO IFRLIQ=1,NFRLIQ
              WRITE(LU,2110) IFRLIQ,ITRA,-FLT_BOUND(IFRLIQ)
            ENDDO
          ENDIF
          IF(ABS(MASDEPT) > 1.D-8) WRITE(LU,2115) MASDEPT
          IF(ABS(MASSOU ) > 1.D-8) WRITE(LU,2116) MASSOU
          WRITE(LU,2120) ERREUR
        ENDIF
      ENDIF

      ! ************************************** !
      ! XI - LISTING OF THE FINAL MASS-BALANCE !
      ! ************************************** !

      IF(LT.EQ.NIT.AND.ENTET) THEN

         PERDUE = MASED0 + MASTEN + MASTOU - MASFIN - MASDEP
         RELATI = PERDUE
         IF(MAX(MASED0,MASFIN) > 1.D-10) THEN
           RELATI = RELATI / MAX(MASED0,MASFIN)
         ENDIF

         IF(LNG.EQ.1) THEN
            WRITE(LU,3000) ITRA
            WRITE(LU,1140) RELATI
            WRITE(LU,1160) ITRA, MASED0, MASFIN
            IF(ABS(MASTEN) > 1.D-8) WRITE(LU,1161) MASTEN
            IF(ABS(MASTOU) > 1.D-8) WRITE(LU,1164) MASTOU
            IF(ABS(MASDEP) > 1.D-8) WRITE(LU,1167) MASDEP
            WRITE(LU,1166) PERDUE
         ELSEIF(LNG.EQ.2) THEN
            WRITE(LU,3100) ITRA
            WRITE(LU,2140) RELATI
            WRITE(LU,2160) ITRA,MASED0, MASFIN
            IF(ABS(MASTEN) > 1.D-8) WRITE(LU,2161) MASTEN
            IF(ABS(MASTOU) > 1.D-8) WRITE(LU,2164) MASTOU
            IF(ABS(MASDEP) > 1.D-8) WRITE(LU,2167) MASDEP
            WRITE(LU,2166) PERDUE
         ENDIF
      ENDIF

      ! *************************** !
      ! XII - UPDATES INITIAL MASS  !
      ! *************************** !

      MASINI = MASFIN

      !----------------------------------------------------------------!
1005  FORMAT(1X,'QUANTITE DE LA CLASSE    ',I2
     &         ,' EN SUSPENSION AU TEMPS T    : ',G16.7,' M3')
1100  FORMAT(1X,'QUANTITE DE LA CLASSE    ',I2
     &         ,' EN SUSPENSION AU TEMPS T+DT : ',G16.7,' M3')
1110  FORMAT(1X,'FRONTIERE ',1I3,' FLUX TRACEUR ',1I2,' = ',G16.7,
     &          ' ( >0 : ENTRANT  <0 : SORTANT )')
1112  FORMAT(1X,'FLUX IMPOSE DE LA CLASSE ',I2
     &         ,'                             : ',G16.7,' M3/S')
1113  FORMAT(1X,'FLUX LIBRE  DE LA CLASSE ',I2
     &         ,'                             : ',G16.7,' M3/S')
1114  FORMAT(1X,'FLUX DE LA CLASSE        ',I2
     &         ,' PAR ONDE INCIDENTE          : ',G16.7,' M3/S')
1115  FORMAT(1X,'VOLUME DEPOSE SUR LE FOND  '
     &         ,'                             : ',G16.7,' M3')
1116  FORMAT(1X,'VOLUME CREE PAR TERME SOURCE  '
     &         ,   '                          : ',G16.7,' M3')
1120  FORMAT(1X,'ERREUR RELATIVE SUR LE VOLUME  '
     &         ,    '                         : ', G16.7)
1140  FORMAT(1X,'ERREUR RELATIVE CUMULEE SUR LE VOLUME : ', G16.7)
1160  FORMAT(1X,'QUANTITE INITIALE DE ',I2,'               : ',G16.7
     &         ,' M3',
     &     /,1X,'QUANTITE FINALE                       : ', G16.7,' M3')
1161  FORMAT(1X,'QUANTITE ENTREE AUX FRONT. LIQUID.    : ', G16.7,' M3')
1164  FORMAT(1X,'QUANTITE CREEE PAR TERME SOURCE       : ', G16.7,' M3')
1166  FORMAT(1X,'QUANTITE TOTALE PERDUE                : ', G16.7,' M3')
1167  FORMAT(1X,'VOLUME TOTAL DEPOSE SUR LE FOND       : ', G16.7,' M3')
3000  FORMAT(/,1X,'        *** ','BILAN FINAL DE LA CLASSE ',I2,' ***')
      !----------------------------------------------------------------!
2005  FORMAT(1X,'QUANTITY OF CLASS                 ',I2
     &         ,' IN SUSPENSION AT TIME T    : ',G16.7,' M3')
2100  FORMAT(1X,'QUANTITY OF CLASS                 ',I2
     &         ,' IN SUSPENSION AT TIME T+DT : ',G16.7,' M3')
2110  FORMAT(1X,'BOUNDARY ',1I3,' FLUX TRACER ',1I2,' = ',G16.7,
     &          ' ( >0 : ENTERING  <0 : EXITING )')
2112  FORMAT(1X,'PRESCRIBED SEDIMENT FLUX OF CLASS ',I2
     &         ,'                            : ',G16.7,' M3/S')
2113  FORMAT(1X,'FREE FLUX OF CLASS                ',I2
     &         ,'                            : ',G16.7,' M3/S')
2114  FORMAT(1X,'FLUX OF SEDIMENT CLASS            ',I2
     &         ,' ADDED BY INCIDENT WAVE     : ',G16.7,' M3/S')
2115  FORMAT(1X,'VOLUME OF DEPOSIT                   '
     &         ,'                            : ',G16.7, ' M3')
2116  FORMAT(1X,'VOLUME CREATED BY SOURCE TERM       '
     &         ,'                            : ',G16.7, ' M3')
2120  FORMAT(1X,'RELATIVE ERROR ON VOLUME            '
     &         ,'                            : ',G16.7)
2140  FORMAT(1X,'RELATIVE ERROR CUMULATED ON VOLUME : ', G16.7       )
2160  FORMAT(1X,'INITIAL QUANTITY OF ',I2,'           : '  , G16.7
     &         ,' M3',
     &     /,1X,'FINAL QUANTITY                     : ', G16.7, ' M3')
2161  FORMAT(1X,'QUANTITY ENTERED THROUGH LIQ. BND. : ', G16.7, ' M3')
2164  FORMAT(1X,'QUANTITY CREATED BY SOURCE TERM    : ', G16.7, ' M3')
2166  FORMAT(1X,'TOTAL QUANTITY LOST                : ', G16.7, ' M3')
2167  FORMAT(1X,'TOTAL MASS OF DEPOSIT              : ', G16.7, ' M3')
3100  FORMAT(/,1X,'      *** ','FINAL BALANCE FOR TRACER',I2,' ***')
      !----------------------------------------------------------------!

!======================================================================!
!======================================================================!

      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       MAIN SUBROUTINE FOR THE COMPUTATION OF THE
!>                CONCENTRATION AND THE ELEVATION SOLVING THE EQUATION :
!>  @code
!>      D(ZF)
!>      ----  + DIV(QS) + (E-D)ZA = 0
!>      DT
!>  @endcode

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  IF COUPLING, DIV(QS) ALREADY COMPUTED
!>         ELSE,        DIV(QS) = 0

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AFBOR, AM1_S, AM2_S, AVA, AVAIL, BFBOR, BILMA, CBOR, CF, CHARR, CLT, CODE, CONC_VASE, CORR_CONV, CS, CSF_SABLE, CSF_VASE, CST, CSTAEQ, CTILD, DEBUG, DIFT, DISP, DISP_C, DM1, DT, ELAY, ENTET, ENTETS, ES, FLBORTRA, FLBOR_SIS, FLBOR_TEL, FLUDP, FLUDPT, FLUER, FLUER_VASE, GRAV, HMIN, HN, HN_TEL, HPROP, ICQ, IELMT, IFAMAS, IMP_INFLOW_C, IT1, IT2, IT3, IT4, ITRA, KARMAN, KDDL, KDIR, KENT, KINC, KLOG, KNEU, KSORT, KSP, KSR, LICBOR, LIMDIF, LT, MASDEP, MASDEPT, MASED0, MASFIN, MASINI, MASKEL, MASKPT, MASKTR, MASSOU, MASTEN, MASTOU, MBOR, MESH, MIXTE, MSK, MS_SABLE, MS_VASE, MU, NCOUCH_TASS, NFRLIQ, NIT, NPOIN, NPTFR, NSICLA, NUMLIQ, OPDTRA, OPTBAN, OPTSUP, PARTHENIADES, QS_C, RESOL, S, SEDCO, SLVTRA, SOLSYS, T1, T10, T11, T12, T2, T3, T4, T5, T6, T7, T8, T9, TASS, TB, TE1, TE2, TE3, TETA_SUSP, TOB, TOCE_MIXTE, TOCE_VASE, U2D, UCONV, UCONV_TEL, UNSV2D, V2D, V2DPAR, VCONV, VCONV_TEL, VITCD, VITCE, VOLU2D, W1, XMVE, XMVS, XWC, ZCONV, ZERO, ZF, ZFCL_S, ZREF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AGGLOT, BID, CSF, HOLD, I, K, OPTVF, RESOL_MOD, SAVE_UCONV, SAVE_VCONV, SOLSYS_SIS, TETAH, YASMI2
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_COMPUTATION, HOLD, SAVE_UCONV, SAVE_VCONV
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> CHARAC(), CPSTVC(), CVDFTR(), DIFFIN(), IELBOR(), OS(), OSBD(), SUSPENSION_BILAN(), SUSPENSION_CONV(), SUSPENSION_DEPOT(), SUSPENSION_EROSION(), SUSPENSION_EROSION_COH(), SUSPENSION_EVOL(), SUSPENSION_FLUX_MIXTE(), SUSPENSION_LISTING(), VECTOR()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_MAIN()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 05/04/2010
!> </td><td>
!> </td><td> CSTAEQ TAKES INTO ACCOUNT THE % OF LAYER QQ OR THE SELECTED FORMULATION
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 16/09/2009
!> </td><td>
!> </td><td> AVAIL(NPOIN,10,NSICLA)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 31/07/2008
!> </td><td>
!> </td><td> CALLS SUSPENSION_FLUX SPLIT IN 2 : DEPOSITION + EROSION
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 25/06/2008
!> </td><td>
!> </td><td> CALLS DIFFIN (USED TO BE IN SUSPENSION_MAIN)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 12/06/2008
!> </td><td>
!> </td><td> SECTIONS "TREATING SMALL DEPTHS" AND
!>          "LIMITATION OF FLUER..." SWAPPED ROUND
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 09/06/2008
!> </td><td>
!> </td><td> NEW SUSPENSION_BILAN WITH FLBORTRA GIVEN BY CVDFTR
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 28/05/2008
!> </td><td>
!> </td><td> NEW SUSPENSION_BILAN WITH FLUXES THROUGH BOUNDARIES
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 09/05/2008
!> </td><td>
!> </td><td> FLUDP REMOVED FROM SUSPENSION_FLUX, SUSPENSION_NERBED DELETED
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 05/05/2008
!> </td><td>
!> </td><td> ADAPTED FOR FINITE VOLUME ADVECTION
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 10/11/2010
!> </td><td> JMH:
!> </td><td> ENTET CHANGED INTO ENTETS IN THE CALL TO CVDFTR
!> </td><td> LISTING ONLY FOR THE LAST SUB-ITERATION. ENTET NO LONGER USED
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 22/12/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AFBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AM1_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AM2_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BFBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BILMA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CHARR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CLT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CODE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CONC_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CORR_CONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSF_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSF_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CST
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSTAEQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CTILD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DIFT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DISP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DISP_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTET
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTETS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBORTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBOR_SIS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBOR_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUDP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUDPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HPROP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IFAMAS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IMP_INFLOW_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ITRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDDL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDIR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KINC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KLOG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KNEU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSORT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LICBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIMDIF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASDEP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASDEPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASED0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASFIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASINI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKTR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASSOU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASTEN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASTOU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MIXTE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NFRLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NIT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NUMLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPDTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTBAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTSUP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PARTHENIADES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>RESOL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SEDCO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLVTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SOLSYS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T11
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T12
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T5
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T6
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TE1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TE2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TE3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETA_SUSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOCE_MIXTE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOCE_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCONV_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2DPAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCONV_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLU2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>W1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_COMPUTATION
     &  (SLVTRA, HN,HN_TEL,UCONV, VCONV,  CF, MU,TOB,ACLADM, KSP,KSR,KS,
     &   ELAY, AVA, AFBOR, BFBOR, LIMDIF, CLT, MASKEL, MASKTR,
     &   MASKPT, IFAMAS, NPOIN, IELMT, NPTFR, ITRA, LT, NIT, RESOL,
     &   OPTBAN, KENT,KDDL,KDIR,KSORT,KLOG,KINC,KNEU,
     &   OPTSUP, OPDTRA, DEBUG, CSF_VASE,CSF_SABLE,
     &   TETA_SUSP, DT, MASED0, ZERO, XWC, KARMAN, XMVE, XMVS, GRAV,
     &   HMIN, VITCD, VITCE,PARTHENIADES, ENTETS,
     &   ENTET,BILMA,MSK,CHARR,IMP_INFLOW_C,MESH,ZF,CS,
     &   CST,CTILD,CBOR,DISP,IT1,IT2,IT3,IT4,TB,T1,T2,T3,
     &   T4, T5, T6, T7, T8, T9, T10, T11, T12, W1, TE1, TE2, TE3, S,
     &   AM1_S, AM2_S, MBOR,MASTEN, MASTOU, MASINI, AC,
     &   ZFCL_S, FLUDPT, FLUDP, FLUER, HPROP, DISP_C, CSTAEQ,
     &   MASFIN, MASDEPT, MASDEP, MASSOU,QS_C,ICQ,ZREF,
     &   CORR_CONV,U2D,V2D,SEDCO,DIFT,
     &   DM1,ZCONV,UCONV_TEL,VCONV_TEL,SOLSYS,FLBOR_TEL,FLBOR_SIS,
     &   FLBORTRA,CODE,
     &   VOLU2D,V2DPAR,UNSV2D,NUMLIQ,NFRLIQ,LICBOR,MIXTE,AVAIL,NSICLA,
     &   ES,NCOUCH_TASS,CONC_VASE,TOCE_VASE,
     &   FLUER_VASE,TOCE_MIXTE,MS_SABLE,MS_VASE,TASS)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AFBOR          |---| 
C| AM1_S          |---| 
C| AM2_S          |---| 
C| AVA            |---| 
C| AVAIL          |---| 
C| BFBOR          |---| 
C| BILMA          |---| 
C| CBOR           |---| 
C| CF             |---| 
C| CHARR          |---| 
C| CLT            |---| 
C| CODE           |---| 
C| CONC_VASE      |---| 
C| CORR_CONV      |---| 
C| CS             |---| 
C| CSF_SABLE      |---| 
C| CSF_VASE       |---| 
C| CST            |---| 
C| CSTAEQ         |---| 
C| CTILD          |---| 
C| DEBUG          |---| 
C| DIFT           |---| 
C| DISP           |---| 
C| DISP_C         |---| 
C| DM1            |---| 
C| DT             |---| 
C| ELAY           |---| 
C| ENTET          |---| 
C| ENTETS         |---| 
C| ES             |---| 
C| FLBORTRA       |---| 
C| FLBOR_SIS      |---| 
C| FLBOR_TEL      |---| 
C| FLUDP          |---| 
C| FLUDPT         |---| 
C| FLUER          |---| 
C| FLUER_VASE     |---| 
C| GRAV           |---| 
C| HMIN           |---| 
C| HN             |---| 
C| HN_TEL         |---| 
C| HPROP          |---| 
C| ICQ            |---| 
C| IELMT          |---| 
C| IFAMAS         |---| 
C| IMP_INFLOW_C   |---| 
C| IT1            |---| 
C| IT2            |---| 
C| IT3            |---| 
C| IT4            |---| 
C| ITRA           |---| 
C| KARMAN         |---| 
C| KDDL           |---| 
C| KDIR           |---| 
C| KENT           |---| 
C| KINC           |---| 
C| KLOG           |---| 
C| KNEU           |---| 
C| KSORT          |---| 
C| KSP            |---| 
C| KSR            |---|
C  KS             |---| 
C| LICBOR         |---| 
C| LIMDIF         |---| 
C| LT             |---| 
C| MASDEP         |---| 
C| MASDEPT        |---| 
C| MASED0         |---| 
C| MASFIN         |---| 
C| MASINI         |---| 
C| MASKEL         |---| 
C| MASKPT         |---| 
C| MASKTR         |---| 
C| MASSOU         |---| 
C| MASTEN         |---| 
C| MASTOU         |---| 
C| MBOR           |---| 
C| MESH           |---| 
C| MIXTE          |---| 
C| MSK            |---| 
C| MS_SABLE       |---| 
C| MS_VASE        |---| 
C| MU             |---| 
C| NCOUCH_TASS    |---| 
C| NFRLIQ         |---| 
C| NIT            |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| NSICLA         |---| 
C| NUMLIQ         |---| 
C| OPDTRA         |---| 
C| OPTBAN         |---| 
C| OPTSUP         |---| 
C| PARTHENIADES   |---| 
C| QS_C           |---| 
C| RESOL          |---| 
C| S             |---| 
C| SEDCO          |---| 
C| SLVTRA         |---| 
C| SOLSYS         |---| 
C| T1             |---| 
C| T10            |---| 
C| T11            |---| 
C| T12            |---| 
C| T2             |---| 
C| T3             |---| 
C| T4             |---| 
C| T5             |---| 
C| T6             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| TASS           |---| 
C| TB             |---| 
C| TE1            |---| 
C| TE2            |---| 
C| TE3            |---| 
C| TETA_SUSP      |---| 
C| TOB            |---| 
C| TOCE_MIXTE     |---| 
C| TOCE_VASE      |---| 
C| U2D            |---| 
C| UCONV          |---| 
C| UCONV_TEL      |---| 
C| UNSV2D         |---| 
C| V2D            |---| 
C| V2DPAR         |---| 
C| VCONV          |---| 
C| VCONV_TEL      |---| 
C| VITCD          |---| 
C| VITCE          |---| 
C| VOLU2D         |---| 
C| W1             |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZCONV          |---| 
C| ZERO           |---| 
C| ZF             |---| 
C| ZFCL_S         |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_SUSPENSION_COMPUTATION => SUSPENSION_COMPUTATION
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE (SLVCFG),    INTENT(INOUT) :: SLVTRA
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZF,VOLU2D,V2DPAR,UNSV2D
      TYPE (BIEF_OBJ),  INTENT(IN), TARGET    :: HN,HN_TEL
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: UCONV,VCONV
      TYPE (BIEF_OBJ),  INTENT(IN)    :: MU,KSP,KSR,KS
      TYPE (BIEF_OBJ),  INTENT(IN)    :: CF,TOB,ACLADM,ELAY,LICBOR
      TYPE (BIEF_OBJ),  INTENT(IN)    :: AFBOR,BFBOR
      TYPE (BIEF_OBJ),  INTENT(IN)    :: MASKEL,MASKPT,IFAMAS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MASKTR,LIMDIF,CLT
      INTEGER,          INTENT(IN)    :: NPOIN,IELMT,NPTFR,ITRA,LT
      INTEGER,          INTENT(IN)    :: NIT,RESOL,OPTBAN,KENT,KDDL
      INTEGER,          INTENT(IN)    :: KDIR,OPTSUP,OPDTRA,SOLSYS
      INTEGER,          INTENT(IN)    :: KSORT,KLOG,KINC,KNEU
      INTEGER,          INTENT(IN)    :: NFRLIQ,NSICLA,NCOUCH_TASS
      INTEGER,          INTENT(IN)    :: DEBUG
      INTEGER,          INTENT(IN)    :: NUMLIQ(NFRLIQ)
      DOUBLE PRECISION, INTENT(IN)    :: CSF_VASE, TETA_SUSP, DT, MASED0
      DOUBLE PRECISION, INTENT(IN)    :: ZERO, XWC, CSF_SABLE,AVA(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN, XMVE, XMVS, GRAV, HMIN
      DOUBLE PRECISION, INTENT(IN)    :: VITCD,VITCE,PARTHENIADES
      LOGICAL,          INTENT(IN)    :: ENTETS,ENTET,BILMA,MSK,SEDCO
      LOGICAL,          INTENT(IN)    :: CHARR, IMP_INFLOW_C,CORR_CONV
      LOGICAL,          INTENT(IN)    :: DIFT,MIXTE, TASS
      TYPE (BIEF_MESH), INTENT(INOUT) :: MESH
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: CS,CST,CTILD,CBOR,FLBOR_SIS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DISP,IT1,IT2,IT3,IT4,TB
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T2, T3, T4, T5, T6, T7, T8
      TYPE (BIEF_OBJ),  INTENT(INOUT), TARGET :: T1
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T9, T10, T11, T12, W1, TE1
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: TE2, TE3, S, AM1_S, AM2_S
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MBOR,ZREF
      DOUBLE PRECISION, INTENT(INOUT) :: MASTEN, MASTOU, MASINI, AC
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZFCL_S
      TYPE (BIEF_OBJ),  INTENT(IN)    :: UCONV_TEL,VCONV_TEL
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUDPT,FLUDP,FLUER,FLBORTRA
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: HPROP, DISP_C, CSTAEQ
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER_VASE,TOCE_MIXTE
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MS_SABLE,MS_VASE
      DOUBLE PRECISION, INTENT(INOUT) :: MASFIN, MASDEPT, MASDEP
      DOUBLE PRECISION, INTENT(INOUT) :: MASSOU,AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(INOUT) :: CONC_VASE(10),TOCE_VASE(10)
      TYPE (BIEF_OBJ),  INTENT(IN)    :: QS_C,U2D,V2D,DM1,ZCONV
      TYPE (BIEF_OBJ),  INTENT(IN)    :: FLBOR_TEL
      INTEGER,          INTENT(IN)    :: ICQ
      CHARACTER(LEN=24), INTENT(IN)   :: CODE
C
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C 3/ LOCAL VARIABLES
! ------------------
!
      INTEGER          :: I,K,SOLSYS_SIS,OPTVF,BID(1),RESOL_MOD
      DOUBLE PRECISION :: TETAH,AGGLOT
      DOUBLE PRECISION :: CSF
      LOGICAL YASMI2
      TYPE (BIEF_OBJ),  POINTER :: HOLD
      DOUBLE PRECISION, POINTER, DIMENSION(:) :: SAVE_UCONV,SAVE_VCONV
      SAVE_UCONV=>UCONV%R
      SAVE_VCONV=>VCONV%R
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C     JMH 18/04/2008 :
C
C     TAKES DETAILS OF THE CONTINUITY EQUATION INTO ACCOUNT
C     IN TELEMAC-2D OR 3D, WITH SOLSYS=2, DM1 AND ZCONV ARE USED BUT
C     ARE NOT YET BUILT WHEN SISYPHE IS CALLED AT THE FIRST TIME STEP
C     WHAT'S MORE, UCONV_TEL AND VCONV_TEL ARE THEN DIFFERENT FROM
C     U2D AND V2D
!
      SOLSYS_SIS=1
      IF(LT.NE.1.AND.CODE(1:7).EQ.'TELEMAC') SOLSYS_SIS=SOLSYS
C     SEE FURTHER DOWN A MODIFICATION TO SOLSYS_SIS : IF(CORR_CONV)...
!
!
!
C THREE OPTIONS : ICQ=1: FREDSOE REFERENCE CONC. ZREF = 2.D50
C               ICQ=2: BIJKER METHOD ZREF = MAX(KSP,KS)
!               ICQ= 3: VAN RIJN ZREF= 0.5 KS
!
C     COMPUTES THE REFERENCE ELEVATION  -->  ZREF
!
        IF(ICQ.EQ.1) CALL OS('X=Y     ', X=ZREF, Y=KSP)
        IF(ICQ.EQ.2) CALL OS('X=Y     ', X=ZREF, Y=KSR)
! Nicolas Huybrechts Oct 2010  
        IF(ICQ.EQ.3) CALL OS('X=CY     ', X=ZREF, Y=KS,C=0.5D0)    
!       fin modif NH
!
C     COMPUTES THE ADVECTION VELOCITIES
C     TAKING INTO ACCOUNT THE VERTICAL PROFILE OF CONCENTRATIONS AND VELOCITIES
!
C     OPTVF : TENS                  0 : NORMAL
C                                   1 : ADVECTION FIELD DOES NOT SATISFY
C                                       CONTINUITY
!
C     OPTVF : UNITS                 0 : CONSTANT = 0
C                                   1 : CHI-TUAN CONSTANT
C                                   2 : LEO POSTMA CONSTANT
C                                   SEE CVTRVF IN BIEF AND
C                                   V5.7 RELEASE NOTES
!
!
      IF(CORR_CONV.AND.(.NOT.SEDCO)) THEN
!
C        TEMPORARILY USES U2D AND V2D HERE
C        EVEN THOUGH SOLSYS_TEL=2 BECAUSE SHOULD ALSO CORRECT DM1
         SOLSYS_SIS=1
         CALL CPSTVC(U2D,T12)
         CALL SUSPENSION_CONV(TOB,XMVE, KSR,NPOIN,ZREF,U2D,V2D,HN,HMIN,
     &                        UCONV,VCONV,KARMAN,ZERO,XWC,T1,T12)
C        ADVECTION FORM WHICH ACCEPTS AN ADVECTION FIELD
C        THAT DOES NOT SATISFY CONTINUITY + CHI-TUAN CONSTANT
         OPTVF=11
!
      ELSE
!
C       POINTERS ARE USED TO AVOID COPY
!
        IF(SOLSYS_SIS.EQ.1) THEN
          UCONV%R=>U2D%R
          VCONV%R=>V2D%R
        ELSE
C         HERE UCONV_TEL WAS PASSED ON
          UCONV%R=>UCONV_TEL%R
          VCONV%R=>VCONV_TEL%R
        ENDIF
C        ADVECTION FORM THAT REQUIRES AN ADVECTION FIELD
C        THAT SATISFIES CONTINUITY + CHI-TUAN CONSTANT
         OPTVF=1
!
      ENDIF
!
C     ADVECTION WITH CHARACTERISTICS
!
      IF(RESOL == 1) THEN
         IF (DEBUG > 0) WRITE(LU,*) 'CHARAC'
         CALL CHARAC(CS,CTILD,1,UCONV,VCONV,S,S,DT,IFAMAS,
     &          IELMT, NPOIN,1,1,MSK,MASKEL,AM1_S%X,AM1_S%D,
     &               TB,IT1%I,IT2%I,IT3%I,IT4%I,
     &               MESH,MESH%NELEM,MESH%NELMAX,MESH%IKLE,
     &               MESH%SURDET)
         IF (DEBUG > 0) WRITE(LU,*) 'END_CHARAC'
      ENDIF
!
C     FLUX COMPUTATION AT TIME N (CALLED FOR THE FIRST CLASS
C                                     WHICH MUST BE THE SAND)
!
C DEPOSITION IS TREATED THE SAME WAY FOR MIXES OR SEDIMENTS ALONE
C!---> T2: RATION BETWEEN BOTTOM CONCENTRATION AND AVERAGE
C          CONCENTRATION
!

      IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_DEPOT'
      CALL SUSPENSION_DEPOT(TOB, HN,ACLADM,NPOIN, HMIN,XWC,
     &  VITCD, ZERO,KARMAN,XMVE,T1,T2,ZREF,FLUDPT,DEBUG,SEDCO)
!
! +++++++++++++++++++++++++++++
C EROSION IS TREATED DIFFERENTLY : TASS PASSED IN ARGUMENT
C SKIN FRICTION TAUP  --> T4
!
      CALL OS('X=CYZ   ', X= T4, Y= TOB, Z= MU, C=1.D0)
      CALL OS('X=+(Y,C)', X=T4, Y=T4, C=ZERO)
C V6P0 CV MODIFICATIONS
      IF(.NOT.MIXTE) THEN
        IF(.NOT.SEDCO) THEN
         IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_EROSION'
          CALL SUSPENSION_EROSION(T4,HN,ACLADM,AVA,
     &     NPOIN,CHARR,XMVE,XMVS,GRAV,HMIN,XWC,ZERO,
     &     ZREF,AC,FLUER,CSTAEQ,QS_C,ICQ,DEBUG)
         IF (DEBUG > 0) WRITE(LU,*) 'END_SUSPENSION_EROSION'
!
C THIS SHOULD BE INCLUDED IN SUSPENSION_EROSION
!
         DO I=1,NPOIN
           FLUER%R(I)=MIN(FLUER%R(I),ELAY%R(I)*AVA(I)/DT*CSF_SABLE)
         ENDDO
!
C MUD ONLY : NEW SUBROUTINE
!
        ELSE
          CALL  SUSPENSION_EROSION_COH (T4,NPOIN,
     &       XMVE,XMVS,GRAV, VITCE, PARTHENIADES,ZERO, DEBUG,
     &      FLUER, ES, TOCE_VASE, NCOUCH_TASS, DT, MS_VASE%R,TASS)
!
          IF(.NOT.TASS) THEN
            DO I=1,NPOIN
              FLUER%R(I)=MIN(FLUER%R(I),ELAY%R(I)*CSF_VASE/DT)
            ENDDO
          ENDIF
        ENDIF
C MIXED SEDIMENT
       ELSE
C         CSF=CSF_VASE ! DEFINED IN MIXED SEDIMENT
         IF(.NOT.SEDCO) THEN
          IF(DEBUG > 0) WRITE(LU,*) 'SUSPENSION_FLUX_MIXTE'
          CALL SUSPENSION_FLUX_MIXTE(T4,HN,ACLADM,CS,
     &         NPOIN,CHARR,XMVE,XMVS,GRAV,HMIN,XWC,
     &         ZERO,KARMAN,PARTHENIADES,FLUER,
     &         FLUER_VASE,ZREF,AC,CSTAEQ,QS_C,ICQ,DEBUG,
     &         AVAIL,NSICLA,ES,TOCE_VASE,NCOUCH_TASS,DT,
     &         TOCE_MIXTE%R,MS_SABLE%R,MS_VASE%R)
          IF (DEBUG > 0) WRITE(LU,*) 'END_SUSPENSION_FLUX_MOY'
        ENDIF
        IF(SEDCO) CALL OS('X=Y     ',X=FLUER, Y=FLUER_VASE)
      ENDIF
!
C ....END OF MODIFICATION FOR MIXED SEDIMENTS
!
C     TREATS SMALL DEPTHS
!
      IF(OPTBAN.EQ.1) THEN
        DO I = 1, NPOIN
          IF(HN%R(I).LE.HMIN) THEN
            FLUDPT%R(I)=0.D0
            FLUER%R(I) =0.D0
          ENDIF
        ENDDO
      ELSEIF(OPTBAN.EQ.2) THEN
        CALL OS('X=XY    ',X=FLUER ,Y=MASKPT)
        CALL OS('X=XY    ',X=FLUDPT,Y=MASKPT)
      ENDIF
!
C     IMPLICIT SOURCE TERM FOR THE DEPOSITION
!
      CALL OS('X=-Y    ',X=T9,Y=FLUDPT)
!
C     EXPLICIT SOURCE TERM WITHOUT PUNCTUAL SOURCES
!
      CALL OS('X=Y     ',X=T11,Y=FLUER)
!
      DO I=1,NPOIN
        IF(HN%R(I).GT.HMIN) THEN
          T11%R(I)=T11%R(I)/HN%R(I)
        ELSE
          T11%R(I)=0.D0
        ENDIF
      ENDDO
!
C     JMH: 01/08/2005
C     IN DIFFIN A SPECIFIC TREATMENT IS DONE IF THE ADVECTION METHOD
C     IS THE CHARACTERISTICS: FREE OUTPUTS ARE TREATED LIKE DIRICHLET.
C     THIS SPECIFIC TREATMENT IS CANCELLED HERE BY SENDING A MODIFIED
C     VALUE FOR RESOL : RESOL_MOD (IN DIFFIN THE ONLY TEST IS:
C     IF(RESOL.EQ.1) THEN .... ELSE ....  ENDIF)
!
      RESOL_MOD=RESOL
      IF(RESOL_MOD.EQ.1) RESOL_MOD=2
      CALL DIFFIN(MASKTR,LIMDIF%I,LICBOR%I,CLT%I,U2D%R,V2D%R,
     &            MESH%XNEBOR%R,MESH%YNEBOR%R,
     &            MESH%NBOR%I,MESH%KP1BOR%I,NPTFR,
     &            KENT,KSORT,KLOG,KINC,KNEU,KDIR,KDDL,RESOL_MOD,
     &            MESH%NELBOR%I,NPOIN,MESH%NELMAX,
     &            MSK,MASKEL%R,0,
     &            .FALSE.,BID,BID,BID,CS,CBOR,MESH)
!
C     IMPOSES THE EQUILIBRIUM CONCENTRATION FOR THE INFLOW NODES  !
C     HERE CBOR FROM BOUNDARY CONDITIONS FILE OR SUBROUTINE CONLIT
C     OVERWRITTEN
!
C     T2 = RATIO BETWEEN BOTTOM CONC. AND AVERAGE CONC. MUST BE KEPT UNTIL THIS STAGE
!
      IF(IMP_INFLOW_C) THEN
!
        DO K = 1, NPTFR
          IF(CLT%I(K).EQ.KENT) THEN
            I = MESH%NBOR%I(K)
            IF(.NOT.SEDCO) THEN
CV SEE MODIFICATIONS IN SUSPENSION_EROSION
CV               CBOR%R(K) = CSTAEQ%R(I)/T2%R(I)*AVA(I)
               CBOR%R(K) = CSTAEQ%R(I)/T2%R(I)
               IF(MIXTE) CBOR%R(K) = FLUER%R(I)/T2%R(I)/XWC
            ELSE
               CBOR%R(K) = FLUER%R(I)/XWC
            ENDIF
          ENDIF
        ENDDO
!
      ENDIF
!
!
C     ADVECTION-DISPERSION STEP
!
C     CONFIGURATION TO CALL CVDFTR
!
      TETAH  = 1.D0 - TETA_SUSP
      MASSOU = 0.D0
      AGGLOT=1.D0
      YASMI2 = .TRUE.
!
C     BOUNDARY FLUXES MUST BE SPECIFIED TO CVDFTR (FINITE VOLUMES CASE)
C     AND TO SUSPENSION_BILAN
C     SISYPHE ALONE     : THEY MUST BE COMPUTED
C     WHEN COUPLING     : THEY ARE GIVEN BY THE CALLING SUBROUTINE
C                         EXCEPT AT THE 1ST ITERATION
!
      IF(CODE(1:7).NE.'TELEMAC'.OR.LT.EQ.1) THEN
        CALL VECTOR(FLBOR_SIS,'=','FLUBDF          ',IELBOR(IELMT,1),
C                        HPROP (HERE HPROP=HN, INVESTIGATE)
     &              1.D0,HN   ,HN,HN,UCONV,VCONV,VCONV,
     &              MESH,.FALSE.,MASKPT)
      ELSE
        CALL OS('X=Y     ',X=FLBOR_SIS,Y=FLBOR_TEL)
C       MUST ALSO CHANGE BOUNDARY FLUXES IF THE ADVECTION
C       FIELD IS CORRECTED (T12 MUST HAVE BEEN KEPT SINCE
C       CALL TO SUSPENSION_CONV)
        IF(CORR_CONV.AND.(.NOT.SEDCO)) THEN
          CALL OSBD('X=CXY   ',FLBOR_SIS,T12,T12,1.D0,MESH)
        ENDIF
      ENDIF
!
C     FINITE VOLUMES ADVECTION USES THE TRUE H FROM THE PREVIOUS STEP
      IF(CODE(1:7).EQ.'TELEMAC') THEN
        IF(OPTBAN.NE.0) THEN
          CALL CPSTVC(CST,T1)
C         HN_TEL IS NOT CLIPPED
          DO I=1,NPOIN
            T1%R(I)=MAX(HN_TEL%R(I),HMIN)
          ENDDO
          HOLD=>T1
        ELSE
          HOLD=>HN_TEL
        ENDIF
      ELSE
C       IN THIS CASE H AND HN ARE CONFUSED
        HOLD=>HN
      ENDIF
!
      IF (DEBUG > 0) WRITE(LU,*) 'APPEL DE CVDFTR'
      CALL CVDFTR
     & (CST, CTILD, CS, T2,
C                            H         HTILD
     &  DIFT, RESOL, .TRUE., HN, HOLD, HPROP, TETAH,
     &  UCONV,VCONV,DM1,ZCONV,SOLSYS_SIS,
C                     TEXP SMH  YASMH   TIMP
     &  DISP, DISP_C, T11, T2, .FALSE., T9,  YASMI2,AM1_S,AM2_S,
     &  ZF, CBOR, AFBOR, BFBOR, LIMDIF, MASKTR, MESH,
     &  W1, TB, T8, T12, T3, T4, T5, T6, T7, T10, TE1, TE2, TE3,
C                                                       BILMAS
     &  KDIR,KDDL,KENT,DT,ENTETS,TETA_SUSP,
     &  AGGLOT,ENTETS,.FALSE.,OPTSUP,
     &  1, LT, NIT, OPDTRA, OPTBAN, MSK, MASKEL, MASKPT, MBOR, S,
C               OPTSOU
     &  MASSOU, 1,     SLVTRA,FLBOR_SIS,V2DPAR,UNSV2D,OPTVF,FLBORTRA)
      IF (DEBUG > 0) WRITE(LU,*) 'END_CVDFTR'
!
      DO I=1,NPOIN
        FLUDP%R(I)=FLUDPT%R(I)*CST%R(I)
      ENDDO
!
C     COMPUTES EVOLUTION AND UPDATES DATA
C     TASS TO BE PASSED IN ARGUMENT
!
C      IF(.NOT.MIXTE.AND..NOT.TASS) THEN
C        CALL OS('X=Y-Z   ', X=ZFCL_S, Y=FLUDP, Z=FLUER)
C        CALL OS('X=CX    ', X=ZFCL_S, C=DT/CSF)
C      ELSE
C        CALL SIS_ERODE(ZFCL_S, FLUDP, FLUER,DT,
C     *                 NPOIN,XMVS,XKV, T3,SEDCO,
C     *                 CONC_VASE,NCOUCH_TASS,
C     *                 MS_SABLE%R,MS_VASE%R)
C      ENDIF
       IF(.NOT.SEDCO) THEN
          CALL SUSPENSION_EVOL(ZFCL_S, FLUDP, FLUER,DT,
     &                 NPOIN,CSF_SABLE, XMVS,T3,MS_SABLE%R,
     &                 SEDCO,CONC_VASE,NCOUCH_TASS)
       ELSE
          CALL SUSPENSION_EVOL(ZFCL_S, FLUDP, FLUER,DT,
     &                 NPOIN,CSF_VASE,XMVS, T3,MS_VASE%R,
     &                 SEDCO,CONC_VASE,NCOUCH_TASS)
       ENDIF
!
C     WRITES OUT THE MIN/MAX VALUES TO THE LISTING
!
      IF (ENTETS) THEN
         IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_LISTING'
         CALL SUSPENSION_LISTING
     &        (MESH,CST,ZFCL_S,UCONV,VCONV,MASKEL,
     &         IELMT,DT,MSK,T1)
         IF (DEBUG > 0) WRITE(LU,*) 'END_SUSPENSION_LISTING'
      ENDIF
!
C     MASS-BALANCE FOR THE SUSPENSION
!
      IF(BILMA) THEN
         IF (SEDCO) CSF = CSF_VASE
         IF(.NOT.SEDCO) CSF = CSF_SABLE
         IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_BILAN'
         CALL SUSPENSION_BILAN
     &        (MESH,CST,HN,ZFCL_S,MASKEL,IELMT,ITRA,LT,NIT,
     &         DT,CSF,MASSOU,MASED0,MSK,ENTETS,MASTEN,MASTOU,
     &         MASINI,T2,T3,MASFIN,MASDEPT,MASDEP,AGGLOT,VOLU2D,
     &         NUMLIQ,NFRLIQ,NPTFR,FLBORTRA)
         IF (DEBUG > 0) WRITE(LU,*) 'END_SUSPENSION_BILAN'
      ENDIF
!
      UCONV%R=>SAVE_UCONV
      VCONV%R=>SAVE_VCONV
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       CORRECTS U2D, V2D VELOCITIES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ALPHA, HMIN, HN, KARMAN, KSR, NPOIN, T1, TOB, U2D, UCONV, V2D, VCONV, XMVE, XWC, ZERO, ZREF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> A, AUX, B, I, I1, I2, LAUX, LL, R1, ROUSE, USTAR
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_TRANSPORT(), SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 02/05/2008
!> </td><td>
!> </td><td> ADDED ALPHA IN ARGUMENT, TO KEEP A RECORD OF THE
!>           CORRECTION COEFFICIENT
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 01/08/2006
!> </td><td> C. VILLARET (LNHE) 01 30 87 83 28
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ALPHA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>--></td><td>FRICTION COEFFICIENT
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NUMBER OF POINTS
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>--></td><td>SHEAR STRESS
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>WATER DENSITY
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                       SUBROUTINE SUSPENSION_CONV
     &(TOB, XMVE, KSR, NPOIN, ZREF, U2D, V2D, HN, HMIN,
     & UCONV, VCONV, KARMAN, ZERO, XWC,T1,ALPHA)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ALPHA          |---| 
C| CF             |-->| FRICTION COEFFICIENT
C| HMIN           |---| 
C| HN             |---| 
C| KARMAN         |---| 
C| KSR            |---| 
C| NPOIN          |-->| NUMBER OF POINTS
C| T1             |---| 
C| TOB            |-->| SHEAR STRESS
C| U2D            |---| 
C| UCONV          |---| 
C| V2D            |---| 
C| VCONV          |---| 
C| XMVE           |-->| WATER DENSITY
C| XWC            |---| 
C| ZERO           |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
!
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      TYPE (BIEF_OBJ),  INTENT(IN)    :: HN,U2D,V2D,ZREF,KSR
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: UCONV,VCONV,T1,ALPHA
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TOB
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,XWC,HMIN
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN,XMVE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION :: R1,I1,I2,A,B,AUX,LAUX,LL,USTAR,ROUSE
!
      INTEGER :: I
!
      CALL OS('X=N(Y,Z)', X=T1, Y=U2D, Z=V2D)
!
      LL=LOG(30.D0)
!
      DO I = 1, NPOIN
!
        IF(TOB%R(I).GT.ZERO) THEN
!
          USTAR = SQRT(TOB%R(I)/XMVE)
!
C         B --> KS/H
!
C         AUX = 1.D0 + KARMAN*SQRT(2.D0/MAX(CF%R(I),ZERO))
C         B = 30.D0*EXP(-AUX)
!
          B = KSR%R(I) /MAX(HN%R(I),1.1D0*KSR%R(I))
          A = ZREF%R(I)/MAX(HN%R(I),1.1D0*ZREF%R(I))
!
C TAKES MAX VALUE OF A = ZREF/H AND B=KSR/H
          A=MAX(A,B)
!
C SIMPLIFIED VERSION
          ROUSE=MIN(XWC/MAX(USTAR,ZERO),1.D0)/KARMAN
          R1=  1.D0-ROUSE
          LAUX=LOG(A)
!
          IF(ABS(R1).LT.1.D-8) THEN
            I1= -LAUX
            I2= -LAUX**2/2.D0
          ELSE
            AUX=A**R1
            I1=(1.D0-AUX)/R1
            I2=-(I1+LAUX*AUX)/R1
          ENDIF
!
C         AUX=LOG(A/30.D0)
          AUX=LAUX - LL
          ALPHA%R(I)=-(I2-AUX*I1)/(I1*(AUX+1.D0))
!
        ELSE
!
          ALPHA%R(I)=1.D0
!
        ENDIF
!
C       CHECKS 0
!
        ALPHA%R(I)=MIN(ALPHA%R(I),1.D0)
        ALPHA%R(I)=MAX(ALPHA%R(I),0.D0)
!
        UCONV%R(I) = ALPHA%R(I)*U2D%R(I)
        VCONV%R(I) = ALPHA%R(I)*V2D%R(I)
!
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE FLUX OF DEPOSITION AND EROSION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  T1: TOB

!>  @note  TO DO:  REPLACE USTAR WITH TOB

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ACLADM, DEBUG, FLUDPT, HMIN, HN, KARMAN, NPOIN, SEDCO, T1, T2, TOB, VITCD, XMVE, XWC, ZERO, ZREF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AUX, I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_DEPOT
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), SUSPENSION_ROUSE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td> 31/07/2008
!> </td><td> J-M HERVOUET + C VILLARET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUDPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SEDCO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_DEPOT  !
     &(TOB,HN, ACLADM,NPOIN, HMIN,XWC,VITCD,
     & ZERO,KARMAN,XMVE, T1,T2,ZREF,FLUDPT,DEBUG,SEDCO)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLADM         |---| 
C| DEBUG          |---| 
C| FLUDPT         |---| 
C| HMIN           |---| 
C| HN             |-->| HAUTEUR D'EAU
C| KARMAN         |---| 
C| NPOIN          |---| 
C| SEDCO          |---| 
C| T1             |---| 
C| T2             |---| 
C| TOB            |---| 
C| VITCD          |---| 
C| XMVE           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_SUSPENSION_DEPOT => SUSPENSION_DEPOT
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE (BIEF_OBJ),  INTENT(IN)    ::  HN, ACLADM,TOB
      INTEGER,          INTENT(IN)    ::  NPOIN,DEBUG
      LOGICAL,          INTENT(IN)    :: SEDCO
      DOUBLE PRECISION, INTENT(IN)    ::  HMIN
      DOUBLE PRECISION, INTENT(IN)    :: XWC
      DOUBLE PRECISION, INTENT(IN)    :: VITCD
      DOUBLE PRECISION, INTENT(IN)    :: ZERO, KARMAN,XMVE
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T1,T2
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZREF
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUDPT
C
      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER :: I
      DOUBLE PRECISION:: AUX
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!     ! ****************************************            !
      ! THE TOTAL FRICTION VELOCITY    --> USTAR (T1)       !
      ! HAS BEEN REPLACED BY USTARP (SKIN FRICTION VELOCITY)!
      ! FOR EROSION FLUX IN V6P0                            !
      ! ****************************************            !


      CALL OS('X=CY    ', X=T1, Y=TOB, C=1.D0/XMVE)
      CALL OS('X=+(Y,C)', X=T1, Y=T1, C=ZERO)
      CALL OS('X=SQR(Y)', X=T1, Y=T1)


      IF(SEDCO) THEN
!
      ! ************************************************ !
      ! IA - FORMULATION FOR COHESIVE SEDIMENTS          !
      !      (WITHOUT BEDLOAD)                           !
      ! ************************************************ !
!
C  COMPUTES THE PROBABILITY FOR DEPOSITION
!
         DO I = 1, NPOIN
           IF(VITCD.GT.1.D-08) THEN
             AUX = MAX(1.D0-(T1%R(I)/VITCD)**2,ZERO)
           ELSE
             AUX=0.D0
           ENDIF
C          COMPUTES THE IMPLICIT PART OF THE DEPOSITION FLUX
           FLUDPT%R(I)= XWC*AUX
         ENDDO
C UNIFORM SEDIMENT ALONG THE VERTICAL
         CALL OS('X=C     ', X=T2, C=1.D0)
!
      ! ******************************************* !
      ! IB - FORMULATION FOR NON-COHESIVE SEDIMENTS !
      !      (WITH BEDLOAD)                         !
      ! ******************************************* !
!
      ELSE
!
            ! ***************************************************** !
            !  COMPUTES THE RATIO BETWEEN NEAR BED CONC. AND MEAN CONC.  !
            !                                  -->  T2    (TO KEEP )     !
            ! ***************************************************** !
        IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_ROUSE'
        CALL SUSPENSION_ROUSE(T1,HN,NPOIN,
     &                        KARMAN,HMIN,ZERO,XWC,ZREF,T2)
        IF (DEBUG > 0) WRITE(LU,*) 'END SUSPENSION_ROUSE'
!
            ! *****************************************************  !
            !  COMPUTES THE DEPOSITION FLUX --> FLUDPT = XWC * T2    !
            ! *****************************************************  !
!
         CALL OS('X=CY    ', X=FLUDPT, Y=T2, C=XWC)
!
      ENDIF
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE DISPERSION PARAMETERS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CODE, DISP, HN, KX, KY, KZ, NPOIN, OPTDIF, T1, T2, T3, TOB, U2D, V2D, VISC_TEL, XKX, XKY, XMVE
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> COST, DIMVISC, K, SINT, UETH
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_DISPERSION
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> CPSTVC(), OS(), OV_2(), PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_MAIN()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 13/12/2000
!> </td><td> C. MOULIN (LNH)  01 30 87 83 81
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CODE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DISP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KZ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTDIF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VISC_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_DISPERSION ! (_IMP_)
     &  (TOB, XMVE,HN,  OPTDIF, NPOIN, XKX, XKY,
     &   T1, T2, T3, KX, KY, KZ, DISP,U2D,V2D,VISC_TEL,CODE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CODE           |---| 
C| DISP           |---| 
C| HN             |---| 
C| KX             |---| 
C| KY             |---| 
C| KZ             |---| 
C| NPOIN          |---| 
C| OPTDIF         |---| 
C| T1             |---| 
C| T2             |---| 
C| T3             |---| 
C| TOB            |---| 
C| U2D            |---| 
C| V2D            |---| 
C| VISC_TEL       |---| 
C| XKX            |---| 
C| XKY            |---| 
C| XMVE           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_SUSPENSION_DISPERSION => SUSPENSION_DISPERSION
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TOB,HN,VISC_TEL
      INTEGER,          INTENT(IN)    :: OPTDIF, NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: XMVE, XKX, XKY
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T1, T2, T3
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: KX, KY, KZ, DISP
      TYPE (BIEF_OBJ),  INTENT(IN)    :: U2D,V2D
      CHARACTER(LEN=24), INTENT(IN)   :: CODE

      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER                     :: K,DIMVISC
      DOUBLE PRECISION            :: UETH, COST, SINT

!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
      ! ****************************************************** !
      ! IA - CONSTANT DISPERSION OR DISPERSION(I) = ALPHA(I)*H !
      ! ****************************************************** !
      IF (OPTDIF == 2.OR.OPTDIF == 1) THEN
!
C        ADDED ON 19/10/2007 (JMH)
         CALL CPSTVC(U2D,T1)
         CALL CPSTVC(U2D,T2)
!
         IF(OPTDIF == 2) THEN
           DO K = 1, NPOIN
             UETH = SQRT(TOB%R(K)/XMVE)
             T1%R(K) = XKX * UETH * HN%R(K)
             T2%R(K) = XKY * UETH * HN%R(K)
           ENDDO
         ELSE
           CALL OS('X=C     ', X=T1, C=XKX)
           CALL OS('X=C     ', X=T2, C=XKY)
         ENDIF
!
         CALL OS('X=N(Y,Z)', X=T3, Y=U2D, Z=V2D)
!
         DO K=1,NPOIN
!
            IF(T3%R(K).GE.1.D-6) THEN
               COST = U2D%R(K)/T3%R(K)
               SINT = V2D%R(K)/T3%R(K)
            ELSE
               COST = 0.D0
               SINT = 0.D0
            ENDIF
!
            KX%R(K) = (T1%R(K) - T2%R(K))*(COST**2) + T2%R(K)
            KY%R(K) = (T2%R(K) - T1%R(K))*(COST**2) + T1%R(K)
            KZ%R(K) = (T1%R(K) - T2%R(K))*COST*SINT
!
         ENDDO
!
!
      ! *********************************** !
      ! IB - DISPERSION GIVEN BY TELEMAC-2D ! (_IMP_)
      ! *********************************** !
      ELSEIF(OPTDIF == 3) THEN
!
         IF(CODE(1:9).EQ.'TELEMAC2D') THEN
           IF(VISC_TEL%DIM2.EQ.1) THEN
             CALL OS('X=Y     ', X=KX,Y=VISC_TEL)
             CALL OS('X=Y     ', X=KY,Y=KX)
             CALL OS('X=0     ', X=KZ)
           ELSEIF(VISC_TEL%DIM2.EQ.3) THEN
             DIMVISC=VISC_TEL%MAXDIM1
             DO K=1,NPOIN
               KX%R(K)=VISC_TEL%R(K)
               KY%R(K)=VISC_TEL%R(K+  DIMVISC)
               KZ%R(K)=VISC_TEL%R(K+2*DIMVISC)
             ENDDO
           ELSE
             IF(LNG.EQ.1) THEN
               WRITE(LU,*) 'SUSPENSION_DISPERSION:'
               WRITE(LU,*) ' '
               WRITE(LU,*) 'MAUVAISE DIMENSION DE VISC_TEL:',
     &                      VISC_TEL%DIM2
             ENDIF
             IF(LNG.EQ.2) THEN
               WRITE(LU,*) 'SUSPENSION_DISPERSION:'
               WRITE(LU,*) ' '
               WRITE(LU,*) 'UNEXPECTED DIMENSION OF VISC_TEL:',
     &                      VISC_TEL%DIM2
             ENDIF
             CALL PLANTE(1)
             STOP
           ENDIF
         ELSE
           WRITE(LU,*) ' '
           IF(LNG.EQ.1) THEN
             WRITE(LU,*) 'SUSPENSION_DISPERSION:'
             WRITE(LU,*) ' '
             WRITE(LU,*) 'OPTION 3 : DIFFUSION DONNEE PAR TELEMAC'
             WRITE(LU,*) 'NON PROGRAMMEE OU IMPOSSIBLE AVEC ',CODE
           ENDIF
           IF(LNG.EQ.2) THEN
             WRITE(LU,*) 'SUSPENSION_DISPERSION:'
             WRITE(LU,*) ' '
             WRITE(LU,*) 'OPTION 3: DIFFUSIVITY GIVEN BY TELEMAC'
             WRITE(LU,*) 'NOT IMPLEMENTED OR IMPOSSIBLE WITH ',CODE
           ENDIF
           CALL PLANTE(1)
           STOP
         ENDIF
!
      ! ***************************************** !
      ! IC - OPTION FOR DISPERSION NOT CODED UP   ! (_IMP_)
      ! ***************************************** !
      ELSE
         IF (LNG == 1) WRITE(LU,30) OPTDIF
         IF (LNG == 2) WRITE(LU,31) OPTDIF
         CALL PLANTE(1)
         STOP
      ENDIF
!
      CALL OV_2('X=Y     ', DISP%R, 1, KX%R, 1, KX%R, 1, 0.D0,
     &          DISP%MAXDIM1, DISP%DIM1)
      CALL OV_2('X=Y     ', DISP%R, 2, KY%R, 1, KY%R, 1, 0.D0,
     &          DISP%MAXDIM1, DISP%DIM1)
      CALL OV_2('X=Y     ', DISP%R, 3, KZ%R, 1, KZ%R, 1, 0.D0,
     &          DISP%MAXDIM1, DISP%DIM1)

      !----------------------------------------------------------------!
30    FORMAT('DISPERSION : OPTION POUR LA DISPERSION NON PREVUE: ',1I6)
      !----------------------------------------------------------------!
31    FORMAT('DISPERSION: OPTION FOR THE DISPERSION NOT AVAILABLE:',1I6)
      !----------------------------------------------------------------!

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE SUSPENSION_DISPERSION
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE FLUX OF DEPOSITION AND EROSION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AVA, CHARR, CSTAEQ, DEBUG, FLUER, GRAV, HMIN, HN, ICQ, NPOIN, QSC, TAUP, XMVE, XMVS, XWC, ZERO, ZREF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_EROSION
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS(), SUSPENSION_BIJKER(), SUSPENSION_FREDSOE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 04/05/2010
!> </td><td> CV
!> </td><td> MODIFICATION FOR FREDSOE: EQUILIBRIUM CONCENTRATIONS
!>           MUST BE MULTIPLIED BY AVAI: OTHERWISE COMPUTATION OF
!>           INFLOW CONCENTRATIONS IS INCORRECT (I.E. DOES NOT
!>           TAKE AVAI INTO ACCOUNT)
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 17/09/2009
!> </td><td> J-M HERVOUET + C VILLARET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CHARR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSTAEQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>ICQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TAUP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>--></td><td>FLUX DE DEPOT                               C
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_EROSION  !
     &(TAUP,HN,ACLADM,AVA,NPOIN,CHARR,XMVE,XMVS,GRAV,HMIN,XWC,
     & ZERO,ZREF,AC,FLUER,CSTAEQ,QSC,ICQ,DEBUG)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AVA            |---| 
C| CF             |-->| 
C| CHARR          |---| 
C| CSTAEQ         |---| 
C| DEBUG          |---| 
C| FLUER          |---| 
C| GRAV           |---| 
C| HMIN           |---| 
C| HN             |-->| HAUTEUR D'EAU
C| ICQ            |---| 
C| NPOIN          |---| 
C| QSC            |---| 
C| TAUP           |---| 
C| TOB            |-->| FLUX DE DEPOT                               C
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_SUSPENSION_EROSION=>SUSPENSION_EROSION
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TAUP,HN,ACLADM,ZREF,QSC
      INTEGER,          INTENT(IN)    :: NPOIN,DEBUG,ICQ
      LOGICAL,          INTENT(IN)    :: CHARR
      DOUBLE PRECISION, INTENT(IN)    :: XMVE,XMVS,GRAV,HMIN,XWC,ZERO
      DOUBLE PRECISION, INTENT(IN)    :: AVA(NPOIN)
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER,CSTAEQ
      DOUBLE PRECISION, INTENT(INOUT) :: AC

      ! 3/ LOCAL VARIABLES
      ! -------------------

      INTEGER I

!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
!
C  COMPUTES THE NEAR BED EQUILIBRIUM CONCENTRATION --> CSTAEQ (MEAN DIAMETER)
!
      IF(ICQ.EQ.1) THEN
C
        IF(DEBUG > 0) WRITE(LU,*) 'SUSPENSION_FREDSOE'
        CALL SUSPENSION_FREDSOE(ACLADM,TAUP,NPOIN,
     &                          GRAV,XMVE,XMVS,ZERO,AC,CSTAEQ)
        IF(DEBUG > 0) WRITE(LU,*) 'END SUSPENSION_FREDSOE'
C
C       CALL OS('X=CYZ   ', X=FLUER, Y=CSTAEQ, Z=AVA, C=XWC)
C 04/05/2010
C START OF CV MODIFICATIONS ...
CV        DO I=1,NPOIN
CV          FLUER%R(I)=XWC*CSTAEQ%R(I)*AVA(I)
CV        ENDDO
          DO I=1,NPOIN
            CSTAEQ%R(I)=CSTAEQ%R(I)*AVA(I)
          ENDDO
          CALL OS('X=CY    ', X=FLUER, Y=CSTAEQ, C=XWC)
C ... END OF CV MODIFICATIONS
C
      ELSEIF(ICQ.EQ.2) THEN
C
        IF(DEBUG > 0) WRITE(LU,*) 'SUSPENSION_BIJKER'
        CALL SUSPENSION_BIJKER(TAUP,HN,NPOIN,CHARR,QSC,ZREF,
     &                         ZERO,HMIN,CSTAEQ,XMVE)
        IF(DEBUG > 0) WRITE(LU,*) 'END SUSPENSION_BIJKER'
C       NO MULTIPLICATION BY AVA BECAUSE AVA HAS ALREADY BEEN TAKEN
C       INTO ACCOUNT IN THE BEDLOAD TRANSPORT RATE
        CALL OS('X=CY    ', X=FLUER, Y=CSTAEQ, C=XWC)
C
C Modified by Nicolas Huybrechts
C oct 2010
      ELSEIF(ICQ.EQ.3) THEN
         IF(DEBUG > 0) WRITE(LU,*) 'SUSPENSION_VANRIJN'
 
         CALL SUSPENSION_VANRIJN(ACLADM,TAUP,NPOIN,
     &                          GRAV,XMVE,XMVS,ZERO,AC,CSTAEQ,ZREF)
         IF(DEBUG > 0) WRITE(LU,*) 'END SUSPENSION_VANRIJN'
          DO I=1,NPOIN
            CSTAEQ%R(I)=CSTAEQ%R(I)*AVA(I)
          ENDDO
          CALL OS('X=CY    ', X=FLUER, Y=CSTAEQ, C=XWC) 
C        fin modif nh
         ENDIF 
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE FLUX OF DEPOSITION AND EROSION
!>                ACCOUNTING FOR THE VERTICAL STRUCTURE.
!><br>            !! NEW SUBROUTINE !!

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> DEBUG, DT, ES, FLUER, GRAV, MS_VASE, NCOUCH_TASS, NPOIN, PARTHENIADES, TASS, TAUP, TOCE_VASE, VITCE, XMVE, XMVS, ZERO
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AUX, FLUER_LOC, I, J, QER_VASE, QE_COUCHE, TEMPS, USTARP
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_EROSION_COH
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> PLANTE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 31/07/2008
!> </td><td> C. VILLARET
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CF
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>HAUTEUR D'EAU
!>    </td></tr>
!>          <tr><td>MS_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PARTHENIADES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TAUP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>--></td><td>FLUX DE DEPOT                               C
!>    </td></tr>
!>          <tr><td>TOCE_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_EROSION_COH
     &(TAUP,NPOIN,XMVE,XMVS,GRAV,VITCE,
     & PARTHENIADES,ZERO,DEBUG,
     & FLUER, ES, TOCE_VASE, NCOUCH_TASS, DT, MS_VASE,TASS)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CF             |-->| 
C| DEBUG          |---| 
C| DT             |---| 
C| ES             |---| 
C| FLUER          |---| 
C| GRAV           |---| 
C| HN             |-->| HAUTEUR D'EAU
C| MS_VASE        |---| 
C| NCOUCH_TASS    |---| 
C| NPOIN          |---| 
C| PARTHENIADES   |---| 
C| TASS           |---| 
C| TAUP           |---| 
C| TOB            |-->| FLUX DE DEPOT                               C
C| TOCE_VASE      |---| 
C| VITCE          |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| ZERO           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_SUSPENSION_EROSION_COH=>
     &                          SUSPENSION_EROSION_COH
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TAUP
      INTEGER,          INTENT(IN)    :: NPOIN,DEBUG
      DOUBLE PRECISION, INTENT(IN)    :: XMVE,XMVS,GRAV
      DOUBLE PRECISION, INTENT(IN)    :: VITCE
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,PARTHENIADES
C FOR CONSOLIDATION
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_VASE(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)     :: TOCE_VASE(10), DT
      INTEGER,          INTENT(IN)    :: NCOUCH_TASS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
!
      LOGICAL, INTENT(IN) :: TASS

      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER :: I, J

      DOUBLE PRECISION :: USTARP,AUX
      DOUBLE PRECISION :: FLUER_LOC(10), QER_VASE,TEMPS, QE_COUCHE

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! *************************************************  !
      ! IA - FORMULATION FOR COHESIVE SEDIMENTS            !
      !      (WITHOUT CONSOLIDATION: UNIFORM SEDIMENT BED) !                                   !
      ! ******************************************* *****  !

      IF(.NOT.TASS) THEN

        DO I = 1, NPOIN
          USTARP =SQRT(TAUP%R(I)/XMVE)
          IF(VITCE.GT.1.D-8) THEN
            AUX = MAX(((USTARP/VITCE)**2 - 1.D0),0.D0)
          ELSE
            AUX = 0.D0
          ENDIF
          FLUER%R(I) = PARTHENIADES*AUX
        ENDDO

      ELSE

      ! **************************************************** !
      ! IB - FORMULATION FOR COHESIVE SEDIMENTS  + CONSOLIDATION !
      !      (WITH BEDLOAD)                                  !
      ! **************************************************** !

        DO I=1,NPOIN
C
          DO J=1,NCOUCH_TASS
            IF(TAUP%R(I).GT.TOCE_VASE(J))THEN
              FLUER_LOC(J)=PARTHENIADES*
     &              ((TAUP%R(I)/TOCE_VASE(J))-1.D0)
            ELSE
              FLUER_LOC(J)=0.D0
            ENDIF
          ENDDO
          QER_VASE = 0.D0
          TEMPS= DT
C
          DO J= 1, NCOUCH_TASS
            IF(ES(I,J).GE.1.D-6) THEN
C             COMPUTES THE MASS POTENTIALLY ERODABLE IN LAYER J (KG/M2)
              QE_COUCHE = FLUER_LOC(J) *XMVS * TEMPS
              IF(QE_COUCHE.LT.MS_VASE(I,J)) THEN
                QER_VASE = QER_VASE  + QE_COUCHE
                GO TO 10
              ELSE
                QER_VASE = QER_VASE + MS_VASE(I,J)
                TEMPS= TEMPS-MS_VASE(I,J)/FLUER_LOC(J)/XMVS
                TEMPS=MAX(TEMPS,0.D0)
              ENDIF
            ENDIF
          ENDDO
C
          IF(LNG.EQ.1) THEN
            WRITE(LU,*) 'ATTENTION TOUTES LES COUCHES SONT VIDES'
          ENDIF
          IF(LNG.EQ.2) THEN
            WRITE(LU,*) 'BEWARE, ALL LAYERS EMPTY'
          ENDIF
          CALL PLANTE(1)
          STOP

10        CONTINUE
C         BEWARE: PARTHENIADES HAS ALREADY BEEN DEVIDED BY XMVS?
          FLUER%R(I) = QER_VASE/DT/XMVS
C
        ENDDO
      ENDIF
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE EVOLUTION FOR MUD ACCORDING TO FLUDP
!>                AND FLUER; AND UPDATES THE MASS OF THE LAYERS +
!>                EACH LAYER THICKNESS + TOTAL THICKNESS.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @note  COMPUTE ES AGAIN AT THE END AND
!>         VERIFY THE CRITERION ELAY=ZF-ZR

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CONC_VASE, CSF, DT, FLUDP, FLUER, MS, NCOUCH_TASS, NPOIN, QFLUX, SEDCO, XMVS, ZFCL_S
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CONC, I, J, MER, ZERO
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> OS()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CONC_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUDP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QFLUX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SEDCO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_EVOL
     &  (ZFCL_S,FLUDP,FLUER,DT, NPOIN,CSF,XMVS, QFLUX,MS,
     &   SEDCO,CONC_VASE,NCOUCH_TASS)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CONC_VASE      |---| 
C| CSF            |---| 
C| DT             |---| 
C| FLUDP          |---| 
C| FLUER          |---| 
C| MS             |---| 
C| NCOUCH_TASS    |---| 
C| NPOIN          |---| 
C| QFLUX          |---| 
C| SEDCO          |---| 
C| XMVS           |---| 
C| ZFCL_S         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZFCL_S,FLUDP,FLUER,QFLUX
      DOUBLE PRECISION, INTENT(IN)    :: DT, XMVS, CSF
      INTEGER, INTENT(IN) :: NPOIN,NCOUCH_TASS
      LOGICAL, INTENT(IN) :: SEDCO
      DOUBLE PRECISION, INTENT(IN) :: CONC_VASE(NCOUCH_TASS)
      DOUBLE PRECISION,  INTENT(INOUT) :: MS(NPOIN,NCOUCH_TASS)

C
      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER :: I,J
C
      DOUBLE PRECISION ZERO
      DOUBLE PRECISION CONC,MER
C
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
       ZERO = 1.D-08
C
C COMPUTES THE SEDIMENT FLUX AT EACH TIMESTEP
C
           CALL OS('X=Y-Z   ', X=QFLUX, Y=FLUDP, Z=FLUER)
           CALL OS('X=CX    ', X=QFLUX, C=DT)
           IF(NCOUCH_TASS.EQ.1)   CALL OS('X=CY    ',
     &         X=ZFCL_S, Y= QFLUX, C=1.D0/CSF)

           IF(NCOUCH_TASS.GT.1) THEN

             DO I = 1, NPOIN
C
C DEPOSITION IN THE FIRST LAYER
C
             IF (QFLUX%R(I).GT.ZERO) THEN
                ZFCL_S%R(I) = QFLUX%R(I) / CSF
                MS(I,1) = MS (I,1) +QFLUX%R(I)*XMVS
!
              ELSEIF(QFLUX%R(I).LT.ZERO) THEN
C
C EROSION OF SUCCESSIVE LAYERS
C
C
                ZFCL_S%R(I) = 0.D0
                MER = - QFLUX%R(I) *XMVS
C
                DO J = 1, NCOUCH_TASS
C
                 IF(.NOT.SEDCO) CONC= XMVS * CSF
                 IF(SEDCO) CONC=XMVS*CONC_VASE(J)
C
                 IF (MER.LE.MS(I,J)) THEN
                   MS(I,J)= MS(I,J) - MER
                   ZFCL_S%R(I)= ZFCL_S%R(I) - MER/CONC
                   GO TO 40
C
                ELSE
C
C EROSION OF THE WHOLE UNDER-LAYER
C
                   MER= MER - MS(I,J)
                   ZFCL_S%R(I)= ZFCL_S%R(I) -
     &                MS(I,J)/CONC
                   MS(I,J)=0.D0
C
               ENDIF
C END OF THE LOOP ON THE LAYERS
             ENDDO
C END EROSION
          ENDIF
C
  40      CONTINUE
C
C END OF THE LOOP ON THE NODES
C
        ENDDO
      ENDIF
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE FLUX OF DEPOSITION AND EROSION.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, DECLARATIONS_SISYPHE, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AVAIL, CHARR, CS, CSTAEQ, DEBUG, DT, ES, FLUER_SABLE, FLUER_VASE, GRAV, HMIN, HN, ICQ, KARMAN, MS_SABLE, MS_VASE, NCOUCH_TASS, NPOIN, NSICLA, PARTHENIADES, QSC, TAUP, TOCE_MIXTE, TOCE_VASE, XMVE, XMVS, XWC, ZERO, ZREF
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> DECLARATIONS_SISYPHE :<br>
!> @link DECLARATIONS_SISYPHE::FDM FDM@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> FLUERSABLE, FLUERVASE, FLUER_LOC, I, J, N, QER_SABLE, QER_VASE, QE_MOY, TEMPS, TOCE_SABLE
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_FLUX_MIXTE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> SUSPENSION_BIJKER(), SUSPENSION_FREDSOE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CHARR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSTAEQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PARTHENIADES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TAUP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOCE_MIXTE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOCE_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_FLUX_MIXTE!
     &  (TAUP,HN,ACLADM,CS,NPOIN,
     &   CHARR,XMVE,XMVS,GRAV,HMIN,XWC,
     &   ZERO,KARMAN,PARTHENIADES,FLUER_SABLE,FLUER_VASE,ZREF,
     &   AC,CSTAEQ,QSC,ICQ,DEBUG,AVAIL,NSICLA,ES,
     &   TOCE_VASE,NCOUCH_TASS,DT,TOCE_MIXTE,MS_SABLE,MS_VASE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AVAIL          |---| 
C| CHARR          |---| 
C| CS             |---| 
C| CSTAEQ         |---| 
C| DEBUG          |---| 
C| DT             |---| 
C| ES             |---| 
C| FLUER_SABLE    |---| 
C| FLUER_VASE     |---| 
C| GRAV           |---| 
C| HMIN           |---| 
C| HN             |---| 
C| ICQ            |---| 
C| KARMAN         |---| 
C| MS_SABLE       |---| 
C| MS_VASE        |---| 
C| NCOUCH_TASS    |---| 
C| NPOIN          |---| 
C| NSICLA         |---| 
C| PARTHENIADES   |---| 
C| QSC            |---| 
C| TAUP           |---| 
C| TOCE_MIXTE     |---| 
C| TOCE_VASE      |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZERO           |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE, EX_FLUX_MIXTE=>SUSPENSION_FLUX_MIXTE
      USE BIEF
      USE DECLARATIONS_SISYPHE, ONLY : FDM
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE (BIEF_OBJ),  INTENT(IN)    :: TAUP,HN,ACLADM,CS
      INTEGER,          INTENT(IN)    :: NPOIN,DEBUG,NSICLA
      INTEGER,          INTENT(IN)    :: NCOUCH_TASS
      LOGICAL,          INTENT(IN)    :: CHARR
      DOUBLE PRECISION, INTENT(IN)    :: XMVE, XMVS, GRAV, HMIN
      DOUBLE PRECISION, INTENT(IN)    :: XWC
      DOUBLE PRECISION, INTENT(IN)    :: ZERO, KARMAN, PARTHENIADES
      TYPE (BIEF_OBJ),  INTENT(IN)    :: ZREF
      DOUBLE PRECISION, INTENT(INOUT) :: AC,AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: CSTAEQ
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER_SABLE,FLUER_VASE
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_SABLE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT) :: MS_VASE(NPOIN,10)
      DOUBLE PRECISION,  INTENT(INOUT) ::TOCE_MIXTE(NPOIN,10)
C
      DOUBLE PRECISION, INTENT(IN)      :: DT
C
      TYPE(BIEF_OBJ),   INTENT(IN)       ::  QSC
      INTEGER,          INTENT (IN)      :: ICQ
C
      DOUBLE PRECISION, INTENT(IN)     :: TOCE_VASE(10)
C
      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER I, J,N
      DOUBLE PRECISION FLUERSABLE,FLUERVASE,FLUER_LOC(10)
C
      DOUBLE PRECISION QE_MOY,TOCE_SABLE,TEMPS,QER_VASE,QER_SABLE
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!

      ! ******************************************** !
      ! I - COMPUTES THE CRITICAL SHEAR STRESS
      !    --> TOCE_SABLE
      ! ******************************************** !
C
C COMPUTES TOCE_SABLE VIA THE SHIELDS PARAMETER
         TOCE_SABLE= AC*(XMVS-XMVE)*GRAV*FDM(1)
C
      ! **************************************** !
!        II-COMPUTES EROSION
      ! **************************************** !
C---------DOES THE EROSION COMPUTATION ONLY ONCE (SAND FOR EXAMPLE
C         BECAUSE THE COMPUTED FLUX IS A GLOBAL FLUX COMMON TO THE 2 SEDIMENTS)
C---------COMPUTES THE THEORETICAL FLUX OF EROSION FOR EACH (SEDIMENT INFINITELY AVAILABLE IN EACH LAYER)
C
C---------COMPUTES THE CRITICAL STRESS FOR EACH LAYER AS A FUNCTION OF THE PROPORTION OF MUD
      DO J=1,NCOUCH_TASS
        DO I=1,NPOIN
          IF(AVAIL(I,J,2).LE.0.3D0)THEN
            TOCE_MIXTE(I,J)=TOCE_SABLE
          ELSEIF(AVAIL(I,J,2).GE.0.5D0)THEN
             TOCE_MIXTE(I,J)=TOCE_VASE(J)
          ELSE
                 TOCE_MIXTE(I,J)= TOCE_SABLE +
     &   (AVAIL(I,J,2)-0.3D0)*(TOCE_VASE(J)-TOCE_SABLE)/(0.5D0-0.3D0)
          ENDIF
        ENDDO
      ENDDO
C CV MODIFICATIONS: INTRODUCE TOCE IN ARGUMENT
C         AC(I) = TOCE_MIXTE(I,J)/((XMVS-XMVE)*GRAV*ACLADM%R(I))
C
        IF(ICQ.EQ.1) THEN
          IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_FREDSOE'
C
           CALL SUSPENSION_FREDSOE(ACLADM,TAUP,NPOIN,
     &         GRAV,XMVE,XMVS,ZERO,AC,CSTAEQ)
C
          IF (DEBUG > 0) WRITE(LU,*) 'END SUSPENSION_FREDSOE'
C
        ELSEIF(ICQ.EQ.2) THEN
C
          IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_BIJKER'
C
               CALL SUSPENSION_BIJKER(TAUP,HN,NPOIN,CHARR,QSC,ZREF,
     &                                ZERO,HMIN,CSTAEQ,XMVE)
C
          IF (DEBUG > 0) WRITE(LU,*) 'END SUSPENSION_BIJKER'
C
        ENDIF
C
C      DO J=NCOUCH_TASS,1,-1
C        DO I=1,NPOIN
C           CSTAEQ_COUCHE(I,J)=CSTAEQ%R(I)
C        ENDDO
C      ENDDO
C
      DO I=1,NPOIN
C
        DO J=1,NCOUCH_TASS
C
C-----------COMPUTES FLUER_SABLE_VASE AS A FUNCTION OF THE PROPORTION OF MUD
C
          IF(AVAIL(I,J,2).LE.0.3D0)THEN
C-------------PROPORTION OF MUD < 30%, FLUXES ARE SIMILAR TO THOSE FOR SAND ONLY
            IF(TAUP%R(I).GT.TOCE_MIXTE(I,J))THEN
                 FLUER_LOC(J)=CSTAEQ%R(I)*XWC
            ELSE
               FLUER_LOC(J)=0.D0
            ENDIF
C-------------PROPORTION OF MUD > 50%, FLUXES ARE SIMILAR TO THOSE FOR MUD ONLY
          ELSEIF(AVAIL(I,J,2).GE.0.5D0)THEN
            IF(TAUP%R(I).GT.TOCE_MIXTE(I,J))THEN
               FLUER_LOC(J)=PARTHENIADES*
     &              ((TAUP%R(I)/TOCE_MIXTE(I,J))-1.D0)
            ELSE
               FLUER_LOC(J)=0.D0
            ENDIF
C-------------PROPORTION OF MUD >30% AND <50%, INTERPOLATES THE FLUXES
C             AND CRITICAL SHEAR STRESS
          ELSE
            IF(TAUP%R(I).GT.TOCE_MIXTE(I,J))THEN
               FLUERSABLE=CSTAEQ%R(I)*XWC
               FLUERVASE=PARTHENIADES*
     &             ((TAUP%R(I)/TOCE_MIXTE(I,J))-1.D0)
            ELSE
               FLUERSABLE=0.D0
               FLUERVASE=0.D0
            ENDIF
               FLUER_LOC(J)=(AVAIL(I,J,2)-0.3D0)/
     &           (0.5D0-0.3D0)*(FLUERVASE-FLUERSABLE)+FLUERSABLE
          ENDIF
        ENDDO

C
C COMPUTES THE EROSION DEPTH ZER_MOY
C AND ERODED MASSES
          QER_VASE = 0.D0
          QER_SABLE = 0.D0
C
          TEMPS= DT
C
          DO J= 1, NCOUCH_TASS
           IF(ES(I,J).GE.1.D-6) THEN
C
C COMPUTES THE MASS POTENTIALLY ERODABLE IN LAYER J (KG/M2)
C
             QE_MOY= FLUER_LOC(J) *XMVS * TEMPS
C
             IF(QE_MOY.LT.(MS_SABLE(I,J)
     &            +MS_VASE(I,J))) THEN
C
                  QER_VASE = QER_VASE
     &                  + QE_MOY*MS_VASE(I,J)/
     &                      (MS_VASE(I,J)+MS_SABLE(I,J))
                  QER_SABLE = QER_SABLE
     &                    + QE_MOY*MS_SABLE(I,J)
     &                      /(MS_VASE(I,J)+MS_SABLE(I,J))
CV
                 GO TO 10
C
              ELSE
C
                  QER_VASE = QER_VASE + MS_VASE(I,J)
                  QER_SABLE = QER_SABLE + MS_SABLE(I,J)
                 TEMPS= TEMPS -
     &             (MS_SABLE(I,J)+MS_VASE(I,J))
     &                      /FLUER_LOC(J)/XMVS
              ENDIF
          ENDIF
C
         ENDDO
          WRITE(LU,*) 'ATTENTION TOUTES LES COUCHES SONT VIDES'
C          STOP

  10    CONTINUE
C
      ! ************************************************ !
      ! II-COMPUTES THE FLUX OF EROSION FOR SAND/MUD     !
      ! ************************************************ !
C
C Q_VASE REPRESENTS THE SURFACE MASS OF MUD TO BE ERODED TO REACH ZER_MOY
C Q_SABLE REPRESENTS THE SURFACE MASS OF SAND TO BE ERODED TO REACH ZER_MOY
C
        FLUER_VASE%R(I)  = QER_VASE /(DT*XMVS)
        FLUER_SABLE%R(I) = QER_SABLE/(DT*XMVS)
C
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE REFERENCE CONCENTRATION AT Z= 2*D50
!>                ACCORDING TO ZYSERMAN AND FREDSOE FORMULATION (1994).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, CSTAEQ, GRAV, NPOIN, TAUP, XMVE, XMVS, ZERO
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AUX, CMAX, I, TETAP
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_FREDSOE
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>ERODNC(), INIT_TRANSPORT(), SUSPENSION_EROSION(), SUSPENSION_FLUX_MIXTE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 13/06/2008
!> </td><td> JMH
!> </td><td> FORMULATION OPTIMISED WITH AUX
!> </td></tr>
!>      <tr>
!>      <td><center> 5.6                                       </center>
!> </td><td> 04/01/2005
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 14/04/2004
!> </td><td> C. VILLARET  01 30 87 83 28
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>AVA
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CHARR
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CSTAEQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>HCLIP
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>KSPRATIO
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>TAUP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_FREDSOE !
     &  (ACLADM, TAUP, NPOIN, GRAV,
     &   XMVE, XMVS, ZERO, AC,  CSTAEQ)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |-->| 
C| AVA            |-->| 
C| CF             |-->| 
C| CHARR          |-->| 
C| CSTAEQ         |---| 
C| FLUER          |---| 
C| GRAV           |-->| 
C| HCLIP          |-->| 
C| HMIN           |-->| 
C| KSPRATIO       |-->| 
C| NPOIN          |-->| 
C| TAUP           |---| 
C| TOB            |-->| 
C| XMVE           |-->| 
C| XMVS           |-->| 
C| ZERO           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_SUSPENSION_FREDSOE => SUSPENSION_FREDSOE
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, TAUP
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: GRAV, XMVE, XMVS
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CSTAEQ


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER            :: I
      DOUBLE PRECISION   ::  TETAP,AUX
C
      DOUBLE PRECISION   :: CMAX
C
C     MAXIMUM CONCENTRATION CORRESPONDING TO DENSE PACKING
C
      DATA CMAX/0.6D0/
      INTRINSIC MAX

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!

      ! ******************************** !
      !    I - CRITICAL SHIELDS PARAMETER!
      ! ******************************** !

      DO I=1,NPOIN

         ! ****************** !
         ! II - SKIN FRICTION !
         ! ****************** !

         TETAP = TAUP%R(I) / (GRAV*(XMVS-XMVE)*ACLADM%R(I))

         ! ***************** !
         ! IV - EROSION FLUX ! (_IMP_)
         ! ***************** !
         ! CONCENTRATION INCREASED BY AVA BECAUSE IT IS COMPUTED
         ! ONLY WITH ONE CLASS OF SEDIMENT (ASSUMPTION)

         IF(TETAP.GT.AC) THEN
           AUX=(TETAP-AC)**1.75D0
           CSTAEQ%R(I) = 0.331D0*AUX/(1.D0+0.72D0*AUX)
           CSTAEQ%R(I) = MIN(CSTAEQ%R(I),CMAX)
         ELSE
           CSTAEQ%R(I) = 0.D0
         ENDIF

      ENDDO

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE SUSPENSION_FREDSOE
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       WRITES OUT MIN/MAX VALUES.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CST, DT, IELMT, MASKEL, MESH, MSK, T1, UCONV, VCONV, ZFCL_S
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> IMA, IMAX, XMA, XMAX
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_LISTING
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> CFLPSI(), MAXI(), MINI(), P_DMAX(), P_DMIN(), P_IMAX()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SUSPENSION_COMPUTATION()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.8                                       </center>
!> </td><td> 22/12/04
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CST
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_LISTING !
     &(MESH,CST,ZFCL_S,UCONV,VCONV,MASKEL,IELMT,DT,MSK,T1)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CST            |---| 
C| DT             |---| 
C| IELMT          |---| 
C| MASKEL         |---| 
C| MESH           |---| 
C| MSK            |---| 
C| T1             |---| 
C| UCONV          |---| 
C| VCONV          |---| 
C| ZFCL_S         |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,
     &    EX_SUSPENSION_LISTING => SUSPENSION_LISTING
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE(BIEF_OBJ),   INTENT(IN)    :: CST,ZFCL_S
      TYPE(BIEF_OBJ),   INTENT(IN)    :: UCONV,VCONV,MASKEL
      INTEGER,          INTENT(IN)    :: IELMT
      DOUBLE PRECISION, INTENT(IN)    :: DT
      LOGICAL,          INTENT(IN)    :: MSK
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T1


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: IMAX,IMA
      DOUBLE PRECISION :: XMAX,XMA

      INTEGER                        P_IMAX
      DOUBLE PRECISION P_DMAX,P_DMIN
      EXTERNAL         P_DMAX,P_DMIN,P_IMAX

!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
      CALL MAXI(XMAX,IMAX,CST%R,MESH%NPOIN)
      IF(NCSIZE.GT.1) THEN
        XMA=P_DMAX(XMAX)
        IF(XMAX.EQ.XMA) THEN
          IMA=MESH%KNOLG%I(IMAX)
        ELSE
          IMA=0
        ENDIF
        IMA=P_IMAX(IMA)
      ELSE
        IMA=IMAX
        XMA=XMAX
      ENDIF
      IF(LNG.EQ.1) WRITE(LU,500) XMA, IMA
      IF(LNG.EQ.2) WRITE(LU,510) XMA, IMA
      CALL MINI(XMAX, IMAX, CST%R, MESH%NPOIN)
      IF(NCSIZE.GT.1) THEN
        XMA=P_DMIN(XMAX)
        IF(XMAX.EQ.XMA) THEN
          IMA=MESH%KNOLG%I(IMAX)
        ELSE
          IMA=0
        ENDIF
        IMA=P_IMAX(IMA)
      ELSE
        IMA=IMAX
        XMA=XMAX
      ENDIF
      IF(LNG.EQ.1) WRITE(LU,501) XMA, IMA
      IF(LNG.EQ.2) WRITE(LU,511) XMA, IMA
      CALL MAXI(XMAX, IMAX, ZFCL_S%R, MESH%NPOIN)
      IF(NCSIZE.GT.1) THEN
        XMA=P_DMAX(XMAX)
        IF(XMAX.EQ.XMA) THEN
          IMA=MESH%KNOLG%I(IMAX)
        ELSE
          IMA=0
        ENDIF
        IMA=P_IMAX(IMA)
      ELSE
        IMA=IMAX
        XMA=XMAX
      ENDIF
      IF(LNG.EQ.1) WRITE(LU,502) XMA, IMA
      IF(LNG.EQ.2) WRITE(LU,512) XMA, IMA
      CALL MINI(XMAX, IMAX, ZFCL_S%R, MESH%NPOIN)
      IF(NCSIZE.GT.1) THEN
        XMA=P_DMIN(XMAX)
        IF(XMAX.EQ.XMA) THEN
          IMA=MESH%KNOLG%I(IMAX)
        ELSE
          IMA=0
        ENDIF
        IMA=P_IMAX(IMA)
      ELSE
        IMA=IMAX
        XMA=XMAX
      ENDIF
      IF(LNG.EQ.1) WRITE(LU,503) XMA, IMA
      IF(LNG.EQ.2) WRITE(LU,513) XMA, IMA
!
      CALL CFLPSI(T1, UCONV, VCONV, DT, IELMT, MESH, MSK, MASKEL)
      CALL MAXI(XMAX, IMAX, T1%R, MESH%NPOIN)
      IF(NCSIZE.GT.1) THEN
        XMA=P_DMAX(XMAX)
        IF(XMAX.EQ.XMA) THEN
          IMA=MESH%KNOLG%I(IMAX)
        ELSE
          IMA=0
        ENDIF
        IMA=P_IMAX(IMA)
      ELSE
        IMA=IMAX
        XMA=XMAX
      ENDIF
      IF(LNG.EQ.1) WRITE(LU,507) XMA,IMA
      IF(LNG.EQ.2) WRITE(LU,517) XMA,IMA

      !----------------------------------------------------------------!
500   FORMAT(' CONCENTRATION MAXIMALE     : ',G16.7,' %, NOEUD = ',1I8)
501   FORMAT(' CONCENTRATION MINIMALE     : ',G16.7,' %, NOEUD = ',1I8)
502   FORMAT(' EVOLUTION MAXIMALE         : ',G16.7,'  , NOEUD = ',1I8)
503   FORMAT(' EVOLUTION MINIMALE         : ',G16.7,'  , NOEUD = ',1I8)
507   FORMAT(' CFL MAX POUR LA SUSPENSION : ',G16.7,'  , NOEUD = ',1I8)
      !----------------------------------------------------------------!
510   FORMAT(' MAXIMAL CONCENTRATION    : ',G16.7,' %, NODE = ',1I8)
511   FORMAT(' MINIMAL CONCENTRATION    : ',G16.7,' %, NODE = ',1I8)
512   FORMAT(' MAXIMAL EVOLUTION        : ',G16.7,'  , NODE = ',1I8)
513   FORMAT(' MINIMAL EVOLUTION        : ',G16.7,'  , NODE = ',1I8)
517   FORMAT(' MAX. CFL FOR SUSPENSION  : ',G16.7,'  , NODE = ',1I8)
      !----------------------------------------------------------------!

!======================================================================!
!======================================================================!

      RETURN
      END SUBROUTINE SUSPENSION_LISTING
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       MAIN SUBROUTINE FOR THE SUSPENDED-LOAD TRANSPORT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AC, ACLADM, AFBOR, AM1_S, AM2_S, AVAIL, BFBOR, BILMA, CBOR, CF, CHARR, CLT, CODE, CONC_VASE, CORR_CONV, CS, CSF_SABLE, CSF_VASE, CST, CSTAEQ, CTILD, DEBUG, DIFT, DISP, DISP_C, DM1, DTS, ELAY, ENTET, ENTETS, ES, FLBORTRA, FLBOR_SIS, FLBOR_TEL, FLUDP, FLUDPT, FLUER, FLUER_VASE, GRAV, HMIN, HN, HN_TEL, HPROP, ICQ, IELMT, IFAMAS, IMP_INFLOW_C, ISOUS, IT1, IT2, IT3, IT4, KARMAN, KDDL, KDIR, KENT, KINC, KLOG, KNEU, KSORT, KSP, KSR, KX, KY, KZ, LICBOR, LIMDIF, LT, MASDEP, MASDEPT, MASED0, MASFIN, MASINI, MASKEL, MASKPT, MASKTR, MASSOU, MASTCP, MASTEN, MASTOU, MBOR, MESH, MIXTE, MSK, MS_SABLE, MS_VASE, MU, NCOUCH_TASS, NFRLIQ, NIT, NPOIN, NPTFR, NSICLA, NSOUS, NUMLIQ, OPDTRA, OPTBAN, OPTDIF, OPTSUP, PARTHENIADES, PASS, QSCLXS, QSCLYS, QSCL_S, QSXS, QSYS, QS_C, QS_S, RESOL, S, SEDCO, SLVTRA, SOLSYS, T1, T10, T11, T12, T2, T3, T4, T5, T6, T7, T8, T9, TASS, TB, TE1, TE2, TE3, TETA_SUSP, TOB, TOCE_MIXTE, TOCE_VASE, U2D, UCONV, UCONV_TEL, UNSV2D, V2D, V2DPAR, VCONV, VCONV_TEL, VISC_TEL, VITCD, VITCE, VOLU2D, W1, XKX, XKY, XMVE, XMVS, XWC, ZCONV, ZERO, ZF, ZFCL_S, ZF_S, ZREF
!>   </td></tr>
!>     <tr><th> Use(s)
!>    </th><td>
!> BIEF_DEF :<br>
!> @link BIEF_DEF::NCSIZE NCSIZE@endlink
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> I, P_DSUM
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_MAIN
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> DOTS(), OS(), SUSPENSION_COMPUTATION(), SUSPENSION_DISPERSION(), VECTOR()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.9                                       </center>
!> </td><td> 25/06/2008
!> </td><td> JMH
!> </td><td> CALL TO DIFFIN MOVED IN SUSPENSION_COMPUTATION
!> <br>      ARGUMENTS FOR SUSPENSION_COMPUTATION: 2 ARGUMENTS
!>           RELATED TO MUD HAVE BEEN REMOVED, LICBOR ADDED AT THE END
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> 22/12/2004
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ACLADM
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AFBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AM1_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AM2_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>AVAIL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BFBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>BILMA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CHARR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CLT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CODE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CONC_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CORR_CONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSF_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSF_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CST
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CSTAEQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CTILD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DEBUG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DIFT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DISP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DISP_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DM1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DTS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTET
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ENTETS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBORTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBOR_SIS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLBOR_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUDP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUDPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>FLUER_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HPROP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ICQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IELMT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IFAMAS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IMP_INFLOW_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ISOUS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>IT4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDDL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KDIR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KENT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KINC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KLOG
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KNEU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSORT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KZ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LICBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LIMDIF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASDEP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASDEPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASED0
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASFIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASINI
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKPT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASKTR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASSOU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASTCP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASTEN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MASTOU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MBOR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MESH
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MIXTE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MSK
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MU
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NFRLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NIT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPTFR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSOUS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NUMLIQ
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPDTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTBAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTDIF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>OPTSUP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PARTHENIADES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>PASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLXS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCLYS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSXS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QSYS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS_C
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>QS_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>RESOL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SEDCO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SLVTRA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>SOLSYS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T10
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T11
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T12
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T4
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T5
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T6
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T7
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T8
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T9
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TE1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TE2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TE3
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TETA_SUSP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOCE_MIXTE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOCE_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>U2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UCONV_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>UNSV2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>V2DPAR
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VCONV_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VISC_TEL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCD
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VITCE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>VOLU2D
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>W1
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKX
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZCONV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZFCL_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF_S
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_MAIN
     &(SLVTRA,HN,HN_TEL,MU,TOB,ACLADM,KSP,KSR,KS,
     & CF,VOLU2D,V2DPAR,UNSV2D,AFBOR,
     & BFBOR,ZF,LICBOR,IFAMAS,MASKEL,MASKPT,U2D,V2D,NSICLA,NPOIN,
     & NPTFR,IELMT,OPTDIF,RESOL,LT,NIT,OPTBAN,OPTSUP,OPDTRA,
     & KENT,KSORT,KLOG,KINC,KNEU,KDIR,KDDL,ISOUS,NSOUS,DEBUG,
     & DTS,CSF_VASE,CSF_SABLE,ZERO,GRAV,XKX,XKY,KARMAN,
     & XMVE,XMVS,HMIN,XWC,VITCD,VITCE,PARTHENIADES,ENTET,BILMA,MSK,
     & CHARR,IMP_INFLOW_C,MESH,ZF_S,CS,CST,CTILD,CBOR,DISP,
     & IT1,IT2,IT3,IT4,TB,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,W1,
     & TE1,CLT,TE2,TE3,S,AM1_S,AM2_S,MBOR,ELAY,LIMDIF,
     & MASKTR, TETA_SUSP, AC, MASED0, MASINI, MASTEN,
     & MASTOU, ES,AVAIL,  ENTETS, PASS, ZFCL_S,
     & HPROP, FLUDPT, FLUDP, FLUER, DISP_C, KX, KY,
     & KZ, UCONV, VCONV,QSXS, QSYS, QSCLXS, QSCLYS, QSCL_S,
     & QS_S,QS_C,CSTAEQ,ICQ,MASTCP,MASFIN,MASDEPT,MASDEP,MASSOU,
     & CORR_CONV,ZREF,SEDCO,VISC_TEL,CODE,
     & DIFT,DM1,UCONV_TEL,VCONV_TEL,ZCONV,SOLSYS,FLBOR_TEL,FLBOR_SIS,
     & FLBORTRA,NUMLIQ,NFRLIQ,MIXTE,NCOUCH_TASS,CONC_VASE,
     & TOCE_VASE,FLUER_VASE,TOCE_MIXTE,MS_SABLE,MS_VASE,TASS)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AC             |---| 
C| ACLADM         |---| 
C| AFBOR          |---| 
C| AM1_S          |---| 
C| AM2_S          |---| 
C| AVAIL          |---| 
C| BFBOR          |---| 
C| BILMA          |---| 
C| CBOR           |---| 
C| CF             |---| 
C| CHARR          |---| 
C| CLT            |---| 
C| CODE           |---| 
C| CONC_VASE      |---| 
C| CORR_CONV      |---| 
C| CS             |---| 
C| CSF_SABLE      |---| 
C| CSF_VASE       |---| 
C| CST            |---| 
C| CSTAEQ         |---| 
C| CTILD          |---| 
C| DEBUG          |---| 
C| DIFT           |---| 
C| DISP           |---| 
C| DISP_C         |---| 
C| DM1            |---| 
C| DTS            |---| 
C| ELAY           |---| 
C| ENTET          |---| 
C| ENTETS         |---| 
C| ES             |---| 
C| FLBORTRA       |---| 
C| FLBOR_SIS      |---| 
C| FLBOR_TEL      |---| 
C| FLUDP          |---| 
C| FLUDPT         |---| 
C| FLUER          |---| 
C| FLUER_VASE     |---| 
C| GRAV           |---| 
C| HMIN           |---| 
C| HN             |---| 
C| HN_TEL         |---| 
C| HPROP          |---| 
C| ICQ            |---| 
C| IELMT          |---| 
C| IFAMAS         |---| 
C| IMP_INFLOW_C   |---| 
C| ISOUS          |---| 
C| IT1            |---| 
C| IT2            |---| 
C| IT3            |---| 
C| IT4            |---| 
C| KARMAN         |---| 
C| KDDL           |---| 
C| KDIR           |---| 
C| KENT           |---| 
C| KINC           |---| 
C| KLOG           |---| 
C| KNEU           |---| 
C| KSORT          |---| 
C| KSP            |---| 
C| KSR            |---| 
C| KS             |---| 
C| KX             |---| 
C| KY             |---| 
C| KZ             |---| 
C| LICBOR         |---| 
C| LIMDIF         |---| 
C| LT             |---| 
C| MASDEP         |---| 
C| MASDEPT        |---| 
C| MASED0         |---| 
C| MASFIN         |---| 
C| MASINI         |---| 
C| MASKEL         |---| 
C| MASKPT         |---| 
C| MASKTR         |---| 
C| MASSOU         |---| 
C| MASTCP         |---| 
C| MASTEN         |---| 
C| MASTOU         |---| 
C| MBOR           |---| 
C| MESH           |---| 
C| MIXTE          |---| 
C| MSK            |---| 
C| MS_SABLE       |---| 
C| MS_VASE        |---| 
C| MU             |---| 
C| NCOUCH_TASS    |---| 
C| NFRLIQ         |---| 
C| NIT            |---| 
C| NPOIN          |---| 
C| NPTFR          |---| 
C| NSICLA         |---| 
C| NSOUS          |---| 
C| NUMLIQ         |---| 
C| OPDTRA         |---| 
C| OPTBAN         |---| 
C| OPTDIF         |---| 
C| OPTSUP         |---| 
C| PARTHENIADES   |---| 
C| PASS           |---| 
C| QSCLXS         |---| 
C| QSCLYS         |---| 
C| QSCL_S         |---| 
C| QSXS           |---| 
C| QSYS           |---| 
C| QS_C           |---| 
C| QS_S           |---| 
C| RESOL          |---| 
C| S             |---| 
C| SEDCO          |---| 
C| SLVTRA         |---| 
C| SOLSYS         |---| 
C| T1             |---| 
C| T10            |---| 
C| T11            |---| 
C| T12            |---| 
C| T2             |---| 
C| T3             |---| 
C| T4             |---| 
C| T5             |---| 
C| T6             |---| 
C| T7             |---| 
C| T8             |---| 
C| T9             |---| 
C| TASS           |---| 
C| TB             |---| 
C| TE1            |---| 
C| TE2            |---| 
C| TE3            |---| 
C| TETA_SUSP      |---| 
C| TOB            |---| 
C| TOCE_MIXTE     |---| 
C| TOCE_VASE      |---| 
C| U2D            |---| 
C| UCONV          |---| 
C| UCONV_TEL      |---| 
C| UNSV2D         |---| 
C| V2D            |---| 
C| V2DPAR         |---| 
C| VCONV          |---| 
C| VCONV_TEL      |---| 
C| VISC_TEL       |---| 
C| VITCD          |---| 
C| VITCE          |---| 
C| VOLU2D         |---| 
C| W1             |---| 
C| XKX            |---| 
C| XKY            |---| 
C| XMVE           |---| 
C| XMVS           |---| 
C| XWC            |---| 
C| ZCONV          |---| 
C| ZERO           |---| 
C| ZF             |---| 
C| ZFCL_S         |---| 
C| ZF_S           |---| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_SUSPENSION_MAIN => SUSPENSION_MAIN
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
!
      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE (SLVCFG),    INTENT(INOUT) :: SLVTRA
      TYPE (BIEF_OBJ),  INTENT(IN)    :: HN,HN_TEL,MU,TOB,ACLADM
      TYPE (BIEF_OBJ),  INTENT(IN)    :: KSP,KSR,KS
      TYPE (BIEF_OBJ),  INTENT(IN)    :: CF,VOLU2D,AFBOR,BFBOR,ZF
      TYPE (BIEF_OBJ),  INTENT(IN)    :: V2DPAR,UNSV2D
      TYPE (BIEF_OBJ),  INTENT(IN)    :: LICBOR, IFAMAS, MASKEL, MASKPT
      TYPE (BIEF_OBJ),  INTENT(IN)    :: U2D, V2D,DM1,ZCONV,FLBOR_TEL
      INTEGER,          INTENT(IN)    :: NSICLA, NPOIN, NPTFR, IELMT
      INTEGER,          INTENT(IN)    :: OPTDIF, RESOL,LT, NIT
      INTEGER,          INTENT(IN)    :: OPTBAN,OPTSUP,OPDTRA,NFRLIQ
      INTEGER,          INTENT(IN)    :: KENT, KSORT, KLOG, KINC, KNEU
      INTEGER,          INTENT(IN)    :: KDIR,KDDL,ISOUS,NSOUS
      INTEGER,          INTENT(IN)    :: DEBUG,SOLSYS,NCOUCH_TASS
      INTEGER,          INTENT(IN)    :: NUMLIQ(NFRLIQ)
      DOUBLE PRECISION, INTENT(IN)    :: DTS,CSF_VASE,CSF_SABLE
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,GRAV
      DOUBLE PRECISION, INTENT(IN)    :: XKX,XKY,KARMAN
      DOUBLE PRECISION, INTENT(IN)    :: XMVE, XMVS, HMIN, XWC(NSICLA)
      DOUBLE PRECISION, INTENT(IN)    :: VITCD, VITCE
      DOUBLE PRECISION, INTENT(IN)    :: PARTHENIADES
      LOGICAL,          INTENT(IN)    :: ENTET, BILMA, MSK, CHARR
      LOGICAL,          INTENT(IN)    :: IMP_INFLOW_C
      LOGICAL,          INTENT(IN)    :: SEDCO(NSICLA),MIXTE,TASS
      TYPE(BIEF_MESH),  INTENT(INOUT) :: MESH
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZF_S,CS,CST,CTILD,CBOR
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DISP,IT1,IT2,IT3,IT4,TB
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T1,T2,T3,T4,T5,T6,T7,T8
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: T9,T10,T11,T12,W1,TE1,CLT
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: TE2,TE3,S,AM1_S,AM2_S,MBOR
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ELAY, LIMDIF,FLBORTRA
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MASKTR
      DOUBLE PRECISION, INTENT(INOUT) :: TETA_SUSP, AC(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: MASED0(NSICLA), MASINI(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: MASTEN(NSICLA), MASTOU(NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(INOUT) :: TOCE_VASE(10),CONC_VASE(10)
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      LOGICAL,          INTENT(INOUT) :: ENTETS, PASS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: ZFCL_S,HPROP,ZREF
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUDPT,FLUDP,FLUER
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DISP_C,KX,KY,KZ,UCONV
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: VCONV,FLBOR_SIS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: QSXS,QSYS,QSCLXS,QSCLYS
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: QSCL_S,QS_S,CSTAEQ
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: FLUER_VASE,TOCE_MIXTE
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: MS_SABLE,MS_VASE
      TYPE (BIEF_OBJ),  INTENT(IN)    :: QS_C,VISC_TEL
      TYPE (BIEF_OBJ),  INTENT(IN)    :: UCONV_TEL,VCONV_TEL
      DOUBLE PRECISION, INTENT(OUT)   :: MASTCP(NSICLA),MASFIN(NSICLA)
      DOUBLE PRECISION, INTENT(OUT)   :: MASDEPT(NSICLA),MASDEP(NSICLA)
      DOUBLE PRECISION, INTENT(OUT)   :: MASSOU
      INTEGER, INTENT(IN)             :: ICQ
      LOGICAL, INTENT (IN)            :: CORR_CONV,DIFT
      CHARACTER(LEN=24), INTENT(IN)   :: CODE
!

      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER :: I
!
       DOUBLE PRECISION, EXTERNAL :: P_DSUM
!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!

      IF(PASS) THEN
      ! *************************  !
      ! III - INITIAL MASS-BALANCE !
      ! *************************  !
!
      IF(BILMA) THEN
         DO I = 1,NSICLA
!
            CALL VECTOR(T1, '=', 'MASVEC          ', IELMT, 1.D0,
     &                  CS%ADR(I)%P, T1, T1, T1, T1, T1, MESH, MSK,
     &                  MASKEL)
!
            MASED0(I) = DOTS(T1,HN)
            IF(NCSIZE.GT.1) MASED0(I)=P_DSUM(MASED0(I))
            MASINI(I) = MASED0(I)
            MASTEN(I) = 0.D0
            MASTOU(I) = 0.D0
            MASTCP(I) = 0.D0
            IF(LNG.EQ.1) WRITE(LU,1) I, MASED0(I)
            IF(LNG.EQ.2) WRITE(LU,2) I, MASED0(I)
         ENDDO
      ENDIF
!
      !----------------------------------------------------------------!
001   FORMAT(1X,'QUANTITE INITIALE EN SUSPENSION POUR LA CLASSE ',
     &       I2,' : ', G16.7, ' M3')
      !----------------------------------------------------------------!
002   FORMAT(1X,'INITIAL QUANTITY IN SUSPENSION FOR CLASS ',
     &       I2,' : ', G16.7, ' M3')
      !----------------------------------------------------------------!
C     END OF IF(PASS)
      ENDIF
      PASS = .FALSE.

      ! ********************************* !
      ! V - COMPUTES THE DISPERSION       !
      ! ********************************* !
      IF (DEBUG > 0) WRITE(LU,*) 'SUSPENSION_DISPERSION'
      CALL SUSPENSION_DISPERSION
     &     (TOB,XMVE,HN,OPTDIF,NPOIN,XKX,XKY,T1,T2,T3,KX,KY,KZ,DISP,
     &      U2D,V2D,VISC_TEL,CODE)
      IF (DEBUG > 0) WRITE(LU,*) 'END_SUSPENSION_DISPERSION'

      ! ************************************************ !
      ! VI  - COMPUTES THE CONCENTRATION AND EVOLUTION   !
      ! ************************************************ !
       CALL OS('X=Y     ', X=HPROP, Y=HN)
C      CALL OS('X=+(Y,C)', X=HCLIP, Y=HN, C=HMIN)
       DO I = 1, NSICLA
         CALL OS('X=0     ', X=ZFCL_S%ADR(I)%P)

         IF(DEBUG > 0) WRITE(LU,*)
     &                'SUSPENSION_COMPUTATION : ',I,'/',NSICLA
         CALL SUSPENSION_COMPUTATION(SLVTRA,HN,HN_TEL,UCONV,
     & VCONV,CF,MU,TOB,ACLADM,KSP,KSR,KS,ELAY,AVAIL(1:NPOIN,1,I),
     & AFBOR,BFBOR,LIMDIF,
     & CLT,MASKEL,MASKTR,MASKPT,IFAMAS,NPOIN,IELMT,NPTFR,I,LT,NIT,
     & RESOL,OPTBAN,KENT,KDDL,KDIR,KSORT,KLOG,KINC,KNEU,OPTSUP,
     & OPDTRA,DEBUG,CSF_VASE, CSF_SABLE, TETA_SUSP,DTS,MASED0(I),ZERO,
     & XWC(I),KARMAN,XMVE,XMVS,GRAV,HMIN,VITCD,VITCE,
     & PARTHENIADES,ENTETS,ENTET,BILMA,
     & MSK,CHARR,IMP_INFLOW_C,MESH,ZF,CS%ADR(I)%P,
     & CST%ADR(I)%P,CTILD%ADR(I)%P,CBOR%ADR(I)%P,DISP,IT1,IT2,
     & IT3,IT4,TB,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,
     & W1,TE1,TE2,TE3,S,AM1_S,AM2_S,MBOR,MASTEN(I),MASTOU(I),
     & MASINI(I),AC(I),ZFCL_S%ADR(I)%P,FLUDPT%ADR(I)%P,
     & FLUDP%ADR(I)%P,FLUER%ADR(I)%P,HPROP,DISP_C,CSTAEQ,
     & MASFIN(I),MASDEPT(I),MASDEP(I),MASSOU,QS_C,ICQ,ZREF,
     & CORR_CONV,U2D,V2D,SEDCO(I),DIFT,DM1,ZCONV,UCONV_TEL,
     & VCONV_TEL,SOLSYS,FLBOR_TEL,FLBOR_SIS,FLBORTRA,CODE,VOLU2D,
     & V2DPAR,UNSV2D,NUMLIQ,NFRLIQ,LICBOR,MIXTE,AVAIL,NSICLA,ES,
     & NCOUCH_TASS,CONC_VASE,TOCE_VASE,
     & FLUER_VASE,TOCE_MIXTE,MS_SABLE,MS_VASE,TASS)
         IF (DEBUG > 0) WRITE(LU,*) 'END_SUSPENSION_COMPUTATION'
!
C        CV MODIFICATIONS : 03/2006
C        TAKES INTO ACCOUNT ADVECTION VELOCITY
         CALL OS('X=YZ    ', X=T1, Y=UCONV, Z=HN)
         CALL OS('X=YZ    ', X=T2, Y=VCONV, Z=HN)
C        JMH MODIFICATION : 25/06/2008 WHAT WAS THIS ?
C        CALL OS('X=ABS(Y)', X=T1, Y=T1)
C        CALL OS('X=ABS(Y)', X=T2, Y=T2)
         CALL OS('X=Y     ', X=CS%ADR(I)%P, Y=CST%ADR(I)%P)
         CALL OS('X=YZ    ', X=QSCLXS%ADR(I)%P, Y=CS%ADR(I)%P, Z=T1)
         CALL OS('X=YZ    ', X=QSCLYS%ADR(I)%P, Y=CS%ADR(I)%P, Z=T2)
!
      ENDDO
!
      ! *********************************************************** !
      ! VII  - UPDATES EVOLUTION, CONCENTRATION AND TRANSPORT RATE  !
      ! *********************************************************** !
!
      IF (DEBUG > 0) WRITE(LU,*) 'UPDATING_DATA'
!
      CALL OS('X=0     ', X=QSXS)
      CALL OS('X=0     ', X=QSYS)
      CALL OS('X=0     ', X=ZF_S)
!
      DO I = 1, NSICLA
        CALL OS('X=X+Y   ', X=ZF_S, Y=ZFCL_S%ADR(I)%P)
        CALL OS('X=X+Y   ', X=QSXS, Y=QSCLXS%ADR(I)%P)
        CALL OS('X=X+Y   ', X=QSYS, Y=QSCLYS%ADR(I)%P)
      ENDDO
      CALL OS('X=N(Y,Z)', X=QSCL_S, Y=QSCLXS, Z=QSCLYS)
      CALL OS('X=N(Y,Z)', X=QS_S, Y=QSXS, Z=QSYS)
      IF (DEBUG > 0) WRITE(LU,*) 'END_UPDATING_DATA'

!======================================================================!
!======================================================================!

      RETURN
      END
C
C#######################################################################
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE DEPOSITION FLUX AND
!>                CONCENTRATION ACCORDING TO ROUSE PROFILE.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> HMIN, HN, KARMAN, NPOIN, T2, USTAR, XWC, ZERO, ZREF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> B, EXP, I, ROUSE
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_SUSPENSION_ROUSE
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_TRANSPORT(), SUSPENSION_DEPOT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.7                                       </center>
!> </td><td> 13/07/07
!> </td><td> J-M HERVOUET 01 30 87 80 18
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.6                                       </center>
!> </td><td> 04/01/05
!> </td><td> F. HUVELIN
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center> 5.5                                       </center>
!> </td><td> 14/04/04
!> </td><td> C. VILLARET 01 30 87 83 28; J-M HERVOUET 01 30 87 80 18
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CF
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>CS
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>FLUDP
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HCHAR
!></td><td>---</td><td>(WORK ARRAY)
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>IEIN
!></td><td>---</td><td>(WORK ARRAY)
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>Q
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TOB
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>USTAR
!></td><td>---</td><td>(WORK ARRAY)
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>XWC
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>--></td><td>
!>    </td></tr>
!>          <tr><td>ZREF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
        SUBROUTINE SUSPENSION_ROUSE
     &(USTAR,HN,NPOIN,KARMAN,HMIN,ZERO,XWC,ZREF,T2)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CF             |-->| 
C| CS             |-->| 
C| FLUDP          |---| 
C| HCHAR          |---| (WORK ARRAY)
C| HMIN           |-->| 
C| HN             |-->| 
C| IEIN           |---| (WORK ARRAY)
C| KARMAN         |-->| 
C| NPOIN          |-->| 
C| Q             |-->| 
C| T2             |---| 
C| TOB            |-->| 
C| USTAR          |---| (WORK ARRAY)
C| XMVE           |-->| 
C| XWC            |-->| 
C| ZERO           |-->| 
C| ZREF           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE INTERFACE_SISYPHE,EX_SUSPENSION_ROUSE => SUSPENSION_ROUSE
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU

      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: USTAR,HN,ZREF
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    :: KARMAN,XWC,HMIN,ZERO
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: T2

      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER          :: I
      DOUBLE PRECISION :: B,EXP,ROUSE
!
      INTRINSIC MAX,MIN,LOG
!
!======================================================================!
!======================================================================!
C                               PROGRAM                                !
!======================================================================!
!======================================================================!
!
C     ROUSE NUMBER AND MINIMUM BOUND OF THE EINSTEIN INTEGRAL
!
      DO I=1,NPOIN
!
C        ROUSE NUMBER
!
         ROUSE=  XWC / (KARMAN*MAX(USTAR%R(I),ZERO))
!
C        MINIMUM BOUND OF THE EINSTEIN INTEGRAL -->  B = KS/H
!
C        JMH MODIFICATION 16/12/2009    B ALWAYS
C        B = ZREF%R(I)/MAX(HN%R(I),HMIN)
         B = ZREF%R(I)/MAX(HN%R(I),ZREF%R(I))
!
C        RATIO BETWEEN REFERENCE CONC. ON BOTTOM AND MEAN CONC.
C        ASSUMING EXPONENTIAL PROFILE WITH EXPONENT ROUSE NUMBER --> T2
!
         EXP=ROUSE-1.D0
         IF(ABS(EXP).GT.1.D-4) THEN
C          ADDED BY JMH 12/07/2007
           EXP=MIN(EXP,3.D0)
           T2%R(I)=B*(1.D0-B**EXP)/EXP
         ELSE
           T2%R(I)=-B*LOG(B)
         ENDIF
         T2%R(I)=MAX(1.D0/MAX(T2%R(I),ZERO),1.D0)
      ENDDO
!
!======================================================================!
!======================================================================!
!
      RETURN
      END
C
C#######################################################################
C      ! ***************************** !
        SUBROUTINE SUSPENSION_VANRIJN ! (_IMP_)
      ! ***************************** !

     &  (ACLADM, TAUP, NPOIN, GRAV, 
     &   XMVE, XMVS, ZERO, AC, CSTAEQ,ZREF)
c nh attention ajout VCE, Zref

C**********************************************************************C
C SISYPHE VERSION 5.6  04/01/05  F. HUVELIN                            C
C SISYPHE VERSION 5.5  14/04/04  C. VILLARET  01 30 87 83 28           C
C**********************************************************************C


         ! ==================================================== !
         !   Reference concentration calculation at z= 2*d50    !
         ! thanks to the formula of Zyserman and Fredsoe (1994) !
         ! ==================================================== !

C
C
C 13/06/2008 : JMH : OPTIMISATION FORMULE AVEC AUX
C
C COPYRIGHT EDF-DTMPL-SOGREAH-LHF-GRADIENT
C**********************************************************************C
C                                                                      C
C                 SSSS I   SSSS Y   Y PPPP  H   H EEEEE                C
C                S     I  S      Y Y  P   P H   H E                    C
C                 SSS  I   SSS    Y   PPPP  HHHHH EEEE                 C
C                    S I      S   Y   P     H   H E                    C
C                SSSS  I  SSSS    Y   P     H   H EEEEE                C
C                                                                      C
C----------------------------------------------------------------------C
C                             ARGUMENTS                                C
C .________________.____.______________________________________________C
C |      NOM       |MODE|                   ROLE                       C
C |________________|____|______________________________________________C
C |   ACLADM       | => |
C |   CF           | => |
C |   TOB          | => |
C |   HCLIP        | => |
C |   AVA          | => |
C |   NPOIN        | => |
C |   CHARR        | => |
C |   KSPRATIO     | => |
C |   HMIN         | => |
C |   GRAV         | => |
C |   XMVE         | => |
C |   XMVS         | => |
C |   AC           | <=>|
C |   FLUER        | <= |
C !________________|____|______________________________________________C
C                    <=  Can't be change by the user                   C
C                    =>  Can be changed by the user                    C 
C ---------------------------------------------------------------------C
!                                                                      !
! CALLED BY SUSPENSION_FLUX                                            !
!                                                                      !
! CALL      ------                                                     !
!                                                                      !
!======================================================================!
!======================================================================!
!                    DECLARATION DES TYPES ET DIMENSIONS               !
!======================================================================!
!======================================================================!

      ! 1/ MODULES
      ! ----------
c      USE INTERFACE_SISYPHE,EX_SUSPENSION_FREDSOE => SUSPENSION_FREDSOE
      USE BIEF
      USE DECLARATIONS_SISYPHE, ONLY : VCE
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU


      ! 2/ GLOBAL VARIABLES
      ! -------------------
      TYPE(BIEF_OBJ),   INTENT(IN)    :: ACLADM, TAUP,ZREF
      INTEGER,          INTENT(IN)    :: NPOIN
      DOUBLE PRECISION, INTENT(IN)    ::  GRAV,  XMVE, XMVS
      DOUBLE PRECISION, INTENT(IN)    :: ZERO,AC
      TYPE(BIEF_OBJ),   INTENT(INOUT) :: CSTAEQ


      ! 3/ LOCAL VARIABLES
      ! ------------------
      INTEGER            :: I
      DOUBLE PRECISION   ::  TAUC,AUX,DSTAR,DENS
      INTRINSIC MAX

!======================================================================!
!======================================================================!
!                               PROGRAMME                              !
!======================================================================!
!======================================================================!

      ! ******************************** !
      !    I - CRITICAL SHIELD PARAMETER ! 
      ! ******************************** !    
!
      DO I=1,NPOIN

         ! ****************** !
         ! II - SKIN FRICTION ! 
         ! ****************** !

          TAUC = AC * (GRAV*(XMVS-XMVE)*ACLADM%R(I))
          DENS  = (XMVS - XMVE )/ XMVE

          DSTAR = ACLADM%R(I)*(GRAV*DENS/VCE**2)**(1.D0/3.D0) 

         ! ***************** !
         ! IV - EROSION FLUX ! (_IMP_)
         ! ***************** !
         ! Concentration increased by AVA because it is assumed 
         ! that it is computed only with one class of sediment
           IF(DSTAR.LE. ZERO) THEN
           	PRINT*, 'ERROR SUSPENSION_VANRIJN'
           	CALL PLANTE(1)    
           ENDIF
           AUX=(TAUP%R(I)-TAUC)/TAUC
           IF(AUX.GT.ZERO) THEN          
              CSTAEQ%R(I)=0.015*ACLADM%R(I)*SQRT(AUX**3.D0)/
     *                (ZREF%R(I)*DSTAR**0.3D0)     
      
           ELSE
             CSTAEQ%R(I) = 0.D0
           ENDIF
       
c      
      ENDDO
      
!======================================================================!
!======================================================================!

      RETURN      
      END SUBROUTINE SUSPENSION_VANRIJN
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief  

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> AVAIL, CONC_VASE, DTS, DZF_TASS, ELAY, ES, LT, MS_SABLE, MS_VASE, NCOUCH_TASS, NPOIN, NSICLA, T2, TRANS_MASS, XKV, XMVS, ZF
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> CONC_SABLE, EPAI_SABLE, EPAI_VASE, I, J, TAUX, TRANSFERT_MASSE_SABLE, TRANSFERT_MASSE_VASE
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>AVAIL
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>CONC_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DTS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>DZF_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ELAY
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ES
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>LT
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_SABLE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>MS_VASE
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NCOUCH_TASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>NSICLA
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>T2
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>TRANS_MASS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XKV
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>XMVS
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>ZF
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                         SUBROUTINE TASSEMENT
     &(ZF,NPOIN,DTS,ELAY,DZF_TASS,T2,LT,AVAIL,NSICLA,ES,XMVS,
     & XKV,TRANS_MASS,CONC_VASE,NCOUCH_TASS,MS_SABLE,MS_VASE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| AVAIL          |---| 
C| CONC_VASE      |---| 
C| DTS            |---| 
C| DZF_TASS       |---| 
C| ELAY           |---| 
C| ES             |---| 
C| LT             |---| 
C| MS_SABLE       |---| 
C| MS_VASE        |---| 
C| NCOUCH_TASS    |---| 
C| NPOIN          |---| 
C| NSICLA         |---| 
C| T2             |---| 
C| TRANS_MASS     |---| 
C| XKV            |---| 
C| XMVS           |---| 
C| ZF             |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER,          INTENT(IN)    :: NPOIN,NSICLA
      TYPE (BIEF_OBJ),  INTENT(INOUT) :: DZF_TASS,ZF,ELAY,T2
      DOUBLE PRECISION, INTENT(INOUT) :: MS_SABLE(NPOIN,10)
      DOUBLE PRECISION, INTENT(INOUT) :: MS_VASE(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)    :: DTS
      INTEGER, INTENT(IN)             :: LT,NCOUCH_TASS
      DOUBLE PRECISION, INTENT(INOUT) :: AVAIL(NPOIN,10,NSICLA)
      DOUBLE PRECISION, INTENT(INOUT) :: ES(NPOIN,10)
      DOUBLE PRECISION, INTENT(IN)    :: TRANS_MASS(10),CONC_VASE(10)
      DOUBLE PRECISION, INTENT(IN)    :: XMVS,XKV
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I,J
      DOUBLE PRECISION CONC_SABLE
C
      DOUBLE PRECISION TAUX(10),TRANSFERT_MASSE_VASE(10)
      DOUBLE PRECISION TRANSFERT_MASSE_SABLE(10)
      DOUBLE PRECISION EPAI_SABLE(10),EPAI_VASE(10)
C
C COMPUTES THE TOTAL SEDIMENT THICKNESS (SAND + MUD) BEFORE CONSOLIDATION
C
      CONC_SABLE=XMVS/XKV
C
C T2: MUD THICKNESS BEFORE CONSOLIDATION
C
      DO I=1,NPOIN
C
        T2%R(I)=0.D0
        DO J=1,NCOUCH_TASS
          EPAI_VASE(J)=MS_VASE(I,J)/CONC_VASE(J)
          ES(I,J)=EPAI_VASE(J)
          IF(NSICLA.GT.1) THEN
            EPAI_SABLE(J)=MS_SABLE(I,J)/XMVS
            ES(I,J)=EPAI_VASE(J)+EPAI_SABLE(J)
          ENDIF
          T2%R(I)=T2%R(I)+ES(I,J)
        ENDDO
C
        DO J=1,NCOUCH_TASS
          IF(MS_VASE(I,J).GE.1.D-6) THEN
            TRANSFERT_MASSE_VASE(J)=MIN(MS_VASE(I,J),
     &              MS_VASE(I,J)*DTS*TRANS_MASS(J))
            IF(NSICLA.GT.1) THEN
              TAUX(J)=TRANSFERT_MASSE_VASE(J)/MS_VASE(I,J)
              TRANSFERT_MASSE_SABLE(J)=TAUX(J)*MS_SABLE(I,J)
            ENDIF
          ELSE
            TRANSFERT_MASSE_VASE(J)=0.D0
            IF(NSICLA.GT.1) TRANSFERT_MASSE_SABLE(J)=0.D0
          ENDIF
C**************ARRET DE TASSEMENT SI LA VASE A REMPLI LES INTERSTICES
C**************   ENTRE LES GRAINS DE SABLE
          IF(NSICLA.GT.1.AND.EPAI_SABLE(J).GE.ES(I,J)) THEN
            TRANSFERT_MASSE_VASE(J) =0.D0
            TRANSFERT_MASSE_SABLE(J)=0.D0
          ENDIF
        ENDDO
C
        DO J=1,NCOUCH_TASS
          IF(J.EQ.NCOUCH_TASS) THEN
             MS_VASE(I,J)=MAX(0.D0,MS_VASE(I,J)
     &            +TRANSFERT_MASSE_VASE(J-1))
             IF(NSICLA.GT.1) THEN
                MS_SABLE(I,J)=MAX(0.D0,MS_SABLE(I,J)
     &                                  +TRANSFERT_MASSE_SABLE(J-1))
             ENDIF
          ELSEIF(J.EQ.1) THEN
             MS_VASE(I,J)=MAX(0.D0,MS_VASE(I,J)
     &            -TRANSFERT_MASSE_VASE(J))
            IF(NSICLA.GT.1) THEN
              MS_SABLE(I,J)=MAX(0.D0,MS_SABLE(I,J)
     &            -TRANSFERT_MASSE_SABLE(J))
            ENDIF
          ELSE
             MS_VASE(I,J)=MAX(0.D0,MS_VASE(I,J)
     &            +TRANSFERT_MASSE_VASE(J-1)-TRANSFERT_MASSE_VASE(J))
             IF(NSICLA.GT.1) THEN
               MS_SABLE(I,J)=MAX(0.D0,MS_SABLE(I,J)
     &         +TRANSFERT_MASSE_SABLE(J-1)-TRANSFERT_MASSE_SABLE(J))
             ENDIF
          ENDIF
        ENDDO
C
        ELAY%R(I)=0.D0
C
        DO J=1,NCOUCH_TASS
          EPAI_VASE(J)=MS_VASE(I,J)/CONC_VASE(J)
          ES(I,J) = EPAI_VASE (J)
          IF(NSICLA.GT.1) THEN
            EPAI_SABLE(J)=MS_SABLE(I,J)/XMVS
            ES(I,J)=EPAI_VASE(J)+EPAI_SABLE(J)
          ENDIF
          ELAY%R(I)=ELAY%R(I) + ES(I,J)
        ENDDO
C
C       BED EVOLUTION DUE TO CONSOLIDATION
C
        DZF_TASS%R(I)=ELAY%R(I)-T2%R(I)
C
C NOTE JMH : I HAS UNDERSTOOD THAT CLASS 1 = MUD
C            AND FROM 2 ON: SAND; WHAT ARE WE DOING HERE ??
C
        IF(NSICLA.GT.1) THEN
          DO J=1,NCOUCH_TASS
           IF(ES(I,J).GE.1.D-6) THEN
             AVAIL(I,J,1)=MS_SABLE(I,J)/XMVS/ES(I,J)
             AVAIL(I,J,2)=MS_VASE(I,J)/CONC_VASE(J)/ES(I,J)
           ELSE
             AVAIL(I,J,1)=0.D0
             AVAIL(I,J,2)=0.D0
           ENDIF
          ENDDO
        ENDIF
C
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE WAVE FRICTION STRESS. THE FRICTION
!>                COEFFICIENT IS COMPUTED USING SWART FORMULATION (1976).

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> CF, FW, HN, NPOIN, TOBW, TW, UW, XMVE
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> AUX, AW, I, KARMAN, KS, PI
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>TOB_SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.4                                       </center>
!> </td><td> 01/10/2003
!> </td><td> C. VILLARET (LNHE)
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>CF
!></td><td>--></td><td>COEFFICIENT DE FROTTEMENT QUADRATIQUE (COURAN
!>    </td></tr>
!>          <tr><td>FW
!></td><td><--</td><td>COEFFICIENT DE FROTTEMENT quadratique (houle)
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>HAUTEUR D'EAU AU TEMPS N
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS DU MAILLAGE 2D
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td><--</td><td>CONTRAINTE TOTALE AU FOND
!>    </td></tr>
!>          <tr><td>TW
!></td><td>--></td><td>PERIODEE DE LA HOULE
!>    </td></tr>
!>          <tr><td>UW
!></td><td>--></td><td>VITESSE ORBITALE DE LA HOULE
!>    </td></tr>
!>          <tr><td>XMVE
!></td><td>--></td><td>MASSE VOLUMIQUE DE L'EAU
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE TOBW_SISYPHE
     &(TOBW ,CF, FW, UW,TW,HN,NPOIN,XMVE)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| CF             |-->| COEFFICIENT DE FROTTEMENT QUADRATIQUE (COURAN
C| FW             |<--| COEFFICIENT DE FROTTEMENT quadratique (houle)
C| HN             |-->| HAUTEUR D'EAU AU TEMPS N
C| NPOIN          |-->| NOMBRE DE POINTS DU MAILLAGE 2D
C| TOBW           |<--| CONTRAINTE TOTALE AU FOND
C| TW             |-->| PERIODEE DE LA HOULE
C| UW             |-->| VITESSE ORBITALE DE LA HOULE
C| XMVE           |-->| MASSE VOLUMIQUE DE L'EAU
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
C
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER, INTENT(IN) :: NPOIN
C
      DOUBLE PRECISION, INTENT(IN)    :: CF(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: UW(NPOIN),TW(NPOIN),HN(NPOIN)
      DOUBLE PRECISION, INTENT(IN)    :: XMVE
      DOUBLE PRECISION, INTENT(INOUT) :: TOBW(NPOIN),FW(NPOIN)
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER I
      DOUBLE PRECISION KS,AUX
      DOUBLE PRECISION PI,AW,KARMAN
      PARAMETER (PI=3.141592653589793D0)
      PARAMETER (KARMAN=0.4D0)
C
C-----------------------------------------------------------------------
C
      DO  I=1,NPOIN
C       KS : NIKURADSE COEFFICIENT (TOTAL FRICTION)
        AUX=1.D0+KARMAN*SQRT(2.D0/MAX(CF(I),1.D-10))
        KS=30.D0*MAX(HN(I),1.D-8)*EXP(-AUX)
        AW= UW(I)*TW(I) / (2.D0*PI)
        IF(AW/KS.GT.1.59D0) THEN
          FW(I)=EXP( -6.D0 + 5.2D0 * (AW/KS)**(-0.19D0) )
        ELSE
          FW(I)=0.3D0
        ENDIF
        TOBW(I)=0.5D0 * XMVE * FW(I) * UW(I)*UW(I)
      ENDDO
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE TOBW_SISYPHE
C
C#######################################################################
CC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE TOTAL STRESS AT THE BOTTOM DEPENDING
!>                ON WHETHER SISYPHE IS COUPLED OR NOT.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Use(s)
!><br>BIEF, INTERFACE_SISYPHE
!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> ACLADM, CF, CF_TEL, CHESTR, CODE, FW, GRAV, HMIN, HN, HOULE, ICR, KARMAN, KFROT, KS, KSP, KSPRATIO, KSR, MU, NPOIN, TOB, TOBW, TW, UETCAR, UNORM, UW, VCE, XMVE, XMVS, ZERO
!>   </td></tr>
!>     <tr><th> Common(s)
!>    </th><td>
!> INFO : LNG, LU
!>   </td></tr>
!>     <tr><th> Internal(s)
!>    </th><td> A, B, C, HCLIP, I
!>   </td></tr>
!>     <tr><th> Alias(es)
!>    </th><td> EX_TOB_SISYPHE
!>   </td></tr>
!>     </table>

!>  @par Call(s)
!>  <br><table>
!>     <tr><th> Known(s)
!>    </th><td> COEFRO_SISYPHE(), OS(), OV(), RIDE(), RIDE_VR(), TOBW_SISYPHE()
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>SISYPHE()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 6.0                                       </center>
!> </td><td> 29/11/06
!> </td><td> C. VILLARET (LNHE) 01 30 87 83 28
!> </td><td>
!> </td></tr>
!>      <tr>
!>      <td><center>                                           </center>
!> </td><td> **/04/05
!> </td><td> CV
!> </td><td> CORRECTION WHEN SISYPHE IS RUN ALONE: DO NOT MODIFY
!>           CHESTR EXCEPT IF KFROT = 0 OR 1
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>ACLADM
!></td><td>--></td><td>DIAMETRE MOYEN  DU SEDIMENT
!>    </td></tr>
!>          <tr><td>CF
!></td><td><--</td><td>COEFFICIENT DE FROTTEMENT QUADRATIQUE DU COURANT
!>    </td></tr>
!>          <tr><td>CF_TEL
!></td><td>--></td><td>COEFFICIENT DE FROTTMT CF      SI COUPL. T2D
!>    </td></tr>
!>          <tr><td>CHESTR
!></td><td>--></td><td>COEFFICIENT DE FROTTEMENT (MOT CLE)
!>    </td></tr>
!>          <tr><td>CODE
!></td><td>--></td><td>CALLING PROGRAM IN COUPLING
!>    </td></tr>
!>          <tr><td>FW
!></td><td><--</td><td>COEFFICIENT DE FROTTEMENT QUADRATIQUE DE LA HOULE
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>GRAVITE
!>    </td></tr>
!>          <tr><td>HMIN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>HN
!></td><td>--></td><td>HAUTEUR D'EAU AU TEMPS N
!>    </td></tr>
!>          <tr><td>HOULE
!></td><td>--></td><td>PRISE EN COMPTE DE LA HOULE
!>    </td></tr>
!>          <tr><td>ICR
!></td><td>--></td><td>PREDICTEUR DE RIDE POUR LE FROTTEMENT DE PEAU
!>    </td></tr>
!>          <tr><td>KARMAN
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KFROT
!></td><td>--></td><td>LOI     DE FROTTEMENT
!>    </td></tr>
!>          <tr><td>KS
!></td><td><--</td><td>RUGOSITE TOTALE
!>    </td></tr>
!>          <tr><td>KSP
!></td><td><--</td><td>RUGOSITE DE PEAU
!>    </td></tr>
!>          <tr><td>KSPRATIO
!></td><td>---</td><td>
!>    </td></tr>
!>          <tr><td>KSR
!></td><td><--</td><td>RUGOSITE DE RIDE
!>    </td></tr>
!>          <tr><td>MU
!></td><td><--</td><td>RAPPORT ENTRE LA CONTRAINTE DE FROTTEMENT DE PEAU ET
!>    </td></tr>
!>          <tr><td>NPOIN
!></td><td>--></td><td>NOMBRE DE POINTS DU MAILLAGE 2D
!>    </td></tr>
!>          <tr><td>Q
!></td><td>--></td><td>DEBIT LIQUIDE
!>    </td></tr>
!>          <tr><td>TOB
!></td><td><--</td><td>CONTRAINTE DE FROTTEMENT TOTAL EN COURANT SEUL
!>    </td></tr>
!>          <tr><td>TOBW
!></td><td><--</td><td>CONTRAINTE DE FROTTEMENT  EN HOULE SEULE
!>    </td></tr>
!>          <tr><td>TW,UW
!></td><td>--></td><td>PERIODE DE LA HOULE ET VITESSE ORBITALE
!>    </td></tr>
!>          <tr><td>UETCAR
!></td><td>--></td><td>VITESSE DE FROTTEMENT AU CARRE SI COUPL. T3D
!>    </td></tr>
!>          <tr><td>UNORM
!></td><td>--></td><td>INTENSITE DU COURANT
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>--></td><td>VISCOSITE DE L'EAU
!>    </td></tr>
!>          <tr><td>XMVE,XMVS
!></td><td>--></td><td>MASSE VOLUMIQUE DE L'EAU, DU SEDIMENT
!>    </td></tr>
!>          <tr><td>ZERO
!></td><td>---</td><td>
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
       SUBROUTINE TOB_SISYPHE
     & (TOB, TOBW, MU, KS,KSP, KSR,CF,FW,CHESTR,UETCAR,
     &  CF_TEL,KS_TEL,CODE,
     &  KFROT,ICR, KSPRATIO, HOULE,GRAV,XMVE,XMVS, VCE, KARMAN,
     &  ZERO,HMIN,HN, ACLADM, UNORM,UW, TW, NPOIN,KSPRED,IKS)
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| ACLADM         |-->| DIAMETRE MOYEN  DU SEDIMENT
C| CF             |<--| COEFFICIENT DE FROTTEMENT QUADRATIQUE DU COURANT
C| CF_TEL         |-->| COEFFICIENT DE FROTTMT CF      SI COUPL. T2D
C| CHESTR         |-->| COEFFICIENT DE FROTTEMENT (MOT CLE)
C| CODE           |-->| CALLING PROGRAM IN COUPLING
C| FW             |<--| COEFFICIENT DE FROTTEMENT QUADRATIQUE DE LA HOULE
C| GRAV           |-->| GRAVITE
C| HMIN           |---| 
C| HN             |-->| HAUTEUR D'EAU AU TEMPS N
C| HOULE          |-->| PRISE EN COMPTE DE LA HOULE
C| ICR            |-->| PREDICTEUR DE RIDE POUR LE FROTTEMENT DE PEAU
C| KARMAN         |---| 
C| KFROT          |-->| LOI     DE FROTTEMENT
C| KS             |<--| RUGOSITE TOTALE
C| KS_TEL         |<--| RUGOSITE TOTALE 
C| KSP            |<--| RUGOSITE DE PEAU
C| KSPRATIO       |---| 
C| KSR            |<--| RUGOSITE DE RIDE
C| MU             |<--| RAPPORT ENTRE LA CONTRAINTE DE FROTTEMENT DE PEAU ET
C| NPOIN          |-->| NOMBRE DE POINTS DU MAILLAGE 2D
C| Q              |-->| DEBIT LIQUIDE
C| TOB            |<--| CONTRAINTE DE FROTTEMENT TOTAL EN COURANT SEUL
C| TOBW           |<--| CONTRAINTE DE FROTTEMENT  EN HOULE SEULE
C| TW,UW          |-->| PERIODE DE LA HOULE ET VITESSE ORBITALE
C| UETCAR         |-->| VITESSE DE FROTTEMENT AU CARRE SI COUPL. T3D
C| UNORM          |-->| INTENSITE DU COURANT
C| VCE            |-->| VISCOSITE DE L'EAU
C| XMVE,XMVS      |-->| MASSE VOLUMIQUE DE L'EAU, DU SEDIMENT
C| ZERO           |---| 
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      USE BIEF
      USE INTERFACE_SISYPHE, EX_TOB_SISYPHE=>TOB_SISYPHE
C
      IMPLICIT NONE
      INTEGER LNG,LU
      COMMON/INFO/LNG,LU
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER,            INTENT(IN)  :: NPOIN,KFROT,ICR, IKS
      LOGICAL,            INTENT(IN)  :: KSPRED
      LOGICAL,            INTENT(IN)  :: HOULE
      CHARACTER(LEN=24),  INTENT(IN)  :: CODE
      DOUBLE PRECISION,   INTENT(IN)  :: XMVE,XMVS, VCE,GRAV,KARMAN
      DOUBLE PRECISION,   INTENT(IN)  :: ZERO,HMIN,KSPRATIO
      TYPE(BIEF_OBJ), INTENT(IN)      :: UETCAR
      TYPE(BIEF_OBJ), INTENT(IN)      :: HN,UNORM
      TYPE(BIEF_OBJ), INTENT(IN)      :: TW,UW
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: KS,KSP,KSR,KS_TEL
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: CHESTR,MU
      TYPE(BIEF_OBJ), INTENT(IN)      :: ACLADM
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: CF,TOB
      TYPE(BIEF_OBJ), INTENT(INOUT)   :: FW,TOBW
      TYPE(BIEF_OBJ), INTENT(IN)      :: CF_TEL
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      INTEGER                     :: I
      DOUBLE PRECISION            :: A,B,C, HCLIP,KSMAX
C
C +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C ----------------------------------------------------------------------------------------------
C  QUADRATIC FRICTION COEFICIENT       :  ---> CF
C-----------------------------------------------------------------------
C
C     INTERNAL COUPLING WITH TELEMAC2D OR 3D
C         	UETCAR IS CF IN TELEMAC-2D
C         	UETCAR IS UETCAR IN TELEMAC3D ?
C  
      IF(KSPRED)THEN
C 
         CALL KS_SISYPHE(IKS,KS,KSP,KSR,KSPRATIO,HOULE,
     &                   GRAV,XMVE,XMVS,VCE,
     &                   HMIN,HN,ACLADM,UNORM,UW,TW,NPOIN)
         CALL COEFRO_SISYPHE(CF,HN,KFROT,KS,GRAV,NPOIN,HMIN,KARMAN)
         IF(CODE(1:7).EQ.'TELEMAC') CALL OS('X=Y     ', X=KS_TEL, Y=KS)     
C       
      ELSE                         
C
        IF(CODE(1:7).EQ.'TELEMAC') THEN       
           CALL OV('X=Y     ',CF%R,CF_TEL%R,CF_TEL%R,0.D0,CF%DIM1)
        ELSE
          CALL COEFRO_SISYPHE(CF,HN,KFROT,CHESTR,GRAV,NPOIN,HMIN,KARMAN)
        ENDIF
        DO I =1,NPOIN
           A = -KARMAN*SQRT(2.D0/MAX(CF%R(I),ZERO))
           KS%R(I)=12.D0*HN%R(I)* EXP(A)
        ENDDO
        CALL OS('X=CY    ', X=KSP, Y=ACLADM, C=KSPRATIO)
        CALL OS('X=CY    ', X=KSR, Y=ACLADM, C=KSPRATIO)
C
      ENDIF
C
C +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C     
C Frottement total: loi quadratique sauf couplage 3D
C  --> TOB
C
C     INTERNAL COUPLING WITH TELEMAC3D
C     UETCAR CORRESPONDS TO THE FRICTION VELOCITY SQUARED
C
      IF(CODE(1:9).EQ.'TELEMAC3D') THEN
        CALL OS( 'X=CY     ',X=TOB,Y=UETCAR,C=XMVE)
      ELSE 
        DO I=1,NPOIN
          TOB%R(I) = XMVE*0.5D0*CF%R(I)*UNORM%R(I)**2
        ENDDO
      ENDIF
C
C -----WAVE-INDUCED FRICTION -----------------------------
C  --> TOBW
C
      IF(HOULE) THEN
        CALL TOBW_SISYPHE
     &          (TOBW%R,CF%R,FW%R,UW%R,TW%R,HN%R,NPOIN,XMVE)
      ENDIF
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C SKIN FRICTION CORRECTOR
C                ---> MU = TOP/TOB
C ICR=0:    MU=1
C ICR=1     : SKIN FRICTION CORRECTION USE KSP
C ICR= 2    : RIPPLE ROUGHNESS USE KSR, KSR
C COUPLED WITH TELEMAC: MU>1 IS ACCEPTABLE
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
      IF(ICR.EQ.0) THEN
          CALL OS('X=C     ', X=MU, C=1.D0)
      ELSE IF(ICR.EQ.1) THEN
         DO I= 1, NPOIN
          IF((CF%R(I) > ZERO).AND.(HN%R(I).GT.KSP%R(I))) THEN
            HCLIP=MAX(HN%R(I),KSP%R(I))
            A = 2.5D0*LOG(12.D0*HCLIP/ KSP%R(I))
            C =2.D0/A**2
            MU%R(I) = C/CF%R(I)
          ELSE
             MU%R(I) = 0.D0
          ENDIF
        ENDDO
      ELSE IF(ICR.EQ.2) THEN
        DO I= 1, NPOIN
           KSMAX=MAX(KSR%R(I),KSP%R(I))
           IF(HN%R(I).GT.KSMAX.AND. CF%R(I).GT.ZERO)THEN
                HCLIP=MAX(HN%R(I),KSMAX)
                A = LOG(12.D0*HCLIP/ KSP%R(I))
                B = LOG(12.D0*HCLIP/ KSR%R(I))
                C =0.32D0/CF%R(I)
                MU%R(I) = C/SQRT(B*A**3)
           ELSE
             MU%R(I) = 0.D0
           ENDIF
        ENDDO
      ENDIF

C------------------------------------------------------------
C
      RETURN
      END
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @brief       COMPUTES THE FALL VELOCITY.

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Variable(s)
!>  <br><table>
!>     <tr><th> Argument(s)
!>    </th><td> DENS, DM, GRAV, VCE, WS
!>   </td></tr>
!>     </table>

!>  @par Called by
!><br>INIT_SEDIMENT()

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Development history
!>   <br><table>
!> <tr><th> Release </th><th> Date </th><th> Author </th><th> Notes </th></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 21/08/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Creation of DOXYGEN tags for automated documentation and cross-referencing of the FORTRAN sources
!>   </td></tr>
!>  <tr><td><center> 6.0                                       </center>
!>    </td><td> 13/07/2010
!>    </td><td> N.DURAND (HRW), S.E.BOURBAN (HRW)
!>    </td><td> Translation of French comments within the FORTRAN sources into English comments
!>   </td></tr>
!>      <tr>
!>      <td><center> 5.1                                       </center>
!> </td><td> 20/05/96
!> </td><td>
!> </td><td>
!> </td></tr>
!>  </table>

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!>  @par Details of primary variable(s)
!>  <br><table>
!>
!>     <tr><th>Name(s)</th><th>(in-out)</th><th>Description</th></tr>
!>          <tr><td>DENS
!></td><td>--></td><td>POIDS DEJAUGE
!>    </td></tr>
!>          <tr><td>DM
!></td><td>--></td><td>DIAMETRE MOYEN DU SEDIMENT
!>    </td></tr>
!>          <tr><td>GRAV
!></td><td>--></td><td>ACCELERATION DE LA PESANTEUR
!>    </td></tr>
!>          <tr><td>VCE
!></td><td>--></td><td>VISCOSITE DE L'EAU
!>    </td></tr>
!>          <tr><td>WS
!></td><td>--></td><td>VITESSE DE CHUTE DES PARTICULES
!>    </td></tr>
!>     </table>
C
C#######################################################################
C
                        SUBROUTINE VITCHU_SISYPHE
     & ( WS , DENS , DM , GRAV , VCE )
C
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C| DENS           |-->| POIDS DEJAUGE
C| DM             |-->| DIAMETRE MOYEN DU SEDIMENT
C| GRAV           |-->| ACCELERATION DE LA PESANTEUR
C| VCE            |-->| VISCOSITE DE L'EAU
C| WS             |-->| VITESSE DE CHUTE DES PARTICULES
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
      IMPLICIT NONE
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
      DOUBLE PRECISION, INTENT(IN)    :: DENS,  DM,  GRAV, VCE
      DOUBLE PRECISION, INTENT(INOUT) :: WS
C
C+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
C
C
C FALL VELOCITY
C ================
C
      IF (DM.LT.1.D-4) THEN
        WS = DENS * DM * DM * GRAV / ( 18.D0 * VCE )
      ELSEIF (DM.LT.1D-3) THEN
        WS = 10.D0 * VCE / DM * (SQRT( 1.D0 + 0.01D0* DENS * GRAV *
     &       DM**3.D0 / (VCE*VCE) ) -1.D0 )
      ELSE
        WS = 1.1D0 * SQRT( DENS * GRAV * DM )
      ENDIF
C
C-----------------------------------------------------------------------
C
      RETURN
      END SUBROUTINE VITCHU_SISYPHE
C
C#######################################################################
C